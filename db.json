{"meta":{"version":1,"warehouse":"5.0.1"},"models":{"Asset":[{"_id":"source/images/TcpServer.png","path":"images/TcpServer.png","modified":0,"renderable":0},{"_id":"source/images/avatar.png","path":"images/avatar.png","modified":0,"renderable":0},{"_id":"source/images/client.png","path":"images/client.png","modified":0,"renderable":0},{"_id":"source/images/completion_queue_sequence-0.png","path":"images/completion_queue_sequence-0.png","modified":0,"renderable":0},{"_id":"source/images/eventloop传递事件.png","path":"images/eventloop传递事件.png","modified":0,"renderable":0},{"_id":"source/images/eventloop启动.png","path":"images/eventloop启动.png","modified":0,"renderable":0},{"_id":"source/images/factory.png","path":"images/factory.png","modified":0,"renderable":0},{"_id":"source/images/logger_sink.png","path":"images/logger_sink.png","modified":0,"renderable":0},{"_id":"source/images/loop循环.png","path":"images/loop循环.png","modified":0,"renderable":0},{"_id":"source/images/mpmc.png","path":"images/mpmc.png","modified":0,"renderable":0},{"_id":"source/images/qt_add_grpc.png","path":"images/qt_add_grpc.png","modified":0,"renderable":0},{"_id":"source/images/qt_client.png","path":"images/qt_client.png","modified":0,"renderable":0},{"_id":"source/images/raii.png","path":"images/raii.png","modified":0,"renderable":0},{"_id":"source/images/reactor_workflow.png","path":"images/reactor_workflow.png","modified":0,"renderable":0},{"_id":"source/images/server.png","path":"images/server.png","modified":0,"renderable":0},{"_id":"source/images/spdlog.png","path":"images/spdlog.png","modified":0,"renderable":0},{"_id":"source/images/spdlog_seq.png","path":"images/spdlog_seq.png","modified":0,"renderable":0},{"_id":"source/images/spdlog_sink_compress.png","path":"images/spdlog_sink_compress.png","modified":0,"renderable":0},{"_id":"source/images/spsc.png","path":"images/spsc.png","modified":0,"renderable":0},{"_id":"source/images/stream.png","path":"images/stream.png","modified":0,"renderable":0},{"_id":"source/images/version_call.png","path":"images/version_call.png","modified":0,"renderable":0},{"_id":"source/images/zhihu.svg","path":"images/zhihu.svg","modified":0,"renderable":0},{"_id":"source/images/取消操作.png","path":"images/取消操作.png","modified":0,"renderable":0},{"_id":"source/images/处理消息.png","path":"images/处理消息.png","modified":0,"renderable":0},{"_id":"source/images/定时器到期处理.png","path":"images/定时器到期处理.png","modified":0,"renderable":0},{"_id":"source/images/建立新连接.png","path":"images/建立新连接.png","modified":0,"renderable":0},{"_id":"source/images/消息写完.png","path":"images/消息写完.png","modified":0,"renderable":0},{"_id":"source/images/连接关闭.png","path":"images/连接关闭.png","modified":0,"renderable":0},{"_id":"source/images/重复任务.png","path":"images/重复任务.png","modified":0,"renderable":0},{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":0,"renderable":1},{"_id":"themes/next/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/apple-touch-icon-next.png","path":"images/apple-touch-icon-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/favicon-16x16-next.png","path":"images/favicon-16x16-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/favicon-32x32-next.png","path":"images/favicon-32x32-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/logo.svg","path":"images/logo.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/spdlog_sink_compress.png","path":"images/spdlog_sink_compress.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/zhihu.svg","path":"images/zhihu.svg","modified":0,"renderable":1},{"_id":"themes/next/source/js/algolia-search.js","path":"js/algolia-search.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/bookmark.js","path":"js/bookmark.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/local-search.js","path":"js/local-search.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/motion.js","path":"js/motion.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/next-boot.js","path":"js/next-boot.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/utils.js","path":"js/utils.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/anime.min.js","path":"lib/anime.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/schemes/muse.js","path":"js/schemes/muse.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/schemes/pisces.js","path":"js/schemes/pisces.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/all.min.css","path":"lib/font-awesome/css/all.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/webfonts/fa-brands-400.woff2","path":"lib/font-awesome/webfonts/fa-brands-400.woff2","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/webfonts/fa-regular-400.woff2","path":"lib/font-awesome/webfonts/fa-regular-400.woff2","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/webfonts/fa-solid-900.woff2","path":"lib/font-awesome/webfonts/fa-solid-900.woff2","modified":0,"renderable":1}],"Cache":[{"_id":"source/categories/index.md","hash":"b8fb4e824b630d369ff0162a4813cb7e477fcda1","modified":1756339503173},{"_id":"source/tags/index.md","hash":"176a9920c6ed25f1f2d12940b7733da45b0966d4","modified":1756339503172},{"_id":"source/_data/styles.styl","hash":"89f160a35a4be406a3c57a409113649a28624284","modified":1756342437133},{"_id":"source/images/TcpServer.png","hash":"5d0488702e376fdf6e6f318824dcfc07d9a30499","modified":1749770496154},{"_id":"source/images/avatar.png","hash":"c973dd975c3c424c3ae613c8a8f6e288132eda6b","modified":1756338288534},{"_id":"source/images/client.png","hash":"c439491eb014113b5c9cf2e1030241ac8e435cbe","modified":1751587838555},{"_id":"source/images/completion_queue_sequence-0.png","hash":"4219ac44efb819a4c66d1cfac75b9d0182e9131c","modified":1752814097912},{"_id":"source/images/eventloop启动.png","hash":"9d475c452a483dbe78f96047eb2fb387996d16d9","modified":1748337065434},{"_id":"source/images/eventloop传递事件.png","hash":"de88fc3f0acc27f05a8afc2fbe9d5708e30eafbd","modified":1748337253988},{"_id":"source/images/factory.png","hash":"9e1fa0bfb91c9bcf2b1249c3bab24f9c6ccd5911","modified":1750409310987},{"_id":"source/images/logger_sink.png","hash":"f6d4ca274cd5b455a264e8d2320452e5d7b8c9b3","modified":1750409261123},{"_id":"source/images/mpmc.png","hash":"752fc9e7967b55348621b4fa692bc0113b05d8c6","modified":1746924366129},{"_id":"source/images/qt_add_grpc.png","hash":"5e45e80b535c4d9e9aaf72316d07c0b32dfa279e","modified":1751931148932},{"_id":"source/images/qt_client.png","hash":"ea76ed00a725c0e3deef98b32241792127413ccb","modified":1751931392092},{"_id":"source/images/raii.png","hash":"3ae385bba18d0d78894ff0761be7b6d9e68a3986","modified":1749770918906},{"_id":"source/images/reactor_workflow.png","hash":"762be022f983be61495ddf78a1852b3324115603","modified":1752814022746},{"_id":"source/images/server.png","hash":"7b99cdeba31f5b19ada74e2ca9ff4f9b6328efda","modified":1751587854223},{"_id":"source/images/spdlog_sink_compress.png","hash":"f7f470d5df489683bed92a9de39de568550da7e2","modified":1745396221329},{"_id":"source/images/stream.png","hash":"661cf03d898a75da7f77867052ebce591bf5386e","modified":1751587859256},{"_id":"source/images/version_call.png","hash":"3f5863cca7e89b776bab4ff74568f52123b22294","modified":1751242902957},{"_id":"source/images/zhihu.svg","hash":"6ad96ee70e0ab55a75c61411c2093bb7abf6fd7e","modified":1756341737355},{"_id":"source/images/spsc.png","hash":"abbb27afe2b4ec60c960de273d504364f9f37376","modified":1746924386335},{"_id":"source/images/处理消息.png","hash":"0c6d2076afc60a320fdb3ccb44dabb8215890138","modified":1748558683911},{"_id":"source/images/取消操作.png","hash":"298bfb5cfe3108c04501bbd6c47f752aa69b0080","modified":1749082351658},{"_id":"source/images/定时器到期处理.png","hash":"1a590ac60e75a30561af4ecb212f8e862a07f731","modified":1749082250146},{"_id":"source/images/消息写完.png","hash":"eb952356ed65bc332c2561d689ca8102055accf8","modified":1748558873666},{"_id":"source/images/建立新连接.png","hash":"8e974dca4deb16ae5c62477caf6dcb0b856d11a2","modified":1748558478104},{"_id":"source/_posts/grpc/grpc实践之路:01.同步客户端的使用.md","hash":"a8ab6ec7b909597d8fc0a0781e33b5ef04368173","modified":1756385001397},{"_id":"source/images/重复任务.png","hash":"235465c358aadb75046a254c8229e9b487669074","modified":1749082553529},{"_id":"source/images/连接关闭.png","hash":"f02dd2cab7612de6d79239aa5e9ae6aa71f757c2","modified":1748559053974},{"_id":"source/_posts/grpc/grpc实践之路:02.流的使用.md","hash":"6e75e3e80c10f1664aa31dce7bd7e95bdcd3e554","modified":1756385007448},{"_id":"source/_posts/grpc/grpc实践之路:03.Qt与grpc的集成使用.md","hash":"a466a0d5851200dfbc2f2ca489da48f7edd05145","modified":1756385013178},{"_id":"source/_posts/grpc/grpc实践之路:04.异步回调接口的使用.md","hash":"ae50bb1f43518dca93a33d1d618b6e0b5e696bab","modified":1756385019039},{"_id":"source/_posts/grpc/grpc实践之路:05.服务端与客户端的连接.md","hash":"97bc353558fdbda353711292d7d6d58bf45a8d9f","modified":1756385024962},{"_id":"source/_posts/grpc/grpc实践之路:06.rpc的大问题思考.md","hash":"85d9a2c0923a7a09318817c340be7e05abc7bd2a","modified":1756385030470},{"_id":"source/_posts/muduo/muduo源码剖析:01.一个线程一个Eventloop.md","hash":"2b46a41db9b5f792716e80a4405e3dbf1b9ba9a4","modified":1756385046576},{"_id":"source/_posts/muduo/muduo源码剖析:02.事件的处理.md","hash":"4026b6a16ad746d1ab73a801b4641a58ecd3e805","modified":1756385046576},{"_id":"source/_posts/muduo/muduo源码剖析:04.Bugffer设计分析.md","hash":"286c3e664bf061f76315444e8f9b6394817fc74d","modified":1756385053964},{"_id":"source/_posts/muduo/muduo源码剖析:03.定时器的实现.md","hash":"61f6b8eda1df8df1bce6d2df0678f2fada5b0425","modified":1756385046575},{"_id":"source/_posts/muduo/muduo源码剖析:05.基于对象与面向对象的设计.md","hash":"3738b6ee7cc1217132cdaff1882e81524674f932","modified":1756385061513},{"_id":"source/_posts/spdlog/spdlog源码阅读:01.异步机制解析.md","hash":"4e5d469a9a89601622934c16de5b56ad777ccfea","modified":1756385091608},{"_id":"source/_posts/spdlog/spdlog源码阅读:02.sink分析.md","hash":"58b6b56e82fc1ce6e0c906e3cff309608bde8f34","modified":1756385120497},{"_id":"source/_posts/spdlog/spdlog源码阅读:03.实现自定义压缩sink.md","hash":"8373bb138bf788b58a74df2d91533c839a742aca","modified":1756385120496},{"_id":"source/_posts/spdlog/spdlog源码阅读:04.format格式化引擎分析.md","hash":"9df6ab1402fe614e751b51c3976a70ecfd575f53","modified":1756385120495},{"_id":"source/_posts/spdlog/spdlog源码阅读:05.spdlog性能优化尝试.md","hash":"7b1afa4af336e6f3ae2167aad03ae8286b15cb7c","modified":1756385120495},{"_id":"source/_posts/spdlog/spdlog源码阅读:06.spdlog中的设计模式.md","hash":"ee220b0f3e75ae384a0dd86dbd83d85612a2c4d8","modified":1756385120494},{"_id":"source/_posts/grpc/images/client.png","hash":"c439491eb014113b5c9cf2e1030241ac8e435cbe","modified":1751587838555},{"_id":"source/_posts/grpc/images/completion_queue_sequence-0.png","hash":"4219ac44efb819a4c66d1cfac75b9d0182e9131c","modified":1752814097912},{"_id":"source/_posts/grpc/images/qt_add_grpc.png","hash":"5e45e80b535c4d9e9aaf72316d07c0b32dfa279e","modified":1751931148932},{"_id":"source/_posts/grpc/images/qt_client.png","hash":"ea76ed00a725c0e3deef98b32241792127413ccb","modified":1751931392092},{"_id":"source/_posts/grpc/images/reactor_workflow.png","hash":"762be022f983be61495ddf78a1852b3324115603","modified":1752814022746},{"_id":"source/_posts/grpc/images/server.png","hash":"7b99cdeba31f5b19ada74e2ca9ff4f9b6328efda","modified":1751587854223},{"_id":"source/_posts/grpc/images/stream.png","hash":"661cf03d898a75da7f77867052ebce591bf5386e","modified":1751587859256},{"_id":"source/_posts/grpc/images/version_call.png","hash":"3f5863cca7e89b776bab4ff74568f52123b22294","modified":1751242902957},{"_id":"source/_posts/muduo/images/TcpServer.png","hash":"5d0488702e376fdf6e6f318824dcfc07d9a30499","modified":1749770496154},{"_id":"source/_posts/muduo/images/eventloop传递事件.png","hash":"de88fc3f0acc27f05a8afc2fbe9d5708e30eafbd","modified":1748337253988},{"_id":"source/_posts/muduo/images/eventloop启动.png","hash":"9d475c452a483dbe78f96047eb2fb387996d16d9","modified":1748337065434},{"_id":"source/_posts/muduo/images/raii.png","hash":"3ae385bba18d0d78894ff0761be7b6d9e68a3986","modified":1749770918906},{"_id":"source/_posts/muduo/images/取消操作.png","hash":"298bfb5cfe3108c04501bbd6c47f752aa69b0080","modified":1749082351658},{"_id":"source/_posts/muduo/images/处理消息.png","hash":"0c6d2076afc60a320fdb3ccb44dabb8215890138","modified":1748558683911},{"_id":"source/_posts/muduo/images/定时器到期处理.png","hash":"1a590ac60e75a30561af4ecb212f8e862a07f731","modified":1749082250146},{"_id":"source/_posts/muduo/images/建立新连接.png","hash":"8e974dca4deb16ae5c62477caf6dcb0b856d11a2","modified":1748558478104},{"_id":"source/_posts/muduo/images/消息写完.png","hash":"eb952356ed65bc332c2561d689ca8102055accf8","modified":1748558873666},{"_id":"source/_posts/muduo/images/重复任务.png","hash":"235465c358aadb75046a254c8229e9b487669074","modified":1749082553529},{"_id":"source/_posts/muduo/images/连接关闭.png","hash":"f02dd2cab7612de6d79239aa5e9ae6aa71f757c2","modified":1748559053974},{"_id":"source/_posts/spdlog/images/logger_sink.png","hash":"f6d4ca274cd5b455a264e8d2320452e5d7b8c9b3","modified":1750409261123},{"_id":"source/_posts/spdlog/images/factory.png","hash":"9e1fa0bfb91c9bcf2b1249c3bab24f9c6ccd5911","modified":1750409310987},{"_id":"source/_posts/spdlog/images/mpmc.png","hash":"752fc9e7967b55348621b4fa692bc0113b05d8c6","modified":1746924366129},{"_id":"source/_posts/spdlog/images/spsc.png","hash":"abbb27afe2b4ec60c960de273d504364f9f37376","modified":1746924386335},{"_id":"source/images/loop循环.png","hash":"4b28a30f9898a6e791f3474d693e58a82b2dfa49","modified":1748560252389},{"_id":"source/images/spdlog.png","hash":"380903aab9872b67ee37cf690de7fa18410a52eb","modified":1745396221325},{"_id":"source/_posts/muduo/images/loop循环.png","hash":"4b28a30f9898a6e791f3474d693e58a82b2dfa49","modified":1748560252389},{"_id":"source/_posts/spdlog/images/spdlog.png","hash":"380903aab9872b67ee37cf690de7fa18410a52eb","modified":1745396221325},{"_id":"source/images/spdlog_seq.png","hash":"dd12bd5ce5c0163b06eea40c380c50415f498185","modified":1745396221329},{"_id":"source/_posts/spdlog/images/spdlog_seq.png","hash":"dd12bd5ce5c0163b06eea40c380c50415f498185","modified":1745396221329},{"_id":"themes/next/.editorconfig","hash":"8570735a8d8d034a3a175afd1dd40b39140b3e6a","modified":1756337236354},{"_id":"themes/next/.eslintrc.json","hash":"cc5f297f0322672fe3f684f823bc4659e4a54c41","modified":1756337236354},{"_id":"themes/next/.gitignore","hash":"56f3470755c20311ddd30d421b377697a6e5e68b","modified":1756337236356},{"_id":"themes/next/.gitattributes","hash":"a54f902957d49356376b59287b894b1a3d7a003f","modified":1756337236354},{"_id":"themes/next/.stylintrc","hash":"2cf4d637b56d8eb423f59656a11f6403aa90f550","modified":1756337236356},{"_id":"themes/next/.travis.yml","hash":"ecca3b919a5b15886e3eca58aa84aafc395590da","modified":1756337236356},{"_id":"themes/next/LICENSE.md","hash":"18144d8ed58c75af66cb419d54f3f63374cd5c5b","modified":1756337236356},{"_id":"themes/next/crowdin.yml","hash":"e026078448c77dcdd9ef50256bb6635a8f83dca6","modified":1756337236357},{"_id":"themes/next/gulpfile.js","hash":"1b4fc262b89948937b9e3794de812a7c1f2f3592","modified":1756337236361},{"_id":"themes/next/package.json","hash":"62fad6de02adbbba9fb096cbe2dcc15fe25f2435","modified":1756337236370},{"_id":"themes/next/README.md","hash":"9b4b7d66aca47f9c65d6321b14eef48d95c4dff1","modified":1756337236356},{"_id":"themes/next/.github/CODE_OF_CONDUCT.md","hash":"aa4cb7aff595ca628cb58160ee1eee117989ec4e","modified":1756337236354},{"_id":"themes/next/.github/PULL_REQUEST_TEMPLATE.md","hash":"1a435c20ae8fa183d49bbf96ac956f7c6c25c8af","modified":1756337236355},{"_id":"themes/next/.github/config.yml","hash":"1d3f4e8794986817c0fead095c74f756d45f91ed","modified":1756337236355},{"_id":"themes/next/.github/issue-close-app.yml","hash":"7cba457eec47dbfcfd4086acd1c69eaafca2f0cd","modified":1756337236355},{"_id":"themes/next/.github/issue_label_bot.yaml","hash":"fca600ddef6f80c5e61aeed21722d191e5606e5b","modified":1756337236355},{"_id":"themes/next/.github/lock.yml","hash":"61173b9522ebac13db2c544e138808295624f7fd","modified":1756337236355},{"_id":"themes/next/.github/mergeable.yml","hash":"0ee56e23bbc71e1e76427d2bd255a9879bd36e22","modified":1756337236355},{"_id":"themes/next/.github/release-drafter.yml","hash":"3cc10ce75ecc03a5ce86b00363e2a17eb65d15ea","modified":1756337236355},{"_id":"themes/next/.github/stale.yml","hash":"fdf82de9284f8bc8e0b0712b4cc1cb081a94de59","modified":1756337236356},{"_id":"themes/next/.github/CONTRIBUTING.md","hash":"e554931b98f251fd49ff1d2443006d9ea2c20461","modified":1756337236355},{"_id":"themes/next/.github/support.yml","hash":"d75db6ffa7b4ca3b865a925f9de9aef3fc51925c","modified":1756337236356},{"_id":"themes/next/docs/ALGOLIA-SEARCH.md","hash":"c7a994b9542040317d8f99affa1405c143a94a38","modified":1756337236358},{"_id":"themes/next/docs/AUTHORS.md","hash":"10135a2f78ac40e9f46b3add3e360c025400752f","modified":1756337236358},{"_id":"themes/next/_config.yml","hash":"9900884de6da3d2b071b35ad9a9749e0ec29ab33","modified":1756385943762},{"_id":"themes/next/docs/DATA-FILES.md","hash":"cddbdc91ee9e65c37a50bec12194f93d36161616","modified":1756337236358},{"_id":"themes/next/docs/INSTALLATION.md","hash":"af88bcce035780aaa061261ed9d0d6c697678618","modified":1756337236358},{"_id":"themes/next/docs/LICENSE.txt","hash":"368bf2c29d70f27d8726dd914f1b3211cae4bbab","modified":1756337236358},{"_id":"themes/next/docs/LEANCLOUD-COUNTER-SECURITY.md","hash":"94dc3404ccb0e5f663af2aa883c1af1d6eae553d","modified":1756337236358},{"_id":"themes/next/docs/UPDATE-FROM-5.1.X.md","hash":"8b6e4b2c9cfcb969833092bdeaed78534082e3e6","modified":1756337236359},{"_id":"themes/next/languages/ar.yml","hash":"9815e84e53d750c8bcbd9193c2d44d8d910e3444","modified":1756337236361},{"_id":"themes/next/docs/AGPL3.md","hash":"0d2b8c5fa8a614723be0767cc3bca39c49578036","modified":1756337236357},{"_id":"themes/next/docs/MATH.md","hash":"d645b025ec7fb9fbf799b9bb76af33b9f5b9ed93","modified":1756337236359},{"_id":"themes/next/languages/de.yml","hash":"74c59f2744217003b717b59d96e275b54635abf5","modified":1756337236361},{"_id":"themes/next/languages/en.yml","hash":"45bc5118828bdc72dcaa25282cd367c8622758cb","modified":1756337236362},{"_id":"themes/next/languages/default.yml","hash":"45bc5118828bdc72dcaa25282cd367c8622758cb","modified":1756337236362},{"_id":"themes/next/languages/es.yml","hash":"c64cf05f356096f1464b4b1439da3c6c9b941062","modified":1756337236362},{"_id":"themes/next/languages/fa.yml","hash":"3676b32fda37e122f3c1a655085a1868fb6ad66b","modified":1756337236362},{"_id":"themes/next/languages/fr.yml","hash":"752bf309f46a2cd43890b82300b342d7218d625f","modified":1756337236362},{"_id":"themes/next/languages/hu.yml","hash":"b1ebb77a5fd101195b79f94de293bcf9001d996f","modified":1756337236362},{"_id":"themes/next/languages/ja.yml","hash":"0cf0baa663d530f22ff380a051881216d6adcdd8","modified":1756337236362},{"_id":"themes/next/languages/id.yml","hash":"572ed855d47aafe26f58c73b1394530754881ec2","modified":1756337236362},{"_id":"themes/next/languages/it.yml","hash":"44759f779ce9c260b895532de1d209ad4bd144bf","modified":1756337236362},{"_id":"themes/next/languages/ko.yml","hash":"0feea9e43cd399f3610b94d755a39fff1d371e97","modified":1756337236362},{"_id":"themes/next/languages/nl.yml","hash":"5af3473d9f22897204afabc08bb984b247493330","modified":1756337236362},{"_id":"themes/next/languages/pt-BR.yml","hash":"67555b1ba31a0242b12fc6ce3add28531160e35b","modified":1756337236363},{"_id":"themes/next/languages/pt.yml","hash":"718d131f42f214842337776e1eaddd1e9a584054","modified":1756337236363},{"_id":"themes/next/languages/ru.yml","hash":"e993d5ca072f7f6887e30fc0c19b4da791ca7a88","modified":1756337236363},{"_id":"themes/next/languages/tr.yml","hash":"2b041eeb8bd096f549464f191cfc1ea0181daca4","modified":1756337236363},{"_id":"themes/next/languages/uk.yml","hash":"3a6d635b1035423b22fc86d9455dba9003724de9","modified":1756337236363},{"_id":"themes/next/languages/vi.yml","hash":"93393b01df148dcbf0863f6eee8e404e2d94ef9e","modified":1756337236363},{"_id":"themes/next/languages/zh-HK.yml","hash":"3789f94010f948e9f23e21235ef422a191753c65","modified":1756337236363},{"_id":"themes/next/languages/zh-CN.yml","hash":"a1f15571ee7e1e84e3cc0985c3ec4ba1a113f6f8","modified":1756337236363},{"_id":"themes/next/languages/zh-TW.yml","hash":"8c09da7c4ec3fca2c6ee897b2eea260596a2baa1","modified":1756337236363},{"_id":"themes/next/layout/archive.swig","hash":"e4e31317a8df68f23156cfc49e9b1aa9a12ad2ed","modified":1756337236370},{"_id":"themes/next/layout/index.swig","hash":"7f403a18a68e6d662ae3e154b2c1d3bbe0801a23","modified":1756337236370},{"_id":"themes/next/layout/category.swig","hash":"1bde61cf4d2d171647311a0ac2c5c7933f6a53b0","modified":1756337236370},{"_id":"themes/next/layout/_layout.swig","hash":"6a6e92a4664cdb981890a27ac11fd057f44de1d5","modified":1756337236363},{"_id":"themes/next/layout/post.swig","hash":"2f6d992ced7e067521fdce05ffe4fd75481f41c5","modified":1756337236370},{"_id":"themes/next/layout/page.swig","hash":"db581bdeac5c75fabb0f17d7c5e746e47f2a9168","modified":1756337236370},{"_id":"themes/next/scripts/renderer.js","hash":"49a65df2028a1bc24814dc72fa50d52231ca4f05","modified":1756337236371},{"_id":"themes/next/layout/tag.swig","hash":"0dfb653bd5de980426d55a0606d1ab122bd8c017","modified":1756337236370},{"_id":"themes/next/.github/ISSUE_TEMPLATE/feature-request.md","hash":"12d99fb8b62bd9e34d9672f306c9ae4ace7e053e","modified":1756337236355},{"_id":"themes/next/.github/ISSUE_TEMPLATE/bug-report.md","hash":"c3e6b8196c983c40fd140bdeca012d03e6e86967","modified":1756337236355},{"_id":"themes/next/.github/ISSUE_TEMPLATE/question.md","hash":"53df7d537e26aaf062d70d86835c5fd8f81412f3","modified":1756337236355},{"_id":"themes/next/.github/ISSUE_TEMPLATE/other.md","hash":"d3efc0df0275c98440e69476f733097916a2d579","modified":1756337236355},{"_id":"themes/next/docs/ru/DATA-FILES.md","hash":"0bd2d696f62a997a11a7d84fec0130122234174e","modified":1756337236359},{"_id":"themes/next/docs/ru/INSTALLATION.md","hash":"9c4fe2873123bf9ceacab5c50d17d8a0f1baef27","modified":1756337236359},{"_id":"themes/next/docs/ru/UPDATE-FROM-5.1.X.md","hash":"5237a368ab99123749d724b6c379415f2c142a96","modified":1756337236359},{"_id":"themes/next/docs/zh-CN/ALGOLIA-SEARCH.md","hash":"34b88784ec120dfdc20fa82aadeb5f64ef614d14","modified":1756337236360},{"_id":"themes/next/docs/zh-CN/CODE_OF_CONDUCT.md","hash":"fb23b85db6f7d8279d73ae1f41631f92f64fc864","modified":1756337236360},{"_id":"themes/next/docs/zh-CN/DATA-FILES.md","hash":"ca1030efdfca5e20f9db2e7a428998e66a24c0d0","modified":1756337236360},{"_id":"themes/next/docs/ru/README.md","hash":"85dd68ed1250897a8e4a444a53a68c1d49eb7e11","modified":1756337236359},{"_id":"themes/next/docs/zh-CN/LEANCLOUD-COUNTER-SECURITY.md","hash":"8b18f84503a361fc712b0fe4d4568e2f086ca97d","modified":1756337236361},{"_id":"themes/next/docs/zh-CN/CONTRIBUTING.md","hash":"d3f03be036b75dc71cf3c366cd75aee7c127c874","modified":1756337236360},{"_id":"themes/next/docs/zh-CN/INSTALLATION.md","hash":"579c7bd8341873fb8be4732476d412814f1a3df7","modified":1756337236360},{"_id":"themes/next/docs/zh-CN/UPDATE-FROM-5.1.X.md","hash":"d9ce7331c1236bbe0a551d56cef2405e47e65325","modified":1756337236361},{"_id":"themes/next/docs/zh-CN/README.md","hash":"c038629ff8f3f24e8593c4c8ecf0bef3a35c750d","modified":1756337236361},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"9c8dc0b8170679cdc1ee9ee8dbcbaebf3f42897b","modified":1756337236364},{"_id":"themes/next/docs/zh-CN/MATH.md","hash":"b92585d251f1f9ebe401abb5d932cb920f9b8b10","modified":1756337236361},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"71655ca21907e9061b6e8ac52d0d8fbf54d0062b","modified":1756337236364},{"_id":"themes/next/layout/_partials/footer.swig","hash":"4369b313cbbeae742cb35f86d23d99d4285f7359","modified":1756337236364},{"_id":"themes/next/layout/_partials/languages.swig","hash":"ba9e272f1065b8f0e8848648caa7dea3f02c6be1","modified":1756337236365},{"_id":"themes/next/layout/_partials/comments.swig","hash":"db6ab5421b5f4b7cb32ac73ad0e053fdf065f83e","modified":1756337236364},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"9876dbfc15713c7a47d4bcaa301f4757bd978269","modified":1756337236365},{"_id":"themes/next/layout/_partials/widgets.swig","hash":"83a40ce83dfd5cada417444fb2d6f5470aae6bb0","modified":1756337236366},{"_id":"themes/next/layout/_scripts/index.swig","hash":"cea942b450bcb0f352da78d76dc6d6f1d23d5029","modified":1756337236366},{"_id":"themes/next/layout/_macro/post.swig","hash":"090b5a9b6fca8e968178004cbd6cff205b7eba57","modified":1756337236364},{"_id":"themes/next/layout/_scripts/pjax.swig","hash":"4d2c93c66e069852bb0e3ea2e268d213d07bfa3f","modified":1756337236367},{"_id":"themes/next/layout/_scripts/noscript.swig","hash":"d1f2bfde6f1da51a2b35a7ab9e7e8eb6eefd1c6b","modified":1756337236366},{"_id":"themes/next/layout/_scripts/three.swig","hash":"a4f42f2301866bd25a784a2281069d8b66836d0b","modified":1756337236367},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"ef38c213679e7b6d2a4116f56c9e55d678446069","modified":1756337236367},{"_id":"themes/next/layout/_third-party/baidu-push.swig","hash":"b782eb2e34c0c15440837040b5d65b093ab6ec04","modified":1756337236368},{"_id":"themes/next/layout/_third-party/index.swig","hash":"70c3c01dd181de81270c57f3d99b6d8f4c723404","modified":1756337236369},{"_id":"themes/next/scripts/events/index.js","hash":"5743cde07f3d2aa11532a168a652e52ec28514fd","modified":1756337236370},{"_id":"themes/next/layout/_third-party/quicklink.swig","hash":"311e5eceec9e949f1ea8d623b083cec0b8700ff2","modified":1756337236369},{"_id":"themes/next/layout/_third-party/rating.swig","hash":"2731e262a6b88eaee2a3ca61e6a3583a7f594702","modified":1756337236369},{"_id":"themes/next/scripts/filters/front-matter.js","hash":"703bdd142a671b4b67d3d9dfb4a19d1dd7e7e8f7","modified":1756337236371},{"_id":"themes/next/scripts/filters/default-injects.js","hash":"aec50ed57b9d5d3faf2db3c88374f107203617e0","modified":1756337236371},{"_id":"themes/next/scripts/filters/locals.js","hash":"b193a936ee63451f09f8886343dcfdca577c0141","modified":1756337236371},{"_id":"themes/next/scripts/filters/minify.js","hash":"19985723b9f677ff775f3b17dcebf314819a76ac","modified":1756337236371},{"_id":"themes/next/scripts/filters/post.js","hash":"44ba9b1c0bdda57590b53141306bb90adf0678db","modified":1756337236371},{"_id":"themes/next/scripts/helpers/font.js","hash":"40cf00e9f2b7aa6e5f33d412e03ed10304b15fd7","modified":1756337236371},{"_id":"themes/next/scripts/helpers/engine.js","hash":"bdb424c3cc0d145bd0c6015bb1d2443c8a9c6cda","modified":1756337236371},{"_id":"themes/next/scripts/helpers/next-url.js","hash":"958e86b2bd24e4fdfcbf9ce73e998efe3491a71f","modified":1756337236371},{"_id":"themes/next/scripts/helpers/next-config.js","hash":"5e11f30ddb5093a88a687446617a46b048fa02e5","modified":1756337236371},{"_id":"themes/next/scripts/tags/button.js","hash":"8c6b45f36e324820c919a822674703769e6da32c","modified":1756337236372},{"_id":"themes/next/scripts/tags/caniuse.js","hash":"94e0bbc7999b359baa42fa3731bdcf89c79ae2b3","modified":1756337236372},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"f1826ade2d135e2f60e2d95cb035383685b3370c","modified":1756337236372},{"_id":"themes/next/scripts/tags/label.js","hash":"fc5b267d903facb7a35001792db28b801cccb1f8","modified":1756337236372},{"_id":"themes/next/scripts/tags/mermaid.js","hash":"983c6c4adea86160ecc0ba2204bc312aa338121d","modified":1756337236372},{"_id":"themes/next/scripts/tags/note.js","hash":"0a02bb4c15aec41f6d5f1271cdb5c65889e265d9","modified":1756337236372},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"d902fd313e8d35c3cc36f237607c2a0536c9edf1","modified":1756337236372},{"_id":"themes/next/scripts/tags/pdf.js","hash":"8c613b39e7bff735473e35244b5629d02ee20618","modified":1756337236372},{"_id":"themes/next/scripts/tags/video.js","hash":"e5ff4c44faee604dd3ea9db6b222828c4750c227","modified":1756337236372},{"_id":"themes/next/scripts/tags/tabs.js","hash":"93d8a734a3035c1d3f04933167b500517557ba3e","modified":1756337236372},{"_id":"themes/next/source/css/_mixins.styl","hash":"e31a557f8879c2f4d8d5567ee1800b3e03f91f6e","modified":1756337236376},{"_id":"themes/next/source/css/_colors.styl","hash":"a8442520f719d3d7a19811cb3b85bcfd4a596e1f","modified":1756337236372},{"_id":"themes/next/source/css/main.styl","hash":"a3a3bbb5a973052f0186b3523911cb2539ff7b88","modified":1756357080648},{"_id":"themes/next/source/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1756337236378},{"_id":"themes/next/source/_data/styles.styl","hash":"b1bfe4427d401a98c9c411f1301d7498b6a08fad","modified":1756383435663},{"_id":"themes/next/source/images/algolia_logo.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1756337236378},{"_id":"themes/next/source/images/avatar.gif","hash":"18c53e15eb0c84b139995f9334ed8522b40aeaf6","modified":1756337236378},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1756337236379},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1756337236378},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1756337236379},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1756337236379},{"_id":"themes/next/source/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1756337236379},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1756337236379},{"_id":"themes/next/source/images/logo.svg","hash":"d29cacbae1bdc4bbccb542107ee0524fe55ad6de","modified":1756337236379},{"_id":"themes/next/source/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1756337236379},{"_id":"themes/next/source/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1756337236379},{"_id":"themes/next/source/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1756337236379},{"_id":"themes/next/source/images/zhihu.svg","hash":"6ad96ee70e0ab55a75c61411c2093bb7abf6fd7e","modified":1756341737355},{"_id":"themes/next/source/js/bookmark.js","hash":"9734ebcb9b83489686f5c2da67dc9e6157e988ad","modified":1756337236379},{"_id":"themes/next/source/js/algolia-search.js","hash":"498d233eb5c7af6940baf94c1a1c36fdf1dd2636","modified":1756337236379},{"_id":"themes/next/source/js/motion.js","hash":"72df86f6dfa29cce22abeff9d814c9dddfcf13a9","modified":1756337236380},{"_id":"themes/next/source/js/local-search.js","hash":"35ccf100d8f9c0fd6bfbb7fa88c2a76c42a69110","modified":1756337236380},{"_id":"themes/next/source/js/next-boot.js","hash":"a1b0636423009d4a4e4cea97bcbf1842bfab582c","modified":1756337236380},{"_id":"themes/next/source/images/spdlog_sink_compress.png","hash":"f7f470d5df489683bed92a9de39de568550da7e2","modified":1745396221329},{"_id":"themes/next/layout/_partials/head/head-unique.swig","hash":"000bad572d76ee95d9c0a78f9ccdc8d97cc7d4b4","modified":1756337236364},{"_id":"themes/next/layout/_partials/head/head.swig","hash":"810d544019e4a8651b756dd23e5592ee851eda71","modified":1756337236364},{"_id":"themes/next/layout/_partials/header/index.swig","hash":"7dbe93b8297b746afb89700b4d29289556e85267","modified":1756337236365},{"_id":"themes/next/layout/_partials/header/brand.swig","hash":"c70f8e71e026e878a4e9d5ab3bbbf9b0b23c240c","modified":1756337236365},{"_id":"themes/next/layout/_partials/header/menu-item.swig","hash":"9440d8a3a181698b80e1fa47f5104f4565d8cdf3","modified":1756337236365},{"_id":"themes/next/layout/_partials/header/menu.swig","hash":"d31f896680a6c2f2c3f5128b4d4dd46c87ce2130","modified":1756337236365},{"_id":"themes/next/source/js/utils.js","hash":"730cca7f164eaf258661a61ff3f769851ff1e5da","modified":1756337236380},{"_id":"themes/next/layout/_partials/page/breadcrumb.swig","hash":"c851717497ca64789f2176c9ecd1dedab237b752","modified":1756337236365},{"_id":"themes/next/layout/_partials/header/sub-menu.swig","hash":"ae2261bea836581918a1c2b0d1028a78718434e0","modified":1756337236365},{"_id":"themes/next/source/lib/anime.min.js","hash":"47cb482a8a488620a793d50ba8f6752324b46af3","modified":1756337236381},{"_id":"themes/next/layout/_partials/page/page-header.swig","hash":"9b7a66791d7822c52117fe167612265356512477","modified":1756337236365},{"_id":"themes/next/layout/_partials/post/post-copyright.swig","hash":"954ad71536b6eb08bd1f30ac6e2f5493b69d1c04","modified":1756337236365},{"_id":"themes/next/layout/_partials/post/post-followme.swig","hash":"ceba16b9bd3a0c5c8811af7e7e49d0f9dcb2f41e","modified":1756337236365},{"_id":"themes/next/layout/_partials/post/post-footer.swig","hash":"8f14f3f8a1b2998d5114cc56b680fb5c419a6b07","modified":1756337236365},{"_id":"themes/next/layout/_partials/post/post-related.swig","hash":"f79c44692451db26efce704813f7a8872b7e63a0","modified":1756337236365},{"_id":"themes/next/layout/_partials/search/algolia-search.swig","hash":"48430bd03b8f19c9b8cdb2642005ed67d56c6e0b","modified":1756337236365},{"_id":"themes/next/layout/_partials/post/post-reward.swig","hash":"2b1a73556595c37951e39574df5a3f20b2edeaef","modified":1756337236365},{"_id":"themes/next/layout/_partials/search/index.swig","hash":"2be50f9bfb1c56b85b3b6910a7df27f51143632c","modified":1756337236365},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"f48a6a8eba04eb962470ce76dd731e13074d4c45","modified":1756337236366},{"_id":"themes/next/layout/_scripts/schemes/gemini.swig","hash":"1c910fc066c06d5fbbe9f2b0c47447539e029af7","modified":1756337236367},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"7f14ef43d9e82bc1efc204c5adf0b1dbfc919a9f","modified":1756337236367},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"7f14ef43d9e82bc1efc204c5adf0b1dbfc919a9f","modified":1756337236367},{"_id":"themes/next/layout/_partials/sidebar/site-overview.swig","hash":"c46849e0af8f8fb78baccd40d2af14df04a074af","modified":1756337236366},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"1c910fc066c06d5fbbe9f2b0c47447539e029af7","modified":1756337236367},{"_id":"themes/next/layout/_scripts/pages/schedule.swig","hash":"077b5d66f6309f2e7dcf08645058ff2e03143e6c","modified":1756337236367},{"_id":"themes/next/layout/_third-party/analytics/baidu-analytics.swig","hash":"4790058691b7d36cf6d2d6b4e93795a7b8d608ad","modified":1756337236368},{"_id":"themes/next/layout/_third-party/analytics/google-analytics.swig","hash":"2fa2b51d56bfac6a1ea76d651c93b9c20b01c09b","modified":1756337236368},{"_id":"themes/next/layout/_third-party/analytics/growingio.swig","hash":"5adea065641e8c55994dd2328ddae53215604928","modified":1756337236368},{"_id":"themes/next/layout/_third-party/chat/chatra.swig","hash":"f910618292c63871ca2e6c6e66c491f344fa7b1f","modified":1756337236368},{"_id":"themes/next/layout/_third-party/analytics/index.swig","hash":"1472cabb0181f60a6a0b7fec8899a4d03dfb2040","modified":1756337236368},{"_id":"themes/next/layout/_third-party/chat/tidio.swig","hash":"cba0e6e0fad08568a9e74ba9a5bee5341cfc04c1","modified":1756337236368},{"_id":"themes/next/layout/_third-party/comments/changyan.swig","hash":"f39a5bf3ce9ee9adad282501235e0c588e4356ec","modified":1756337236368},{"_id":"themes/next/layout/_third-party/comments/disqus.swig","hash":"b14908644225d78c864cd0a9b60c52407de56183","modified":1756337236368},{"_id":"themes/next/layout/_third-party/comments/disqusjs.swig","hash":"82f5b6822aa5ec958aa987b101ef860494c6cf1f","modified":1756337236368},{"_id":"themes/next/layout/_third-party/comments/livere.swig","hash":"f7a9eca599a682479e8ca863db59be7c9c7508c8","modified":1756337236368},{"_id":"themes/next/layout/_third-party/comments/gitalk.swig","hash":"d6ceb70648555338a80ae5724b778c8c58d7060d","modified":1756337236368},{"_id":"themes/next/layout/_third-party/comments/valine.swig","hash":"be0a8eccf1f6dc21154af297fc79555343031277","modified":1756337236369},{"_id":"themes/next/layout/_third-party/search/algolia-search.swig","hash":"d35a999d67f4c302f76fdf13744ceef3c6506481","modified":1756337236369},{"_id":"themes/next/layout/_third-party/math/index.swig","hash":"6c5976621efd5db5f7c4c6b4f11bc79d6554885f","modified":1756337236369},{"_id":"themes/next/layout/_third-party/math/katex.swig","hash":"4791c977a730f29c846efcf6c9c15131b9400ead","modified":1756337236369},{"_id":"themes/next/layout/_third-party/search/localsearch.swig","hash":"767b6c714c22588bcd26ba70b0fc19b6810cbacd","modified":1756337236369},{"_id":"themes/next/layout/_third-party/math/mathjax.swig","hash":"ecf751321e799f0fb3bf94d049e535130e2547aa","modified":1756337236369},{"_id":"themes/next/layout/_third-party/statistics/cnzz-analytics.swig","hash":"a17ace37876822327a2f9306a472974442c9005d","modified":1756337236369},{"_id":"themes/next/layout/_third-party/statistics/busuanzi-counter.swig","hash":"4b1986e43d6abce13450d2b41a736dd6a5620a10","modified":1756337236369},{"_id":"themes/next/layout/_third-party/search/swiftype.swig","hash":"ba0dbc06b9d244073a1c681ff7a722dcbf920b51","modified":1756337236369},{"_id":"themes/next/layout/_third-party/statistics/index.swig","hash":"5f6a966c509680dbfa70433f9d658cee59c304d7","modified":1756337236369},{"_id":"themes/next/layout/_third-party/statistics/firestore.swig","hash":"b26ac2bfbe91dd88267f8b96aee6bb222b265b7a","modified":1756337236369},{"_id":"themes/next/layout/_third-party/tags/pdf.swig","hash":"d30b0e255a8092043bac46441243f943ed6fb09b","modified":1756337236370},{"_id":"themes/next/layout/_third-party/tags/mermaid.swig","hash":"f3c43664a071ff3c0b28bd7e59b5523446829576","modified":1756337236369},{"_id":"themes/next/scripts/events/lib/injects-point.js","hash":"6661c1c91c7cbdefc6a5e6a034b443b8811235a1","modified":1756337236370},{"_id":"themes/next/scripts/events/lib/config.js","hash":"d34c6040b13649714939f59be5175e137de65ede","modified":1756337236370},{"_id":"themes/next/layout/_third-party/statistics/lean-analytics.swig","hash":"d56d5af427cdfecc33a0f62ee62c056b4e33d095","modified":1756337236369},{"_id":"themes/next/scripts/filters/comment/changyan.js","hash":"a54708fd9309b4357c423a3730eb67f395344a5e","modified":1756337236370},{"_id":"themes/next/scripts/filters/comment/common.js","hash":"2486f3e0150c753e5f3af1a3665d074704b8ee2c","modified":1756337236371},{"_id":"themes/next/scripts/filters/comment/disqus.js","hash":"4c0c99c7e0f00849003dfce02a131104fb671137","modified":1756337236371},{"_id":"themes/next/scripts/events/lib/injects.js","hash":"f233d8d0103ae7f9b861344aa65c1a3c1de8a845","modified":1756337236370},{"_id":"themes/next/scripts/filters/comment/disqusjs.js","hash":"7f8b92913d21070b489457fa5ed996d2a55f2c32","modified":1756337236371},{"_id":"themes/next/scripts/filters/comment/default-config.js","hash":"7f2d93af012c1e14b8596fecbfc7febb43d9b7f5","modified":1756337236371},{"_id":"themes/next/scripts/filters/comment/gitalk.js","hash":"e51dc3072c1ba0ea3008f09ecae8b46242ec6021","modified":1756337236371},{"_id":"themes/next/scripts/filters/comment/livere.js","hash":"d5fefc31fba4ab0188305b1af1feb61da49fdeb0","modified":1756337236371},{"_id":"themes/next/source/css/_variables/Gemini.styl","hash":"f4e694e5db81e57442c7e34505a416d818b3044a","modified":1756337236377},{"_id":"themes/next/scripts/filters/comment/valine.js","hash":"6cbd85f9433c06bae22225ccf75ac55e04f2d106","modified":1756337236371},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"f70be8e229da7e1715c11dd0e975a2e71e453ac8","modified":1756337236377},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"62df49459d552bbf73841753da8011a1f5e875c8","modified":1756337236377},{"_id":"themes/next/source/css/_custom/custom.styl","hash":"ef0c6bd53e42a7cafcee4a9ae13b89ea92d27342","modified":1756386133739},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"612ec843372dae709acb17112c1145a53450cc59","modified":1756337236377},{"_id":"themes/next/source/js/schemes/muse.js","hash":"1eb9b88103ddcf8827b1a7cbc56471a9c5592d53","modified":1756337236380},{"_id":"themes/next/source/js/schemes/pisces.js","hash":"0ac5ce155bc58c972fe21c4c447f85e6f8755c62","modified":1756337236380},{"_id":"themes/next/source/css/_common/components/back-to-top-sidebar.styl","hash":"ca5e70662dcfb261c25191cc5db5084dcf661c76","modified":1756337236372},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"a47725574e1bee3bc3b63b0ff2039cc982b17eff","modified":1756337236372},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"8e7b57a72e757cf95278239641726bb2d5b869d1","modified":1756337236372},{"_id":"themes/next/source/css/_common/components/reading-progress.styl","hash":"2e3bf7baf383c9073ec5e67f157d3cb3823c0957","modified":1756337236373},{"_id":"themes/next/source/css/_variables/base.styl","hash":"818508748b7a62e02035e87fe58e75b603ed56dc","modified":1756337236378},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1756337236383},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"a1690e035b505d28bdef2b4424c13fc6312ab049","modified":1756337236374},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"0b2c4b78eead410020d7c4ded59c75592a648df8","modified":1756337236375},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"b56367ea676ea8e8783ea89cd4ab150c7da7a060","modified":1756337236375},{"_id":"themes/next/source/css/_common/outline/mobile.styl","hash":"681d33e3bc85bdca407d93b134c089264837378c","modified":1756337236374},{"_id":"themes/next/source/css/_common/scaffolding/pagination.styl","hash":"8f58570a1bbc34c4989a47a1b7d42a8030f38b06","modified":1756337236375},{"_id":"themes/next/source/css/_common/scaffolding/comments.styl","hash":"b1f0fab7344a20ed6748b04065b141ad423cf4d9","modified":1756337236375},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"523fb7b653b87ae37fc91fc8813e4ffad87b0d7e","modified":1756337236375},{"_id":"themes/next/source/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1756337236383},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"18ce72d90459c9aa66910ac64eae115f2dde3767","modified":1756337236375},{"_id":"themes/next/source/css/_common/scaffolding/buttons.styl","hash":"a2e9e00962e43e98ec2614d6d248ef1773bb9b78","modified":1756337236375},{"_id":"themes/next/source/css/_schemes/Gemini/index.styl","hash":"7785bd756e0c4acede3a47fec1ed7b55988385a5","modified":1756337236376},{"_id":"themes/next/source/css/_common/scaffolding/toggles.styl","hash":"179e33b8ac7f4d8a8e76736a7e4f965fe9ab8b42","modified":1756337236376},{"_id":"themes/next/source/css/_schemes/Mist/_layout.styl","hash":"bb7ace23345364eb14983e860a7172e1683a4c94","modified":1756337236376},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"f6516d0f7d89dc7b6c6e143a5af54b926f585d82","modified":1756337236376},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"7104b9cef90ca3b140d7a7afcf15540a250218fc","modified":1756337236376},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"a717969829fa6ef88225095737df3f8ee86c286b","modified":1756337236376},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expand.styl","hash":"6136da4bbb7e70cec99f5c7ae8c7e74f5e7c261a","modified":1756337236376},{"_id":"themes/next/source/css/_schemes/Muse/_header.styl","hash":"f0131db6275ceaecae7e1a6a3798b8f89f6c850d","modified":1756337236377},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"4d1c17345d2d39ef7698f7acf82dfc0f59308c34","modified":1756337236377},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"93db5dafe9294542a6b5f647643cb9deaced8e06","modified":1756337236377},{"_id":"themes/next/source/css/_schemes/Muse/_sidebar.styl","hash":"2b2e7b5cea7783c9c8bb92655e26a67c266886f0","modified":1756337236377},{"_id":"themes/next/source/css/_schemes/Pisces/_header.styl","hash":"e282df938bd029f391c466168d0e68389978f120","modified":1756337236377},{"_id":"themes/next/source/css/_schemes/Muse/_sub-menu.styl","hash":"c48ccd8d6651fe1a01faff8f01179456d39ba9b1","modified":1756337236377},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"6ad168288b213cec357e9b5a97674ff2ef3a910c","modified":1756337236377},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"85da2f3006f4bef9a2199416ecfab4d288f848c4","modified":1756337236377},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"70a4324b70501132855b5e59029acfc5d3da1ebd","modified":1756337236377},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"44f47c88c06d89d06f220f102649057118715828","modified":1756337236377},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"6ad168288b213cec357e9b5a97674ff2ef3a910c","modified":1756337236377},{"_id":"themes/next/source/css/_schemes/Pisces/_sub-menu.styl","hash":"e740deadcfc4f29c5cb01e40f9df6277262ba4e3","modified":1756337236377},{"_id":"themes/next/source/lib/font-awesome/webfonts/fa-regular-400.woff2","hash":"260bb01acd44d88dcb7f501a238ab968f86bef9e","modified":1756337236382},{"_id":"themes/next/source/lib/font-awesome/css/all.min.css","hash":"0038dc97c79451578b7bd48af60ba62282b4082b","modified":1756342162520},{"_id":"themes/next/source/css/_common/components/pages/breadcrumb.styl","hash":"fafc96c86926b22afba8bb9418c05e6afbc05a57","modified":1756337236372},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"e771dcb0b4673e063c0f3e2d73e7336ac05bcd57","modified":1756337236373},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"7504dbc5c70262b048143b2c37d2b5aa2809afa2","modified":1756337236372},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"2bd0eb1512415325653b26d62a4463e6de83c5ac","modified":1756337236372},{"_id":"themes/next/source/css/_common/components/pages/tag-cloud.styl","hash":"d21d4ac1982c13d02f125a67c065412085a92ff2","modified":1756337236373},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"e75693f33dbc92afc55489438267869ae2f3db54","modified":1756337236373},{"_id":"themes/next/source/css/_common/components/post/post-copyright.styl","hash":"f49ca072b5a800f735e8f01fc3518f885951dd8e","modified":1756337236373},{"_id":"themes/next/source/css/_common/components/post/post-followme.styl","hash":"1e4190c10c9e0c9ce92653b0dbcec21754b0b69d","modified":1756337236373},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"902569a9dea90548bec21a823dd3efd94ff7c133","modified":1756337236373},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"ded41fd9d20a5e8db66aaff7cc50f105f5ef2952","modified":1756337236373},{"_id":"themes/next/source/css/_common/components/post/post-header.styl","hash":"65cb6edb69e94e70e3291e9132408361148d41d5","modified":1756337236373},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"72d495a88f7d6515af425c12cbc67308a57d88ea","modified":1756337236373},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"6a97bcfa635d637dc59005be3b931109e0d1ead5","modified":1756337236373},{"_id":"themes/next/source/css/_common/components/post/post-rtl.styl","hash":"f5c2788a78790aca1a2f37f7149d6058afb539e0","modified":1756337236373},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"d114b2a531129e739a27ba6271cfe6857aa9a865","modified":1756337236373},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"a760ee83ba6216871a9f14c5e56dc9bd0d9e2103","modified":1756337236373},{"_id":"themes/next/source/css/_common/components/post/post-widgets.styl","hash":"5b5649b9749e3fd8b63aef22ceeece0a6e1df605","modified":1756337236373},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"99e12c9ce3d14d4837e3d3f12fc867ba9c565317","modified":1756337236373},{"_id":"themes/next/source/css/_common/components/third-party/math.styl","hash":"b49e9fbd3c182b8fc066b8c2caf248e3eb748619","modified":1756337236373},{"_id":"themes/next/source/css/_common/components/third-party/gitalk.styl","hash":"8a7fc03a568b95be8d3337195e38bc7ec5ba2b23","modified":1756337236373},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"9a878d0119785a2316f42aebcceaa05a120b9a7a","modified":1756337236374},{"_id":"themes/next/source/css/_common/components/third-party/related-posts.styl","hash":"e2992846b39bf3857b5104675af02ba73e72eed5","modified":1756337236373},{"_id":"themes/next/source/css/_common/components/third-party/search.styl","hash":"9f0b93d109c9aec79450c8a0cf4a4eab717d674d","modified":1756337236373},{"_id":"themes/next/source/css/_common/outline/footer/footer.styl","hash":"454a4aebfabb4469b92a8cbb49f46c49ac9bf165","modified":1756337236374},{"_id":"themes/next/source/css/_common/outline/header/bookmark.styl","hash":"e2d606f1ac343e9be4f15dbbaf3464bc4df8bf81","modified":1756337236374},{"_id":"themes/next/source/css/_common/outline/header/menu.styl","hash":"5f432a6ed9ca80a413c68b00e93d4a411abf280a","modified":1756337236374},{"_id":"themes/next/source/css/_common/outline/header/header.styl","hash":"a793cfff86ad4af818faef04c18013077873f8f0","modified":1756337236374},{"_id":"themes/next/source/css/_common/outline/header/headerband.styl","hash":"0caf32492692ba8e854da43697a2ec8a41612194","modified":1756337236374},{"_id":"themes/next/source/css/_common/outline/header/site-meta.styl","hash":"45a239edca44acecf971d99b04f30a1aafbf6906","modified":1756337236374},{"_id":"themes/next/source/css/_common/outline/header/github-banner.styl","hash":"e7a9fdb6478b8674b1cdf94de4f8052843fb71d9","modified":1756337236374},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-author.styl","hash":"fa0222197b5eee47e18ac864cdc6eac75678b8fe","modified":1756337236374},{"_id":"themes/next/source/css/_common/outline/header/site-nav.styl","hash":"b2fc519828fe89a1f8f03ff7b809ad68cd46f3d7","modified":1756337236374},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-author-links.styl","hash":"2cb1876e9e0c9ac32160888af27b1178dbcb0616","modified":1756337236374},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-button.styl","hash":"1f0e7fbe80956f47087c2458ea880acf7a83078b","modified":1756337236374},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-blogroll.styl","hash":"44487d9ab290dc97871fa8dd4487016deb56e123","modified":1756337236374},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-toc.styl","hash":"a05a4031e799bc864a4536f9ef61fe643cd421af","modified":1756337236374},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-nav.styl","hash":"a960a2dd587b15d3b3fe1b59525d6fa971c6a6ec","modified":1756337236374},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-dimmer.styl","hash":"9b479c2f9a9bfed77885e5093b8245cc5d768ec7","modified":1756337236374},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar.styl","hash":"a9cd93c36bae5af9223e7804963096274e8a4f03","modified":1756337236375},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-toggle.styl","hash":"b3220db827e1adbca7880c2bb23e78fa7cbe95cb","modified":1756337236375},{"_id":"themes/next/source/css/_common/scaffolding/highlight/diff.styl","hash":"d3f73688bb7423e3ab0de1efdf6db46db5e34f80","modified":1756337236375},{"_id":"themes/next/source/css/_common/outline/sidebar/site-state.styl","hash":"2a47f8a6bb589c2fb635e6c1e4a2563c7f63c407","modified":1756337236375},{"_id":"themes/next/source/css/_common/scaffolding/highlight/theme.styl","hash":"3b3acc5caa0b95a2598bef4eeacb21bab21bea56","modified":1756337236375},{"_id":"themes/next/source/css/_common/scaffolding/highlight/copy-code.styl","hash":"f71a3e86c05ea668b008cf05a81f67d92b6d65e4","modified":1756337236375},{"_id":"themes/next/source/css/_common/scaffolding/highlight/highlight.styl","hash":"35c871a809afa8306c8cde13651010e282548bc6","modified":1756337236375},{"_id":"themes/next/source/css/_common/scaffolding/tags/blockquote-center.styl","hash":"1d2778ca5aeeeafaa690dc2766b01b352ab76a02","modified":1756337236376},{"_id":"themes/next/source/css/_common/scaffolding/tags/group-pictures.styl","hash":"709d10f763e357e1472d6471f8be384ec9e2d983","modified":1756337236376},{"_id":"themes/next/source/css/_common/scaffolding/tags/tabs.styl","hash":"f23670f1d8e749f3e83766d446790d8fd9620278","modified":1756337236376},{"_id":"themes/next/source/css/_common/scaffolding/tags/pdf.styl","hash":"b49c64f8e9a6ca1c45c0ba98febf1974fdd03616","modified":1756337236376},{"_id":"themes/next/source/css/_common/scaffolding/tags/note.styl","hash":"e4d9a77ffe98e851c1202676940097ba28253313","modified":1756337236376},{"_id":"themes/next/source/css/_common/scaffolding/tags/label.styl","hash":"d7fce4b51b5f4b7c31d93a9edb6c6ce740aa0d6b","modified":1756337236376},{"_id":"themes/next/source/css/_common/scaffolding/tags/tags.styl","hash":"9e4c0653cfd3cc6908fa0d97581bcf80861fb1e7","modified":1756337236376},{"_id":"themes/next/source/lib/font-awesome/webfonts/fa-solid-900.woff2","hash":"75a88815c47a249eadb5f0edc1675957f860cca7","modified":1756337236382},{"_id":"themes/next/source/lib/font-awesome/webfonts/fa-brands-400.woff2","hash":"509988477da79c146cb93fb728405f18e923c2de","modified":1756337236382},{"_id":"public/search.xml","hash":"605f05211bf49ffaa89167cfa19c8adb25c0b83a","modified":1756385988669},{"_id":"public/categories/index.html","hash":"d0b737a10b52c1a2d1813c4fa68a7ef173450822","modified":1756385988669},{"_id":"public/tags/index.html","hash":"87b1c669cecf155c84183be2927794193b6d1562","modified":1756385988669},{"_id":"public/archives/page/2/index.html","hash":"a513544c759fc98f75cec67298ce50f4d610c3d0","modified":1756385988669},{"_id":"public/archives/2025/page/2/index.html","hash":"f4bdba7e9d498e82f463966bacd1c2a566cb9687","modified":1756385988669},{"_id":"public/archives/2025/08/page/2/index.html","hash":"73ebbaae49db2f089f123b6367fb29b7e0199e98","modified":1756385988669},{"_id":"public/categories/动手实践-三方库/index.html","hash":"f170f8ca377e58885ac7388b5df35e66f5f5e8d8","modified":1756385988669},{"_id":"public/categories/动手实践-三方库/grpc/index.html","hash":"3ebd8fd4ed3366bed8660ee60352594c498ae0c8","modified":1756385988669},{"_id":"public/categories/源码分析/page/2/index.html","hash":"2b3bd3a2cd106853d2f490ec37e8edee26f5a8f2","modified":1756385988669},{"_id":"public/categories/源码分析/muduo/index.html","hash":"f9d319f94341b09adfa317b0b4e7561ffa397dda","modified":1756385988669},{"_id":"public/categories/源码分析/spdlog/index.html","hash":"8b6c1caf93f6e7a2dc9f34f5a59035abb3ea3d7f","modified":1756385988669},{"_id":"public/tags/C/page/2/index.html","hash":"8d61a55046b43ae42ded850639682ff9cf5b9f22","modified":1756385988669},{"_id":"public/tags/grpc/index.html","hash":"e7549094c1b0b62745358a55787c1041a474974e","modified":1756385988669},{"_id":"public/tags/进程间通信/index.html","hash":"5bc3641c961c3e8012330b836ee1a4dae2516d32","modified":1756385988669},{"_id":"public/tags/muduo/index.html","hash":"c23c9a5e3a32798e32d9b1954ad38e713f45370e","modified":1756385988669},{"_id":"public/tags/网络库/index.html","hash":"fcd4d4b0736491aaad8fa0a072f58b71b79106fc","modified":1756385988669},{"_id":"public/tags/spdlog/index.html","hash":"44bea8d2f786eb813ee50b9f596cb90642067d9d","modified":1756385988669},{"_id":"public/tags/日志系统/index.html","hash":"b90fd5c5f2ba2a0d117a904a5081ab0f9ef44928","modified":1756385988669},{"_id":"public/2025/08/27/grpc/grpc实践之路:01.同步客户端的使用/index.html","hash":"2554d8cf0f130bccd51d238e5b2443d3ff563351","modified":1756385988669},{"_id":"public/2025/08/27/grpc/grpc实践之路:02.流的使用/index.html","hash":"01f1a9d92ae077900c5de389896af8b6805e28a8","modified":1756385988669},{"_id":"public/2025/08/27/grpc/grpc实践之路:04.异步回调接口的使用/index.html","hash":"55199b389551876549fc9b54fe1d396662703c98","modified":1756385988669},{"_id":"public/2025/08/27/grpc/grpc实践之路:05.服务端与客户端的连接/index.html","hash":"04a970d010b26e37d161f45558f71f9611db84eb","modified":1756385988669},{"_id":"public/2025/08/27/grpc/grpc实践之路:03.Qt与grpc的集成使用/index.html","hash":"a3f9b464c2ac1cb5c69c6a685f949fbd372a2e18","modified":1756385988669},{"_id":"public/2025/08/27/grpc/grpc实践之路:06.rpc的大问题思考/index.html","hash":"f827203e181f40ebc47db34db0c104bdc474105a","modified":1756385988669},{"_id":"public/2025/08/27/muduo/muduo源码剖析:01.一个线程一个Eventloop/index.html","hash":"797199ca43de53760230562632d4e4e5c4ccd113","modified":1756385988669},{"_id":"public/2025/08/27/muduo/muduo源码剖析:02.事件的处理/index.html","hash":"afdde18c944629ebfd595cb2af28dc8e4556d4ce","modified":1756385988669},{"_id":"public/2025/08/27/muduo/muduo源码剖析:04.Bugffer设计分析/index.html","hash":"7fb0c190fc1b7ac5bb6c2ab6d208a2ce6e3e62fb","modified":1756385988669},{"_id":"public/2025/08/27/muduo/muduo源码剖析:03.定时器的实现/index.html","hash":"eb5621a67cae5b00ff74f9275dd35f5623bdf9f6","modified":1756385988669},{"_id":"public/2025/08/27/muduo/muduo源码剖析:05.基于对象与面向对象的设计/index.html","hash":"a3766099327ce2a64b6b2de18d3268737306b912","modified":1756385988669},{"_id":"public/2025/08/26/spdlog/spdlog源码阅读:01.异步机制解析/index.html","hash":"dd33954ea10fa4f35fb9094120b7b91a714dc392","modified":1756385988669},{"_id":"public/2025/08/26/spdlog/spdlog源码阅读:02.sink分析/index.html","hash":"5e23f06e33efb3f99858fdf983bd38011fecf1fd","modified":1756385988669},{"_id":"public/2025/08/26/spdlog/spdlog源码阅读:04.format格式化引擎分析/index.html","hash":"de79e877bc0bd17fa4708436d5623515e4119753","modified":1756385988669},{"_id":"public/2025/08/26/spdlog/spdlog源码阅读:05.spdlog性能优化尝试/index.html","hash":"9e43284f71a9d279c8038613fd28f2e5667c696f","modified":1756385988669},{"_id":"public/2025/08/26/spdlog/spdlog源码阅读:06.spdlog中的设计模式/index.html","hash":"8f39ec0e01db89b98edca15803ee6068e4af71cf","modified":1756385988669},{"_id":"public/2025/08/26/spdlog/spdlog源码阅读:03.实现自定义压缩sink/index.html","hash":"b03f41e5e11f5206730a7e1f3c347af82015e07d","modified":1756385988669},{"_id":"public/archives/index.html","hash":"a5254a90c43776e1d4a254a583dceec9f494c414","modified":1756385988669},{"_id":"public/archives/2025/index.html","hash":"4bac6b2aad622ae9324d7fda6ef40a23bac6eeea","modified":1756385988669},{"_id":"public/archives/2025/08/index.html","hash":"79efae3caf72bd5f8780d5662f725efd00527e08","modified":1756385988669},{"_id":"public/categories/源码分析/index.html","hash":"5a79a92ffd4bc929fb8998433996b775ec34a153","modified":1756385988669},{"_id":"public/index.html","hash":"a60426a440ae1d00252f4bf57a62615ea17e6f0d","modified":1756385988669},{"_id":"public/page/2/index.html","hash":"f00673ddce6125e2e28bf5a7e3076d5fca796d4d","modified":1756385988669},{"_id":"public/tags/C/index.html","hash":"54779657ff9b548a1aaa3a0a3acf646d0a08f23e","modified":1756385988669},{"_id":"public/images/TcpServer.png","hash":"5d0488702e376fdf6e6f318824dcfc07d9a30499","modified":1756385129733},{"_id":"public/images/completion_queue_sequence-0.png","hash":"4219ac44efb819a4c66d1cfac75b9d0182e9131c","modified":1756385129733},{"_id":"public/images/client.png","hash":"c439491eb014113b5c9cf2e1030241ac8e435cbe","modified":1756385129733},{"_id":"public/images/eventloop传递事件.png","hash":"de88fc3f0acc27f05a8afc2fbe9d5708e30eafbd","modified":1756385129733},{"_id":"public/images/eventloop启动.png","hash":"9d475c452a483dbe78f96047eb2fb387996d16d9","modified":1756385129733},{"_id":"public/images/factory.png","hash":"9e1fa0bfb91c9bcf2b1249c3bab24f9c6ccd5911","modified":1756385129733},{"_id":"public/images/avatar.png","hash":"c973dd975c3c424c3ae613c8a8f6e288132eda6b","modified":1756385129733},{"_id":"public/images/logger_sink.png","hash":"f6d4ca274cd5b455a264e8d2320452e5d7b8c9b3","modified":1756385129733},{"_id":"public/images/mpmc.png","hash":"752fc9e7967b55348621b4fa692bc0113b05d8c6","modified":1756385129733},{"_id":"public/images/qt_add_grpc.png","hash":"5e45e80b535c4d9e9aaf72316d07c0b32dfa279e","modified":1756385129733},{"_id":"public/images/raii.png","hash":"3ae385bba18d0d78894ff0761be7b6d9e68a3986","modified":1756385129733},{"_id":"public/images/qt_client.png","hash":"ea76ed00a725c0e3deef98b32241792127413ccb","modified":1756385129733},{"_id":"public/images/server.png","hash":"7b99cdeba31f5b19ada74e2ca9ff4f9b6328efda","modified":1756385129733},{"_id":"public/images/reactor_workflow.png","hash":"762be022f983be61495ddf78a1852b3324115603","modified":1756385129733},{"_id":"public/images/spsc.png","hash":"abbb27afe2b4ec60c960de273d504364f9f37376","modified":1756385129733},{"_id":"public/images/stream.png","hash":"661cf03d898a75da7f77867052ebce591bf5386e","modified":1756385129733},{"_id":"public/images/zhihu.svg","hash":"6ad96ee70e0ab55a75c61411c2093bb7abf6fd7e","modified":1756385129733},{"_id":"public/images/version_call.png","hash":"3f5863cca7e89b776bab4ff74568f52123b22294","modified":1756385129733},{"_id":"public/images/spdlog_sink_compress.png","hash":"f7f470d5df489683bed92a9de39de568550da7e2","modified":1756385129733},{"_id":"public/images/处理消息.png","hash":"0c6d2076afc60a320fdb3ccb44dabb8215890138","modified":1756385129733},{"_id":"public/images/取消操作.png","hash":"298bfb5cfe3108c04501bbd6c47f752aa69b0080","modified":1756385129733},{"_id":"public/images/定时器到期处理.png","hash":"1a590ac60e75a30561af4ecb212f8e862a07f731","modified":1756385129733},{"_id":"public/images/建立新连接.png","hash":"8e974dca4deb16ae5c62477caf6dcb0b856d11a2","modified":1756385129733},{"_id":"public/images/消息写完.png","hash":"eb952356ed65bc332c2561d689ca8102055accf8","modified":1756385129733},{"_id":"public/images/algolia_logo.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1756385129733},{"_id":"public/images/连接关闭.png","hash":"f02dd2cab7612de6d79239aa5e9ae6aa71f757c2","modified":1756385129733},{"_id":"public/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1756385129733},{"_id":"public/images/重复任务.png","hash":"235465c358aadb75046a254c8229e9b487669074","modified":1756385129733},{"_id":"public/images/avatar.gif","hash":"18c53e15eb0c84b139995f9334ed8522b40aeaf6","modified":1756385129733},{"_id":"public/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1756385129733},{"_id":"public/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1756385129733},{"_id":"public/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1756385129733},{"_id":"public/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1756385129733},{"_id":"public/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1756385129733},{"_id":"public/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1756385129733},{"_id":"public/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1756385129733},{"_id":"public/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1756385129733},{"_id":"public/images/logo.svg","hash":"d29cacbae1bdc4bbccb542107ee0524fe55ad6de","modified":1756385129733},{"_id":"public/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1756385129733},{"_id":"public/lib/font-awesome/webfonts/fa-regular-400.woff2","hash":"260bb01acd44d88dcb7f501a238ab968f86bef9e","modified":1756385129733},{"_id":"public/images/loop循环.png","hash":"4b28a30f9898a6e791f3474d693e58a82b2dfa49","modified":1756385129733},{"_id":"public/images/spdlog.png","hash":"380903aab9872b67ee37cf690de7fa18410a52eb","modified":1756385129733},{"_id":"public/lib/font-awesome/webfonts/fa-brands-400.woff2","hash":"509988477da79c146cb93fb728405f18e923c2de","modified":1756385129733},{"_id":"public/lib/font-awesome/webfonts/fa-solid-900.woff2","hash":"75a88815c47a249eadb5f0edc1675957f860cca7","modified":1756385129733},{"_id":"public/js/algolia-search.js","hash":"498d233eb5c7af6940baf94c1a1c36fdf1dd2636","modified":1756385129733},{"_id":"public/js/local-search.js","hash":"35ccf100d8f9c0fd6bfbb7fa88c2a76c42a69110","modified":1756385129733},{"_id":"public/js/bookmark.js","hash":"9734ebcb9b83489686f5c2da67dc9e6157e988ad","modified":1756385129733},{"_id":"public/js/motion.js","hash":"72df86f6dfa29cce22abeff9d814c9dddfcf13a9","modified":1756385129733},{"_id":"public/js/next-boot.js","hash":"a1b0636423009d4a4e4cea97bcbf1842bfab582c","modified":1756385129733},{"_id":"public/js/utils.js","hash":"730cca7f164eaf258661a61ff3f769851ff1e5da","modified":1756385129733},{"_id":"public/js/schemes/muse.js","hash":"1eb9b88103ddcf8827b1a7cbc56471a9c5592d53","modified":1756385129733},{"_id":"public/js/schemes/pisces.js","hash":"0ac5ce155bc58c972fe21c4c447f85e6f8755c62","modified":1756385129733},{"_id":"public/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1756385129733},{"_id":"public/css/main.css","hash":"099e792099d9ee8faaef0064e4c190a94a54c895","modified":1756385129733},{"_id":"public/lib/anime.min.js","hash":"47cb482a8a488620a793d50ba8f6752324b46af3","modified":1756385129733},{"_id":"public/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1756385129733},{"_id":"public/lib/font-awesome/css/all.min.css","hash":"0038dc97c79451578b7bd48af60ba62282b4082b","modified":1756385129733},{"_id":"public/images/spdlog_seq.png","hash":"dd12bd5ce5c0163b06eea40c380c50415f498185","modified":1756385129733},{"_id":"public/search.json","hash":"a5ac6cecebd2e7620d72b4b4944fad022d5b8295","modified":1756385212902},{"_id":"public/2025/08/27/grpc/grpc实践之路:01.同步客户端的使用/ue_sequence-0.png","hash":"4219ac44efb819a4c66d1cfac75b9d0182e9131c","modified":1756385212902},{"_id":"public/2025/08/27/grpc/grpc实践之路:01.同步客户端的使用/g","hash":"5e45e80b535c4d9e9aaf72316d07c0b32dfa279e","modified":1756385212902},{"_id":"public/2025/08/27/grpc/grpc实践之路:01.同步客户端的使用/ow.png","hash":"762be022f983be61495ddf78a1852b3324115603","modified":1756385212902},{"_id":"public/2025/08/27/grpc/grpc实践之路:01.同步客户端的使用/.png","hash":"de88fc3f0acc27f05a8afc2fbe9d5708e30eafbd","modified":1756385212902},{"_id":"public/2025/08/27/grpc/grpc实践之路:01.同步客户端的使用/png","hash":"f6d4ca274cd5b455a264e8d2320452e5d7b8c9b3","modified":1756385212902},{"_id":"public/2025/08/27/grpc/grpc实践之路:01.同步客户端的使用/ng","hash":"dd12bd5ce5c0163b06eea40c380c50415f498185","modified":1756385212902}],"Category":[{"name":"动手实践-三方库","_id":"cmevecvs50004hfrogqh86f5e"},{"name":"grpc","parent":"cmevecvs50004hfrogqh86f5e","_id":"cmevecvs9000ehfro8z2fej6i"},{"name":"源码分析","_id":"cmevecvsg001rhfroa1q03j97"},{"name":"muduo","parent":"cmevecvsg001rhfroa1q03j97","_id":"cmevecvsj0025hfro11addon9"},{"name":"spdlog","parent":"cmevecvsg001rhfroa1q03j97","_id":"cmevecvsk002khfro8be4f3b2"}],"Data":[{"_id":"styles","data":"@font-face {\n  font-family: \"iconfont\";\n  src: url(\"iconfont.eot?t=1528847148903\"); /* IE9*/\n  src: url(\"iconfont.eot?t=1528847148903#iefix\") format('embedded-opentype'), url(\"data:application/x-font-woff;charset=utf-8;base64,d09GRgABAAAAAAYUAAsAAAAACIgAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAABHU1VCAAABCAAAADMAAABCsP6z7U9TLzIAAAE8AAAARAAAAFZW7kimY21hcAAAAYAAAABmAAABnM+nbGdnbHlmAAAB6AAAAigAAAJIGJn6FGhlYWQAAAQQAAAALwAAADYRrDxZaGhlYQAABEAAAAAcAAAAJAfeA4VobXR4AAAEXAAAABAAAAAQD+kAAGxvY2EAAARsAAAACgAAAAoBmgDsbWF4cAAABHgAAAAfAAAAIAETAF1uYW1lAAAEmAAAAUUAAAJtPlT+fXBvc3QAAAXgAAAAMQAAAEIxfhjKeJxjYGRgYOBikGPQYWB0cfMJYeBgYGGAAJAMY05meiJQDMoDyrGAaQ4gZoOIAgCKIwNPAHicY2Bk/sU4gYGVgYOpk+kMAwNDP4RmfM1gxMjBwMDEwMrMgBUEpLmmMDgwVDzbxdzwv4EhhrmBoQEozAiSAwAx0A0oeJzFkNEJwCAMRC/GFikdpZ+lOE+/OoKzOVDWsEn0xwk8eTE5DiIC2ACwcikRoA8E06suuc843I94dE56gt5FstTWps5EnkjesSVpxzLRutWzTq/3mOy/y0CfKLljvtQOwg+NwxM7AAB4nB3PzWvTcBjA8d/z+zVJX5MmaV6aNk2T2KZbu9Y1bWqna1mVwqas9QVlB6F1Igi+4GkwBu6gIOhh1wq+IMIEbx487aCC4MF/wKO6g568emk03cP38PBcHj6IQujfd3JAVCSiElpEZ9AQIaDLYLFYB9NpVHEZJJOSlBRLHNsxGduqkmVQLDol171GUaEZmgMWcuCadc+pYgeajQ4+CXVZB0hntItCISuQPYiqTu6hv4ZfgWTYWa6z4K9Wuql6XgxvxQUhLQhPwjRFhTEOcSzcVuQIFYnS/muK06QDYw4bEE872rmNRD4jjB817ugFJQKwuwtiJs/ud3mND9rRZFFIM8lEWNUS9rEUbB3GVDGuF3+iYEhg/Uw+kC46hU6jtcDpVqEMXhfcRtExO9AqHmForxXsriIzNguSywITRMuzY5DSgRowXkvkXaXl8sRmHJt3YfQRC3if4NALOuH/ApmnLqQVVcfZWLzNXcEY3oncV0bm5M5lgucXzueSucQbzMZ25gXqd1/ffro63FTTh7BuFVZWxtQSFdqwQsbw0uJSJESRcnt7PZNs4spVo3KtDzGCS+382dIn3K08Nroe3J9uDof42fRtr4ejM2voCLxHZmoRKUhHSDQlE7yW4/Im7zKyYktmE5qmBIGdZh7gv9Mwtmrl5XvTl7eWj1f+kPx0Au/9b7U2XC/1CBpMn/dHc3DC/1LqjwcDyE0m/o+7oxs3g0//AcOlaXN4nGNgZGBgAGI3hpVx8fw2Xxm4WRhA4LpbjQ6C/n+UhYHZHsjlYGACiQIA9CsInAB4nGNgZGBgbvjfwBDDwgACQJKRARWwAABHCgJtBAAAAAPpAAAEAAAABAAAAAAAAAAAdgDsASQAAHicY2BkYGBgYQhkYGUAASYg5gJCBob/YD4DABESAXEAeJxlj01OwzAQhV/6B6QSqqhgh+QFYgEo/RGrblhUavdddN+mTpsqiSPHrdQDcB6OwAk4AtyAO/BIJ5s2lsffvHljTwDc4Acejt8t95E9XDI7cg0XuBeuU38QbpBfhJto41W4Rf1N2MczpsJtdGF5g9e4YvaEd2EPHXwI13CNT+E69S/hBvlbuIk7/Aq30PHqwj7mXle4jUcv9sdWL5xeqeVBxaHJIpM5v4KZXu+Sha3S6pxrW8QmU4OgX0lTnWlb3VPs10PnIhVZk6oJqzpJjMqt2erQBRvn8lGvF4kehCblWGP+tsYCjnEFhSUOjDFCGGSIyujoO1Vm9K+xQ8Jee1Y9zed0WxTU/3OFAQL0z1xTurLSeTpPgT1fG1J1dCtuy56UNJFezUkSskJe1rZUQuoBNmVXjhF6XNGJPyhnSP8ACVpuyAAAAHicY2BigAAuBuyAhZGJkZmRhZGVgbGCtSojM6OUpzgjsShVNyW/NCkxj4EBAF/8B44AAAA=\") format('woff'), url(\"iconfont.ttf?t=1528847148903\") format('truetype'), url(\"iconfont.svg?t=1528847148903#iconfont\") format('svg'); /* iOS 4.1- */\n}\n.fa-custom {\n  font-family: \"iconfont\" !important;\n  font-size: inherit;\n  font-style: normal;\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n}\n.zhihu:before {\n  content: \"\\e6ba\";\n}\n.douban:before {\n  content: \"\\e638\";\n}\n"}],"Page":[{"title":"分类","type":"categories","layout":"categories","_content":"\n","source":"categories/index.md","raw":"---\ntitle: 分类\ntype: \"categories\"\nlayout: \"categories\"\n---\n\n","date":"2025-08-28T00:05:03.173Z","updated":"2025-08-28T00:05:03.173Z","path":"categories/index.html","comments":1,"_id":"cmevecvs10000hfroffakclnk","content":"","excerpt":"","more":""},{"title":"标签","type":"tags","layout":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: 标签\ntype: \"tags\"\nlayout: \"tags\"\n---\n","date":"2025-08-28T00:05:03.172Z","updated":"2025-08-28T00:05:03.172Z","path":"tags/index.html","comments":1,"_id":"cmevecvs40002hfro20c5ewu2","content":"","excerpt":"","more":""}],"Post":[{"title":"grpc实践之路:01.同步客户端的使用","date":"2025-08-26T16:00:00.000Z","_content":"## **前言：**\n\n因为最近的个人需要,想要自己多做一点实践，因此我决定 ：**开发一个带 GUI 的、用于管理和监控一个外部核心服务 (Core Service) 的跨平台桌面应用。** \n\n在我的设想中，这个应用的架构是分层的：UI 层（我选择了 Qt）负责界面展示和用户交互，而 Service 层（我将用 C++ 实现）则负责与那个外部核心服务进行通信，并处理所有复杂的后端逻辑。\n\n很自然，我决定将 UI 和 Service 设计成两个独立的进程。这样不仅能让架构更清晰、权责更分明，也能避免任何一端的崩溃影响到另一端。于是，第一个核心问题就摆在了面前：**UI 进程和 Service 进程之间，该如何通信？**\n\n## **思考：我的进程间通信（IPC）技术选型**\n\n常见的 IPC 手段有很多，比如命名管道、共享内存、套接字，或者更高层的 RESTful API。因为我之前在公司的项目中写过 IPC 相关的代码（虽然不是 gRPC），并且我设想的这个“外部核心服务”有**大量实时状态需要流式传输**给 UI，所以我很快将目光锁定在了更现代的 RPC 框架上。\n\n最终，我选择了 gRPC。理由如下：\n\n1. **流式传输 (Streaming) 是刚需：** 这是决定性因素。我需要将 Service 层的实时日志和连接状态源源不断地推送到 UI。gRPC 原生支持服务端流和双向流，这完美地解决了我的核心痛点。\n2. **跨语言的未来：** 虽然现在 UI 和 Service 都是 C++ 生态（Qt + C++），但 gRPC 的跨语言特性给了我极大的灵活性。未来，如果我想把 UI 换成其他语言实现，或者想用 Python/Go 写一些简单的测试脚本来调用我的 Service，gRPC 都能轻松应对。\n3. **性能与效率：** 基于 HTTP/2 和 Protocol Buffers，gRPC 在性能和数据压缩方面都优于传统的 REST+JSON 组合。\n4. **强类型契约：** 通过 .proto 文件定义服务，避免了手写协议和序列化的繁琐与易错。\n\n这个系列文章，就是我对自己学习和实践 gRPC 过程的笔记与复盘。我计划把如何简单地使用 gRPC 的**同步模式、流模式**，以及**如何与 Qt 框架优雅地集成**都记录下来。后续如果精力允许，可能还会去剖析一些 gRPC 的核心组件内部原理。\n\n<!-- more -->\n## **准备工作：gRPC 的安装**\n\n在开始之前，有一个非常重要的建议：**gRPC 的手动编译安装有些麻烦，强烈建议使用 vcpkg 这个包管理器来安装。**\n\nvcpkg 是微软推出的 C++ 包管理器，可以极大地简化第三方库的安装和集成过程。你只需要执行简单的命令，它就会自动帮你下载源码、处理依赖、编译并安装好 gRPC 及其所需的 protobuf, openssl, zlib 等所有依赖项。\n\n```bash\n# 克隆 vcpkg  \ngit clone https://github.com/microsoft/vcpkg.git  \ncd vcpkg\n\n# 运行引导脚本  \n./bootstrap-vcpkg.sh # Linux / macOS  \n# 或者 .bootstrap-vcpkg.bat (Windows)\n\n# 安装 gRPC  \n./vcpkg install grpc\n```\n\n安装完成后，你可以通过 CMake 的 toolchain 文件非常方便地在你的项目中使用它。**不要自己手动去编译，相信我，这会为你省下大量的时间和精力，让你能专注于 gRPC 本身。**\n\n## **“Hello, gRPC!”：核心使用流程**\n\n下面，我们来走一遍 gRPC 的核心使用流程，实现一个最简单的客户端-服务端通信。\n\n### **第一步：定义“代码合同” (.proto 文件)**\n\ngRPC 的一切都始于 .proto 文件，它使用 Protocol Buffers 语法来定义服务接口和消息结构。\n\n对于我的项目，我先定义一个最简单的服务 Controller，它只有一个“点对点”的 RPC 调用，用于获取核心服务的版本号。\n\n**controller.proto**\n```c++\n// 指定使用 proto3 语法\nsyntax = \"proto3\";\n\n// 定义包名，避免命名冲突\npackage controller;\n\n// GetVersion 服务的请求消息\nmessage GetVersionRequest {\n  // 消息字段，这里为空，因为获取版本不需要参数\n}\n\n// GetVersion 服务的响应消息\nmessage GetVersionResponse {\n  string version = 1; // 1 是字段的唯一编号，不是值\n}\n\n// 定义我们的核心服务\nservice Controller {\n  // 定义一个 Unary RPC (一元 RPC，即点对点调用)\n  // 方法名叫 GetVersion，接收 GetVersionRequest，返回 GetVersionResponse\n  rpc GetVersion(GetVersionRequest) returns (GetVersionResponse);\n}\n```\n\n### **第二步：生成代码与文件解析**\n\n定义好 .proto 文件后，我们使用 protoc 编译器和 gRPC C++ 插件来生成 C++ 代码。\n\n# 假设你的 .proto 文件在 protos 目录下，输出到当前目录  \nprotoc -I=./protos --cpp_out=./grpc_gen --grpc_out=./grpc_gen --plugin=protoc-gen-grpc=`which grpc_cpp_plugin` ./protos/controller.proto\n\n当你使用vcpkg安装grpc的时候，你会将 `protos`工具和 `protoc-gen-grpc`工具一并安装，安装目录一般在 `/home/username/.vcpkg/vcpkg/installed/x64-linux/tools` 的 `protobuf`目录和 `grpc`目录下\n\n\n执行后，会生成四个关键文件：\n\n* **controller.pb.h / controller.pb.cc：** 这两个文件是 **Protocol Buffers** 生成的。它们包含了你在 .proto 中定义的 message（如 GetVersionRequest）所对应的 C++ 类，以及这些类的序列化和反序列化方法。**它们只负责数据的载体。**\n* **controller.grpc.pb.h / controller.grpc.pb.cc：** 这两个文件是 **gRPC 插件**生成的。它们包含了你在 .proto 中定义的 service（如 Controller）相关的 C++ 代码。这里面有：\n  * 一个用于**服务端实现**的抽象基类 (Controller::Service)。\n  * 一个用于**客户端调用**的桩代码类 (Controller::Stub)。\n\n理解这四个文件的分工非常重要，它体现了 gRPC 的分层设计：数据层 (Protobuf) 和通信层 (gRPC) 是分离的。\n\n### **第三步：编写服务端**\n\n我们需要创建一个类，继承自生成的 Controller::Service，并重写 .proto 中定义的 GetVersion 虚函数。\n\n**server.cc**\n```c++\n#include <iostream>\n#include <memory>\n#include <string>\n\n#include <grpcpp/grpcpp.h>\n#include \"grpc_gen/controller.grpc.pb.h\" // 引入 gRPC 生成的头文件\n\n// 继承自生成的服务基类\nclass ControllerServiceImpl final : public controller::Controller::Service\n{\n    // 重写 GetVersion 方法\n    grpc::Status GetVersion(grpc::ServerContext *context,\n                            const controller::GetVersionRequest *request,\n                            controller::GetVersionResponse *response) override\n    {\n        std::string version_str = \"Core Service v1.0.0\";\n        std::cout << \"Received GetVersion request. Responding with: \" << version_str << std::endl;\n\n        response->set_version(version_str); // 设置响应消息\n        return grpc::Status::OK; // 返回 OK 状态\n    }\n};\n\nvoid RunServer()\n{\n    std::string server_address(\"0.0.0.0:50051\");\n    ControllerServiceImpl service;\n\n    grpc::ServerBuilder builder;\n    builder.AddListeningPort(server_address, grpc::InsecureServerCredentials());\n    builder.RegisterService(&service); // 注册我们的服务实现\n\n    std::unique_ptr<grpc::Server> server(builder.BuildAndStart()); // 构建并启动服务器\n    std::cout << \"Server listening on \" << server_address << std::endl;\n\n    server->Wait(); // 阻塞等待服务器关闭\n}\n\nint main(int argc, char **argv)\n{\n    RunServer();\n    return 0;\n}\n\n```\n\n### **第四步：编写客户端**\n\n客户端通过生成的 Controller::Stub 来调用远程方法，这个过程被封装得就像调用本地函数一样简单。\n\n**client.cc**\n```c++\n#include <iostream>\n#include <memory>\n#include <string>\n\n#include <grpcpp/grpcpp.h>\n#include \"grpc_gen/controller.grpc.pb.h\" // 同样引入\n\nclass ControllerClient\n{\npublic:\n    ControllerClient(std::shared_ptr<grpc::Channel> channel)\n        : stub_(controller::Controller::NewStub(channel))\n    {\n    } // 通过 Channel 创建 Stub\n\n    std::string GetVersion()\n    {\n        controller::GetVersionRequest request;\n        controller::GetVersionResponse response;\n        grpc::ClientContext context;\n\n        // 发起 RPC 调用，就像调用一个本地方法\n        grpc::Status status = stub_->GetVersion(&context, request, &response);\n\n        if (status.ok())\n        {\n            return response.version();\n        }\n        else\n        {\n            std::cout << status.error_code() << \": \" << status.error_message() << std::endl;\n            return \"RPC failed\";\n        }\n    }\n\nprivate:\n    std::unique_ptr<controller::Controller::Stub> stub_;\n};\n\nint main(int argc, char **argv)\n{\n    std::string target_str = \"localhost:50051\";\n    // 创建一个到服务端的 Channel\n    ControllerClient client(grpc::CreateChannel(target_str, grpc::InsecureChannelCredentials()));\n\n    std::string version = client.GetVersion();\n    std::cout << \"Controller version received: \" << version << std::endl;\n\n    return 0;\n}\n```\n\n### **第五步：运行！**\n\n先启动服务端，再启动客户端，你就能看到客户端成功获取到了服务端返回的版本号信息。一个完整的 RPC 调用就这么简单地完成了！\n\n下面就是这个服务的简单调用时序图\n![version_call](/images/version_call.png)\n\n\n## **总结与展望**\n\n本文作为 gRPC 系列的开篇，我们从一个真实的个人项目需求出发，探讨了为什么选择 gRPC 作为我们的 IPC 方案。接着，我们通过定义一个简单的 .proto 文件和实现一个完整的“Hello, gRPC!”示例，迈出了实践的第一步。\n\n我们看到，gRPC 借助 Protocol Buffers 和代码生成，极大地简化了网络通信应用的开发，让我们能更专注于业务逻辑本身。\n\n当然，我们目前只接触了最简单的 Unary RPC 和同步调用。这只是冰山一角。在接下来的文章中，我们将深入探讨：\n\n* **如何利用 gRPC 强大的流式通信能力，实现实时数据推送？**\n* **如何在 GUI 应用（如 Qt）中优雅地使用 gRPC，避免界面卡死？**\n* **服务端和客户端的核心组件是如何工作的？**\n\n**最后，有一个强烈的建议：** 本系列文章是我个人的学习笔记和思考，而 gRPC 的官方文档和 GitHub 仓库中的例子是最好的、最权威的学习资料。**官方文档和示例远比我写得好，强烈建议大家去阅读！** 希望我的文章能作为一个有益的补充和不同的视角。","source":"_posts/grpc/grpc实践之路:01.同步客户端的使用.md","raw":"---\ntitle: \"grpc实践之路:01.同步客户端的使用\"\ndate: 2025-08-27\ncategories: \n  - 动手实践-三方库\n  - grpc\ntags:\n  - C++\n  - grpc\n  - 进程间通信\n---\n## **前言：**\n\n因为最近的个人需要,想要自己多做一点实践，因此我决定 ：**开发一个带 GUI 的、用于管理和监控一个外部核心服务 (Core Service) 的跨平台桌面应用。** \n\n在我的设想中，这个应用的架构是分层的：UI 层（我选择了 Qt）负责界面展示和用户交互，而 Service 层（我将用 C++ 实现）则负责与那个外部核心服务进行通信，并处理所有复杂的后端逻辑。\n\n很自然，我决定将 UI 和 Service 设计成两个独立的进程。这样不仅能让架构更清晰、权责更分明，也能避免任何一端的崩溃影响到另一端。于是，第一个核心问题就摆在了面前：**UI 进程和 Service 进程之间，该如何通信？**\n\n## **思考：我的进程间通信（IPC）技术选型**\n\n常见的 IPC 手段有很多，比如命名管道、共享内存、套接字，或者更高层的 RESTful API。因为我之前在公司的项目中写过 IPC 相关的代码（虽然不是 gRPC），并且我设想的这个“外部核心服务”有**大量实时状态需要流式传输**给 UI，所以我很快将目光锁定在了更现代的 RPC 框架上。\n\n最终，我选择了 gRPC。理由如下：\n\n1. **流式传输 (Streaming) 是刚需：** 这是决定性因素。我需要将 Service 层的实时日志和连接状态源源不断地推送到 UI。gRPC 原生支持服务端流和双向流，这完美地解决了我的核心痛点。\n2. **跨语言的未来：** 虽然现在 UI 和 Service 都是 C++ 生态（Qt + C++），但 gRPC 的跨语言特性给了我极大的灵活性。未来，如果我想把 UI 换成其他语言实现，或者想用 Python/Go 写一些简单的测试脚本来调用我的 Service，gRPC 都能轻松应对。\n3. **性能与效率：** 基于 HTTP/2 和 Protocol Buffers，gRPC 在性能和数据压缩方面都优于传统的 REST+JSON 组合。\n4. **强类型契约：** 通过 .proto 文件定义服务，避免了手写协议和序列化的繁琐与易错。\n\n这个系列文章，就是我对自己学习和实践 gRPC 过程的笔记与复盘。我计划把如何简单地使用 gRPC 的**同步模式、流模式**，以及**如何与 Qt 框架优雅地集成**都记录下来。后续如果精力允许，可能还会去剖析一些 gRPC 的核心组件内部原理。\n\n<!-- more -->\n## **准备工作：gRPC 的安装**\n\n在开始之前，有一个非常重要的建议：**gRPC 的手动编译安装有些麻烦，强烈建议使用 vcpkg 这个包管理器来安装。**\n\nvcpkg 是微软推出的 C++ 包管理器，可以极大地简化第三方库的安装和集成过程。你只需要执行简单的命令，它就会自动帮你下载源码、处理依赖、编译并安装好 gRPC 及其所需的 protobuf, openssl, zlib 等所有依赖项。\n\n```bash\n# 克隆 vcpkg  \ngit clone https://github.com/microsoft/vcpkg.git  \ncd vcpkg\n\n# 运行引导脚本  \n./bootstrap-vcpkg.sh # Linux / macOS  \n# 或者 .bootstrap-vcpkg.bat (Windows)\n\n# 安装 gRPC  \n./vcpkg install grpc\n```\n\n安装完成后，你可以通过 CMake 的 toolchain 文件非常方便地在你的项目中使用它。**不要自己手动去编译，相信我，这会为你省下大量的时间和精力，让你能专注于 gRPC 本身。**\n\n## **“Hello, gRPC!”：核心使用流程**\n\n下面，我们来走一遍 gRPC 的核心使用流程，实现一个最简单的客户端-服务端通信。\n\n### **第一步：定义“代码合同” (.proto 文件)**\n\ngRPC 的一切都始于 .proto 文件，它使用 Protocol Buffers 语法来定义服务接口和消息结构。\n\n对于我的项目，我先定义一个最简单的服务 Controller，它只有一个“点对点”的 RPC 调用，用于获取核心服务的版本号。\n\n**controller.proto**\n```c++\n// 指定使用 proto3 语法\nsyntax = \"proto3\";\n\n// 定义包名，避免命名冲突\npackage controller;\n\n// GetVersion 服务的请求消息\nmessage GetVersionRequest {\n  // 消息字段，这里为空，因为获取版本不需要参数\n}\n\n// GetVersion 服务的响应消息\nmessage GetVersionResponse {\n  string version = 1; // 1 是字段的唯一编号，不是值\n}\n\n// 定义我们的核心服务\nservice Controller {\n  // 定义一个 Unary RPC (一元 RPC，即点对点调用)\n  // 方法名叫 GetVersion，接收 GetVersionRequest，返回 GetVersionResponse\n  rpc GetVersion(GetVersionRequest) returns (GetVersionResponse);\n}\n```\n\n### **第二步：生成代码与文件解析**\n\n定义好 .proto 文件后，我们使用 protoc 编译器和 gRPC C++ 插件来生成 C++ 代码。\n\n# 假设你的 .proto 文件在 protos 目录下，输出到当前目录  \nprotoc -I=./protos --cpp_out=./grpc_gen --grpc_out=./grpc_gen --plugin=protoc-gen-grpc=`which grpc_cpp_plugin` ./protos/controller.proto\n\n当你使用vcpkg安装grpc的时候，你会将 `protos`工具和 `protoc-gen-grpc`工具一并安装，安装目录一般在 `/home/username/.vcpkg/vcpkg/installed/x64-linux/tools` 的 `protobuf`目录和 `grpc`目录下\n\n\n执行后，会生成四个关键文件：\n\n* **controller.pb.h / controller.pb.cc：** 这两个文件是 **Protocol Buffers** 生成的。它们包含了你在 .proto 中定义的 message（如 GetVersionRequest）所对应的 C++ 类，以及这些类的序列化和反序列化方法。**它们只负责数据的载体。**\n* **controller.grpc.pb.h / controller.grpc.pb.cc：** 这两个文件是 **gRPC 插件**生成的。它们包含了你在 .proto 中定义的 service（如 Controller）相关的 C++ 代码。这里面有：\n  * 一个用于**服务端实现**的抽象基类 (Controller::Service)。\n  * 一个用于**客户端调用**的桩代码类 (Controller::Stub)。\n\n理解这四个文件的分工非常重要，它体现了 gRPC 的分层设计：数据层 (Protobuf) 和通信层 (gRPC) 是分离的。\n\n### **第三步：编写服务端**\n\n我们需要创建一个类，继承自生成的 Controller::Service，并重写 .proto 中定义的 GetVersion 虚函数。\n\n**server.cc**\n```c++\n#include <iostream>\n#include <memory>\n#include <string>\n\n#include <grpcpp/grpcpp.h>\n#include \"grpc_gen/controller.grpc.pb.h\" // 引入 gRPC 生成的头文件\n\n// 继承自生成的服务基类\nclass ControllerServiceImpl final : public controller::Controller::Service\n{\n    // 重写 GetVersion 方法\n    grpc::Status GetVersion(grpc::ServerContext *context,\n                            const controller::GetVersionRequest *request,\n                            controller::GetVersionResponse *response) override\n    {\n        std::string version_str = \"Core Service v1.0.0\";\n        std::cout << \"Received GetVersion request. Responding with: \" << version_str << std::endl;\n\n        response->set_version(version_str); // 设置响应消息\n        return grpc::Status::OK; // 返回 OK 状态\n    }\n};\n\nvoid RunServer()\n{\n    std::string server_address(\"0.0.0.0:50051\");\n    ControllerServiceImpl service;\n\n    grpc::ServerBuilder builder;\n    builder.AddListeningPort(server_address, grpc::InsecureServerCredentials());\n    builder.RegisterService(&service); // 注册我们的服务实现\n\n    std::unique_ptr<grpc::Server> server(builder.BuildAndStart()); // 构建并启动服务器\n    std::cout << \"Server listening on \" << server_address << std::endl;\n\n    server->Wait(); // 阻塞等待服务器关闭\n}\n\nint main(int argc, char **argv)\n{\n    RunServer();\n    return 0;\n}\n\n```\n\n### **第四步：编写客户端**\n\n客户端通过生成的 Controller::Stub 来调用远程方法，这个过程被封装得就像调用本地函数一样简单。\n\n**client.cc**\n```c++\n#include <iostream>\n#include <memory>\n#include <string>\n\n#include <grpcpp/grpcpp.h>\n#include \"grpc_gen/controller.grpc.pb.h\" // 同样引入\n\nclass ControllerClient\n{\npublic:\n    ControllerClient(std::shared_ptr<grpc::Channel> channel)\n        : stub_(controller::Controller::NewStub(channel))\n    {\n    } // 通过 Channel 创建 Stub\n\n    std::string GetVersion()\n    {\n        controller::GetVersionRequest request;\n        controller::GetVersionResponse response;\n        grpc::ClientContext context;\n\n        // 发起 RPC 调用，就像调用一个本地方法\n        grpc::Status status = stub_->GetVersion(&context, request, &response);\n\n        if (status.ok())\n        {\n            return response.version();\n        }\n        else\n        {\n            std::cout << status.error_code() << \": \" << status.error_message() << std::endl;\n            return \"RPC failed\";\n        }\n    }\n\nprivate:\n    std::unique_ptr<controller::Controller::Stub> stub_;\n};\n\nint main(int argc, char **argv)\n{\n    std::string target_str = \"localhost:50051\";\n    // 创建一个到服务端的 Channel\n    ControllerClient client(grpc::CreateChannel(target_str, grpc::InsecureChannelCredentials()));\n\n    std::string version = client.GetVersion();\n    std::cout << \"Controller version received: \" << version << std::endl;\n\n    return 0;\n}\n```\n\n### **第五步：运行！**\n\n先启动服务端，再启动客户端，你就能看到客户端成功获取到了服务端返回的版本号信息。一个完整的 RPC 调用就这么简单地完成了！\n\n下面就是这个服务的简单调用时序图\n![version_call](/images/version_call.png)\n\n\n## **总结与展望**\n\n本文作为 gRPC 系列的开篇，我们从一个真实的个人项目需求出发，探讨了为什么选择 gRPC 作为我们的 IPC 方案。接着，我们通过定义一个简单的 .proto 文件和实现一个完整的“Hello, gRPC!”示例，迈出了实践的第一步。\n\n我们看到，gRPC 借助 Protocol Buffers 和代码生成，极大地简化了网络通信应用的开发，让我们能更专注于业务逻辑本身。\n\n当然，我们目前只接触了最简单的 Unary RPC 和同步调用。这只是冰山一角。在接下来的文章中，我们将深入探讨：\n\n* **如何利用 gRPC 强大的流式通信能力，实现实时数据推送？**\n* **如何在 GUI 应用（如 Qt）中优雅地使用 gRPC，避免界面卡死？**\n* **服务端和客户端的核心组件是如何工作的？**\n\n**最后，有一个强烈的建议：** 本系列文章是我个人的学习笔记和思考，而 gRPC 的官方文档和 GitHub 仓库中的例子是最好的、最权威的学习资料。**官方文档和示例远比我写得好，强烈建议大家去阅读！** 希望我的文章能作为一个有益的补充和不同的视角。","slug":"grpc/grpc实践之路:01.同步客户端的使用","published":1,"updated":"2025-08-28T12:43:21.397Z","comments":1,"layout":"post","photos":[],"_id":"cmevecvs30001hfro4b3y1iyg","content":"<h2 id=\"前言：\"><a href=\"#前言：\" class=\"headerlink\" title=\"前言：\"></a><strong>前言：</strong></h2><p>因为最近的个人需要,想要自己多做一点实践，因此我决定 ：<strong>开发一个带 GUI 的、用于管理和监控一个外部核心服务 (Core Service) 的跨平台桌面应用。</strong> </p>\n<p>在我的设想中，这个应用的架构是分层的：UI 层（我选择了 Qt）负责界面展示和用户交互，而 Service 层（我将用 C++ 实现）则负责与那个外部核心服务进行通信，并处理所有复杂的后端逻辑。</p>\n<p>很自然，我决定将 UI 和 Service 设计成两个独立的进程。这样不仅能让架构更清晰、权责更分明，也能避免任何一端的崩溃影响到另一端。于是，第一个核心问题就摆在了面前：<strong>UI 进程和 Service 进程之间，该如何通信？</strong></p>\n<h2 id=\"思考：我的进程间通信（IPC）技术选型\"><a href=\"#思考：我的进程间通信（IPC）技术选型\" class=\"headerlink\" title=\"思考：我的进程间通信（IPC）技术选型\"></a><strong>思考：我的进程间通信（IPC）技术选型</strong></h2><p>常见的 IPC 手段有很多，比如命名管道、共享内存、套接字，或者更高层的 RESTful API。因为我之前在公司的项目中写过 IPC 相关的代码（虽然不是 gRPC），并且我设想的这个“外部核心服务”有<strong>大量实时状态需要流式传输</strong>给 UI，所以我很快将目光锁定在了更现代的 RPC 框架上。</p>\n<p>最终，我选择了 gRPC。理由如下：</p>\n<ol>\n<li><strong>流式传输 (Streaming) 是刚需：</strong> 这是决定性因素。我需要将 Service 层的实时日志和连接状态源源不断地推送到 UI。gRPC 原生支持服务端流和双向流，这完美地解决了我的核心痛点。</li>\n<li><strong>跨语言的未来：</strong> 虽然现在 UI 和 Service 都是 C++ 生态（Qt + C++），但 gRPC 的跨语言特性给了我极大的灵活性。未来，如果我想把 UI 换成其他语言实现，或者想用 Python&#x2F;Go 写一些简单的测试脚本来调用我的 Service，gRPC 都能轻松应对。</li>\n<li><strong>性能与效率：</strong> 基于 HTTP&#x2F;2 和 Protocol Buffers，gRPC 在性能和数据压缩方面都优于传统的 REST+JSON 组合。</li>\n<li><strong>强类型契约：</strong> 通过 .proto 文件定义服务，避免了手写协议和序列化的繁琐与易错。</li>\n</ol>\n<p>这个系列文章，就是我对自己学习和实践 gRPC 过程的笔记与复盘。我计划把如何简单地使用 gRPC 的<strong>同步模式、流模式</strong>，以及<strong>如何与 Qt 框架优雅地集成</strong>都记录下来。后续如果精力允许，可能还会去剖析一些 gRPC 的核心组件内部原理。</p>\n<span id=\"more\"></span>\n<h2 id=\"准备工作：gRPC-的安装\"><a href=\"#准备工作：gRPC-的安装\" class=\"headerlink\" title=\"准备工作：gRPC 的安装\"></a><strong>准备工作：gRPC 的安装</strong></h2><p>在开始之前，有一个非常重要的建议：<strong>gRPC 的手动编译安装有些麻烦，强烈建议使用 vcpkg 这个包管理器来安装。</strong></p>\n<p>vcpkg 是微软推出的 C++ 包管理器，可以极大地简化第三方库的安装和集成过程。你只需要执行简单的命令，它就会自动帮你下载源码、处理依赖、编译并安装好 gRPC 及其所需的 protobuf, openssl, zlib 等所有依赖项。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 克隆 vcpkg  </span></span><br><span class=\"line\">git <span class=\"built_in\">clone</span> https://github.com/microsoft/vcpkg.git  </span><br><span class=\"line\"><span class=\"built_in\">cd</span> vcpkg</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 运行引导脚本  </span></span><br><span class=\"line\">./bootstrap-vcpkg.sh <span class=\"comment\"># Linux / macOS  </span></span><br><span class=\"line\"><span class=\"comment\"># 或者 .bootstrap-vcpkg.bat (Windows)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 安装 gRPC  </span></span><br><span class=\"line\">./vcpkg install grpc</span><br></pre></td></tr></table></figure>\n\n<p>安装完成后，你可以通过 CMake 的 toolchain 文件非常方便地在你的项目中使用它。<strong>不要自己手动去编译，相信我，这会为你省下大量的时间和精力，让你能专注于 gRPC 本身。</strong></p>\n<h2 id=\"“Hello-gRPC-”：核心使用流程\"><a href=\"#“Hello-gRPC-”：核心使用流程\" class=\"headerlink\" title=\"“Hello, gRPC!”：核心使用流程\"></a><strong>“Hello, gRPC!”：核心使用流程</strong></h2><p>下面，我们来走一遍 gRPC 的核心使用流程，实现一个最简单的客户端-服务端通信。</p>\n<h3 id=\"第一步：定义“代码合同”-proto-文件\"><a href=\"#第一步：定义“代码合同”-proto-文件\" class=\"headerlink\" title=\"第一步：定义“代码合同” (.proto 文件)\"></a><strong>第一步：定义“代码合同” (.proto 文件)</strong></h3><p>gRPC 的一切都始于 .proto 文件，它使用 Protocol Buffers 语法来定义服务接口和消息结构。</p>\n<p>对于我的项目，我先定义一个最简单的服务 Controller，它只有一个“点对点”的 RPC 调用，用于获取核心服务的版本号。</p>\n<p><strong>controller.proto</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 指定使用 proto3 语法</span></span><br><span class=\"line\">syntax = <span class=\"string\">&quot;proto3&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 定义包名，避免命名冲突</span></span><br><span class=\"line\">package controller;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// GetVersion 服务的请求消息</span></span><br><span class=\"line\">message GetVersionRequest &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 消息字段，这里为空，因为获取版本不需要参数</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// GetVersion 服务的响应消息</span></span><br><span class=\"line\">message GetVersionResponse &#123;</span><br><span class=\"line\">  string version = <span class=\"number\">1</span>; <span class=\"comment\">// 1 是字段的唯一编号，不是值</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 定义我们的核心服务</span></span><br><span class=\"line\">service Controller &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 定义一个 Unary RPC (一元 RPC，即点对点调用)</span></span><br><span class=\"line\">  <span class=\"comment\">// 方法名叫 GetVersion，接收 GetVersionRequest，返回 GetVersionResponse</span></span><br><span class=\"line\">  <span class=\"function\">rpc <span class=\"title\">GetVersion</span><span class=\"params\">(GetVersionRequest)</span> <span class=\"title\">returns</span> <span class=\"params\">(GetVersionResponse)</span></span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"第二步：生成代码与文件解析\"><a href=\"#第二步：生成代码与文件解析\" class=\"headerlink\" title=\"第二步：生成代码与文件解析\"></a><strong>第二步：生成代码与文件解析</strong></h3><p>定义好 .proto 文件后，我们使用 protoc 编译器和 gRPC C++ 插件来生成 C++ 代码。</p>\n<h1 id=\"假设你的-proto-文件在-protos-目录下，输出到当前目录\"><a href=\"#假设你的-proto-文件在-protos-目录下，输出到当前目录\" class=\"headerlink\" title=\"假设你的 .proto 文件在 protos 目录下，输出到当前目录\"></a>假设你的 .proto 文件在 protos 目录下，输出到当前目录</h1><p>protoc -I&#x3D;.&#x2F;protos –cpp_out&#x3D;.&#x2F;grpc_gen –grpc_out&#x3D;.&#x2F;grpc_gen –plugin&#x3D;protoc-gen-grpc&#x3D;<code>which grpc_cpp_plugin</code> .&#x2F;protos&#x2F;controller.proto</p>\n<p>当你使用vcpkg安装grpc的时候，你会将 <code>protos</code>工具和 <code>protoc-gen-grpc</code>工具一并安装，安装目录一般在 <code>/home/username/.vcpkg/vcpkg/installed/x64-linux/tools</code> 的 <code>protobuf</code>目录和 <code>grpc</code>目录下</p>\n<p>执行后，会生成四个关键文件：</p>\n<ul>\n<li><strong>controller.pb.h &#x2F; controller.pb.cc：</strong> 这两个文件是 <strong>Protocol Buffers</strong> 生成的。它们包含了你在 .proto 中定义的 message（如 GetVersionRequest）所对应的 C++ 类，以及这些类的序列化和反序列化方法。<strong>它们只负责数据的载体。</strong></li>\n<li><strong>controller.grpc.pb.h &#x2F; controller.grpc.pb.cc：</strong> 这两个文件是 <strong>gRPC 插件</strong>生成的。它们包含了你在 .proto 中定义的 service（如 Controller）相关的 C++ 代码。这里面有：<ul>\n<li>一个用于<strong>服务端实现</strong>的抽象基类 (Controller::Service)。</li>\n<li>一个用于<strong>客户端调用</strong>的桩代码类 (Controller::Stub)。</li>\n</ul>\n</li>\n</ul>\n<p>理解这四个文件的分工非常重要，它体现了 gRPC 的分层设计：数据层 (Protobuf) 和通信层 (gRPC) 是分离的。</p>\n<h3 id=\"第三步：编写服务端\"><a href=\"#第三步：编写服务端\" class=\"headerlink\" title=\"第三步：编写服务端\"></a><strong>第三步：编写服务端</strong></h3><p>我们需要创建一个类，继承自生成的 Controller::Service，并重写 .proto 中定义的 GetVersion 虚函数。</p>\n<p><strong>server.cc</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;memory&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;string&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;grpcpp/grpcpp.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;grpc_gen/controller.grpc.pb.h&quot;</span> <span class=\"comment\">// 引入 gRPC 生成的头文件</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 继承自生成的服务基类</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">ControllerServiceImpl</span> <span class=\"keyword\">final</span> : <span class=\"keyword\">public</span> controller::Controller::Service</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 重写 GetVersion 方法</span></span><br><span class=\"line\">    <span class=\"function\">grpc::Status <span class=\"title\">GetVersion</span><span class=\"params\">(grpc::ServerContext *context,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">                            <span class=\"type\">const</span> controller::GetVersionRequest *request,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">                            controller::GetVersionResponse *response)</span> <span class=\"keyword\">override</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        std::string version_str = <span class=\"string\">&quot;Core Service v1.0.0&quot;</span>;</span><br><span class=\"line\">        std::cout &lt;&lt; <span class=\"string\">&quot;Received GetVersion request. Responding with: &quot;</span> &lt;&lt; version_str &lt;&lt; std::endl;</span><br><span class=\"line\"></span><br><span class=\"line\">        response-&gt;<span class=\"built_in\">set_version</span>(version_str); <span class=\"comment\">// 设置响应消息</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> grpc::Status::OK; <span class=\"comment\">// 返回 OK 状态</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">RunServer</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"function\">std::string <span class=\"title\">server_address</span><span class=\"params\">(<span class=\"string\">&quot;0.0.0.0:50051&quot;</span>)</span></span>;</span><br><span class=\"line\">    ControllerServiceImpl service;</span><br><span class=\"line\"></span><br><span class=\"line\">    grpc::ServerBuilder builder;</span><br><span class=\"line\">    builder.<span class=\"built_in\">AddListeningPort</span>(server_address, grpc::<span class=\"built_in\">InsecureServerCredentials</span>());</span><br><span class=\"line\">    builder.<span class=\"built_in\">RegisterService</span>(&amp;service); <span class=\"comment\">// 注册我们的服务实现</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\">std::unique_ptr&lt;grpc::Server&gt; <span class=\"title\">server</span><span class=\"params\">(builder.BuildAndStart())</span></span>; <span class=\"comment\">// 构建并启动服务器</span></span><br><span class=\"line\">    std::cout &lt;&lt; <span class=\"string\">&quot;Server listening on &quot;</span> &lt;&lt; server_address &lt;&lt; std::endl;</span><br><span class=\"line\"></span><br><span class=\"line\">    server-&gt;<span class=\"built_in\">Wait</span>(); <span class=\"comment\">// 阻塞等待服务器关闭</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"type\">int</span> argc, <span class=\"type\">char</span> **argv)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">RunServer</span>();</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"第四步：编写客户端\"><a href=\"#第四步：编写客户端\" class=\"headerlink\" title=\"第四步：编写客户端\"></a><strong>第四步：编写客户端</strong></h3><p>客户端通过生成的 Controller::Stub 来调用远程方法，这个过程被封装得就像调用本地函数一样简单。</p>\n<p><strong>client.cc</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;memory&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;string&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;grpcpp/grpcpp.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;grpc_gen/controller.grpc.pb.h&quot;</span> <span class=\"comment\">// 同样引入</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">ControllerClient</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"built_in\">ControllerClient</span>(std::shared_ptr&lt;grpc::Channel&gt; channel)</span><br><span class=\"line\">        : <span class=\"built_in\">stub_</span>(controller::Controller::<span class=\"built_in\">NewStub</span>(channel))</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">    &#125; <span class=\"comment\">// 通过 Channel 创建 Stub</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\">std::string <span class=\"title\">GetVersion</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        controller::GetVersionRequest request;</span><br><span class=\"line\">        controller::GetVersionResponse response;</span><br><span class=\"line\">        grpc::ClientContext context;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 发起 RPC 调用，就像调用一个本地方法</span></span><br><span class=\"line\">        grpc::Status status = stub_-&gt;<span class=\"built_in\">GetVersion</span>(&amp;context, request, &amp;response);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (status.<span class=\"built_in\">ok</span>())</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> response.<span class=\"built_in\">version</span>();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            std::cout &lt;&lt; status.<span class=\"built_in\">error_code</span>() &lt;&lt; <span class=\"string\">&quot;: &quot;</span> &lt;&lt; status.<span class=\"built_in\">error_message</span>() &lt;&lt; std::endl;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"string\">&quot;RPC failed&quot;</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">    std::unique_ptr&lt;controller::Controller::Stub&gt; stub_;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"type\">int</span> argc, <span class=\"type\">char</span> **argv)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    std::string target_str = <span class=\"string\">&quot;localhost:50051&quot;</span>;</span><br><span class=\"line\">    <span class=\"comment\">// 创建一个到服务端的 Channel</span></span><br><span class=\"line\">    <span class=\"function\">ControllerClient <span class=\"title\">client</span><span class=\"params\">(grpc::CreateChannel(target_str, grpc::InsecureChannelCredentials()))</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    std::string version = client.<span class=\"built_in\">GetVersion</span>();</span><br><span class=\"line\">    std::cout &lt;&lt; <span class=\"string\">&quot;Controller version received: &quot;</span> &lt;&lt; version &lt;&lt; std::endl;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"第五步：运行！\"><a href=\"#第五步：运行！\" class=\"headerlink\" title=\"第五步：运行！\"></a><strong>第五步：运行！</strong></h3><p>先启动服务端，再启动客户端，你就能看到客户端成功获取到了服务端返回的版本号信息。一个完整的 RPC 调用就这么简单地完成了！</p>\n<p>下面就是这个服务的简单调用时序图<br><img src=\"/images/version_call.png\" alt=\"version_call\"></p>\n<h2 id=\"总结与展望\"><a href=\"#总结与展望\" class=\"headerlink\" title=\"总结与展望\"></a><strong>总结与展望</strong></h2><p>本文作为 gRPC 系列的开篇，我们从一个真实的个人项目需求出发，探讨了为什么选择 gRPC 作为我们的 IPC 方案。接着，我们通过定义一个简单的 .proto 文件和实现一个完整的“Hello, gRPC!”示例，迈出了实践的第一步。</p>\n<p>我们看到，gRPC 借助 Protocol Buffers 和代码生成，极大地简化了网络通信应用的开发，让我们能更专注于业务逻辑本身。</p>\n<p>当然，我们目前只接触了最简单的 Unary RPC 和同步调用。这只是冰山一角。在接下来的文章中，我们将深入探讨：</p>\n<ul>\n<li><strong>如何利用 gRPC 强大的流式通信能力，实现实时数据推送？</strong></li>\n<li><strong>如何在 GUI 应用（如 Qt）中优雅地使用 gRPC，避免界面卡死？</strong></li>\n<li><strong>服务端和客户端的核心组件是如何工作的？</strong></li>\n</ul>\n<p><strong>最后，有一个强烈的建议：</strong> 本系列文章是我个人的学习笔记和思考，而 gRPC 的官方文档和 GitHub 仓库中的例子是最好的、最权威的学习资料。<strong>官方文档和示例远比我写得好，强烈建议大家去阅读！</strong> 希望我的文章能作为一个有益的补充和不同的视角。</p>\n","excerpt":"<h2 id=\"前言：\"><a href=\"#前言：\" class=\"headerlink\" title=\"前言：\"></a><strong>前言：</strong></h2><p>因为最近的个人需要,想要自己多做一点实践，因此我决定 ：<strong>开发一个带 GUI 的、用于管理和监控一个外部核心服务 (Core Service) 的跨平台桌面应用。</strong> </p>\n<p>在我的设想中，这个应用的架构是分层的：UI 层（我选择了 Qt）负责界面展示和用户交互，而 Service 层（我将用 C++ 实现）则负责与那个外部核心服务进行通信，并处理所有复杂的后端逻辑。</p>\n<p>很自然，我决定将 UI 和 Service 设计成两个独立的进程。这样不仅能让架构更清晰、权责更分明，也能避免任何一端的崩溃影响到另一端。于是，第一个核心问题就摆在了面前：<strong>UI 进程和 Service 进程之间，该如何通信？</strong></p>\n<h2 id=\"思考：我的进程间通信（IPC）技术选型\"><a href=\"#思考：我的进程间通信（IPC）技术选型\" class=\"headerlink\" title=\"思考：我的进程间通信（IPC）技术选型\"></a><strong>思考：我的进程间通信（IPC）技术选型</strong></h2><p>常见的 IPC 手段有很多，比如命名管道、共享内存、套接字，或者更高层的 RESTful API。因为我之前在公司的项目中写过 IPC 相关的代码（虽然不是 gRPC），并且我设想的这个“外部核心服务”有<strong>大量实时状态需要流式传输</strong>给 UI，所以我很快将目光锁定在了更现代的 RPC 框架上。</p>\n<p>最终，我选择了 gRPC。理由如下：</p>\n<ol>\n<li><strong>流式传输 (Streaming) 是刚需：</strong> 这是决定性因素。我需要将 Service 层的实时日志和连接状态源源不断地推送到 UI。gRPC 原生支持服务端流和双向流，这完美地解决了我的核心痛点。</li>\n<li><strong>跨语言的未来：</strong> 虽然现在 UI 和 Service 都是 C++ 生态（Qt + C++），但 gRPC 的跨语言特性给了我极大的灵活性。未来，如果我想把 UI 换成其他语言实现，或者想用 Python&#x2F;Go 写一些简单的测试脚本来调用我的 Service，gRPC 都能轻松应对。</li>\n<li><strong>性能与效率：</strong> 基于 HTTP&#x2F;2 和 Protocol Buffers，gRPC 在性能和数据压缩方面都优于传统的 REST+JSON 组合。</li>\n<li><strong>强类型契约：</strong> 通过 .proto 文件定义服务，避免了手写协议和序列化的繁琐与易错。</li>\n</ol>\n<p>这个系列文章，就是我对自己学习和实践 gRPC 过程的笔记与复盘。我计划把如何简单地使用 gRPC 的<strong>同步模式、流模式</strong>，以及<strong>如何与 Qt 框架优雅地集成</strong>都记录下来。后续如果精力允许，可能还会去剖析一些 gRPC 的核心组件内部原理。</p>","more":"<h2 id=\"准备工作：gRPC-的安装\"><a href=\"#准备工作：gRPC-的安装\" class=\"headerlink\" title=\"准备工作：gRPC 的安装\"></a><strong>准备工作：gRPC 的安装</strong></h2><p>在开始之前，有一个非常重要的建议：<strong>gRPC 的手动编译安装有些麻烦，强烈建议使用 vcpkg 这个包管理器来安装。</strong></p>\n<p>vcpkg 是微软推出的 C++ 包管理器，可以极大地简化第三方库的安装和集成过程。你只需要执行简单的命令，它就会自动帮你下载源码、处理依赖、编译并安装好 gRPC 及其所需的 protobuf, openssl, zlib 等所有依赖项。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 克隆 vcpkg  </span></span><br><span class=\"line\">git <span class=\"built_in\">clone</span> https://github.com/microsoft/vcpkg.git  </span><br><span class=\"line\"><span class=\"built_in\">cd</span> vcpkg</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 运行引导脚本  </span></span><br><span class=\"line\">./bootstrap-vcpkg.sh <span class=\"comment\"># Linux / macOS  </span></span><br><span class=\"line\"><span class=\"comment\"># 或者 .bootstrap-vcpkg.bat (Windows)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 安装 gRPC  </span></span><br><span class=\"line\">./vcpkg install grpc</span><br></pre></td></tr></table></figure>\n\n<p>安装完成后，你可以通过 CMake 的 toolchain 文件非常方便地在你的项目中使用它。<strong>不要自己手动去编译，相信我，这会为你省下大量的时间和精力，让你能专注于 gRPC 本身。</strong></p>\n<h2 id=\"“Hello-gRPC-”：核心使用流程\"><a href=\"#“Hello-gRPC-”：核心使用流程\" class=\"headerlink\" title=\"“Hello, gRPC!”：核心使用流程\"></a><strong>“Hello, gRPC!”：核心使用流程</strong></h2><p>下面，我们来走一遍 gRPC 的核心使用流程，实现一个最简单的客户端-服务端通信。</p>\n<h3 id=\"第一步：定义“代码合同”-proto-文件\"><a href=\"#第一步：定义“代码合同”-proto-文件\" class=\"headerlink\" title=\"第一步：定义“代码合同” (.proto 文件)\"></a><strong>第一步：定义“代码合同” (.proto 文件)</strong></h3><p>gRPC 的一切都始于 .proto 文件，它使用 Protocol Buffers 语法来定义服务接口和消息结构。</p>\n<p>对于我的项目，我先定义一个最简单的服务 Controller，它只有一个“点对点”的 RPC 调用，用于获取核心服务的版本号。</p>\n<p><strong>controller.proto</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 指定使用 proto3 语法</span></span><br><span class=\"line\">syntax = <span class=\"string\">&quot;proto3&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 定义包名，避免命名冲突</span></span><br><span class=\"line\">package controller;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// GetVersion 服务的请求消息</span></span><br><span class=\"line\">message GetVersionRequest &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 消息字段，这里为空，因为获取版本不需要参数</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// GetVersion 服务的响应消息</span></span><br><span class=\"line\">message GetVersionResponse &#123;</span><br><span class=\"line\">  string version = <span class=\"number\">1</span>; <span class=\"comment\">// 1 是字段的唯一编号，不是值</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 定义我们的核心服务</span></span><br><span class=\"line\">service Controller &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 定义一个 Unary RPC (一元 RPC，即点对点调用)</span></span><br><span class=\"line\">  <span class=\"comment\">// 方法名叫 GetVersion，接收 GetVersionRequest，返回 GetVersionResponse</span></span><br><span class=\"line\">  <span class=\"function\">rpc <span class=\"title\">GetVersion</span><span class=\"params\">(GetVersionRequest)</span> <span class=\"title\">returns</span> <span class=\"params\">(GetVersionResponse)</span></span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"第二步：生成代码与文件解析\"><a href=\"#第二步：生成代码与文件解析\" class=\"headerlink\" title=\"第二步：生成代码与文件解析\"></a><strong>第二步：生成代码与文件解析</strong></h3><p>定义好 .proto 文件后，我们使用 protoc 编译器和 gRPC C++ 插件来生成 C++ 代码。</p>\n<h1 id=\"假设你的-proto-文件在-protos-目录下，输出到当前目录\"><a href=\"#假设你的-proto-文件在-protos-目录下，输出到当前目录\" class=\"headerlink\" title=\"假设你的 .proto 文件在 protos 目录下，输出到当前目录\"></a>假设你的 .proto 文件在 protos 目录下，输出到当前目录</h1><p>protoc -I&#x3D;.&#x2F;protos –cpp_out&#x3D;.&#x2F;grpc_gen –grpc_out&#x3D;.&#x2F;grpc_gen –plugin&#x3D;protoc-gen-grpc&#x3D;<code>which grpc_cpp_plugin</code> .&#x2F;protos&#x2F;controller.proto</p>\n<p>当你使用vcpkg安装grpc的时候，你会将 <code>protos</code>工具和 <code>protoc-gen-grpc</code>工具一并安装，安装目录一般在 <code>/home/username/.vcpkg/vcpkg/installed/x64-linux/tools</code> 的 <code>protobuf</code>目录和 <code>grpc</code>目录下</p>\n<p>执行后，会生成四个关键文件：</p>\n<ul>\n<li><strong>controller.pb.h &#x2F; controller.pb.cc：</strong> 这两个文件是 <strong>Protocol Buffers</strong> 生成的。它们包含了你在 .proto 中定义的 message（如 GetVersionRequest）所对应的 C++ 类，以及这些类的序列化和反序列化方法。<strong>它们只负责数据的载体。</strong></li>\n<li><strong>controller.grpc.pb.h &#x2F; controller.grpc.pb.cc：</strong> 这两个文件是 <strong>gRPC 插件</strong>生成的。它们包含了你在 .proto 中定义的 service（如 Controller）相关的 C++ 代码。这里面有：<ul>\n<li>一个用于<strong>服务端实现</strong>的抽象基类 (Controller::Service)。</li>\n<li>一个用于<strong>客户端调用</strong>的桩代码类 (Controller::Stub)。</li>\n</ul>\n</li>\n</ul>\n<p>理解这四个文件的分工非常重要，它体现了 gRPC 的分层设计：数据层 (Protobuf) 和通信层 (gRPC) 是分离的。</p>\n<h3 id=\"第三步：编写服务端\"><a href=\"#第三步：编写服务端\" class=\"headerlink\" title=\"第三步：编写服务端\"></a><strong>第三步：编写服务端</strong></h3><p>我们需要创建一个类，继承自生成的 Controller::Service，并重写 .proto 中定义的 GetVersion 虚函数。</p>\n<p><strong>server.cc</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;memory&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;string&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;grpcpp/grpcpp.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;grpc_gen/controller.grpc.pb.h&quot;</span> <span class=\"comment\">// 引入 gRPC 生成的头文件</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 继承自生成的服务基类</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">ControllerServiceImpl</span> <span class=\"keyword\">final</span> : <span class=\"keyword\">public</span> controller::Controller::Service</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 重写 GetVersion 方法</span></span><br><span class=\"line\">    <span class=\"function\">grpc::Status <span class=\"title\">GetVersion</span><span class=\"params\">(grpc::ServerContext *context,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">                            <span class=\"type\">const</span> controller::GetVersionRequest *request,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">                            controller::GetVersionResponse *response)</span> <span class=\"keyword\">override</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        std::string version_str = <span class=\"string\">&quot;Core Service v1.0.0&quot;</span>;</span><br><span class=\"line\">        std::cout &lt;&lt; <span class=\"string\">&quot;Received GetVersion request. Responding with: &quot;</span> &lt;&lt; version_str &lt;&lt; std::endl;</span><br><span class=\"line\"></span><br><span class=\"line\">        response-&gt;<span class=\"built_in\">set_version</span>(version_str); <span class=\"comment\">// 设置响应消息</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> grpc::Status::OK; <span class=\"comment\">// 返回 OK 状态</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">RunServer</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"function\">std::string <span class=\"title\">server_address</span><span class=\"params\">(<span class=\"string\">&quot;0.0.0.0:50051&quot;</span>)</span></span>;</span><br><span class=\"line\">    ControllerServiceImpl service;</span><br><span class=\"line\"></span><br><span class=\"line\">    grpc::ServerBuilder builder;</span><br><span class=\"line\">    builder.<span class=\"built_in\">AddListeningPort</span>(server_address, grpc::<span class=\"built_in\">InsecureServerCredentials</span>());</span><br><span class=\"line\">    builder.<span class=\"built_in\">RegisterService</span>(&amp;service); <span class=\"comment\">// 注册我们的服务实现</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\">std::unique_ptr&lt;grpc::Server&gt; <span class=\"title\">server</span><span class=\"params\">(builder.BuildAndStart())</span></span>; <span class=\"comment\">// 构建并启动服务器</span></span><br><span class=\"line\">    std::cout &lt;&lt; <span class=\"string\">&quot;Server listening on &quot;</span> &lt;&lt; server_address &lt;&lt; std::endl;</span><br><span class=\"line\"></span><br><span class=\"line\">    server-&gt;<span class=\"built_in\">Wait</span>(); <span class=\"comment\">// 阻塞等待服务器关闭</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"type\">int</span> argc, <span class=\"type\">char</span> **argv)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">RunServer</span>();</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"第四步：编写客户端\"><a href=\"#第四步：编写客户端\" class=\"headerlink\" title=\"第四步：编写客户端\"></a><strong>第四步：编写客户端</strong></h3><p>客户端通过生成的 Controller::Stub 来调用远程方法，这个过程被封装得就像调用本地函数一样简单。</p>\n<p><strong>client.cc</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;memory&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;string&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;grpcpp/grpcpp.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;grpc_gen/controller.grpc.pb.h&quot;</span> <span class=\"comment\">// 同样引入</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">ControllerClient</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"built_in\">ControllerClient</span>(std::shared_ptr&lt;grpc::Channel&gt; channel)</span><br><span class=\"line\">        : <span class=\"built_in\">stub_</span>(controller::Controller::<span class=\"built_in\">NewStub</span>(channel))</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">    &#125; <span class=\"comment\">// 通过 Channel 创建 Stub</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\">std::string <span class=\"title\">GetVersion</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        controller::GetVersionRequest request;</span><br><span class=\"line\">        controller::GetVersionResponse response;</span><br><span class=\"line\">        grpc::ClientContext context;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 发起 RPC 调用，就像调用一个本地方法</span></span><br><span class=\"line\">        grpc::Status status = stub_-&gt;<span class=\"built_in\">GetVersion</span>(&amp;context, request, &amp;response);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (status.<span class=\"built_in\">ok</span>())</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> response.<span class=\"built_in\">version</span>();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            std::cout &lt;&lt; status.<span class=\"built_in\">error_code</span>() &lt;&lt; <span class=\"string\">&quot;: &quot;</span> &lt;&lt; status.<span class=\"built_in\">error_message</span>() &lt;&lt; std::endl;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"string\">&quot;RPC failed&quot;</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">    std::unique_ptr&lt;controller::Controller::Stub&gt; stub_;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"type\">int</span> argc, <span class=\"type\">char</span> **argv)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    std::string target_str = <span class=\"string\">&quot;localhost:50051&quot;</span>;</span><br><span class=\"line\">    <span class=\"comment\">// 创建一个到服务端的 Channel</span></span><br><span class=\"line\">    <span class=\"function\">ControllerClient <span class=\"title\">client</span><span class=\"params\">(grpc::CreateChannel(target_str, grpc::InsecureChannelCredentials()))</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    std::string version = client.<span class=\"built_in\">GetVersion</span>();</span><br><span class=\"line\">    std::cout &lt;&lt; <span class=\"string\">&quot;Controller version received: &quot;</span> &lt;&lt; version &lt;&lt; std::endl;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"第五步：运行！\"><a href=\"#第五步：运行！\" class=\"headerlink\" title=\"第五步：运行！\"></a><strong>第五步：运行！</strong></h3><p>先启动服务端，再启动客户端，你就能看到客户端成功获取到了服务端返回的版本号信息。一个完整的 RPC 调用就这么简单地完成了！</p>\n<p>下面就是这个服务的简单调用时序图<br><img src=\"/images/version_call.png\" alt=\"version_call\"></p>\n<h2 id=\"总结与展望\"><a href=\"#总结与展望\" class=\"headerlink\" title=\"总结与展望\"></a><strong>总结与展望</strong></h2><p>本文作为 gRPC 系列的开篇，我们从一个真实的个人项目需求出发，探讨了为什么选择 gRPC 作为我们的 IPC 方案。接着，我们通过定义一个简单的 .proto 文件和实现一个完整的“Hello, gRPC!”示例，迈出了实践的第一步。</p>\n<p>我们看到，gRPC 借助 Protocol Buffers 和代码生成，极大地简化了网络通信应用的开发，让我们能更专注于业务逻辑本身。</p>\n<p>当然，我们目前只接触了最简单的 Unary RPC 和同步调用。这只是冰山一角。在接下来的文章中，我们将深入探讨：</p>\n<ul>\n<li><strong>如何利用 gRPC 强大的流式通信能力，实现实时数据推送？</strong></li>\n<li><strong>如何在 GUI 应用（如 Qt）中优雅地使用 gRPC，避免界面卡死？</strong></li>\n<li><strong>服务端和客户端的核心组件是如何工作的？</strong></li>\n</ul>\n<p><strong>最后，有一个强烈的建议：</strong> 本系列文章是我个人的学习笔记和思考，而 gRPC 的官方文档和 GitHub 仓库中的例子是最好的、最权威的学习资料。<strong>官方文档和示例远比我写得好，强烈建议大家去阅读！</strong> 希望我的文章能作为一个有益的补充和不同的视角。</p>"},{"title":"grpc实践之路:02.流的使用","date":"2025-08-26T16:00:00.000Z","_content":"## **前言**\n\n在上一篇文章《gRPC 实践之路（一）：从一个项目需求谈起》中，我们成功地搭建了一个 gRPC 服务，并让客户端通过一次“请求-响应”式的 Unary RPC 调用，获取到了服务端的版本号。这就像是我们去前台问了个问题，前台给了我们一个确切的答案，然后对话就结束了。\n\n但是实际中,很多消息不是一个一次性产生完成的，可能需要你去持续的接受，比如 ：**数据源持续的产生日志，每条日志都要你去处理，但是日志产生的时间间隔比较长**\n\n如果还用 Unary RPC，那么可能就是不断的去轮询，每隔几百毫秒就去调用一次获取日志的方法。这种轮询方式不仅效率低下，浪费网络和 CPU 资源，而且 UI 的实时性也得不到保证。\n\n我需要的是一种更优雅的模式，就像订阅一份实时消息：我只需要订阅一次，然后只要有新的情况发生，你（Service）就主动把战报推送给我。\n\n这，就是 gRPC **服务端流式 RPC (Server-side Streaming RPC)** 的核心思想。本文，我们将深入实践这种模式，模拟一个日志间隔产生，客户端订阅的方式。\n<!-- more -->\n## **什么是流 (Streaming)？**\n\n在深入代码之前，我想先谈谈我对“流”的个人理解。\n\n我认为，“流”特别适合处理这样一“大坨”数据，这坨数据有几个特点：\n\n1. **数据的源头不是一次性产生完的**，而是随着时间的推移，源源不断地产生的。\n2. 每次产生一小部分数据之间，**存在一定的时间间隔**。\n3. **每一小部分独立产生的数据，本身就是有意义的**，可以直接使用或存储。\n\n现在最火的例子就是大语言模型。当模型生成回答时，它不是瞬间完成的，而是一个字一个字或一个词一个词地“思考”和产生。为了让用户能尽快看到内容，而不是干等几十秒，大模型就会通过类似流式服务的技术，将产生的文字一点点地推送到你的聊天窗口里。\n\n这种长连接、持续推送的场景，正是流式服务大展拳脚的地方。\n\n下面是流的简单示意图:\n![stream](/images/stream.png)\n\n## **第一步：在 .proto 中定义流式服务**\n\n我们首先需要回到我们的“代码合同”——.proto 文件中，定义一个新的流式服务接口。我们在 Controller 服务中实现一个 GetRealtimeLogs 方法。\n\n关键在于，我们在返回类型 LogEntry 前面加上了 stream 关键字。\n\n**controller.proto**\n```protobuf\nsyntax = \"proto3\";\n\npackage controllerStream;\n\n// 用于请求实时日志的消息\nmessage GetLogsRequest {\n  // 我们可以留空，或者未来加入一些过滤条件，比如日志级别\n  string level_filter = 1;\n}\n\n// 定义单条日志的数据结构\nmessage LogEntry {\n  int64 timestamp = 1;\n  string level = 2;\n  string message = 3;\n}\n\nservice Controller {\n  // 定义一个服务端流式 RPC\n  // 接收一个 GetLogsRequest，返回一个 LogEntry 的数据流\n  rpc GetRealtimeLogs(GetLogsRequest) returns (stream LogEntry);\n}\n```\n\n修改完 .proto 文件后，别忘了重新运行 protoc 命令来生成新的 C++ 代码。\n\n## **第二步：服务端实现 —— 成为一个“数据源”**\n\n实现流式服务的服务端，与 Unary RPC 的主要区别在于，方法的第三个参数不再是一个简单的响应对象指针，而是一个**写入器 (Writer)** 对象：grpc::ServerWriter<LogEntry>* writer。\n\n这个 writer 就是我们向客户端推送数据的管道。我们可以通过不断调用 writer->Write(log_entry) 来发送一条条日志。\n\n**server.cc**\n\n```c++\n#include <iostream>\n#include <memory>\n#include <string>\n#include <thread> // 用于模拟日志生成\n#include <chrono> // 用于 sleep\n\n#include <grpcpp/grpcpp.h>\n#include \"grpc_gen/controllerStream.grpc.pb.h\"\n\nclass ControllerServiceImpl final : public controllerStream::Controller::Service {\n    // 实现 GetRealtimeLogs 方法\n    grpc::Status GetRealtimeLogs(grpc::ServerContext* context,\n                                 const controllerStream::GetLogsRequest* request,\n                                 grpc::ServerWriter<controllerStream::LogEntry>* writer) override {\n\n        std::cout << \"Client subscribed for logs...\" << std::endl;\n\n        // 模拟一个持续产生日志的场景\n        for (int i = 1; i <= 10; ++i) {\n            // 错误处理：检查客户端是否已经取消了请求（例如，关闭了UI）\n            if (context->IsCancelled()) {\n                std::cout << \"Client cancelled the request. Stopping the log stream.\" << std::endl;\n                break;\n            }\n\n            controllerStream::LogEntry log_entry;\n            log_entry.set_timestamp(std::chrono::system_clock::to_time_t(std::chrono::system_clock::now()));\n            log_entry.set_level(\"INFO\");\n            log_entry.set_message(\"This is log message number \" + std::to_string(i));\n\n            // 通过 writer 将这条日志发送给客户端\n            if (!writer->Write(log_entry)) {\n                // 错误处理：如果写入失败（例如，连接断开），就退出循环\n                std::cout << \"Failed to write log to stream. Connection might be broken.\" << std::endl;\n                break;\n            }\n\n            // 暂停一秒，模拟日志产生的间隔\n            std::this_thread::sleep_for(std::chrono::seconds(1));\n        }\n\n        std::cout << \"Finished sending logs.\" << std::endl;\n        // 当函数返回时，gRPC 会自动关闭流，并向客户端发送一个 OK 状态，\n        // 表示“我说完了，一切正常”。\n        return grpc::Status::OK;\n    }\n};\n\nvoid RunServer()\n{\n    std::string server_address(\"0.0.0.0:50051\");\n    ControllerServiceImpl service;\n\n    grpc::ServerBuilder builder;\n    builder.AddListeningPort(server_address, grpc::InsecureServerCredentials());\n    builder.RegisterService(&service); // 注册我们的服务实现\n\n    std::unique_ptr<grpc::Server> server(builder.BuildAndStart()); // 构建并启动服务器\n    std::cout << \"Server listening on \" << server_address << std::endl;\n\n    server->Wait(); // 阻塞等待服务器关闭\n}\n\nint main(int argc, char **argv)\n{\n    RunServer();\n    return 0;\n}\n```\n下面是流服务产生数据的过程:\n![server](/images/server.png)\n在真实的项目中，我们不会在 RPC 处理函数里用一个循环来阻塞线程。更优雅的方式是，将 writer 对象保存起来，然后由 Service 层的其他部分（比如一个真正的日志系统）在产生新日志时，异步地调用这个 writer 的 Write 方法。\n\n## **第三步：客户端实现 —— 成为一个“订阅者”**\n\n客户端的实现同样发生了变化。调用流式服务的 Stub 方法，不再直接返回一个 Status 和响应对象，而是返回一个**读取器 (Reader)** 对象：std::unique_ptr<grpc::ClientReader<controller::LogEntry>>。\n\n我们需要在一个循环中不断调用 reader->Read(&log_entry)，直到它返回 false，这表示服务端已经关闭了数据流。\n\n**client.cc**\n```c++\n#include <iostream>\n#include <memory>\n#include <string>\n\n#include <grpcpp/grpcpp.h>\n#include \"grpc_gen/controllerStream.grpc.pb.h\"\n\nclass ControllerClient\n{\npublic:\n    ControllerClient(std::shared_ptr<grpc::Channel> channel)\n        : stub_(controllerStream::Controller::NewStub(channel))\n    {\n    }\n\n    void GetRealtimeLogs()\n    {\n        controllerStream::GetLogsRequest request;\n\n        controllerStream::LogEntry log_entry;\n        grpc::ClientContext context;\n\n        // 调用流式 RPC，获取一个 reader\n        std::unique_ptr<grpc::ClientReader<controllerStream::LogEntry> > reader(\n            stub_->GetRealtimeLogs(&context, request));\n\n        std::cout << \"Subscribed to log stream. Waiting for logs...\" << std::endl;\n\n        // 在循环中不断读取从服务端推送来的日志\n        while (reader->Read(&log_entry))\n        {\n            std::cout << \"[LOG RECEIVED] \"\n                    << \"Time: \" << log_entry.timestamp()\n                    << \", Level: \" << log_entry.level()\n                    << \", Message: \" << log_entry.message() << std::endl;\n        }\n\n        // 当 Read() 返回 false 后，通过 Finish() 获取最终的状态\n        grpc::Status status = reader->Finish();\n        // 错误处理：检查最终状态\n        if (status.ok())\n        {\n            std::cout << \"Log stream finished cleanly.\" << std::endl;\n        }\n        else\n        {\n            std::cout << \"RPC failed with error: \" << status.error_code() << \": \" << status.error_message() <<\n                    std::endl;\n        }\n    }\n\nprivate:\n    std::unique_ptr<controllerStream::Controller::Stub> stub_;\n};\n\nint main(int argc, char **argv)\n{\n    ControllerClient client(grpc::CreateChannel(\n        \"localhost:50051\", grpc::InsecureChannelCredentials()));\n\n    std::cout << \"n--- Calling GetRealtimeLogs ---\" << std::endl;\n    client.GetRealtimeLogs();\n\n    return 0;\n}\n\n```\n\n下面是整个调用过程的时序图:\n![client](/images/client.png)\n## **关于错误处理的初步思考**\n\n从上面的代码中，我们可以看到 gRPC 在流式通信中处理错误的基本方式：\n\n* **服务端：**\n    * 可以通过检查 context->IsCancelled() 来判断客户端是否已经主动断开了连接。\n    * writer->Write() 的返回值可以判断写入是否成功。如果返回 false，通常意味着底层的连接已经出问题了。\n* **客户端：**\n    * reader->Read() 循环结束后，必须调用 reader->Finish() 来获取整个流的最终状态。\n    * 如果 status.ok() 为 true，表示流正常结束。\n    * 如果为 false，则表示流是因错误而中断的，我们可以从 status 对象中获取错误码和错误信息。\n\n这只是最基础的错误处理。在真实的健壮应用中，我们还需要考虑网络抖动、超时、重试等更复杂的策略，这些都是后续可以深入的话题。\n\n## **总结与展望**\n\n本文我们成功地解决了项目中的一个核心需求——**实时数据推送**。通过学习和实践 gRPC 的服务端流式 RPC，我们已经从“一问一答”的通信模式，迈向了更灵活、更高效的“实时订阅”模式。\n\n我们深入了解了如何在 .proto 中定义流式服务，以及如何在 C++ 中实现流的服务端（ServerWriter）和客户端（ClientReader）。\n\n在下一篇文章中，我们将讲解 **在Qt应用中如何直接集成Grpc**\n\n**最后，再次强调：** 本系列文章是我个人的学习笔记和思考，而 gRPC 的官方文档和 grpc/grpc GitHub 仓库中的例子是最好的、最权威的学习资料。**官方文档和示例远比我写得好，强烈建议大家去阅读！** 希望我的文章能作为一个有益的补充和不同的视角。","source":"_posts/grpc/grpc实践之路:02.流的使用.md","raw":"---\ntitle: \"grpc实践之路:02.流的使用\"\ndate: 2025-08-27\ncategories: \n  - 动手实践-三方库\n  - grpc\ntags:\n  - C++\n  - grpc\n  - 进程间通信\n---\n## **前言**\n\n在上一篇文章《gRPC 实践之路（一）：从一个项目需求谈起》中，我们成功地搭建了一个 gRPC 服务，并让客户端通过一次“请求-响应”式的 Unary RPC 调用，获取到了服务端的版本号。这就像是我们去前台问了个问题，前台给了我们一个确切的答案，然后对话就结束了。\n\n但是实际中,很多消息不是一个一次性产生完成的，可能需要你去持续的接受，比如 ：**数据源持续的产生日志，每条日志都要你去处理，但是日志产生的时间间隔比较长**\n\n如果还用 Unary RPC，那么可能就是不断的去轮询，每隔几百毫秒就去调用一次获取日志的方法。这种轮询方式不仅效率低下，浪费网络和 CPU 资源，而且 UI 的实时性也得不到保证。\n\n我需要的是一种更优雅的模式，就像订阅一份实时消息：我只需要订阅一次，然后只要有新的情况发生，你（Service）就主动把战报推送给我。\n\n这，就是 gRPC **服务端流式 RPC (Server-side Streaming RPC)** 的核心思想。本文，我们将深入实践这种模式，模拟一个日志间隔产生，客户端订阅的方式。\n<!-- more -->\n## **什么是流 (Streaming)？**\n\n在深入代码之前，我想先谈谈我对“流”的个人理解。\n\n我认为，“流”特别适合处理这样一“大坨”数据，这坨数据有几个特点：\n\n1. **数据的源头不是一次性产生完的**，而是随着时间的推移，源源不断地产生的。\n2. 每次产生一小部分数据之间，**存在一定的时间间隔**。\n3. **每一小部分独立产生的数据，本身就是有意义的**，可以直接使用或存储。\n\n现在最火的例子就是大语言模型。当模型生成回答时，它不是瞬间完成的，而是一个字一个字或一个词一个词地“思考”和产生。为了让用户能尽快看到内容，而不是干等几十秒，大模型就会通过类似流式服务的技术，将产生的文字一点点地推送到你的聊天窗口里。\n\n这种长连接、持续推送的场景，正是流式服务大展拳脚的地方。\n\n下面是流的简单示意图:\n![stream](/images/stream.png)\n\n## **第一步：在 .proto 中定义流式服务**\n\n我们首先需要回到我们的“代码合同”——.proto 文件中，定义一个新的流式服务接口。我们在 Controller 服务中实现一个 GetRealtimeLogs 方法。\n\n关键在于，我们在返回类型 LogEntry 前面加上了 stream 关键字。\n\n**controller.proto**\n```protobuf\nsyntax = \"proto3\";\n\npackage controllerStream;\n\n// 用于请求实时日志的消息\nmessage GetLogsRequest {\n  // 我们可以留空，或者未来加入一些过滤条件，比如日志级别\n  string level_filter = 1;\n}\n\n// 定义单条日志的数据结构\nmessage LogEntry {\n  int64 timestamp = 1;\n  string level = 2;\n  string message = 3;\n}\n\nservice Controller {\n  // 定义一个服务端流式 RPC\n  // 接收一个 GetLogsRequest，返回一个 LogEntry 的数据流\n  rpc GetRealtimeLogs(GetLogsRequest) returns (stream LogEntry);\n}\n```\n\n修改完 .proto 文件后，别忘了重新运行 protoc 命令来生成新的 C++ 代码。\n\n## **第二步：服务端实现 —— 成为一个“数据源”**\n\n实现流式服务的服务端，与 Unary RPC 的主要区别在于，方法的第三个参数不再是一个简单的响应对象指针，而是一个**写入器 (Writer)** 对象：grpc::ServerWriter<LogEntry>* writer。\n\n这个 writer 就是我们向客户端推送数据的管道。我们可以通过不断调用 writer->Write(log_entry) 来发送一条条日志。\n\n**server.cc**\n\n```c++\n#include <iostream>\n#include <memory>\n#include <string>\n#include <thread> // 用于模拟日志生成\n#include <chrono> // 用于 sleep\n\n#include <grpcpp/grpcpp.h>\n#include \"grpc_gen/controllerStream.grpc.pb.h\"\n\nclass ControllerServiceImpl final : public controllerStream::Controller::Service {\n    // 实现 GetRealtimeLogs 方法\n    grpc::Status GetRealtimeLogs(grpc::ServerContext* context,\n                                 const controllerStream::GetLogsRequest* request,\n                                 grpc::ServerWriter<controllerStream::LogEntry>* writer) override {\n\n        std::cout << \"Client subscribed for logs...\" << std::endl;\n\n        // 模拟一个持续产生日志的场景\n        for (int i = 1; i <= 10; ++i) {\n            // 错误处理：检查客户端是否已经取消了请求（例如，关闭了UI）\n            if (context->IsCancelled()) {\n                std::cout << \"Client cancelled the request. Stopping the log stream.\" << std::endl;\n                break;\n            }\n\n            controllerStream::LogEntry log_entry;\n            log_entry.set_timestamp(std::chrono::system_clock::to_time_t(std::chrono::system_clock::now()));\n            log_entry.set_level(\"INFO\");\n            log_entry.set_message(\"This is log message number \" + std::to_string(i));\n\n            // 通过 writer 将这条日志发送给客户端\n            if (!writer->Write(log_entry)) {\n                // 错误处理：如果写入失败（例如，连接断开），就退出循环\n                std::cout << \"Failed to write log to stream. Connection might be broken.\" << std::endl;\n                break;\n            }\n\n            // 暂停一秒，模拟日志产生的间隔\n            std::this_thread::sleep_for(std::chrono::seconds(1));\n        }\n\n        std::cout << \"Finished sending logs.\" << std::endl;\n        // 当函数返回时，gRPC 会自动关闭流，并向客户端发送一个 OK 状态，\n        // 表示“我说完了，一切正常”。\n        return grpc::Status::OK;\n    }\n};\n\nvoid RunServer()\n{\n    std::string server_address(\"0.0.0.0:50051\");\n    ControllerServiceImpl service;\n\n    grpc::ServerBuilder builder;\n    builder.AddListeningPort(server_address, grpc::InsecureServerCredentials());\n    builder.RegisterService(&service); // 注册我们的服务实现\n\n    std::unique_ptr<grpc::Server> server(builder.BuildAndStart()); // 构建并启动服务器\n    std::cout << \"Server listening on \" << server_address << std::endl;\n\n    server->Wait(); // 阻塞等待服务器关闭\n}\n\nint main(int argc, char **argv)\n{\n    RunServer();\n    return 0;\n}\n```\n下面是流服务产生数据的过程:\n![server](/images/server.png)\n在真实的项目中，我们不会在 RPC 处理函数里用一个循环来阻塞线程。更优雅的方式是，将 writer 对象保存起来，然后由 Service 层的其他部分（比如一个真正的日志系统）在产生新日志时，异步地调用这个 writer 的 Write 方法。\n\n## **第三步：客户端实现 —— 成为一个“订阅者”**\n\n客户端的实现同样发生了变化。调用流式服务的 Stub 方法，不再直接返回一个 Status 和响应对象，而是返回一个**读取器 (Reader)** 对象：std::unique_ptr<grpc::ClientReader<controller::LogEntry>>。\n\n我们需要在一个循环中不断调用 reader->Read(&log_entry)，直到它返回 false，这表示服务端已经关闭了数据流。\n\n**client.cc**\n```c++\n#include <iostream>\n#include <memory>\n#include <string>\n\n#include <grpcpp/grpcpp.h>\n#include \"grpc_gen/controllerStream.grpc.pb.h\"\n\nclass ControllerClient\n{\npublic:\n    ControllerClient(std::shared_ptr<grpc::Channel> channel)\n        : stub_(controllerStream::Controller::NewStub(channel))\n    {\n    }\n\n    void GetRealtimeLogs()\n    {\n        controllerStream::GetLogsRequest request;\n\n        controllerStream::LogEntry log_entry;\n        grpc::ClientContext context;\n\n        // 调用流式 RPC，获取一个 reader\n        std::unique_ptr<grpc::ClientReader<controllerStream::LogEntry> > reader(\n            stub_->GetRealtimeLogs(&context, request));\n\n        std::cout << \"Subscribed to log stream. Waiting for logs...\" << std::endl;\n\n        // 在循环中不断读取从服务端推送来的日志\n        while (reader->Read(&log_entry))\n        {\n            std::cout << \"[LOG RECEIVED] \"\n                    << \"Time: \" << log_entry.timestamp()\n                    << \", Level: \" << log_entry.level()\n                    << \", Message: \" << log_entry.message() << std::endl;\n        }\n\n        // 当 Read() 返回 false 后，通过 Finish() 获取最终的状态\n        grpc::Status status = reader->Finish();\n        // 错误处理：检查最终状态\n        if (status.ok())\n        {\n            std::cout << \"Log stream finished cleanly.\" << std::endl;\n        }\n        else\n        {\n            std::cout << \"RPC failed with error: \" << status.error_code() << \": \" << status.error_message() <<\n                    std::endl;\n        }\n    }\n\nprivate:\n    std::unique_ptr<controllerStream::Controller::Stub> stub_;\n};\n\nint main(int argc, char **argv)\n{\n    ControllerClient client(grpc::CreateChannel(\n        \"localhost:50051\", grpc::InsecureChannelCredentials()));\n\n    std::cout << \"n--- Calling GetRealtimeLogs ---\" << std::endl;\n    client.GetRealtimeLogs();\n\n    return 0;\n}\n\n```\n\n下面是整个调用过程的时序图:\n![client](/images/client.png)\n## **关于错误处理的初步思考**\n\n从上面的代码中，我们可以看到 gRPC 在流式通信中处理错误的基本方式：\n\n* **服务端：**\n    * 可以通过检查 context->IsCancelled() 来判断客户端是否已经主动断开了连接。\n    * writer->Write() 的返回值可以判断写入是否成功。如果返回 false，通常意味着底层的连接已经出问题了。\n* **客户端：**\n    * reader->Read() 循环结束后，必须调用 reader->Finish() 来获取整个流的最终状态。\n    * 如果 status.ok() 为 true，表示流正常结束。\n    * 如果为 false，则表示流是因错误而中断的，我们可以从 status 对象中获取错误码和错误信息。\n\n这只是最基础的错误处理。在真实的健壮应用中，我们还需要考虑网络抖动、超时、重试等更复杂的策略，这些都是后续可以深入的话题。\n\n## **总结与展望**\n\n本文我们成功地解决了项目中的一个核心需求——**实时数据推送**。通过学习和实践 gRPC 的服务端流式 RPC，我们已经从“一问一答”的通信模式，迈向了更灵活、更高效的“实时订阅”模式。\n\n我们深入了解了如何在 .proto 中定义流式服务，以及如何在 C++ 中实现流的服务端（ServerWriter）和客户端（ClientReader）。\n\n在下一篇文章中，我们将讲解 **在Qt应用中如何直接集成Grpc**\n\n**最后，再次强调：** 本系列文章是我个人的学习笔记和思考，而 gRPC 的官方文档和 grpc/grpc GitHub 仓库中的例子是最好的、最权威的学习资料。**官方文档和示例远比我写得好，强烈建议大家去阅读！** 希望我的文章能作为一个有益的补充和不同的视角。","slug":"grpc/grpc实践之路:02.流的使用","published":1,"updated":"2025-08-28T12:43:27.448Z","comments":1,"layout":"post","photos":[],"_id":"cmevecvs40003hfro0h6o85h8","content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a><strong>前言</strong></h2><p>在上一篇文章《gRPC 实践之路（一）：从一个项目需求谈起》中，我们成功地搭建了一个 gRPC 服务，并让客户端通过一次“请求-响应”式的 Unary RPC 调用，获取到了服务端的版本号。这就像是我们去前台问了个问题，前台给了我们一个确切的答案，然后对话就结束了。</p>\n<p>但是实际中,很多消息不是一个一次性产生完成的，可能需要你去持续的接受，比如 ：<strong>数据源持续的产生日志，每条日志都要你去处理，但是日志产生的时间间隔比较长</strong></p>\n<p>如果还用 Unary RPC，那么可能就是不断的去轮询，每隔几百毫秒就去调用一次获取日志的方法。这种轮询方式不仅效率低下，浪费网络和 CPU 资源，而且 UI 的实时性也得不到保证。</p>\n<p>我需要的是一种更优雅的模式，就像订阅一份实时消息：我只需要订阅一次，然后只要有新的情况发生，你（Service）就主动把战报推送给我。</p>\n<p>这，就是 gRPC <strong>服务端流式 RPC (Server-side Streaming RPC)</strong> 的核心思想。本文，我们将深入实践这种模式，模拟一个日志间隔产生，客户端订阅的方式。</p>\n<span id=\"more\"></span>\n<h2 id=\"什么是流-Streaming-？\"><a href=\"#什么是流-Streaming-？\" class=\"headerlink\" title=\"什么是流 (Streaming)？\"></a><strong>什么是流 (Streaming)？</strong></h2><p>在深入代码之前，我想先谈谈我对“流”的个人理解。</p>\n<p>我认为，“流”特别适合处理这样一“大坨”数据，这坨数据有几个特点：</p>\n<ol>\n<li><strong>数据的源头不是一次性产生完的</strong>，而是随着时间的推移，源源不断地产生的。</li>\n<li>每次产生一小部分数据之间，<strong>存在一定的时间间隔</strong>。</li>\n<li><strong>每一小部分独立产生的数据，本身就是有意义的</strong>，可以直接使用或存储。</li>\n</ol>\n<p>现在最火的例子就是大语言模型。当模型生成回答时，它不是瞬间完成的，而是一个字一个字或一个词一个词地“思考”和产生。为了让用户能尽快看到内容，而不是干等几十秒，大模型就会通过类似流式服务的技术，将产生的文字一点点地推送到你的聊天窗口里。</p>\n<p>这种长连接、持续推送的场景，正是流式服务大展拳脚的地方。</p>\n<p>下面是流的简单示意图:<br><img src=\"/images/stream.png\" alt=\"stream\"></p>\n<h2 id=\"第一步：在-proto-中定义流式服务\"><a href=\"#第一步：在-proto-中定义流式服务\" class=\"headerlink\" title=\"第一步：在 .proto 中定义流式服务\"></a><strong>第一步：在 .proto 中定义流式服务</strong></h2><p>我们首先需要回到我们的“代码合同”——.proto 文件中，定义一个新的流式服务接口。我们在 Controller 服务中实现一个 GetRealtimeLogs 方法。</p>\n<p>关键在于，我们在返回类型 LogEntry 前面加上了 stream 关键字。</p>\n<p><strong>controller.proto</strong></p>\n<figure class=\"highlight protobuf\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">syntax = <span class=\"string\">&quot;proto3&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">package</span> controllerStream;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 用于请求实时日志的消息</span></span><br><span class=\"line\"><span class=\"keyword\">message </span><span class=\"title class_\">GetLogsRequest</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 我们可以留空，或者未来加入一些过滤条件，比如日志级别</span></span><br><span class=\"line\">  <span class=\"type\">string</span> level_filter = <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 定义单条日志的数据结构</span></span><br><span class=\"line\"><span class=\"keyword\">message </span><span class=\"title class_\">LogEntry</span> &#123;</span><br><span class=\"line\">  <span class=\"type\">int64</span> timestamp = <span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"type\">string</span> level = <span class=\"number\">2</span>;</span><br><span class=\"line\">  <span class=\"type\">string</span> message = <span class=\"number\">3</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">service </span><span class=\"title class_\">Controller</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 定义一个服务端流式 RPC</span></span><br><span class=\"line\">  <span class=\"comment\">// 接收一个 GetLogsRequest，返回一个 LogEntry 的数据流</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">rpc</span> GetRealtimeLogs(GetLogsRequest) <span class=\"keyword\">returns</span> (stream LogEntry)</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>修改完 .proto 文件后，别忘了重新运行 protoc 命令来生成新的 C++ 代码。</p>\n<h2 id=\"第二步：服务端实现-——-成为一个“数据源”\"><a href=\"#第二步：服务端实现-——-成为一个“数据源”\" class=\"headerlink\" title=\"第二步：服务端实现 —— 成为一个“数据源”\"></a><strong>第二步：服务端实现 —— 成为一个“数据源”</strong></h2><p>实现流式服务的服务端，与 Unary RPC 的主要区别在于，方法的第三个参数不再是一个简单的响应对象指针，而是一个<strong>写入器 (Writer)</strong> 对象：grpc::ServerWriter<LogEntry>* writer。</p>\n<p>这个 writer 就是我们向客户端推送数据的管道。我们可以通过不断调用 writer-&gt;Write(log_entry) 来发送一条条日志。</p>\n<p><strong>server.cc</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;memory&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;string&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;thread&gt;</span> <span class=\"comment\">// 用于模拟日志生成</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;chrono&gt;</span> <span class=\"comment\">// 用于 sleep</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;grpcpp/grpcpp.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;grpc_gen/controllerStream.grpc.pb.h&quot;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">ControllerServiceImpl</span> <span class=\"keyword\">final</span> : <span class=\"keyword\">public</span> controllerStream::Controller::Service &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 实现 GetRealtimeLogs 方法</span></span><br><span class=\"line\">    <span class=\"function\">grpc::Status <span class=\"title\">GetRealtimeLogs</span><span class=\"params\">(grpc::ServerContext* context,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">                                 <span class=\"type\">const</span> controllerStream::GetLogsRequest* request,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">                                 grpc::ServerWriter&lt;controllerStream::LogEntry&gt;* writer)</span> <span class=\"keyword\">override</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        std::cout &lt;&lt; <span class=\"string\">&quot;Client subscribed for logs...&quot;</span> &lt;&lt; std::endl;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 模拟一个持续产生日志的场景</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= <span class=\"number\">10</span>; ++i) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 错误处理：检查客户端是否已经取消了请求（例如，关闭了UI）</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (context-&gt;<span class=\"built_in\">IsCancelled</span>()) &#123;</span><br><span class=\"line\">                std::cout &lt;&lt; <span class=\"string\">&quot;Client cancelled the request. Stopping the log stream.&quot;</span> &lt;&lt; std::endl;</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            controllerStream::LogEntry log_entry;</span><br><span class=\"line\">            log_entry.<span class=\"built_in\">set_timestamp</span>(std::chrono::system_clock::<span class=\"built_in\">to_time_t</span>(std::chrono::system_clock::<span class=\"built_in\">now</span>()));</span><br><span class=\"line\">            log_entry.<span class=\"built_in\">set_level</span>(<span class=\"string\">&quot;INFO&quot;</span>);</span><br><span class=\"line\">            log_entry.<span class=\"built_in\">set_message</span>(<span class=\"string\">&quot;This is log message number &quot;</span> + std::<span class=\"built_in\">to_string</span>(i));</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">// 通过 writer 将这条日志发送给客户端</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (!writer-&gt;<span class=\"built_in\">Write</span>(log_entry)) &#123;</span><br><span class=\"line\">                <span class=\"comment\">// 错误处理：如果写入失败（例如，连接断开），就退出循环</span></span><br><span class=\"line\">                std::cout &lt;&lt; <span class=\"string\">&quot;Failed to write log to stream. Connection might be broken.&quot;</span> &lt;&lt; std::endl;</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">// 暂停一秒，模拟日志产生的间隔</span></span><br><span class=\"line\">            std::this_thread::<span class=\"built_in\">sleep_for</span>(std::chrono::<span class=\"built_in\">seconds</span>(<span class=\"number\">1</span>));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        std::cout &lt;&lt; <span class=\"string\">&quot;Finished sending logs.&quot;</span> &lt;&lt; std::endl;</span><br><span class=\"line\">        <span class=\"comment\">// 当函数返回时，gRPC 会自动关闭流，并向客户端发送一个 OK 状态，</span></span><br><span class=\"line\">        <span class=\"comment\">// 表示“我说完了，一切正常”。</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> grpc::Status::OK;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">RunServer</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"function\">std::string <span class=\"title\">server_address</span><span class=\"params\">(<span class=\"string\">&quot;0.0.0.0:50051&quot;</span>)</span></span>;</span><br><span class=\"line\">    ControllerServiceImpl service;</span><br><span class=\"line\"></span><br><span class=\"line\">    grpc::ServerBuilder builder;</span><br><span class=\"line\">    builder.<span class=\"built_in\">AddListeningPort</span>(server_address, grpc::<span class=\"built_in\">InsecureServerCredentials</span>());</span><br><span class=\"line\">    builder.<span class=\"built_in\">RegisterService</span>(&amp;service); <span class=\"comment\">// 注册我们的服务实现</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\">std::unique_ptr&lt;grpc::Server&gt; <span class=\"title\">server</span><span class=\"params\">(builder.BuildAndStart())</span></span>; <span class=\"comment\">// 构建并启动服务器</span></span><br><span class=\"line\">    std::cout &lt;&lt; <span class=\"string\">&quot;Server listening on &quot;</span> &lt;&lt; server_address &lt;&lt; std::endl;</span><br><span class=\"line\"></span><br><span class=\"line\">    server-&gt;<span class=\"built_in\">Wait</span>(); <span class=\"comment\">// 阻塞等待服务器关闭</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"type\">int</span> argc, <span class=\"type\">char</span> **argv)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">RunServer</span>();</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>下面是流服务产生数据的过程:<br><img src=\"/images/server.png\" alt=\"server\"><br>在真实的项目中，我们不会在 RPC 处理函数里用一个循环来阻塞线程。更优雅的方式是，将 writer 对象保存起来，然后由 Service 层的其他部分（比如一个真正的日志系统）在产生新日志时，异步地调用这个 writer 的 Write 方法。</p>\n<h2 id=\"第三步：客户端实现-——-成为一个“订阅者”\"><a href=\"#第三步：客户端实现-——-成为一个“订阅者”\" class=\"headerlink\" title=\"第三步：客户端实现 —— 成为一个“订阅者”\"></a><strong>第三步：客户端实现 —— 成为一个“订阅者”</strong></h2><p>客户端的实现同样发生了变化。调用流式服务的 Stub 方法，不再直接返回一个 Status 和响应对象，而是返回一个<strong>读取器 (Reader)</strong> 对象：std::unique_ptr&lt;grpc::ClientReader<a href=\"controller::LogEntry\">controller::LogEntry</a>&gt;。</p>\n<p>我们需要在一个循环中不断调用 reader-&gt;Read(&amp;log_entry)，直到它返回 false，这表示服务端已经关闭了数据流。</p>\n<p><strong>client.cc</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;memory&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;string&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;grpcpp/grpcpp.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;grpc_gen/controllerStream.grpc.pb.h&quot;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">ControllerClient</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"built_in\">ControllerClient</span>(std::shared_ptr&lt;grpc::Channel&gt; channel)</span><br><span class=\"line\">        : <span class=\"built_in\">stub_</span>(controllerStream::Controller::<span class=\"built_in\">NewStub</span>(channel))</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">GetRealtimeLogs</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        controllerStream::GetLogsRequest request;</span><br><span class=\"line\"></span><br><span class=\"line\">        controllerStream::LogEntry log_entry;</span><br><span class=\"line\">        grpc::ClientContext context;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 调用流式 RPC，获取一个 reader</span></span><br><span class=\"line\">        std::unique_ptr&lt;grpc::ClientReader&lt;controllerStream::LogEntry&gt; &gt; <span class=\"built_in\">reader</span>(</span><br><span class=\"line\">            stub_-&gt;<span class=\"built_in\">GetRealtimeLogs</span>(&amp;context, request));</span><br><span class=\"line\"></span><br><span class=\"line\">        std::cout &lt;&lt; <span class=\"string\">&quot;Subscribed to log stream. Waiting for logs...&quot;</span> &lt;&lt; std::endl;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 在循环中不断读取从服务端推送来的日志</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span> (reader-&gt;<span class=\"built_in\">Read</span>(&amp;log_entry))</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            std::cout &lt;&lt; <span class=\"string\">&quot;[LOG RECEIVED] &quot;</span></span><br><span class=\"line\">                    &lt;&lt; <span class=\"string\">&quot;Time: &quot;</span> &lt;&lt; log_entry.<span class=\"built_in\">timestamp</span>()</span><br><span class=\"line\">                    &lt;&lt; <span class=\"string\">&quot;, Level: &quot;</span> &lt;&lt; log_entry.<span class=\"built_in\">level</span>()</span><br><span class=\"line\">                    &lt;&lt; <span class=\"string\">&quot;, Message: &quot;</span> &lt;&lt; log_entry.<span class=\"built_in\">message</span>() &lt;&lt; std::endl;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 当 Read() 返回 false 后，通过 Finish() 获取最终的状态</span></span><br><span class=\"line\">        grpc::Status status = reader-&gt;<span class=\"built_in\">Finish</span>();</span><br><span class=\"line\">        <span class=\"comment\">// 错误处理：检查最终状态</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (status.<span class=\"built_in\">ok</span>())</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            std::cout &lt;&lt; <span class=\"string\">&quot;Log stream finished cleanly.&quot;</span> &lt;&lt; std::endl;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            std::cout &lt;&lt; <span class=\"string\">&quot;RPC failed with error: &quot;</span> &lt;&lt; status.<span class=\"built_in\">error_code</span>() &lt;&lt; <span class=\"string\">&quot;: &quot;</span> &lt;&lt; status.<span class=\"built_in\">error_message</span>() &lt;&lt;</span><br><span class=\"line\">                    std::endl;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">    std::unique_ptr&lt;controllerStream::Controller::Stub&gt; stub_;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"type\">int</span> argc, <span class=\"type\">char</span> **argv)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"function\">ControllerClient <span class=\"title\">client</span><span class=\"params\">(grpc::CreateChannel(</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">        <span class=\"string\">&quot;localhost:50051&quot;</span>, grpc::InsecureChannelCredentials()))</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    std::cout &lt;&lt; <span class=\"string\">&quot;n--- Calling GetRealtimeLogs ---&quot;</span> &lt;&lt; std::endl;</span><br><span class=\"line\">    client.<span class=\"built_in\">GetRealtimeLogs</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>下面是整个调用过程的时序图:<br><img src=\"/images/client.png\" alt=\"client\"></p>\n<h2 id=\"关于错误处理的初步思考\"><a href=\"#关于错误处理的初步思考\" class=\"headerlink\" title=\"关于错误处理的初步思考\"></a><strong>关于错误处理的初步思考</strong></h2><p>从上面的代码中，我们可以看到 gRPC 在流式通信中处理错误的基本方式：</p>\n<ul>\n<li><strong>服务端：</strong><ul>\n<li>可以通过检查 context-&gt;IsCancelled() 来判断客户端是否已经主动断开了连接。</li>\n<li>writer-&gt;Write() 的返回值可以判断写入是否成功。如果返回 false，通常意味着底层的连接已经出问题了。</li>\n</ul>\n</li>\n<li><strong>客户端：</strong><ul>\n<li>reader-&gt;Read() 循环结束后，必须调用 reader-&gt;Finish() 来获取整个流的最终状态。</li>\n<li>如果 status.ok() 为 true，表示流正常结束。</li>\n<li>如果为 false，则表示流是因错误而中断的，我们可以从 status 对象中获取错误码和错误信息。</li>\n</ul>\n</li>\n</ul>\n<p>这只是最基础的错误处理。在真实的健壮应用中，我们还需要考虑网络抖动、超时、重试等更复杂的策略，这些都是后续可以深入的话题。</p>\n<h2 id=\"总结与展望\"><a href=\"#总结与展望\" class=\"headerlink\" title=\"总结与展望\"></a><strong>总结与展望</strong></h2><p>本文我们成功地解决了项目中的一个核心需求——<strong>实时数据推送</strong>。通过学习和实践 gRPC 的服务端流式 RPC，我们已经从“一问一答”的通信模式，迈向了更灵活、更高效的“实时订阅”模式。</p>\n<p>我们深入了解了如何在 .proto 中定义流式服务，以及如何在 C++ 中实现流的服务端（ServerWriter）和客户端（ClientReader）。</p>\n<p>在下一篇文章中，我们将讲解 <strong>在Qt应用中如何直接集成Grpc</strong></p>\n<p><strong>最后，再次强调：</strong> 本系列文章是我个人的学习笔记和思考，而 gRPC 的官方文档和 grpc&#x2F;grpc GitHub 仓库中的例子是最好的、最权威的学习资料。<strong>官方文档和示例远比我写得好，强烈建议大家去阅读！</strong> 希望我的文章能作为一个有益的补充和不同的视角。</p>\n","excerpt":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a><strong>前言</strong></h2><p>在上一篇文章《gRPC 实践之路（一）：从一个项目需求谈起》中，我们成功地搭建了一个 gRPC 服务，并让客户端通过一次“请求-响应”式的 Unary RPC 调用，获取到了服务端的版本号。这就像是我们去前台问了个问题，前台给了我们一个确切的答案，然后对话就结束了。</p>\n<p>但是实际中,很多消息不是一个一次性产生完成的，可能需要你去持续的接受，比如 ：<strong>数据源持续的产生日志，每条日志都要你去处理，但是日志产生的时间间隔比较长</strong></p>\n<p>如果还用 Unary RPC，那么可能就是不断的去轮询，每隔几百毫秒就去调用一次获取日志的方法。这种轮询方式不仅效率低下，浪费网络和 CPU 资源，而且 UI 的实时性也得不到保证。</p>\n<p>我需要的是一种更优雅的模式，就像订阅一份实时消息：我只需要订阅一次，然后只要有新的情况发生，你（Service）就主动把战报推送给我。</p>\n<p>这，就是 gRPC <strong>服务端流式 RPC (Server-side Streaming RPC)</strong> 的核心思想。本文，我们将深入实践这种模式，模拟一个日志间隔产生，客户端订阅的方式。</p>","more":"<h2 id=\"什么是流-Streaming-？\"><a href=\"#什么是流-Streaming-？\" class=\"headerlink\" title=\"什么是流 (Streaming)？\"></a><strong>什么是流 (Streaming)？</strong></h2><p>在深入代码之前，我想先谈谈我对“流”的个人理解。</p>\n<p>我认为，“流”特别适合处理这样一“大坨”数据，这坨数据有几个特点：</p>\n<ol>\n<li><strong>数据的源头不是一次性产生完的</strong>，而是随着时间的推移，源源不断地产生的。</li>\n<li>每次产生一小部分数据之间，<strong>存在一定的时间间隔</strong>。</li>\n<li><strong>每一小部分独立产生的数据，本身就是有意义的</strong>，可以直接使用或存储。</li>\n</ol>\n<p>现在最火的例子就是大语言模型。当模型生成回答时，它不是瞬间完成的，而是一个字一个字或一个词一个词地“思考”和产生。为了让用户能尽快看到内容，而不是干等几十秒，大模型就会通过类似流式服务的技术，将产生的文字一点点地推送到你的聊天窗口里。</p>\n<p>这种长连接、持续推送的场景，正是流式服务大展拳脚的地方。</p>\n<p>下面是流的简单示意图:<br><img src=\"/images/stream.png\" alt=\"stream\"></p>\n<h2 id=\"第一步：在-proto-中定义流式服务\"><a href=\"#第一步：在-proto-中定义流式服务\" class=\"headerlink\" title=\"第一步：在 .proto 中定义流式服务\"></a><strong>第一步：在 .proto 中定义流式服务</strong></h2><p>我们首先需要回到我们的“代码合同”——.proto 文件中，定义一个新的流式服务接口。我们在 Controller 服务中实现一个 GetRealtimeLogs 方法。</p>\n<p>关键在于，我们在返回类型 LogEntry 前面加上了 stream 关键字。</p>\n<p><strong>controller.proto</strong></p>\n<figure class=\"highlight protobuf\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">syntax = <span class=\"string\">&quot;proto3&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">package</span> controllerStream;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 用于请求实时日志的消息</span></span><br><span class=\"line\"><span class=\"keyword\">message </span><span class=\"title class_\">GetLogsRequest</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 我们可以留空，或者未来加入一些过滤条件，比如日志级别</span></span><br><span class=\"line\">  <span class=\"type\">string</span> level_filter = <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 定义单条日志的数据结构</span></span><br><span class=\"line\"><span class=\"keyword\">message </span><span class=\"title class_\">LogEntry</span> &#123;</span><br><span class=\"line\">  <span class=\"type\">int64</span> timestamp = <span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"type\">string</span> level = <span class=\"number\">2</span>;</span><br><span class=\"line\">  <span class=\"type\">string</span> message = <span class=\"number\">3</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">service </span><span class=\"title class_\">Controller</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 定义一个服务端流式 RPC</span></span><br><span class=\"line\">  <span class=\"comment\">// 接收一个 GetLogsRequest，返回一个 LogEntry 的数据流</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">rpc</span> GetRealtimeLogs(GetLogsRequest) <span class=\"keyword\">returns</span> (stream LogEntry)</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>修改完 .proto 文件后，别忘了重新运行 protoc 命令来生成新的 C++ 代码。</p>\n<h2 id=\"第二步：服务端实现-——-成为一个“数据源”\"><a href=\"#第二步：服务端实现-——-成为一个“数据源”\" class=\"headerlink\" title=\"第二步：服务端实现 —— 成为一个“数据源”\"></a><strong>第二步：服务端实现 —— 成为一个“数据源”</strong></h2><p>实现流式服务的服务端，与 Unary RPC 的主要区别在于，方法的第三个参数不再是一个简单的响应对象指针，而是一个<strong>写入器 (Writer)</strong> 对象：grpc::ServerWriter<LogEntry>* writer。</p>\n<p>这个 writer 就是我们向客户端推送数据的管道。我们可以通过不断调用 writer-&gt;Write(log_entry) 来发送一条条日志。</p>\n<p><strong>server.cc</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;memory&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;string&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;thread&gt;</span> <span class=\"comment\">// 用于模拟日志生成</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;chrono&gt;</span> <span class=\"comment\">// 用于 sleep</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;grpcpp/grpcpp.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;grpc_gen/controllerStream.grpc.pb.h&quot;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">ControllerServiceImpl</span> <span class=\"keyword\">final</span> : <span class=\"keyword\">public</span> controllerStream::Controller::Service &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 实现 GetRealtimeLogs 方法</span></span><br><span class=\"line\">    <span class=\"function\">grpc::Status <span class=\"title\">GetRealtimeLogs</span><span class=\"params\">(grpc::ServerContext* context,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">                                 <span class=\"type\">const</span> controllerStream::GetLogsRequest* request,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">                                 grpc::ServerWriter&lt;controllerStream::LogEntry&gt;* writer)</span> <span class=\"keyword\">override</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        std::cout &lt;&lt; <span class=\"string\">&quot;Client subscribed for logs...&quot;</span> &lt;&lt; std::endl;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 模拟一个持续产生日志的场景</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= <span class=\"number\">10</span>; ++i) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 错误处理：检查客户端是否已经取消了请求（例如，关闭了UI）</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (context-&gt;<span class=\"built_in\">IsCancelled</span>()) &#123;</span><br><span class=\"line\">                std::cout &lt;&lt; <span class=\"string\">&quot;Client cancelled the request. Stopping the log stream.&quot;</span> &lt;&lt; std::endl;</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            controllerStream::LogEntry log_entry;</span><br><span class=\"line\">            log_entry.<span class=\"built_in\">set_timestamp</span>(std::chrono::system_clock::<span class=\"built_in\">to_time_t</span>(std::chrono::system_clock::<span class=\"built_in\">now</span>()));</span><br><span class=\"line\">            log_entry.<span class=\"built_in\">set_level</span>(<span class=\"string\">&quot;INFO&quot;</span>);</span><br><span class=\"line\">            log_entry.<span class=\"built_in\">set_message</span>(<span class=\"string\">&quot;This is log message number &quot;</span> + std::<span class=\"built_in\">to_string</span>(i));</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">// 通过 writer 将这条日志发送给客户端</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (!writer-&gt;<span class=\"built_in\">Write</span>(log_entry)) &#123;</span><br><span class=\"line\">                <span class=\"comment\">// 错误处理：如果写入失败（例如，连接断开），就退出循环</span></span><br><span class=\"line\">                std::cout &lt;&lt; <span class=\"string\">&quot;Failed to write log to stream. Connection might be broken.&quot;</span> &lt;&lt; std::endl;</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">// 暂停一秒，模拟日志产生的间隔</span></span><br><span class=\"line\">            std::this_thread::<span class=\"built_in\">sleep_for</span>(std::chrono::<span class=\"built_in\">seconds</span>(<span class=\"number\">1</span>));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        std::cout &lt;&lt; <span class=\"string\">&quot;Finished sending logs.&quot;</span> &lt;&lt; std::endl;</span><br><span class=\"line\">        <span class=\"comment\">// 当函数返回时，gRPC 会自动关闭流，并向客户端发送一个 OK 状态，</span></span><br><span class=\"line\">        <span class=\"comment\">// 表示“我说完了，一切正常”。</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> grpc::Status::OK;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">RunServer</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"function\">std::string <span class=\"title\">server_address</span><span class=\"params\">(<span class=\"string\">&quot;0.0.0.0:50051&quot;</span>)</span></span>;</span><br><span class=\"line\">    ControllerServiceImpl service;</span><br><span class=\"line\"></span><br><span class=\"line\">    grpc::ServerBuilder builder;</span><br><span class=\"line\">    builder.<span class=\"built_in\">AddListeningPort</span>(server_address, grpc::<span class=\"built_in\">InsecureServerCredentials</span>());</span><br><span class=\"line\">    builder.<span class=\"built_in\">RegisterService</span>(&amp;service); <span class=\"comment\">// 注册我们的服务实现</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\">std::unique_ptr&lt;grpc::Server&gt; <span class=\"title\">server</span><span class=\"params\">(builder.BuildAndStart())</span></span>; <span class=\"comment\">// 构建并启动服务器</span></span><br><span class=\"line\">    std::cout &lt;&lt; <span class=\"string\">&quot;Server listening on &quot;</span> &lt;&lt; server_address &lt;&lt; std::endl;</span><br><span class=\"line\"></span><br><span class=\"line\">    server-&gt;<span class=\"built_in\">Wait</span>(); <span class=\"comment\">// 阻塞等待服务器关闭</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"type\">int</span> argc, <span class=\"type\">char</span> **argv)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">RunServer</span>();</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>下面是流服务产生数据的过程:<br><img src=\"/images/server.png\" alt=\"server\"><br>在真实的项目中，我们不会在 RPC 处理函数里用一个循环来阻塞线程。更优雅的方式是，将 writer 对象保存起来，然后由 Service 层的其他部分（比如一个真正的日志系统）在产生新日志时，异步地调用这个 writer 的 Write 方法。</p>\n<h2 id=\"第三步：客户端实现-——-成为一个“订阅者”\"><a href=\"#第三步：客户端实现-——-成为一个“订阅者”\" class=\"headerlink\" title=\"第三步：客户端实现 —— 成为一个“订阅者”\"></a><strong>第三步：客户端实现 —— 成为一个“订阅者”</strong></h2><p>客户端的实现同样发生了变化。调用流式服务的 Stub 方法，不再直接返回一个 Status 和响应对象，而是返回一个<strong>读取器 (Reader)</strong> 对象：std::unique_ptr&lt;grpc::ClientReader<a href=\"controller::LogEntry\">controller::LogEntry</a>&gt;。</p>\n<p>我们需要在一个循环中不断调用 reader-&gt;Read(&amp;log_entry)，直到它返回 false，这表示服务端已经关闭了数据流。</p>\n<p><strong>client.cc</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;memory&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;string&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;grpcpp/grpcpp.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;grpc_gen/controllerStream.grpc.pb.h&quot;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">ControllerClient</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"built_in\">ControllerClient</span>(std::shared_ptr&lt;grpc::Channel&gt; channel)</span><br><span class=\"line\">        : <span class=\"built_in\">stub_</span>(controllerStream::Controller::<span class=\"built_in\">NewStub</span>(channel))</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">GetRealtimeLogs</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        controllerStream::GetLogsRequest request;</span><br><span class=\"line\"></span><br><span class=\"line\">        controllerStream::LogEntry log_entry;</span><br><span class=\"line\">        grpc::ClientContext context;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 调用流式 RPC，获取一个 reader</span></span><br><span class=\"line\">        std::unique_ptr&lt;grpc::ClientReader&lt;controllerStream::LogEntry&gt; &gt; <span class=\"built_in\">reader</span>(</span><br><span class=\"line\">            stub_-&gt;<span class=\"built_in\">GetRealtimeLogs</span>(&amp;context, request));</span><br><span class=\"line\"></span><br><span class=\"line\">        std::cout &lt;&lt; <span class=\"string\">&quot;Subscribed to log stream. Waiting for logs...&quot;</span> &lt;&lt; std::endl;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 在循环中不断读取从服务端推送来的日志</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span> (reader-&gt;<span class=\"built_in\">Read</span>(&amp;log_entry))</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            std::cout &lt;&lt; <span class=\"string\">&quot;[LOG RECEIVED] &quot;</span></span><br><span class=\"line\">                    &lt;&lt; <span class=\"string\">&quot;Time: &quot;</span> &lt;&lt; log_entry.<span class=\"built_in\">timestamp</span>()</span><br><span class=\"line\">                    &lt;&lt; <span class=\"string\">&quot;, Level: &quot;</span> &lt;&lt; log_entry.<span class=\"built_in\">level</span>()</span><br><span class=\"line\">                    &lt;&lt; <span class=\"string\">&quot;, Message: &quot;</span> &lt;&lt; log_entry.<span class=\"built_in\">message</span>() &lt;&lt; std::endl;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 当 Read() 返回 false 后，通过 Finish() 获取最终的状态</span></span><br><span class=\"line\">        grpc::Status status = reader-&gt;<span class=\"built_in\">Finish</span>();</span><br><span class=\"line\">        <span class=\"comment\">// 错误处理：检查最终状态</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (status.<span class=\"built_in\">ok</span>())</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            std::cout &lt;&lt; <span class=\"string\">&quot;Log stream finished cleanly.&quot;</span> &lt;&lt; std::endl;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            std::cout &lt;&lt; <span class=\"string\">&quot;RPC failed with error: &quot;</span> &lt;&lt; status.<span class=\"built_in\">error_code</span>() &lt;&lt; <span class=\"string\">&quot;: &quot;</span> &lt;&lt; status.<span class=\"built_in\">error_message</span>() &lt;&lt;</span><br><span class=\"line\">                    std::endl;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">    std::unique_ptr&lt;controllerStream::Controller::Stub&gt; stub_;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"type\">int</span> argc, <span class=\"type\">char</span> **argv)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"function\">ControllerClient <span class=\"title\">client</span><span class=\"params\">(grpc::CreateChannel(</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">        <span class=\"string\">&quot;localhost:50051&quot;</span>, grpc::InsecureChannelCredentials()))</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    std::cout &lt;&lt; <span class=\"string\">&quot;n--- Calling GetRealtimeLogs ---&quot;</span> &lt;&lt; std::endl;</span><br><span class=\"line\">    client.<span class=\"built_in\">GetRealtimeLogs</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>下面是整个调用过程的时序图:<br><img src=\"/images/client.png\" alt=\"client\"></p>\n<h2 id=\"关于错误处理的初步思考\"><a href=\"#关于错误处理的初步思考\" class=\"headerlink\" title=\"关于错误处理的初步思考\"></a><strong>关于错误处理的初步思考</strong></h2><p>从上面的代码中，我们可以看到 gRPC 在流式通信中处理错误的基本方式：</p>\n<ul>\n<li><strong>服务端：</strong><ul>\n<li>可以通过检查 context-&gt;IsCancelled() 来判断客户端是否已经主动断开了连接。</li>\n<li>writer-&gt;Write() 的返回值可以判断写入是否成功。如果返回 false，通常意味着底层的连接已经出问题了。</li>\n</ul>\n</li>\n<li><strong>客户端：</strong><ul>\n<li>reader-&gt;Read() 循环结束后，必须调用 reader-&gt;Finish() 来获取整个流的最终状态。</li>\n<li>如果 status.ok() 为 true，表示流正常结束。</li>\n<li>如果为 false，则表示流是因错误而中断的，我们可以从 status 对象中获取错误码和错误信息。</li>\n</ul>\n</li>\n</ul>\n<p>这只是最基础的错误处理。在真实的健壮应用中，我们还需要考虑网络抖动、超时、重试等更复杂的策略，这些都是后续可以深入的话题。</p>\n<h2 id=\"总结与展望\"><a href=\"#总结与展望\" class=\"headerlink\" title=\"总结与展望\"></a><strong>总结与展望</strong></h2><p>本文我们成功地解决了项目中的一个核心需求——<strong>实时数据推送</strong>。通过学习和实践 gRPC 的服务端流式 RPC，我们已经从“一问一答”的通信模式，迈向了更灵活、更高效的“实时订阅”模式。</p>\n<p>我们深入了解了如何在 .proto 中定义流式服务，以及如何在 C++ 中实现流的服务端（ServerWriter）和客户端（ClientReader）。</p>\n<p>在下一篇文章中，我们将讲解 <strong>在Qt应用中如何直接集成Grpc</strong></p>\n<p><strong>最后，再次强调：</strong> 本系列文章是我个人的学习笔记和思考，而 gRPC 的官方文档和 grpc&#x2F;grpc GitHub 仓库中的例子是最好的、最权威的学习资料。<strong>官方文档和示例远比我写得好，强烈建议大家去阅读！</strong> 希望我的文章能作为一个有益的补充和不同的视角。</p>"},{"title":"grpc实践之路:04.grpc异步回调接口的使用","date":"2025-08-26T16:00:00.000Z","_content":"## **前言**\n\n在之前的文章中，我们实现的服务端模型都有一个共同的特点：它们是**同步**的。无论是 Unary RPC 还是流式 RPC，我们的服务端实现在 RPC 处理函数中都会阻塞，直到该次请求处理完成。这意味着，为了同时服务多个客户端，gRPC 的同步服务器不得不在其内部的线程池中为每一个并发请求分配一个线程。这种“一个请求一个线程”的模式，在并发量不高时简单有效。但试想一下，当成千上万的客户端同时涌入时，服务器的线程资源会被迅速耗尽，系统将不堪重负。\n\n一个真正的高性能服务，必须具备“一人多能”的本领——用少量的核心线程，处理成千上万的并发请求。要做到这一点，我们必须**拥抱异步编程**。\n\n本文，我们将深入 gRPC C++ 最核心、也是官方最新推荐的异步服务模型——**Callback API（回调式 API）**。它也被称为“**Reactor 模式**”，因为它与我们熟悉的 muduo 等网络库的事件驱动思想如出一辙。我们将通过实践，构建一个真正意义上的高性能 gRPC 异步服务。\n\n<!--more-->\n---\n\n## **异步服务的核心理念：事件、队列与回调**\n\n在深入代码之前，我们必须理解 gRPC 异步模型的三个核心概念：\n\n* **事件驱动 (Event-Driven)**: 服务器不再为每个请求阻塞等待，而是以非阻塞的方式发起所有操作（如接收请求、读写数据、发送响应）。它只关心“事件”的发生，比如“一个新的 RPC 请求到来了”、“数据发送完成了”。\n* **完成队列 (grpc::ServerCompletionQueue)**: 这是 gRPC C++ 异步编程的心脏。所有异步操作的“完成事件”最终都会被放入这个队列中。我们的工作线程只需要从这个队列里取出已完成的事件进行处理即可。\n* **回调 (Callback)**: 对于每一个完成的事件，我们应该执行什么操作？这就是通过回调函数来定义的。\n\n幸运的是，从 gRPC v1.60 版本开始，官方引入了全新的 **Callback API**，极大地简化了异步服务的编写。我们不再需要手动管理复杂的完成队列和“标签”，而是可以通过实现一系列的回调函数来响应事件。\n\n\n## **第一步：重新认识服务实现**\n\n在 Callback API 模式下，我们的服务实现类依然继承自 gRPC 生成的 Service 基类，但有一个关键区别：我们不再直接重写 RPC 方法本身，而是重写一个对应的 Request + RPC 方法名 的方法。\n\n这个方法的作用，不再是处理业务逻辑，而是**创建一个“反应堆 (Reactor)”对象，并将其返回给 gRPC 框架。**\n\n我们以一个简单的 Unary RPC 为例：\n\n```C++\n// server.cc (新的单次 RPC 服务实现)  \n#**include** <iostream>  \n#**include** <memory>  \n#**include** <string>  \n#**include** <thread>  \n#**include** <chrono>\n\n#**include** <grpcpp/grpcpp.h>  \n#**include** \"controller.grpc.pb.h\" // 假设这是你 gRPC 生成的头文件\n\n// 1. 我们需要为每个 RPC 方法创建一个 Reactor 类  \n//    这个类继承自 gRPC 提供的 ServerUnaryReactor  \nclass GreeterReactor : public grpc::ServerUnaryReactor {  \npublic:  \n// 构造函数接收请求和响应对象  \nGreeterReactor(const controller::GetVersionRequest* request, controller::GetVersionResponse* response)  \n: request_(request), response_(response) {\n\n        // 在这里可以开始处理业务逻辑  \n        std::cout << \"Reactor created. Processing GetVersion request...\" << std::endl;  \n        std::string version_str = \"Async Core Service v2.0.0\";  \n        response_->set_version(version_str);\n\n        // 当业务逻辑处理完毕，调用 Finish() 告诉 gRPC 框架可以发送响应了  \n        Finish(grpc::Status::OK);  \n    }\n\n    // 2. 当整个 RPC 调用（包括响应发送）彻底完成时，gRPC 会调用这个方法  \n    void OnDone() override {  \n        std::cout << \"Reactor is done. Deleting self.\" << std::endl;  \n        // 在这里，我们可以安全地释放资源，比如删除自身  \n        delete this;  \n    }\n\n    // 你也可以实现其他回调，如 OnCancel 或 OnSendInitialMetadataDone  \n    void OnCancel() override {  \n        std::cout << \"GreeterReactor::OnCancel\" << std::endl;  \n    }\n\n    void OnSendInitialMetadataDone(bool ok) override {  \n        std::cout << \"GreeterReactor::OnSendInitialMetadataDone: \" << (ok ? \"Success\" : \"Failed\") << std::endl;  \n    }\n\nprivate:  \nconst controller::GetVersionRequest* request_;  \ncontroller::GetVersionResponse* response_;  \n};\n\nclass ControllerServiceImpl final : public controller::Controller::CallbackService {  \npublic:  \n// 3. 注意！我们不再重写 GetVersion，而是重写返回 ServerUnaryReactor* 的 GetVersion 方法  \n//    （对于 CallbackService，它直接对应 RPC 方法名）。  \ngrpc::ServerUnaryReactor* GetVersion(grpc::CallbackServerContext* context,  \nconst controller::GetVersionRequest* request,  \ncontroller::GetVersionResponse* response) override {  \n// 这个方法的核心职责就是：创建一个新的 Reactor 实例，然后返回它  \n// gRPC 框架会接管这个 Reactor 的生命周期  \nreturn new GreeterReactor(request, response);  \n}  \n};\n```\n---\n![reactor](/images/reactor_workflow.png)\n## **第二步：理解新的异步工作流**\n\n这个基于 Reactor 的新模型，其工作流程是这样的：\n\n1. **注册服务**： 我们将 ControllerServiceImpl 的一个实例注册到 ServerBuilder 中。\n2. **等待请求**： gRPC 框架的 I/O 线程在后台监听新请求。\n3. **创建 Reactor**： 当一个 GetVersion 请求到来时，gRPC 框架会自动调用我们实现的 ControllerServiceImpl::GetVersion 方法。\n4. **返回 Reactor**： 我们在这个方法里 new 一个 GreeterReactor 对象并返回。我们只负责创建，不负责销毁。\n5. **业务处理与响应**： 在 GreeterReactor 的构造函数中，我们处理业务逻辑，填充 response，然后调用 Finish(Status::OK)。这个 Finish 调用是非阻塞的，它只是告诉 gRPC 框架：“我的活儿干完了，你可以把响应发出去了。”\n6. **完成与销毁**： 当 gRPC 框架真正将响应发送完毕，并完成了所有清理工作后，它会调用 GreeterReactor::OnDone()。我们在这个回调函数中，安全地 delete this，完成 Reactor 对象的生命周期闭环。\n\n\n![com](/images/completion_queue_sequence-0.png)\n### **扩展：如何实现异步的流式服务？**\n\nReactor 模式对于流式 RPC 同样强大。让我们看看如何用它来实现一个服务端流式 RPC —— GetRealtimeLogs。\n\n```c++\n// [新增] Reactor 类，用于处理一个 GetRealtimeLogs 请求的生命周期  \nclass LogStreamReactor : public grpc::ServerWriteReactor<controllerStream::LogEntry> {  \npublic:  \n// 构造函数接收请求，并立即开始发送第一条日志  \nLogStreamReactor(const controllerStream::GetLogsRequest* request)  \n: request_(*request) // 保存请求的副本（如果需要的话）  \n{  \nstd::cout << \"Client subscribed for logs (Async Reactor).\" << std::endl;  \n// 启动第一次写入  \nSendLog();  \n}\n\n    // 当流完成时（无论成功、失败或取消），此方法被调用  \n    void OnDone() override {  \n        std::cout << \"LogStreamReactor: OnDone called. Cleaning up.\" << std::endl;  \n        // 在这里释放所有与此 Reactor 相关的资源  \n        delete this;  \n    }\n\n    // 当客户端取消流时，此方法被调用  \n    void OnCancel() override {  \n        std::cout << \"LogStreamReactor: Client cancelled the request.\" << std::endl;  \n        // OnCancel 之后通常会调用 OnDone，所以主要清理逻辑放在 OnDone  \n    }\n\n    // 当上一次的 StartWrite() 操作完成时，此方法被调用  \n    void OnWriteDone(bool ok) override {  \n        // 'ok' 为 false 表示写入失败（例如，连接断开）  \n        if (!ok) {  \n            std::cout << \"LogStreamReactor: Failed to write to stream. Connection might be broken.\" << std::endl;  \n            // 不需要手动调用 Finish，当 OnWriteDone 返回后，gRPC 会自动处理清理  \n            // 最终会调用 OnDone  \n            return;  \n        }\n\n        // 检查是否还有更多日志要发送  \n        if (log_counter_ <= 10) {  \n            // 如果上一次写入成功，就继续发送下一条  \n            SendLog();  \n        } else {  \n            // 所有日志都已发送完毕  \n            std::cout << \"LogStreamReactor: Finished sending all logs.\" << std::endl;  \n            // 发送一个 OK 状态来正常关闭流  \n            Finish(grpc::Status::OK);  \n        }  \n    }\n\nprivate:  \nvoid SendLog() {  \n// 准备下一条日志  \nlog_entry_.set_timestamp(std::chrono::system_clock::to_time_t(std::chrono::system_clock::now()));  \nlog_entry_.set_level(\"INFO\");  \nlog_entry_.set_message(\"This is async log message number \" + std::to_string(log_counter_));\n\n        log_counter_++;\n\n        // 模拟日志生成的延迟  \n        // 重要提示：在异步模型中，长时间的 sleep 会阻塞处理其他事件的线程！  \n        // 在真实应用中，这里应该是快速的非阻塞操作。  \n        // 为了演示，我们仍然使用 sleep，但要意识到它的影响。  \n        std::this_thread::sleep_for(std::chrono::seconds(1));\n\n        // 发起异步写入操作。我们传递 log_entry_ 的地址。  \n        // gRPC 会在 OnWriteDone 被调用之前保证这个地址是有效的。  \n        StartWrite(&log_entry_);  \n    }\n\n    const controllerStream::GetLogsRequest request_;  \n    controllerStream::LogEntry log_entry_; // 重用 LogEntry 对象以避免重复分配内存  \n    int log_counter_ = 1;  \n};\n\nclass ControllerStreamServiceImpl final : public controllerStream::Controller::CallbackService {  \n// 注意：服务类继承自 ...::CallbackService 而不是 ...::Service\n\n    // 实现 GetRealtimeLogs 方法  \n    // 它不再返回 Status，而是返回一个 ServerWriteReactor*  \n    grpc::ServerWriteReactor<controllerStream::LogEntry>* GetRealtimeLogs(  \n        grpc::CallbackServerContext* context,  \n        const controllerStream::GetLogsRequest* request) override {\n\n        // 创建一个新的 Reactor 来处理这个请求  \n        // gRPC 框架将拥有这个指针的所有权，并在 OnDone 中由我们自己 delete  \n        return new LogStreamReactor(request);  \n    }  \n};\n```\n---\n\n## **第三步：启动异步服务器**\n\n最令人惊喜的是，启动一个异步服务器的主函数部分，与同步服务器几乎一模一样，甚至更简单。我们不再需要自己管理线程池。\n\nC++\n```c++\n/ server_main.cc  \nvoid RunServer() {  \nstd::string server_address(\"0.0.0.0:50051\");  \n// 这里根据你的服务类型选择正确的实现类，例如 ControllerServiceImpl 或 ControllerStreamServiceImpl  \nControllerServiceImpl service;\n\n    grpc::ServerBuilder builder;  \n    builder.AddListeningPort(server_address, grpc::InsecureServerCredentials());\n\n    // 注册回调服务（异步模式）  \n    builder.RegisterService(&service);\n\n    std::unique_ptr<grpc::Server> server(builder.BuildAndStart());  \n    std::cout << \"Async Reactor Server listening on \" << server_address << std::endl;\n\n    server->Wait(); // 阻塞主线程，等待服务器关闭  \n}\n\nint main(int argc, char** argv) {  \nRunServer();  \nreturn 0;  \n}\n```\n\ngRPC 框架内部已经为我们处理好了线程池、完成队列、以及事件分发的所有复杂工作。我们只需要提供一个个小巧、独立的 Reactor 对象来处理具体的业务逻辑即可。\n\n---\n\n## **个人思考：新旧异步模型的对比与 Reactor 的优雅**\n\n如果你之前了解过 gRPC 旧的、基于 CompletionQueue 和 void* tag 的异步 API，你会发现这个新的 Callback API (Reactor 模式) 是一个巨大的进步：\n\n* **告别手动状态管理**： 在旧模型中，我们需要在一个庞大的 switch(tag) 语句中手动管理一次 RPC 的不同阶段（CREATE, PROCESS, FINISH），非常容易出错。现在，这些状态被封装在了 Reactor 对象内部，逻辑更清晰。\n* **无需手动管理 CompletionQueue**： 我们不再需要编写 while(cq_->Next()) 这样的事件循环，gRPC 框架为我们代劳了。\n* **更符合现代 C++ 的回调思想**： 这种“注册回调，等待框架调用”的模式，与 muduo 的事件处理、Qt 的信号槽都非常相似，更符合现代 C++ 开发者的直觉。\n\n---\n\n## **总结与展望**\n\n本文，我们迈出了从“能用”到“高性能”的关键一步。通过学习和实践 gRPC 最新的 Callback API (Reactor 模式)，我们构建了一个真正意义上的异步服务端。\n\n我们深入理解了如何通过实现 ServerUnaryReactor 和 ServerWriteReactor，将业务逻辑与 gRPC 的事件循环解耦，从而让我们的服务能够用少量的线程处理海量的并发请求。\n","source":"_posts/grpc/grpc实践之路:04.异步回调接口的使用.md","raw":"---\ntitle: \"grpc实践之路:04.grpc异步回调接口的使用\"\ndate: 2025-08-27\ncategories: \n  - 动手实践-三方库\n  - grpc\ntags:\n  - C++\n  - grpc\n  - 进程间通信\n---\n## **前言**\n\n在之前的文章中，我们实现的服务端模型都有一个共同的特点：它们是**同步**的。无论是 Unary RPC 还是流式 RPC，我们的服务端实现在 RPC 处理函数中都会阻塞，直到该次请求处理完成。这意味着，为了同时服务多个客户端，gRPC 的同步服务器不得不在其内部的线程池中为每一个并发请求分配一个线程。这种“一个请求一个线程”的模式，在并发量不高时简单有效。但试想一下，当成千上万的客户端同时涌入时，服务器的线程资源会被迅速耗尽，系统将不堪重负。\n\n一个真正的高性能服务，必须具备“一人多能”的本领——用少量的核心线程，处理成千上万的并发请求。要做到这一点，我们必须**拥抱异步编程**。\n\n本文，我们将深入 gRPC C++ 最核心、也是官方最新推荐的异步服务模型——**Callback API（回调式 API）**。它也被称为“**Reactor 模式**”，因为它与我们熟悉的 muduo 等网络库的事件驱动思想如出一辙。我们将通过实践，构建一个真正意义上的高性能 gRPC 异步服务。\n\n<!--more-->\n---\n\n## **异步服务的核心理念：事件、队列与回调**\n\n在深入代码之前，我们必须理解 gRPC 异步模型的三个核心概念：\n\n* **事件驱动 (Event-Driven)**: 服务器不再为每个请求阻塞等待，而是以非阻塞的方式发起所有操作（如接收请求、读写数据、发送响应）。它只关心“事件”的发生，比如“一个新的 RPC 请求到来了”、“数据发送完成了”。\n* **完成队列 (grpc::ServerCompletionQueue)**: 这是 gRPC C++ 异步编程的心脏。所有异步操作的“完成事件”最终都会被放入这个队列中。我们的工作线程只需要从这个队列里取出已完成的事件进行处理即可。\n* **回调 (Callback)**: 对于每一个完成的事件，我们应该执行什么操作？这就是通过回调函数来定义的。\n\n幸运的是，从 gRPC v1.60 版本开始，官方引入了全新的 **Callback API**，极大地简化了异步服务的编写。我们不再需要手动管理复杂的完成队列和“标签”，而是可以通过实现一系列的回调函数来响应事件。\n\n\n## **第一步：重新认识服务实现**\n\n在 Callback API 模式下，我们的服务实现类依然继承自 gRPC 生成的 Service 基类，但有一个关键区别：我们不再直接重写 RPC 方法本身，而是重写一个对应的 Request + RPC 方法名 的方法。\n\n这个方法的作用，不再是处理业务逻辑，而是**创建一个“反应堆 (Reactor)”对象，并将其返回给 gRPC 框架。**\n\n我们以一个简单的 Unary RPC 为例：\n\n```C++\n// server.cc (新的单次 RPC 服务实现)  \n#**include** <iostream>  \n#**include** <memory>  \n#**include** <string>  \n#**include** <thread>  \n#**include** <chrono>\n\n#**include** <grpcpp/grpcpp.h>  \n#**include** \"controller.grpc.pb.h\" // 假设这是你 gRPC 生成的头文件\n\n// 1. 我们需要为每个 RPC 方法创建一个 Reactor 类  \n//    这个类继承自 gRPC 提供的 ServerUnaryReactor  \nclass GreeterReactor : public grpc::ServerUnaryReactor {  \npublic:  \n// 构造函数接收请求和响应对象  \nGreeterReactor(const controller::GetVersionRequest* request, controller::GetVersionResponse* response)  \n: request_(request), response_(response) {\n\n        // 在这里可以开始处理业务逻辑  \n        std::cout << \"Reactor created. Processing GetVersion request...\" << std::endl;  \n        std::string version_str = \"Async Core Service v2.0.0\";  \n        response_->set_version(version_str);\n\n        // 当业务逻辑处理完毕，调用 Finish() 告诉 gRPC 框架可以发送响应了  \n        Finish(grpc::Status::OK);  \n    }\n\n    // 2. 当整个 RPC 调用（包括响应发送）彻底完成时，gRPC 会调用这个方法  \n    void OnDone() override {  \n        std::cout << \"Reactor is done. Deleting self.\" << std::endl;  \n        // 在这里，我们可以安全地释放资源，比如删除自身  \n        delete this;  \n    }\n\n    // 你也可以实现其他回调，如 OnCancel 或 OnSendInitialMetadataDone  \n    void OnCancel() override {  \n        std::cout << \"GreeterReactor::OnCancel\" << std::endl;  \n    }\n\n    void OnSendInitialMetadataDone(bool ok) override {  \n        std::cout << \"GreeterReactor::OnSendInitialMetadataDone: \" << (ok ? \"Success\" : \"Failed\") << std::endl;  \n    }\n\nprivate:  \nconst controller::GetVersionRequest* request_;  \ncontroller::GetVersionResponse* response_;  \n};\n\nclass ControllerServiceImpl final : public controller::Controller::CallbackService {  \npublic:  \n// 3. 注意！我们不再重写 GetVersion，而是重写返回 ServerUnaryReactor* 的 GetVersion 方法  \n//    （对于 CallbackService，它直接对应 RPC 方法名）。  \ngrpc::ServerUnaryReactor* GetVersion(grpc::CallbackServerContext* context,  \nconst controller::GetVersionRequest* request,  \ncontroller::GetVersionResponse* response) override {  \n// 这个方法的核心职责就是：创建一个新的 Reactor 实例，然后返回它  \n// gRPC 框架会接管这个 Reactor 的生命周期  \nreturn new GreeterReactor(request, response);  \n}  \n};\n```\n---\n![reactor](/images/reactor_workflow.png)\n## **第二步：理解新的异步工作流**\n\n这个基于 Reactor 的新模型，其工作流程是这样的：\n\n1. **注册服务**： 我们将 ControllerServiceImpl 的一个实例注册到 ServerBuilder 中。\n2. **等待请求**： gRPC 框架的 I/O 线程在后台监听新请求。\n3. **创建 Reactor**： 当一个 GetVersion 请求到来时，gRPC 框架会自动调用我们实现的 ControllerServiceImpl::GetVersion 方法。\n4. **返回 Reactor**： 我们在这个方法里 new 一个 GreeterReactor 对象并返回。我们只负责创建，不负责销毁。\n5. **业务处理与响应**： 在 GreeterReactor 的构造函数中，我们处理业务逻辑，填充 response，然后调用 Finish(Status::OK)。这个 Finish 调用是非阻塞的，它只是告诉 gRPC 框架：“我的活儿干完了，你可以把响应发出去了。”\n6. **完成与销毁**： 当 gRPC 框架真正将响应发送完毕，并完成了所有清理工作后，它会调用 GreeterReactor::OnDone()。我们在这个回调函数中，安全地 delete this，完成 Reactor 对象的生命周期闭环。\n\n\n![com](/images/completion_queue_sequence-0.png)\n### **扩展：如何实现异步的流式服务？**\n\nReactor 模式对于流式 RPC 同样强大。让我们看看如何用它来实现一个服务端流式 RPC —— GetRealtimeLogs。\n\n```c++\n// [新增] Reactor 类，用于处理一个 GetRealtimeLogs 请求的生命周期  \nclass LogStreamReactor : public grpc::ServerWriteReactor<controllerStream::LogEntry> {  \npublic:  \n// 构造函数接收请求，并立即开始发送第一条日志  \nLogStreamReactor(const controllerStream::GetLogsRequest* request)  \n: request_(*request) // 保存请求的副本（如果需要的话）  \n{  \nstd::cout << \"Client subscribed for logs (Async Reactor).\" << std::endl;  \n// 启动第一次写入  \nSendLog();  \n}\n\n    // 当流完成时（无论成功、失败或取消），此方法被调用  \n    void OnDone() override {  \n        std::cout << \"LogStreamReactor: OnDone called. Cleaning up.\" << std::endl;  \n        // 在这里释放所有与此 Reactor 相关的资源  \n        delete this;  \n    }\n\n    // 当客户端取消流时，此方法被调用  \n    void OnCancel() override {  \n        std::cout << \"LogStreamReactor: Client cancelled the request.\" << std::endl;  \n        // OnCancel 之后通常会调用 OnDone，所以主要清理逻辑放在 OnDone  \n    }\n\n    // 当上一次的 StartWrite() 操作完成时，此方法被调用  \n    void OnWriteDone(bool ok) override {  \n        // 'ok' 为 false 表示写入失败（例如，连接断开）  \n        if (!ok) {  \n            std::cout << \"LogStreamReactor: Failed to write to stream. Connection might be broken.\" << std::endl;  \n            // 不需要手动调用 Finish，当 OnWriteDone 返回后，gRPC 会自动处理清理  \n            // 最终会调用 OnDone  \n            return;  \n        }\n\n        // 检查是否还有更多日志要发送  \n        if (log_counter_ <= 10) {  \n            // 如果上一次写入成功，就继续发送下一条  \n            SendLog();  \n        } else {  \n            // 所有日志都已发送完毕  \n            std::cout << \"LogStreamReactor: Finished sending all logs.\" << std::endl;  \n            // 发送一个 OK 状态来正常关闭流  \n            Finish(grpc::Status::OK);  \n        }  \n    }\n\nprivate:  \nvoid SendLog() {  \n// 准备下一条日志  \nlog_entry_.set_timestamp(std::chrono::system_clock::to_time_t(std::chrono::system_clock::now()));  \nlog_entry_.set_level(\"INFO\");  \nlog_entry_.set_message(\"This is async log message number \" + std::to_string(log_counter_));\n\n        log_counter_++;\n\n        // 模拟日志生成的延迟  \n        // 重要提示：在异步模型中，长时间的 sleep 会阻塞处理其他事件的线程！  \n        // 在真实应用中，这里应该是快速的非阻塞操作。  \n        // 为了演示，我们仍然使用 sleep，但要意识到它的影响。  \n        std::this_thread::sleep_for(std::chrono::seconds(1));\n\n        // 发起异步写入操作。我们传递 log_entry_ 的地址。  \n        // gRPC 会在 OnWriteDone 被调用之前保证这个地址是有效的。  \n        StartWrite(&log_entry_);  \n    }\n\n    const controllerStream::GetLogsRequest request_;  \n    controllerStream::LogEntry log_entry_; // 重用 LogEntry 对象以避免重复分配内存  \n    int log_counter_ = 1;  \n};\n\nclass ControllerStreamServiceImpl final : public controllerStream::Controller::CallbackService {  \n// 注意：服务类继承自 ...::CallbackService 而不是 ...::Service\n\n    // 实现 GetRealtimeLogs 方法  \n    // 它不再返回 Status，而是返回一个 ServerWriteReactor*  \n    grpc::ServerWriteReactor<controllerStream::LogEntry>* GetRealtimeLogs(  \n        grpc::CallbackServerContext* context,  \n        const controllerStream::GetLogsRequest* request) override {\n\n        // 创建一个新的 Reactor 来处理这个请求  \n        // gRPC 框架将拥有这个指针的所有权，并在 OnDone 中由我们自己 delete  \n        return new LogStreamReactor(request);  \n    }  \n};\n```\n---\n\n## **第三步：启动异步服务器**\n\n最令人惊喜的是，启动一个异步服务器的主函数部分，与同步服务器几乎一模一样，甚至更简单。我们不再需要自己管理线程池。\n\nC++\n```c++\n/ server_main.cc  \nvoid RunServer() {  \nstd::string server_address(\"0.0.0.0:50051\");  \n// 这里根据你的服务类型选择正确的实现类，例如 ControllerServiceImpl 或 ControllerStreamServiceImpl  \nControllerServiceImpl service;\n\n    grpc::ServerBuilder builder;  \n    builder.AddListeningPort(server_address, grpc::InsecureServerCredentials());\n\n    // 注册回调服务（异步模式）  \n    builder.RegisterService(&service);\n\n    std::unique_ptr<grpc::Server> server(builder.BuildAndStart());  \n    std::cout << \"Async Reactor Server listening on \" << server_address << std::endl;\n\n    server->Wait(); // 阻塞主线程，等待服务器关闭  \n}\n\nint main(int argc, char** argv) {  \nRunServer();  \nreturn 0;  \n}\n```\n\ngRPC 框架内部已经为我们处理好了线程池、完成队列、以及事件分发的所有复杂工作。我们只需要提供一个个小巧、独立的 Reactor 对象来处理具体的业务逻辑即可。\n\n---\n\n## **个人思考：新旧异步模型的对比与 Reactor 的优雅**\n\n如果你之前了解过 gRPC 旧的、基于 CompletionQueue 和 void* tag 的异步 API，你会发现这个新的 Callback API (Reactor 模式) 是一个巨大的进步：\n\n* **告别手动状态管理**： 在旧模型中，我们需要在一个庞大的 switch(tag) 语句中手动管理一次 RPC 的不同阶段（CREATE, PROCESS, FINISH），非常容易出错。现在，这些状态被封装在了 Reactor 对象内部，逻辑更清晰。\n* **无需手动管理 CompletionQueue**： 我们不再需要编写 while(cq_->Next()) 这样的事件循环，gRPC 框架为我们代劳了。\n* **更符合现代 C++ 的回调思想**： 这种“注册回调，等待框架调用”的模式，与 muduo 的事件处理、Qt 的信号槽都非常相似，更符合现代 C++ 开发者的直觉。\n\n---\n\n## **总结与展望**\n\n本文，我们迈出了从“能用”到“高性能”的关键一步。通过学习和实践 gRPC 最新的 Callback API (Reactor 模式)，我们构建了一个真正意义上的异步服务端。\n\n我们深入理解了如何通过实现 ServerUnaryReactor 和 ServerWriteReactor，将业务逻辑与 gRPC 的事件循环解耦，从而让我们的服务能够用少量的线程处理海量的并发请求。\n","slug":"grpc/grpc实践之路:04.异步回调接口的使用","published":1,"updated":"2025-08-28T12:43:39.039Z","comments":1,"layout":"post","photos":[],"_id":"cmevecvs60006hfroepjwa7rq","content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a><strong>前言</strong></h2><p>在之前的文章中，我们实现的服务端模型都有一个共同的特点：它们是<strong>同步</strong>的。无论是 Unary RPC 还是流式 RPC，我们的服务端实现在 RPC 处理函数中都会阻塞，直到该次请求处理完成。这意味着，为了同时服务多个客户端，gRPC 的同步服务器不得不在其内部的线程池中为每一个并发请求分配一个线程。这种“一个请求一个线程”的模式，在并发量不高时简单有效。但试想一下，当成千上万的客户端同时涌入时，服务器的线程资源会被迅速耗尽，系统将不堪重负。</p>\n<p>一个真正的高性能服务，必须具备“一人多能”的本领——用少量的核心线程，处理成千上万的并发请求。要做到这一点，我们必须<strong>拥抱异步编程</strong>。</p>\n<p>本文，我们将深入 gRPC C++ 最核心、也是官方最新推荐的异步服务模型——<strong>Callback API（回调式 API）</strong>。它也被称为“<strong>Reactor 模式</strong>”，因为它与我们熟悉的 muduo 等网络库的事件驱动思想如出一辙。我们将通过实践，构建一个真正意义上的高性能 gRPC 异步服务。</p>\n<span id=\"more\"></span>\n<hr>\n<h2 id=\"异步服务的核心理念：事件、队列与回调\"><a href=\"#异步服务的核心理念：事件、队列与回调\" class=\"headerlink\" title=\"异步服务的核心理念：事件、队列与回调\"></a><strong>异步服务的核心理念：事件、队列与回调</strong></h2><p>在深入代码之前，我们必须理解 gRPC 异步模型的三个核心概念：</p>\n<ul>\n<li><strong>事件驱动 (Event-Driven)</strong>: 服务器不再为每个请求阻塞等待，而是以非阻塞的方式发起所有操作（如接收请求、读写数据、发送响应）。它只关心“事件”的发生，比如“一个新的 RPC 请求到来了”、“数据发送完成了”。</li>\n<li><strong>完成队列 (grpc::ServerCompletionQueue)</strong>: 这是 gRPC C++ 异步编程的心脏。所有异步操作的“完成事件”最终都会被放入这个队列中。我们的工作线程只需要从这个队列里取出已完成的事件进行处理即可。</li>\n<li><strong>回调 (Callback)</strong>: 对于每一个完成的事件，我们应该执行什么操作？这就是通过回调函数来定义的。</li>\n</ul>\n<p>幸运的是，从 gRPC v1.60 版本开始，官方引入了全新的 <strong>Callback API</strong>，极大地简化了异步服务的编写。我们不再需要手动管理复杂的完成队列和“标签”，而是可以通过实现一系列的回调函数来响应事件。</p>\n<h2 id=\"第一步：重新认识服务实现\"><a href=\"#第一步：重新认识服务实现\" class=\"headerlink\" title=\"第一步：重新认识服务实现\"></a><strong>第一步：重新认识服务实现</strong></h2><p>在 Callback API 模式下，我们的服务实现类依然继承自 gRPC 生成的 Service 基类，但有一个关键区别：我们不再直接重写 RPC 方法本身，而是重写一个对应的 Request + RPC 方法名 的方法。</p>\n<p>这个方法的作用，不再是处理业务逻辑，而是<strong>创建一个“反应堆 (Reactor)”对象，并将其返回给 gRPC 框架。</strong></p>\n<p>我们以一个简单的 Unary RPC 为例：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// server.cc (新的单次 RPC 服务实现)  </span></span><br><span class=\"line\">#**include** &lt;iostream&gt;  </span><br><span class=\"line\">#**include** &lt;memory&gt;  </span><br><span class=\"line\">#**include** &lt;string&gt;  </span><br><span class=\"line\">#**include** &lt;thread&gt;  </span><br><span class=\"line\">#**include** &lt;chrono&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">#**include** &lt;grpcpp/grpcpp.h&gt;  </span><br><span class=\"line\">#**include** <span class=\"string\">&quot;controller.grpc.pb.h&quot;</span> <span class=\"comment\">// 假设这是你 gRPC 生成的头文件</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 1. 我们需要为每个 RPC 方法创建一个 Reactor 类  </span></span><br><span class=\"line\"><span class=\"comment\">//    这个类继承自 gRPC 提供的 ServerUnaryReactor  </span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">GreeterReactor</span> : <span class=\"keyword\">public</span> grpc::ServerUnaryReactor &#123;  </span><br><span class=\"line\"><span class=\"keyword\">public</span>:  </span><br><span class=\"line\"><span class=\"comment\">// 构造函数接收请求和响应对象  </span></span><br><span class=\"line\"><span class=\"built_in\">GreeterReactor</span>(<span class=\"type\">const</span> controller::GetVersionRequest* request, controller::GetVersionResponse* response)  </span><br><span class=\"line\">: <span class=\"built_in\">request_</span>(request), <span class=\"built_in\">response_</span>(response) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 在这里可以开始处理业务逻辑  </span></span><br><span class=\"line\">        std::cout &lt;&lt; <span class=\"string\">&quot;Reactor created. Processing GetVersion request...&quot;</span> &lt;&lt; std::endl;  </span><br><span class=\"line\">        std::string version_str = <span class=\"string\">&quot;Async Core Service v2.0.0&quot;</span>;  </span><br><span class=\"line\">        response_-&gt;<span class=\"built_in\">set_version</span>(version_str);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 当业务逻辑处理完毕，调用 Finish() 告诉 gRPC 框架可以发送响应了  </span></span><br><span class=\"line\">        <span class=\"built_in\">Finish</span>(grpc::Status::OK);  </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 2. 当整个 RPC 调用（包括响应发送）彻底完成时，gRPC 会调用这个方法  </span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">OnDone</span><span class=\"params\">()</span> <span class=\"keyword\">override</span> </span>&#123;  </span><br><span class=\"line\">        std::cout &lt;&lt; <span class=\"string\">&quot;Reactor is done. Deleting self.&quot;</span> &lt;&lt; std::endl;  </span><br><span class=\"line\">        <span class=\"comment\">// 在这里，我们可以安全地释放资源，比如删除自身  </span></span><br><span class=\"line\">        <span class=\"keyword\">delete</span> <span class=\"keyword\">this</span>;  </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 你也可以实现其他回调，如 OnCancel 或 OnSendInitialMetadataDone  </span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">OnCancel</span><span class=\"params\">()</span> <span class=\"keyword\">override</span> </span>&#123;  </span><br><span class=\"line\">        std::cout &lt;&lt; <span class=\"string\">&quot;GreeterReactor::OnCancel&quot;</span> &lt;&lt; std::endl;  </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">OnSendInitialMetadataDone</span><span class=\"params\">(<span class=\"type\">bool</span> ok)</span> <span class=\"keyword\">override</span> </span>&#123;  </span><br><span class=\"line\">        std::cout &lt;&lt; <span class=\"string\">&quot;GreeterReactor::OnSendInitialMetadataDone: &quot;</span> &lt;&lt; (ok ? <span class=\"string\">&quot;Success&quot;</span> : <span class=\"string\">&quot;Failed&quot;</span>) &lt;&lt; std::endl;  </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">private</span>:  </span><br><span class=\"line\"><span class=\"type\">const</span> controller::GetVersionRequest* request_;  </span><br><span class=\"line\">controller::GetVersionResponse* response_;  </span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">ControllerServiceImpl</span> <span class=\"keyword\">final</span> : <span class=\"keyword\">public</span> controller::Controller::CallbackService &#123;  </span><br><span class=\"line\"><span class=\"keyword\">public</span>:  </span><br><span class=\"line\"><span class=\"comment\">// 3. 注意！我们不再重写 GetVersion，而是重写返回 ServerUnaryReactor* 的 GetVersion 方法  </span></span><br><span class=\"line\"><span class=\"comment\">//    （对于 CallbackService，它直接对应 RPC 方法名）。  </span></span><br><span class=\"line\"><span class=\"function\">grpc::ServerUnaryReactor* <span class=\"title\">GetVersion</span><span class=\"params\">(grpc::CallbackServerContext* context,  </span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\"><span class=\"type\">const</span> controller::GetVersionRequest* request,  </span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">controller::GetVersionResponse* response)</span> <span class=\"keyword\">override</span> </span>&#123;  </span><br><span class=\"line\"><span class=\"comment\">// 这个方法的核心职责就是：创建一个新的 Reactor 实例，然后返回它  </span></span><br><span class=\"line\"><span class=\"comment\">// gRPC 框架会接管这个 Reactor 的生命周期  </span></span><br><span class=\"line\"><span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">GreeterReactor</span>(request, response);  </span><br><span class=\"line\">&#125;  </span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<hr>\n<p><img src=\"/images/reactor_workflow.png\" alt=\"reactor\"></p>\n<h2 id=\"第二步：理解新的异步工作流\"><a href=\"#第二步：理解新的异步工作流\" class=\"headerlink\" title=\"第二步：理解新的异步工作流\"></a><strong>第二步：理解新的异步工作流</strong></h2><p>这个基于 Reactor 的新模型，其工作流程是这样的：</p>\n<ol>\n<li><strong>注册服务</strong>： 我们将 ControllerServiceImpl 的一个实例注册到 ServerBuilder 中。</li>\n<li><strong>等待请求</strong>： gRPC 框架的 I&#x2F;O 线程在后台监听新请求。</li>\n<li><strong>创建 Reactor</strong>： 当一个 GetVersion 请求到来时，gRPC 框架会自动调用我们实现的 ControllerServiceImpl::GetVersion 方法。</li>\n<li><strong>返回 Reactor</strong>： 我们在这个方法里 new 一个 GreeterReactor 对象并返回。我们只负责创建，不负责销毁。</li>\n<li><strong>业务处理与响应</strong>： 在 GreeterReactor 的构造函数中，我们处理业务逻辑，填充 response，然后调用 Finish(Status::OK)。这个 Finish 调用是非阻塞的，它只是告诉 gRPC 框架：“我的活儿干完了，你可以把响应发出去了。”</li>\n<li><strong>完成与销毁</strong>： 当 gRPC 框架真正将响应发送完毕，并完成了所有清理工作后，它会调用 GreeterReactor::OnDone()。我们在这个回调函数中，安全地 delete this，完成 Reactor 对象的生命周期闭环。</li>\n</ol>\n<p><img src=\"/images/completion_queue_sequence-0.png\" alt=\"com\"></p>\n<h3 id=\"扩展：如何实现异步的流式服务？\"><a href=\"#扩展：如何实现异步的流式服务？\" class=\"headerlink\" title=\"扩展：如何实现异步的流式服务？\"></a><strong>扩展：如何实现异步的流式服务？</strong></h3><p>Reactor 模式对于流式 RPC 同样强大。让我们看看如何用它来实现一个服务端流式 RPC —— GetRealtimeLogs。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// [新增] Reactor 类，用于处理一个 GetRealtimeLogs 请求的生命周期  </span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">LogStreamReactor</span> : <span class=\"keyword\">public</span> grpc::ServerWriteReactor&lt;controllerStream::LogEntry&gt; &#123;  </span><br><span class=\"line\"><span class=\"keyword\">public</span>:  </span><br><span class=\"line\"><span class=\"comment\">// 构造函数接收请求，并立即开始发送第一条日志  </span></span><br><span class=\"line\"><span class=\"built_in\">LogStreamReactor</span>(<span class=\"type\">const</span> controllerStream::GetLogsRequest* request)  </span><br><span class=\"line\">: <span class=\"built_in\">request_</span>(*request) <span class=\"comment\">// 保存请求的副本（如果需要的话）  </span></span><br><span class=\"line\">&#123;  </span><br><span class=\"line\">std::cout &lt;&lt; <span class=\"string\">&quot;Client subscribed for logs (Async Reactor).&quot;</span> &lt;&lt; std::endl;  </span><br><span class=\"line\"><span class=\"comment\">// 启动第一次写入  </span></span><br><span class=\"line\"><span class=\"built_in\">SendLog</span>();  </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 当流完成时（无论成功、失败或取消），此方法被调用  </span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">OnDone</span><span class=\"params\">()</span> <span class=\"keyword\">override</span> </span>&#123;  </span><br><span class=\"line\">        std::cout &lt;&lt; <span class=\"string\">&quot;LogStreamReactor: OnDone called. Cleaning up.&quot;</span> &lt;&lt; std::endl;  </span><br><span class=\"line\">        <span class=\"comment\">// 在这里释放所有与此 Reactor 相关的资源  </span></span><br><span class=\"line\">        <span class=\"keyword\">delete</span> <span class=\"keyword\">this</span>;  </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 当客户端取消流时，此方法被调用  </span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">OnCancel</span><span class=\"params\">()</span> <span class=\"keyword\">override</span> </span>&#123;  </span><br><span class=\"line\">        std::cout &lt;&lt; <span class=\"string\">&quot;LogStreamReactor: Client cancelled the request.&quot;</span> &lt;&lt; std::endl;  </span><br><span class=\"line\">        <span class=\"comment\">// OnCancel 之后通常会调用 OnDone，所以主要清理逻辑放在 OnDone  </span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 当上一次的 StartWrite() 操作完成时，此方法被调用  </span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">OnWriteDone</span><span class=\"params\">(<span class=\"type\">bool</span> ok)</span> <span class=\"keyword\">override</span> </span>&#123;  </span><br><span class=\"line\">        <span class=\"comment\">// &#x27;ok&#x27; 为 false 表示写入失败（例如，连接断开）  </span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!ok) &#123;  </span><br><span class=\"line\">            std::cout &lt;&lt; <span class=\"string\">&quot;LogStreamReactor: Failed to write to stream. Connection might be broken.&quot;</span> &lt;&lt; std::endl;  </span><br><span class=\"line\">            <span class=\"comment\">// 不需要手动调用 Finish，当 OnWriteDone 返回后，gRPC 会自动处理清理  </span></span><br><span class=\"line\">            <span class=\"comment\">// 最终会调用 OnDone  </span></span><br><span class=\"line\">            <span class=\"keyword\">return</span>;  </span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 检查是否还有更多日志要发送  </span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (log_counter_ &lt;= <span class=\"number\">10</span>) &#123;  </span><br><span class=\"line\">            <span class=\"comment\">// 如果上一次写入成功，就继续发送下一条  </span></span><br><span class=\"line\">            <span class=\"built_in\">SendLog</span>();  </span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;  </span><br><span class=\"line\">            <span class=\"comment\">// 所有日志都已发送完毕  </span></span><br><span class=\"line\">            std::cout &lt;&lt; <span class=\"string\">&quot;LogStreamReactor: Finished sending all logs.&quot;</span> &lt;&lt; std::endl;  </span><br><span class=\"line\">            <span class=\"comment\">// 发送一个 OK 状态来正常关闭流  </span></span><br><span class=\"line\">            <span class=\"built_in\">Finish</span>(grpc::Status::OK);  </span><br><span class=\"line\">        &#125;  </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">private</span>:  </span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">SendLog</span><span class=\"params\">()</span> </span>&#123;  </span><br><span class=\"line\"><span class=\"comment\">// 准备下一条日志  </span></span><br><span class=\"line\">log_entry_.<span class=\"built_in\">set_timestamp</span>(std::chrono::system_clock::<span class=\"built_in\">to_time_t</span>(std::chrono::system_clock::<span class=\"built_in\">now</span>()));  </span><br><span class=\"line\">log_entry_.<span class=\"built_in\">set_level</span>(<span class=\"string\">&quot;INFO&quot;</span>);  </span><br><span class=\"line\">log_entry_.<span class=\"built_in\">set_message</span>(<span class=\"string\">&quot;This is async log message number &quot;</span> + std::<span class=\"built_in\">to_string</span>(log_counter_));</span><br><span class=\"line\"></span><br><span class=\"line\">        log_counter_++;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 模拟日志生成的延迟  </span></span><br><span class=\"line\">        <span class=\"comment\">// 重要提示：在异步模型中，长时间的 sleep 会阻塞处理其他事件的线程！  </span></span><br><span class=\"line\">        <span class=\"comment\">// 在真实应用中，这里应该是快速的非阻塞操作。  </span></span><br><span class=\"line\">        <span class=\"comment\">// 为了演示，我们仍然使用 sleep，但要意识到它的影响。  </span></span><br><span class=\"line\">        std::this_thread::<span class=\"built_in\">sleep_for</span>(std::chrono::<span class=\"built_in\">seconds</span>(<span class=\"number\">1</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 发起异步写入操作。我们传递 log_entry_ 的地址。  </span></span><br><span class=\"line\">        <span class=\"comment\">// gRPC 会在 OnWriteDone 被调用之前保证这个地址是有效的。  </span></span><br><span class=\"line\">        <span class=\"built_in\">StartWrite</span>(&amp;log_entry_);  </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">const</span> controllerStream::GetLogsRequest request_;  </span><br><span class=\"line\">    controllerStream::LogEntry log_entry_; <span class=\"comment\">// 重用 LogEntry 对象以避免重复分配内存  </span></span><br><span class=\"line\">    <span class=\"type\">int</span> log_counter_ = <span class=\"number\">1</span>;  </span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">ControllerStreamServiceImpl</span> <span class=\"keyword\">final</span> : <span class=\"keyword\">public</span> controllerStream::Controller::CallbackService &#123;  </span><br><span class=\"line\"><span class=\"comment\">// 注意：服务类继承自 ...::CallbackService 而不是 ...::Service</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 实现 GetRealtimeLogs 方法  </span></span><br><span class=\"line\">    <span class=\"comment\">// 它不再返回 Status，而是返回一个 ServerWriteReactor*  </span></span><br><span class=\"line\">    <span class=\"function\">grpc::ServerWriteReactor&lt;controllerStream::LogEntry&gt;* <span class=\"title\">GetRealtimeLogs</span><span class=\"params\">(  </span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">        grpc::CallbackServerContext* context,  </span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">        <span class=\"type\">const</span> controllerStream::GetLogsRequest* request)</span> <span class=\"keyword\">override</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 创建一个新的 Reactor 来处理这个请求  </span></span><br><span class=\"line\">        <span class=\"comment\">// gRPC 框架将拥有这个指针的所有权，并在 OnDone 中由我们自己 delete  </span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">LogStreamReactor</span>(request);  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<hr>\n<h2 id=\"第三步：启动异步服务器\"><a href=\"#第三步：启动异步服务器\" class=\"headerlink\" title=\"第三步：启动异步服务器\"></a><strong>第三步：启动异步服务器</strong></h2><p>最令人惊喜的是，启动一个异步服务器的主函数部分，与同步服务器几乎一模一样，甚至更简单。我们不再需要自己管理线程池。</p>\n<p>C++</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/ server_main.<span class=\"function\">cc  </span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">RunServer</span><span class=\"params\">()</span> </span>&#123;  </span><br><span class=\"line\"><span class=\"function\">std::string <span class=\"title\">server_address</span><span class=\"params\">(<span class=\"string\">&quot;0.0.0.0:50051&quot;</span>)</span></span>;  </span><br><span class=\"line\"><span class=\"comment\">// 这里根据你的服务类型选择正确的实现类，例如 ControllerServiceImpl 或 ControllerStreamServiceImpl  </span></span><br><span class=\"line\">ControllerServiceImpl service;</span><br><span class=\"line\"></span><br><span class=\"line\">    grpc::ServerBuilder builder;  </span><br><span class=\"line\">    builder.<span class=\"built_in\">AddListeningPort</span>(server_address, grpc::<span class=\"built_in\">InsecureServerCredentials</span>());</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 注册回调服务（异步模式）  </span></span><br><span class=\"line\">    builder.<span class=\"built_in\">RegisterService</span>(&amp;service);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\">std::unique_ptr&lt;grpc::Server&gt; <span class=\"title\">server</span><span class=\"params\">(builder.BuildAndStart())</span></span>;  </span><br><span class=\"line\">    std::cout &lt;&lt; <span class=\"string\">&quot;Async Reactor Server listening on &quot;</span> &lt;&lt; server_address &lt;&lt; std::endl;</span><br><span class=\"line\"></span><br><span class=\"line\">    server-&gt;<span class=\"built_in\">Wait</span>(); <span class=\"comment\">// 阻塞主线程，等待服务器关闭  </span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"type\">int</span> argc, <span class=\"type\">char</span>** argv)</span> </span>&#123;  </span><br><span class=\"line\"><span class=\"built_in\">RunServer</span>();  </span><br><span class=\"line\"><span class=\"keyword\">return</span> <span class=\"number\">0</span>;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>gRPC 框架内部已经为我们处理好了线程池、完成队列、以及事件分发的所有复杂工作。我们只需要提供一个个小巧、独立的 Reactor 对象来处理具体的业务逻辑即可。</p>\n<hr>\n<h2 id=\"个人思考：新旧异步模型的对比与-Reactor-的优雅\"><a href=\"#个人思考：新旧异步模型的对比与-Reactor-的优雅\" class=\"headerlink\" title=\"个人思考：新旧异步模型的对比与 Reactor 的优雅\"></a><strong>个人思考：新旧异步模型的对比与 Reactor 的优雅</strong></h2><p>如果你之前了解过 gRPC 旧的、基于 CompletionQueue 和 void* tag 的异步 API，你会发现这个新的 Callback API (Reactor 模式) 是一个巨大的进步：</p>\n<ul>\n<li><strong>告别手动状态管理</strong>： 在旧模型中，我们需要在一个庞大的 switch(tag) 语句中手动管理一次 RPC 的不同阶段（CREATE, PROCESS, FINISH），非常容易出错。现在，这些状态被封装在了 Reactor 对象内部，逻辑更清晰。</li>\n<li><strong>无需手动管理 CompletionQueue</strong>： 我们不再需要编写 while(cq_-&gt;Next()) 这样的事件循环，gRPC 框架为我们代劳了。</li>\n<li><strong>更符合现代 C++ 的回调思想</strong>： 这种“注册回调，等待框架调用”的模式，与 muduo 的事件处理、Qt 的信号槽都非常相似，更符合现代 C++ 开发者的直觉。</li>\n</ul>\n<hr>\n<h2 id=\"总结与展望\"><a href=\"#总结与展望\" class=\"headerlink\" title=\"总结与展望\"></a><strong>总结与展望</strong></h2><p>本文，我们迈出了从“能用”到“高性能”的关键一步。通过学习和实践 gRPC 最新的 Callback API (Reactor 模式)，我们构建了一个真正意义上的异步服务端。</p>\n<p>我们深入理解了如何通过实现 ServerUnaryReactor 和 ServerWriteReactor，将业务逻辑与 gRPC 的事件循环解耦，从而让我们的服务能够用少量的线程处理海量的并发请求。</p>\n","excerpt":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a><strong>前言</strong></h2><p>在之前的文章中，我们实现的服务端模型都有一个共同的特点：它们是<strong>同步</strong>的。无论是 Unary RPC 还是流式 RPC，我们的服务端实现在 RPC 处理函数中都会阻塞，直到该次请求处理完成。这意味着，为了同时服务多个客户端，gRPC 的同步服务器不得不在其内部的线程池中为每一个并发请求分配一个线程。这种“一个请求一个线程”的模式，在并发量不高时简单有效。但试想一下，当成千上万的客户端同时涌入时，服务器的线程资源会被迅速耗尽，系统将不堪重负。</p>\n<p>一个真正的高性能服务，必须具备“一人多能”的本领——用少量的核心线程，处理成千上万的并发请求。要做到这一点，我们必须<strong>拥抱异步编程</strong>。</p>\n<p>本文，我们将深入 gRPC C++ 最核心、也是官方最新推荐的异步服务模型——<strong>Callback API（回调式 API）</strong>。它也被称为“<strong>Reactor 模式</strong>”，因为它与我们熟悉的 muduo 等网络库的事件驱动思想如出一辙。我们将通过实践，构建一个真正意义上的高性能 gRPC 异步服务。</p>","more":"<hr>\n<h2 id=\"异步服务的核心理念：事件、队列与回调\"><a href=\"#异步服务的核心理念：事件、队列与回调\" class=\"headerlink\" title=\"异步服务的核心理念：事件、队列与回调\"></a><strong>异步服务的核心理念：事件、队列与回调</strong></h2><p>在深入代码之前，我们必须理解 gRPC 异步模型的三个核心概念：</p>\n<ul>\n<li><strong>事件驱动 (Event-Driven)</strong>: 服务器不再为每个请求阻塞等待，而是以非阻塞的方式发起所有操作（如接收请求、读写数据、发送响应）。它只关心“事件”的发生，比如“一个新的 RPC 请求到来了”、“数据发送完成了”。</li>\n<li><strong>完成队列 (grpc::ServerCompletionQueue)</strong>: 这是 gRPC C++ 异步编程的心脏。所有异步操作的“完成事件”最终都会被放入这个队列中。我们的工作线程只需要从这个队列里取出已完成的事件进行处理即可。</li>\n<li><strong>回调 (Callback)</strong>: 对于每一个完成的事件，我们应该执行什么操作？这就是通过回调函数来定义的。</li>\n</ul>\n<p>幸运的是，从 gRPC v1.60 版本开始，官方引入了全新的 <strong>Callback API</strong>，极大地简化了异步服务的编写。我们不再需要手动管理复杂的完成队列和“标签”，而是可以通过实现一系列的回调函数来响应事件。</p>\n<h2 id=\"第一步：重新认识服务实现\"><a href=\"#第一步：重新认识服务实现\" class=\"headerlink\" title=\"第一步：重新认识服务实现\"></a><strong>第一步：重新认识服务实现</strong></h2><p>在 Callback API 模式下，我们的服务实现类依然继承自 gRPC 生成的 Service 基类，但有一个关键区别：我们不再直接重写 RPC 方法本身，而是重写一个对应的 Request + RPC 方法名 的方法。</p>\n<p>这个方法的作用，不再是处理业务逻辑，而是<strong>创建一个“反应堆 (Reactor)”对象，并将其返回给 gRPC 框架。</strong></p>\n<p>我们以一个简单的 Unary RPC 为例：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// server.cc (新的单次 RPC 服务实现)  </span></span><br><span class=\"line\">#**include** &lt;iostream&gt;  </span><br><span class=\"line\">#**include** &lt;memory&gt;  </span><br><span class=\"line\">#**include** &lt;string&gt;  </span><br><span class=\"line\">#**include** &lt;thread&gt;  </span><br><span class=\"line\">#**include** &lt;chrono&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">#**include** &lt;grpcpp/grpcpp.h&gt;  </span><br><span class=\"line\">#**include** <span class=\"string\">&quot;controller.grpc.pb.h&quot;</span> <span class=\"comment\">// 假设这是你 gRPC 生成的头文件</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 1. 我们需要为每个 RPC 方法创建一个 Reactor 类  </span></span><br><span class=\"line\"><span class=\"comment\">//    这个类继承自 gRPC 提供的 ServerUnaryReactor  </span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">GreeterReactor</span> : <span class=\"keyword\">public</span> grpc::ServerUnaryReactor &#123;  </span><br><span class=\"line\"><span class=\"keyword\">public</span>:  </span><br><span class=\"line\"><span class=\"comment\">// 构造函数接收请求和响应对象  </span></span><br><span class=\"line\"><span class=\"built_in\">GreeterReactor</span>(<span class=\"type\">const</span> controller::GetVersionRequest* request, controller::GetVersionResponse* response)  </span><br><span class=\"line\">: <span class=\"built_in\">request_</span>(request), <span class=\"built_in\">response_</span>(response) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 在这里可以开始处理业务逻辑  </span></span><br><span class=\"line\">        std::cout &lt;&lt; <span class=\"string\">&quot;Reactor created. Processing GetVersion request...&quot;</span> &lt;&lt; std::endl;  </span><br><span class=\"line\">        std::string version_str = <span class=\"string\">&quot;Async Core Service v2.0.0&quot;</span>;  </span><br><span class=\"line\">        response_-&gt;<span class=\"built_in\">set_version</span>(version_str);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 当业务逻辑处理完毕，调用 Finish() 告诉 gRPC 框架可以发送响应了  </span></span><br><span class=\"line\">        <span class=\"built_in\">Finish</span>(grpc::Status::OK);  </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 2. 当整个 RPC 调用（包括响应发送）彻底完成时，gRPC 会调用这个方法  </span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">OnDone</span><span class=\"params\">()</span> <span class=\"keyword\">override</span> </span>&#123;  </span><br><span class=\"line\">        std::cout &lt;&lt; <span class=\"string\">&quot;Reactor is done. Deleting self.&quot;</span> &lt;&lt; std::endl;  </span><br><span class=\"line\">        <span class=\"comment\">// 在这里，我们可以安全地释放资源，比如删除自身  </span></span><br><span class=\"line\">        <span class=\"keyword\">delete</span> <span class=\"keyword\">this</span>;  </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 你也可以实现其他回调，如 OnCancel 或 OnSendInitialMetadataDone  </span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">OnCancel</span><span class=\"params\">()</span> <span class=\"keyword\">override</span> </span>&#123;  </span><br><span class=\"line\">        std::cout &lt;&lt; <span class=\"string\">&quot;GreeterReactor::OnCancel&quot;</span> &lt;&lt; std::endl;  </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">OnSendInitialMetadataDone</span><span class=\"params\">(<span class=\"type\">bool</span> ok)</span> <span class=\"keyword\">override</span> </span>&#123;  </span><br><span class=\"line\">        std::cout &lt;&lt; <span class=\"string\">&quot;GreeterReactor::OnSendInitialMetadataDone: &quot;</span> &lt;&lt; (ok ? <span class=\"string\">&quot;Success&quot;</span> : <span class=\"string\">&quot;Failed&quot;</span>) &lt;&lt; std::endl;  </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">private</span>:  </span><br><span class=\"line\"><span class=\"type\">const</span> controller::GetVersionRequest* request_;  </span><br><span class=\"line\">controller::GetVersionResponse* response_;  </span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">ControllerServiceImpl</span> <span class=\"keyword\">final</span> : <span class=\"keyword\">public</span> controller::Controller::CallbackService &#123;  </span><br><span class=\"line\"><span class=\"keyword\">public</span>:  </span><br><span class=\"line\"><span class=\"comment\">// 3. 注意！我们不再重写 GetVersion，而是重写返回 ServerUnaryReactor* 的 GetVersion 方法  </span></span><br><span class=\"line\"><span class=\"comment\">//    （对于 CallbackService，它直接对应 RPC 方法名）。  </span></span><br><span class=\"line\"><span class=\"function\">grpc::ServerUnaryReactor* <span class=\"title\">GetVersion</span><span class=\"params\">(grpc::CallbackServerContext* context,  </span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\"><span class=\"type\">const</span> controller::GetVersionRequest* request,  </span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">controller::GetVersionResponse* response)</span> <span class=\"keyword\">override</span> </span>&#123;  </span><br><span class=\"line\"><span class=\"comment\">// 这个方法的核心职责就是：创建一个新的 Reactor 实例，然后返回它  </span></span><br><span class=\"line\"><span class=\"comment\">// gRPC 框架会接管这个 Reactor 的生命周期  </span></span><br><span class=\"line\"><span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">GreeterReactor</span>(request, response);  </span><br><span class=\"line\">&#125;  </span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<hr>\n<p><img src=\"/images/reactor_workflow.png\" alt=\"reactor\"></p>\n<h2 id=\"第二步：理解新的异步工作流\"><a href=\"#第二步：理解新的异步工作流\" class=\"headerlink\" title=\"第二步：理解新的异步工作流\"></a><strong>第二步：理解新的异步工作流</strong></h2><p>这个基于 Reactor 的新模型，其工作流程是这样的：</p>\n<ol>\n<li><strong>注册服务</strong>： 我们将 ControllerServiceImpl 的一个实例注册到 ServerBuilder 中。</li>\n<li><strong>等待请求</strong>： gRPC 框架的 I&#x2F;O 线程在后台监听新请求。</li>\n<li><strong>创建 Reactor</strong>： 当一个 GetVersion 请求到来时，gRPC 框架会自动调用我们实现的 ControllerServiceImpl::GetVersion 方法。</li>\n<li><strong>返回 Reactor</strong>： 我们在这个方法里 new 一个 GreeterReactor 对象并返回。我们只负责创建，不负责销毁。</li>\n<li><strong>业务处理与响应</strong>： 在 GreeterReactor 的构造函数中，我们处理业务逻辑，填充 response，然后调用 Finish(Status::OK)。这个 Finish 调用是非阻塞的，它只是告诉 gRPC 框架：“我的活儿干完了，你可以把响应发出去了。”</li>\n<li><strong>完成与销毁</strong>： 当 gRPC 框架真正将响应发送完毕，并完成了所有清理工作后，它会调用 GreeterReactor::OnDone()。我们在这个回调函数中，安全地 delete this，完成 Reactor 对象的生命周期闭环。</li>\n</ol>\n<p><img src=\"/images/completion_queue_sequence-0.png\" alt=\"com\"></p>\n<h3 id=\"扩展：如何实现异步的流式服务？\"><a href=\"#扩展：如何实现异步的流式服务？\" class=\"headerlink\" title=\"扩展：如何实现异步的流式服务？\"></a><strong>扩展：如何实现异步的流式服务？</strong></h3><p>Reactor 模式对于流式 RPC 同样强大。让我们看看如何用它来实现一个服务端流式 RPC —— GetRealtimeLogs。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// [新增] Reactor 类，用于处理一个 GetRealtimeLogs 请求的生命周期  </span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">LogStreamReactor</span> : <span class=\"keyword\">public</span> grpc::ServerWriteReactor&lt;controllerStream::LogEntry&gt; &#123;  </span><br><span class=\"line\"><span class=\"keyword\">public</span>:  </span><br><span class=\"line\"><span class=\"comment\">// 构造函数接收请求，并立即开始发送第一条日志  </span></span><br><span class=\"line\"><span class=\"built_in\">LogStreamReactor</span>(<span class=\"type\">const</span> controllerStream::GetLogsRequest* request)  </span><br><span class=\"line\">: <span class=\"built_in\">request_</span>(*request) <span class=\"comment\">// 保存请求的副本（如果需要的话）  </span></span><br><span class=\"line\">&#123;  </span><br><span class=\"line\">std::cout &lt;&lt; <span class=\"string\">&quot;Client subscribed for logs (Async Reactor).&quot;</span> &lt;&lt; std::endl;  </span><br><span class=\"line\"><span class=\"comment\">// 启动第一次写入  </span></span><br><span class=\"line\"><span class=\"built_in\">SendLog</span>();  </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 当流完成时（无论成功、失败或取消），此方法被调用  </span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">OnDone</span><span class=\"params\">()</span> <span class=\"keyword\">override</span> </span>&#123;  </span><br><span class=\"line\">        std::cout &lt;&lt; <span class=\"string\">&quot;LogStreamReactor: OnDone called. Cleaning up.&quot;</span> &lt;&lt; std::endl;  </span><br><span class=\"line\">        <span class=\"comment\">// 在这里释放所有与此 Reactor 相关的资源  </span></span><br><span class=\"line\">        <span class=\"keyword\">delete</span> <span class=\"keyword\">this</span>;  </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 当客户端取消流时，此方法被调用  </span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">OnCancel</span><span class=\"params\">()</span> <span class=\"keyword\">override</span> </span>&#123;  </span><br><span class=\"line\">        std::cout &lt;&lt; <span class=\"string\">&quot;LogStreamReactor: Client cancelled the request.&quot;</span> &lt;&lt; std::endl;  </span><br><span class=\"line\">        <span class=\"comment\">// OnCancel 之后通常会调用 OnDone，所以主要清理逻辑放在 OnDone  </span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 当上一次的 StartWrite() 操作完成时，此方法被调用  </span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">OnWriteDone</span><span class=\"params\">(<span class=\"type\">bool</span> ok)</span> <span class=\"keyword\">override</span> </span>&#123;  </span><br><span class=\"line\">        <span class=\"comment\">// &#x27;ok&#x27; 为 false 表示写入失败（例如，连接断开）  </span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!ok) &#123;  </span><br><span class=\"line\">            std::cout &lt;&lt; <span class=\"string\">&quot;LogStreamReactor: Failed to write to stream. Connection might be broken.&quot;</span> &lt;&lt; std::endl;  </span><br><span class=\"line\">            <span class=\"comment\">// 不需要手动调用 Finish，当 OnWriteDone 返回后，gRPC 会自动处理清理  </span></span><br><span class=\"line\">            <span class=\"comment\">// 最终会调用 OnDone  </span></span><br><span class=\"line\">            <span class=\"keyword\">return</span>;  </span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 检查是否还有更多日志要发送  </span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (log_counter_ &lt;= <span class=\"number\">10</span>) &#123;  </span><br><span class=\"line\">            <span class=\"comment\">// 如果上一次写入成功，就继续发送下一条  </span></span><br><span class=\"line\">            <span class=\"built_in\">SendLog</span>();  </span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;  </span><br><span class=\"line\">            <span class=\"comment\">// 所有日志都已发送完毕  </span></span><br><span class=\"line\">            std::cout &lt;&lt; <span class=\"string\">&quot;LogStreamReactor: Finished sending all logs.&quot;</span> &lt;&lt; std::endl;  </span><br><span class=\"line\">            <span class=\"comment\">// 发送一个 OK 状态来正常关闭流  </span></span><br><span class=\"line\">            <span class=\"built_in\">Finish</span>(grpc::Status::OK);  </span><br><span class=\"line\">        &#125;  </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">private</span>:  </span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">SendLog</span><span class=\"params\">()</span> </span>&#123;  </span><br><span class=\"line\"><span class=\"comment\">// 准备下一条日志  </span></span><br><span class=\"line\">log_entry_.<span class=\"built_in\">set_timestamp</span>(std::chrono::system_clock::<span class=\"built_in\">to_time_t</span>(std::chrono::system_clock::<span class=\"built_in\">now</span>()));  </span><br><span class=\"line\">log_entry_.<span class=\"built_in\">set_level</span>(<span class=\"string\">&quot;INFO&quot;</span>);  </span><br><span class=\"line\">log_entry_.<span class=\"built_in\">set_message</span>(<span class=\"string\">&quot;This is async log message number &quot;</span> + std::<span class=\"built_in\">to_string</span>(log_counter_));</span><br><span class=\"line\"></span><br><span class=\"line\">        log_counter_++;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 模拟日志生成的延迟  </span></span><br><span class=\"line\">        <span class=\"comment\">// 重要提示：在异步模型中，长时间的 sleep 会阻塞处理其他事件的线程！  </span></span><br><span class=\"line\">        <span class=\"comment\">// 在真实应用中，这里应该是快速的非阻塞操作。  </span></span><br><span class=\"line\">        <span class=\"comment\">// 为了演示，我们仍然使用 sleep，但要意识到它的影响。  </span></span><br><span class=\"line\">        std::this_thread::<span class=\"built_in\">sleep_for</span>(std::chrono::<span class=\"built_in\">seconds</span>(<span class=\"number\">1</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 发起异步写入操作。我们传递 log_entry_ 的地址。  </span></span><br><span class=\"line\">        <span class=\"comment\">// gRPC 会在 OnWriteDone 被调用之前保证这个地址是有效的。  </span></span><br><span class=\"line\">        <span class=\"built_in\">StartWrite</span>(&amp;log_entry_);  </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">const</span> controllerStream::GetLogsRequest request_;  </span><br><span class=\"line\">    controllerStream::LogEntry log_entry_; <span class=\"comment\">// 重用 LogEntry 对象以避免重复分配内存  </span></span><br><span class=\"line\">    <span class=\"type\">int</span> log_counter_ = <span class=\"number\">1</span>;  </span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">ControllerStreamServiceImpl</span> <span class=\"keyword\">final</span> : <span class=\"keyword\">public</span> controllerStream::Controller::CallbackService &#123;  </span><br><span class=\"line\"><span class=\"comment\">// 注意：服务类继承自 ...::CallbackService 而不是 ...::Service</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 实现 GetRealtimeLogs 方法  </span></span><br><span class=\"line\">    <span class=\"comment\">// 它不再返回 Status，而是返回一个 ServerWriteReactor*  </span></span><br><span class=\"line\">    <span class=\"function\">grpc::ServerWriteReactor&lt;controllerStream::LogEntry&gt;* <span class=\"title\">GetRealtimeLogs</span><span class=\"params\">(  </span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">        grpc::CallbackServerContext* context,  </span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">        <span class=\"type\">const</span> controllerStream::GetLogsRequest* request)</span> <span class=\"keyword\">override</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 创建一个新的 Reactor 来处理这个请求  </span></span><br><span class=\"line\">        <span class=\"comment\">// gRPC 框架将拥有这个指针的所有权，并在 OnDone 中由我们自己 delete  </span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">LogStreamReactor</span>(request);  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<hr>\n<h2 id=\"第三步：启动异步服务器\"><a href=\"#第三步：启动异步服务器\" class=\"headerlink\" title=\"第三步：启动异步服务器\"></a><strong>第三步：启动异步服务器</strong></h2><p>最令人惊喜的是，启动一个异步服务器的主函数部分，与同步服务器几乎一模一样，甚至更简单。我们不再需要自己管理线程池。</p>\n<p>C++</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/ server_main.<span class=\"function\">cc  </span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">RunServer</span><span class=\"params\">()</span> </span>&#123;  </span><br><span class=\"line\"><span class=\"function\">std::string <span class=\"title\">server_address</span><span class=\"params\">(<span class=\"string\">&quot;0.0.0.0:50051&quot;</span>)</span></span>;  </span><br><span class=\"line\"><span class=\"comment\">// 这里根据你的服务类型选择正确的实现类，例如 ControllerServiceImpl 或 ControllerStreamServiceImpl  </span></span><br><span class=\"line\">ControllerServiceImpl service;</span><br><span class=\"line\"></span><br><span class=\"line\">    grpc::ServerBuilder builder;  </span><br><span class=\"line\">    builder.<span class=\"built_in\">AddListeningPort</span>(server_address, grpc::<span class=\"built_in\">InsecureServerCredentials</span>());</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 注册回调服务（异步模式）  </span></span><br><span class=\"line\">    builder.<span class=\"built_in\">RegisterService</span>(&amp;service);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\">std::unique_ptr&lt;grpc::Server&gt; <span class=\"title\">server</span><span class=\"params\">(builder.BuildAndStart())</span></span>;  </span><br><span class=\"line\">    std::cout &lt;&lt; <span class=\"string\">&quot;Async Reactor Server listening on &quot;</span> &lt;&lt; server_address &lt;&lt; std::endl;</span><br><span class=\"line\"></span><br><span class=\"line\">    server-&gt;<span class=\"built_in\">Wait</span>(); <span class=\"comment\">// 阻塞主线程，等待服务器关闭  </span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"type\">int</span> argc, <span class=\"type\">char</span>** argv)</span> </span>&#123;  </span><br><span class=\"line\"><span class=\"built_in\">RunServer</span>();  </span><br><span class=\"line\"><span class=\"keyword\">return</span> <span class=\"number\">0</span>;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>gRPC 框架内部已经为我们处理好了线程池、完成队列、以及事件分发的所有复杂工作。我们只需要提供一个个小巧、独立的 Reactor 对象来处理具体的业务逻辑即可。</p>\n<hr>\n<h2 id=\"个人思考：新旧异步模型的对比与-Reactor-的优雅\"><a href=\"#个人思考：新旧异步模型的对比与-Reactor-的优雅\" class=\"headerlink\" title=\"个人思考：新旧异步模型的对比与 Reactor 的优雅\"></a><strong>个人思考：新旧异步模型的对比与 Reactor 的优雅</strong></h2><p>如果你之前了解过 gRPC 旧的、基于 CompletionQueue 和 void* tag 的异步 API，你会发现这个新的 Callback API (Reactor 模式) 是一个巨大的进步：</p>\n<ul>\n<li><strong>告别手动状态管理</strong>： 在旧模型中，我们需要在一个庞大的 switch(tag) 语句中手动管理一次 RPC 的不同阶段（CREATE, PROCESS, FINISH），非常容易出错。现在，这些状态被封装在了 Reactor 对象内部，逻辑更清晰。</li>\n<li><strong>无需手动管理 CompletionQueue</strong>： 我们不再需要编写 while(cq_-&gt;Next()) 这样的事件循环，gRPC 框架为我们代劳了。</li>\n<li><strong>更符合现代 C++ 的回调思想</strong>： 这种“注册回调，等待框架调用”的模式，与 muduo 的事件处理、Qt 的信号槽都非常相似，更符合现代 C++ 开发者的直觉。</li>\n</ul>\n<hr>\n<h2 id=\"总结与展望\"><a href=\"#总结与展望\" class=\"headerlink\" title=\"总结与展望\"></a><strong>总结与展望</strong></h2><p>本文，我们迈出了从“能用”到“高性能”的关键一步。通过学习和实践 gRPC 最新的 Callback API (Reactor 模式)，我们构建了一个真正意义上的异步服务端。</p>\n<p>我们深入理解了如何通过实现 ServerUnaryReactor 和 ServerWriteReactor，将业务逻辑与 gRPC 的事件循环解耦，从而让我们的服务能够用少量的线程处理海量的并发请求。</p>"},{"title":"grpc实践之路:05.服务端与客户端的连接","date":"2025-08-26T16:00:00.000Z","_content":"### **前言：探究 gRPC 的“黑盒”**\n\n在我们之前的实践中，我们已经能熟练地使用 gRPC 的 API。但每一次 stub->GetVersion() 的调用，背后都是一个被精心封装的复杂网络通信过程。\n\n这引出了一个最根本的问题，也是本文将要探究的核心：\n\n**一次 RPC 调用，在技术上是如何保证这个网络请求与远端函数一一对应的？**\n\n我们将像科学家一样，首先提出一个猜想，然后深入源码和网络协议的细节，去寻找证据来证明或修正它。\n\n我的猜想如下：  \ngRPC 的一一对应机制，是一个编译时和运行时协同工作的结果。\n\n1. **编译时 - 生成“身份证”：** protoc 工具在生成代码时，会为每一个 RPC 方法创建一个全局唯一的“身份证”（一个字符串签名）。\n2. **运行时 - 递送“身份证”：** 客户端在发起调用时，会将这个“身份证”放入网络请求的某个标准位置（比如 HTTP/2 的请求头），连同序列化好的参数一起发送出去。\n3. **服务端 - 验证“身份证”：** 服务端在启动时就建立了一个“身份证 -> 处理函数”的路由表。收到请求后，只需读取“身份证”，就能快速找到对应的处理函数。\n\n本文，我们就将带着这个猜想，通过**分析生成代码**和**Wireshark 抓包**，完整地走一遍 RPC 的全链路之旅。\n\n<!--more-->\n### **第一站：编译时的约定 —— Stub 中隐藏的“身份证”**\n\n一切的起点都在客户端。我们从 protoc 生成的 Stub 类入手，寻找“身份证”是如何被制造出来的。\n\n// 客户端代码  \ngrpc::Status status = stub_->GetVersion(context, request, &response);\n\n当我们查看生成的 controller.grpc.pb.cc 文件时，证据立刻就出现了：\n\n**controller.grpc.pb.cc (生成代码摘录)**\n\n```c++\n// 证据 1：定义了一个全局唯一的“方法名身份证”  \nstatic const char* Controller_method_names[] = {  \n\"/controller.Controller/GetVersion\",  \n};\n\n// ...\n\n// 证据 2：Stub 的 GetVersion 方法实现  \n::grpc::Status Controller::Stub::GetVersion(...) {  \n// 将“身份证”和所有参数，打包交给一个更底层的通用函数  \nreturn ::grpc::internal::BlockingUnaryCall<...>(channel_.get(), rpcmethod_GetVersion_, ...);  \n}\n```\n\n**源码剖析：**\n\n* **方法名字符串：** protoc 明确地为我们的 GetVersion RPC 生成了一个全局唯一的字符串标识符 \"/controller.Controller/GetVersion\"。这完美印证了我们猜想的第一步——“身份证”是在编译时被创建的。\n* **BlockingUnaryCall：** 用户的调用最终被委托给了这个内部函数。Stub 的作用，就是为这个通用函数准备好所有必要的参数，其中最重要的就是 rpcmethod_GetVersion_，这是一个封装了上述“身份证”字符串的对象。\n\n至此，我们已经证明了，每一次 RPC 调用在 C++ 代码层面，都与一个唯一的方法签名字符串绑定在了一起。但这个字符串是如何跨越网络的呢？\n\n### **第二站：网络上的“信封” —— Wireshark 抓包分析**\n\n理论和源码分析固然重要，但网络抓包的结果才是“铁证”。我使用 Wireshark 捕获了一次客户端调用 GetVersion 的网络流量，结果完全印证了我们的猜想。\n\n一次 gRPC 调用在网络上表现为一次 HTTP/2 的请求-响应交换。在请求的 HEADERS 帧中，我们发现了决定性的证据：\n\n**Wireshark 抓包结果 (概念示意)**\n\n```c++\nHypertext Transfer Protocol 2  \nStream: HEADERS, Stream ID: 1, Length 87  \n:method: POST  \n:scheme: http  \n:path: /controller.Controller/GetVersion  <-- 铁证如山！  \n:authority: localhost:50051  \ncontent-type: application/grpc  \n...\n```\n\n\n**抓包分析：**\n\n* **:path 伪头：** 我们在 Stub 源码中找到的那个“身份证”字符串 \"/controller.Controller/GetVersion\"，被原封不动地放在了 HTTP/2 的 :path 伪头中。\n* **这就是 gRPC 的“信封”！** 它清晰地告诉了网络上的任何接收方：“这封信是寄给 /controller.Controller/GetVersion 这个处理单元的”。\n\n同样，在响应的 HEADERS 帧中，我们也能看到 gRPC 的状态码，而在 DATA 帧中，则是 Protobuf 序列化后的响应体。\n\n**小结：** Wireshark 的抓包结果，完美地连接了我们的代码分析和网络现实。它证明了 gRPC 的“寻址”机制，就是通过将编译时生成的唯一方法签名，作为运行时 HTTP/2 请求的 :path 来实现的。\n\n### **第三站：服务端的“中央调度室”**\n\n现在，请求已经带着清晰的“信封”抵达服务端。服务端是如何根据这个地址，找到正确的处理函数的呢？答案的起点，在于 Service 的构造函数。\n\n**controller.grpc.pb.cc (生成代码摘录)**\n\n```c++\nController::Service::Service() {  \n// 在构造时，就调用 AddMethod  \nAddMethod(new ::grpc::internal::RpcServiceMethod(  \nController_method_names[0], // Key: 还是那个唯一的“身份证”  \n...,  \nnew ::grpc::internal::RpcMethodHandler<...>(...))); // Value: 处理器  \n}\n```\n\n**源码剖析：**\n\n* **AddMethod：** Service 基类在构造时，就为每个 RPC 方法调用 AddMethod。这个函数的核心作用，就是将**方法签名字符串 (Key)** 和一个知道如何调用具体实现的**处理器 Handler (Value)** 绑定在一起。\n\n当我们调用 ServerBuilder::RegisterService(&service) 时，这些 Key-Value 对会被收集起来，并通过底层的 grpc_server_register_method 函数，正式注册到 grpc-core 内部的一个**方法路由表**中。从逻辑上推断，这个路由表必然是一个**哈希表**，以保证 O(1) 的查找效率。\n\n**至此，服务端的“中央调度室”就构建完成了。** 当一个网络请求到来时：\n\n1. grpc-core 的 I/O 线程接收到 HTTP/2 请求，解析出 :path 头，得到 Key。\n2. 以这个 Key 在内部的哈希路由表中进行查找，得到 Value (对应的 Handler)。\n3. 这个 Handler 随后会反序列化请求的 Protobuf 数据，并最终调用我们自己重写的 ControllerServiceImpl::GetVersion C++ 成员函数。\n\n### **结论：从猜想到证据的闭环**\n\n通过这次“代码生成分析”和“网络抓包”相结合的探索，我们为开篇提出的核心问题，找到了一个完整且证据确凿的答案：\n\n**gRPC 通过一个编译时和运行时协同工作的精巧机制，保证了 RPC 调用与网络请求的一一对应：**\n\n1. **编译时契约：** protoc 为每个 RPC 方法生成一个全局唯一的**方法签名字符串**。\n2. **运行时传输：** 客户端将此签名作为 **HTTP/2 的 :path**，连同 Protobuf 数据一起发送。\n3. **服务端路由：** 服务端在启动时，已构建好一个从**方法签名**到**处理函数**的**哈希路由表**，收到请求后按图索骥，实现 O(1) 高效分发。\n\n正是这套标准化的“身份证制造 -> 邮寄 -> 验证”体系，构建起了 gRPC 强大、高效且灵活的 RPC 世界。","source":"_posts/grpc/grpc实践之路:05.服务端与客户端的连接.md","raw":"---\ntitle: \"grpc实践之路:05.服务端与客户端的连接\"\ndate: 2025-08-27\ncategories: \n  - 动手实践-三方库\n  - grpc\ntags:\n  - C++\n  - grpc\n  - 进程间通信\n---\n### **前言：探究 gRPC 的“黑盒”**\n\n在我们之前的实践中，我们已经能熟练地使用 gRPC 的 API。但每一次 stub->GetVersion() 的调用，背后都是一个被精心封装的复杂网络通信过程。\n\n这引出了一个最根本的问题，也是本文将要探究的核心：\n\n**一次 RPC 调用，在技术上是如何保证这个网络请求与远端函数一一对应的？**\n\n我们将像科学家一样，首先提出一个猜想，然后深入源码和网络协议的细节，去寻找证据来证明或修正它。\n\n我的猜想如下：  \ngRPC 的一一对应机制，是一个编译时和运行时协同工作的结果。\n\n1. **编译时 - 生成“身份证”：** protoc 工具在生成代码时，会为每一个 RPC 方法创建一个全局唯一的“身份证”（一个字符串签名）。\n2. **运行时 - 递送“身份证”：** 客户端在发起调用时，会将这个“身份证”放入网络请求的某个标准位置（比如 HTTP/2 的请求头），连同序列化好的参数一起发送出去。\n3. **服务端 - 验证“身份证”：** 服务端在启动时就建立了一个“身份证 -> 处理函数”的路由表。收到请求后，只需读取“身份证”，就能快速找到对应的处理函数。\n\n本文，我们就将带着这个猜想，通过**分析生成代码**和**Wireshark 抓包**，完整地走一遍 RPC 的全链路之旅。\n\n<!--more-->\n### **第一站：编译时的约定 —— Stub 中隐藏的“身份证”**\n\n一切的起点都在客户端。我们从 protoc 生成的 Stub 类入手，寻找“身份证”是如何被制造出来的。\n\n// 客户端代码  \ngrpc::Status status = stub_->GetVersion(context, request, &response);\n\n当我们查看生成的 controller.grpc.pb.cc 文件时，证据立刻就出现了：\n\n**controller.grpc.pb.cc (生成代码摘录)**\n\n```c++\n// 证据 1：定义了一个全局唯一的“方法名身份证”  \nstatic const char* Controller_method_names[] = {  \n\"/controller.Controller/GetVersion\",  \n};\n\n// ...\n\n// 证据 2：Stub 的 GetVersion 方法实现  \n::grpc::Status Controller::Stub::GetVersion(...) {  \n// 将“身份证”和所有参数，打包交给一个更底层的通用函数  \nreturn ::grpc::internal::BlockingUnaryCall<...>(channel_.get(), rpcmethod_GetVersion_, ...);  \n}\n```\n\n**源码剖析：**\n\n* **方法名字符串：** protoc 明确地为我们的 GetVersion RPC 生成了一个全局唯一的字符串标识符 \"/controller.Controller/GetVersion\"。这完美印证了我们猜想的第一步——“身份证”是在编译时被创建的。\n* **BlockingUnaryCall：** 用户的调用最终被委托给了这个内部函数。Stub 的作用，就是为这个通用函数准备好所有必要的参数，其中最重要的就是 rpcmethod_GetVersion_，这是一个封装了上述“身份证”字符串的对象。\n\n至此，我们已经证明了，每一次 RPC 调用在 C++ 代码层面，都与一个唯一的方法签名字符串绑定在了一起。但这个字符串是如何跨越网络的呢？\n\n### **第二站：网络上的“信封” —— Wireshark 抓包分析**\n\n理论和源码分析固然重要，但网络抓包的结果才是“铁证”。我使用 Wireshark 捕获了一次客户端调用 GetVersion 的网络流量，结果完全印证了我们的猜想。\n\n一次 gRPC 调用在网络上表现为一次 HTTP/2 的请求-响应交换。在请求的 HEADERS 帧中，我们发现了决定性的证据：\n\n**Wireshark 抓包结果 (概念示意)**\n\n```c++\nHypertext Transfer Protocol 2  \nStream: HEADERS, Stream ID: 1, Length 87  \n:method: POST  \n:scheme: http  \n:path: /controller.Controller/GetVersion  <-- 铁证如山！  \n:authority: localhost:50051  \ncontent-type: application/grpc  \n...\n```\n\n\n**抓包分析：**\n\n* **:path 伪头：** 我们在 Stub 源码中找到的那个“身份证”字符串 \"/controller.Controller/GetVersion\"，被原封不动地放在了 HTTP/2 的 :path 伪头中。\n* **这就是 gRPC 的“信封”！** 它清晰地告诉了网络上的任何接收方：“这封信是寄给 /controller.Controller/GetVersion 这个处理单元的”。\n\n同样，在响应的 HEADERS 帧中，我们也能看到 gRPC 的状态码，而在 DATA 帧中，则是 Protobuf 序列化后的响应体。\n\n**小结：** Wireshark 的抓包结果，完美地连接了我们的代码分析和网络现实。它证明了 gRPC 的“寻址”机制，就是通过将编译时生成的唯一方法签名，作为运行时 HTTP/2 请求的 :path 来实现的。\n\n### **第三站：服务端的“中央调度室”**\n\n现在，请求已经带着清晰的“信封”抵达服务端。服务端是如何根据这个地址，找到正确的处理函数的呢？答案的起点，在于 Service 的构造函数。\n\n**controller.grpc.pb.cc (生成代码摘录)**\n\n```c++\nController::Service::Service() {  \n// 在构造时，就调用 AddMethod  \nAddMethod(new ::grpc::internal::RpcServiceMethod(  \nController_method_names[0], // Key: 还是那个唯一的“身份证”  \n...,  \nnew ::grpc::internal::RpcMethodHandler<...>(...))); // Value: 处理器  \n}\n```\n\n**源码剖析：**\n\n* **AddMethod：** Service 基类在构造时，就为每个 RPC 方法调用 AddMethod。这个函数的核心作用，就是将**方法签名字符串 (Key)** 和一个知道如何调用具体实现的**处理器 Handler (Value)** 绑定在一起。\n\n当我们调用 ServerBuilder::RegisterService(&service) 时，这些 Key-Value 对会被收集起来，并通过底层的 grpc_server_register_method 函数，正式注册到 grpc-core 内部的一个**方法路由表**中。从逻辑上推断，这个路由表必然是一个**哈希表**，以保证 O(1) 的查找效率。\n\n**至此，服务端的“中央调度室”就构建完成了。** 当一个网络请求到来时：\n\n1. grpc-core 的 I/O 线程接收到 HTTP/2 请求，解析出 :path 头，得到 Key。\n2. 以这个 Key 在内部的哈希路由表中进行查找，得到 Value (对应的 Handler)。\n3. 这个 Handler 随后会反序列化请求的 Protobuf 数据，并最终调用我们自己重写的 ControllerServiceImpl::GetVersion C++ 成员函数。\n\n### **结论：从猜想到证据的闭环**\n\n通过这次“代码生成分析”和“网络抓包”相结合的探索，我们为开篇提出的核心问题，找到了一个完整且证据确凿的答案：\n\n**gRPC 通过一个编译时和运行时协同工作的精巧机制，保证了 RPC 调用与网络请求的一一对应：**\n\n1. **编译时契约：** protoc 为每个 RPC 方法生成一个全局唯一的**方法签名字符串**。\n2. **运行时传输：** 客户端将此签名作为 **HTTP/2 的 :path**，连同 Protobuf 数据一起发送。\n3. **服务端路由：** 服务端在启动时，已构建好一个从**方法签名**到**处理函数**的**哈希路由表**，收到请求后按图索骥，实现 O(1) 高效分发。\n\n正是这套标准化的“身份证制造 -> 邮寄 -> 验证”体系，构建起了 gRPC 强大、高效且灵活的 RPC 世界。","slug":"grpc/grpc实践之路:05.服务端与客户端的连接","published":1,"updated":"2025-08-28T12:43:44.962Z","comments":1,"layout":"post","photos":[],"_id":"cmevecvs60007hfro3jro83n5","content":"<h3 id=\"前言：探究-gRPC-的“黑盒”\"><a href=\"#前言：探究-gRPC-的“黑盒”\" class=\"headerlink\" title=\"前言：探究 gRPC 的“黑盒”\"></a><strong>前言：探究 gRPC 的“黑盒”</strong></h3><p>在我们之前的实践中，我们已经能熟练地使用 gRPC 的 API。但每一次 stub-&gt;GetVersion() 的调用，背后都是一个被精心封装的复杂网络通信过程。</p>\n<p>这引出了一个最根本的问题，也是本文将要探究的核心：</p>\n<p><strong>一次 RPC 调用，在技术上是如何保证这个网络请求与远端函数一一对应的？</strong></p>\n<p>我们将像科学家一样，首先提出一个猜想，然后深入源码和网络协议的细节，去寻找证据来证明或修正它。</p>\n<p>我的猜想如下：<br>gRPC 的一一对应机制，是一个编译时和运行时协同工作的结果。</p>\n<ol>\n<li><strong>编译时 - 生成“身份证”：</strong> protoc 工具在生成代码时，会为每一个 RPC 方法创建一个全局唯一的“身份证”（一个字符串签名）。</li>\n<li><strong>运行时 - 递送“身份证”：</strong> 客户端在发起调用时，会将这个“身份证”放入网络请求的某个标准位置（比如 HTTP&#x2F;2 的请求头），连同序列化好的参数一起发送出去。</li>\n<li><strong>服务端 - 验证“身份证”：</strong> 服务端在启动时就建立了一个“身份证 -&gt; 处理函数”的路由表。收到请求后，只需读取“身份证”，就能快速找到对应的处理函数。</li>\n</ol>\n<p>本文，我们就将带着这个猜想，通过<strong>分析生成代码</strong>和<strong>Wireshark 抓包</strong>，完整地走一遍 RPC 的全链路之旅。</p>\n<span id=\"more\"></span>\n<h3 id=\"第一站：编译时的约定-——-Stub-中隐藏的“身份证”\"><a href=\"#第一站：编译时的约定-——-Stub-中隐藏的“身份证”\" class=\"headerlink\" title=\"第一站：编译时的约定 —— Stub 中隐藏的“身份证”\"></a><strong>第一站：编译时的约定 —— Stub 中隐藏的“身份证”</strong></h3><p>一切的起点都在客户端。我们从 protoc 生成的 Stub 类入手，寻找“身份证”是如何被制造出来的。</p>\n<p>&#x2F;&#x2F; 客户端代码<br>grpc::Status status &#x3D; stub_-&gt;GetVersion(context, request, &amp;response);</p>\n<p>当我们查看生成的 controller.grpc.pb.cc 文件时，证据立刻就出现了：</p>\n<p><strong>controller.grpc.pb.cc (生成代码摘录)</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 证据 1：定义了一个全局唯一的“方法名身份证”  </span></span><br><span class=\"line\"><span class=\"type\">static</span> <span class=\"type\">const</span> <span class=\"type\">char</span>* Controller_method_names[] = &#123;  </span><br><span class=\"line\"><span class=\"string\">&quot;/controller.Controller/GetVersion&quot;</span>,  </span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// ...</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 证据 2：Stub 的 GetVersion 方法实现  </span></span><br><span class=\"line\">::grpc::Status Controller::Stub::<span class=\"built_in\">GetVersion</span>(...) &#123;  </span><br><span class=\"line\"><span class=\"comment\">// 将“身份证”和所有参数，打包交给一个更底层的通用函数  </span></span><br><span class=\"line\"><span class=\"keyword\">return</span> ::grpc::internal::<span class=\"built_in\">BlockingUnaryCall</span>&lt;...&gt;(channel_.<span class=\"built_in\">get</span>(), rpcmethod_GetVersion_, ...);  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>源码剖析：</strong></p>\n<ul>\n<li><strong>方法名字符串：</strong> protoc 明确地为我们的 GetVersion RPC 生成了一个全局唯一的字符串标识符 “&#x2F;controller.Controller&#x2F;GetVersion”。这完美印证了我们猜想的第一步——“身份证”是在编译时被创建的。</li>\n<li><strong>BlockingUnaryCall：</strong> 用户的调用最终被委托给了这个内部函数。Stub 的作用，就是为这个通用函数准备好所有必要的参数，其中最重要的就是 rpcmethod_GetVersion_，这是一个封装了上述“身份证”字符串的对象。</li>\n</ul>\n<p>至此，我们已经证明了，每一次 RPC 调用在 C++ 代码层面，都与一个唯一的方法签名字符串绑定在了一起。但这个字符串是如何跨越网络的呢？</p>\n<h3 id=\"第二站：网络上的“信封”-——-Wireshark-抓包分析\"><a href=\"#第二站：网络上的“信封”-——-Wireshark-抓包分析\" class=\"headerlink\" title=\"第二站：网络上的“信封” —— Wireshark 抓包分析\"></a><strong>第二站：网络上的“信封” —— Wireshark 抓包分析</strong></h3><p>理论和源码分析固然重要，但网络抓包的结果才是“铁证”。我使用 Wireshark 捕获了一次客户端调用 GetVersion 的网络流量，结果完全印证了我们的猜想。</p>\n<p>一次 gRPC 调用在网络上表现为一次 HTTP&#x2F;2 的请求-响应交换。在请求的 HEADERS 帧中，我们发现了决定性的证据：</p>\n<p><strong>Wireshark 抓包结果 (概念示意)</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Hypertext Transfer Protocol <span class=\"number\">2</span>  </span><br><span class=\"line\">Stream: HEADERS, Stream ID: <span class=\"number\">1</span>, Length <span class=\"number\">87</span>  </span><br><span class=\"line\">:method: POST  </span><br><span class=\"line\">:scheme: http  </span><br><span class=\"line\">:path: /controller.Controller/GetVersion  &lt;-- 铁证如山！  </span><br><span class=\"line\">:authority: localhost:<span class=\"number\">50051</span>  </span><br><span class=\"line\">content-type: application/grpc  </span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n\n\n<p><strong>抓包分析：</strong></p>\n<ul>\n<li><strong>:path 伪头：</strong> 我们在 Stub 源码中找到的那个“身份证”字符串 “&#x2F;controller.Controller&#x2F;GetVersion”，被原封不动地放在了 HTTP&#x2F;2 的 :path 伪头中。</li>\n<li><strong>这就是 gRPC 的“信封”！</strong> 它清晰地告诉了网络上的任何接收方：“这封信是寄给 &#x2F;controller.Controller&#x2F;GetVersion 这个处理单元的”。</li>\n</ul>\n<p>同样，在响应的 HEADERS 帧中，我们也能看到 gRPC 的状态码，而在 DATA 帧中，则是 Protobuf 序列化后的响应体。</p>\n<p><strong>小结：</strong> Wireshark 的抓包结果，完美地连接了我们的代码分析和网络现实。它证明了 gRPC 的“寻址”机制，就是通过将编译时生成的唯一方法签名，作为运行时 HTTP&#x2F;2 请求的 :path 来实现的。</p>\n<h3 id=\"第三站：服务端的“中央调度室”\"><a href=\"#第三站：服务端的“中央调度室”\" class=\"headerlink\" title=\"第三站：服务端的“中央调度室”\"></a><strong>第三站：服务端的“中央调度室”</strong></h3><p>现在，请求已经带着清晰的“信封”抵达服务端。服务端是如何根据这个地址，找到正确的处理函数的呢？答案的起点，在于 Service 的构造函数。</p>\n<p><strong>controller.grpc.pb.cc (生成代码摘录)</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Controller::Service::<span class=\"built_in\">Service</span>() &#123;  </span><br><span class=\"line\"><span class=\"comment\">// 在构造时，就调用 AddMethod  </span></span><br><span class=\"line\"><span class=\"built_in\">AddMethod</span>(<span class=\"keyword\">new</span> ::grpc::internal::<span class=\"built_in\">RpcServiceMethod</span>(  </span><br><span class=\"line\">Controller_method_names[<span class=\"number\">0</span>], <span class=\"comment\">// Key: 还是那个唯一的“身份证”  </span></span><br><span class=\"line\">...,  </span><br><span class=\"line\"><span class=\"keyword\">new</span> ::grpc::internal::<span class=\"built_in\">RpcMethodHandler</span>&lt;...&gt;(...))); <span class=\"comment\">// Value: 处理器  </span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>源码剖析：</strong></p>\n<ul>\n<li><strong>AddMethod：</strong> Service 基类在构造时，就为每个 RPC 方法调用 AddMethod。这个函数的核心作用，就是将<strong>方法签名字符串 (Key)</strong> 和一个知道如何调用具体实现的<strong>处理器 Handler (Value)</strong> 绑定在一起。</li>\n</ul>\n<p>当我们调用 ServerBuilder::RegisterService(&amp;service) 时，这些 Key-Value 对会被收集起来，并通过底层的 grpc_server_register_method 函数，正式注册到 grpc-core 内部的一个<strong>方法路由表</strong>中。从逻辑上推断，这个路由表必然是一个<strong>哈希表</strong>，以保证 O(1) 的查找效率。</p>\n<p><strong>至此，服务端的“中央调度室”就构建完成了。</strong> 当一个网络请求到来时：</p>\n<ol>\n<li>grpc-core 的 I&#x2F;O 线程接收到 HTTP&#x2F;2 请求，解析出 :path 头，得到 Key。</li>\n<li>以这个 Key 在内部的哈希路由表中进行查找，得到 Value (对应的 Handler)。</li>\n<li>这个 Handler 随后会反序列化请求的 Protobuf 数据，并最终调用我们自己重写的 ControllerServiceImpl::GetVersion C++ 成员函数。</li>\n</ol>\n<h3 id=\"结论：从猜想到证据的闭环\"><a href=\"#结论：从猜想到证据的闭环\" class=\"headerlink\" title=\"结论：从猜想到证据的闭环\"></a><strong>结论：从猜想到证据的闭环</strong></h3><p>通过这次“代码生成分析”和“网络抓包”相结合的探索，我们为开篇提出的核心问题，找到了一个完整且证据确凿的答案：</p>\n<p><strong>gRPC 通过一个编译时和运行时协同工作的精巧机制，保证了 RPC 调用与网络请求的一一对应：</strong></p>\n<ol>\n<li><strong>编译时契约：</strong> protoc 为每个 RPC 方法生成一个全局唯一的<strong>方法签名字符串</strong>。</li>\n<li><strong>运行时传输：</strong> 客户端将此签名作为 <strong>HTTP&#x2F;2 的 :path</strong>，连同 Protobuf 数据一起发送。</li>\n<li><strong>服务端路由：</strong> 服务端在启动时，已构建好一个从<strong>方法签名</strong>到<strong>处理函数</strong>的<strong>哈希路由表</strong>，收到请求后按图索骥，实现 O(1) 高效分发。</li>\n</ol>\n<p>正是这套标准化的“身份证制造 -&gt; 邮寄 -&gt; 验证”体系，构建起了 gRPC 强大、高效且灵活的 RPC 世界。</p>\n","excerpt":"<h3 id=\"前言：探究-gRPC-的“黑盒”\"><a href=\"#前言：探究-gRPC-的“黑盒”\" class=\"headerlink\" title=\"前言：探究 gRPC 的“黑盒”\"></a><strong>前言：探究 gRPC 的“黑盒”</strong></h3><p>在我们之前的实践中，我们已经能熟练地使用 gRPC 的 API。但每一次 stub-&gt;GetVersion() 的调用，背后都是一个被精心封装的复杂网络通信过程。</p>\n<p>这引出了一个最根本的问题，也是本文将要探究的核心：</p>\n<p><strong>一次 RPC 调用，在技术上是如何保证这个网络请求与远端函数一一对应的？</strong></p>\n<p>我们将像科学家一样，首先提出一个猜想，然后深入源码和网络协议的细节，去寻找证据来证明或修正它。</p>\n<p>我的猜想如下：<br>gRPC 的一一对应机制，是一个编译时和运行时协同工作的结果。</p>\n<ol>\n<li><strong>编译时 - 生成“身份证”：</strong> protoc 工具在生成代码时，会为每一个 RPC 方法创建一个全局唯一的“身份证”（一个字符串签名）。</li>\n<li><strong>运行时 - 递送“身份证”：</strong> 客户端在发起调用时，会将这个“身份证”放入网络请求的某个标准位置（比如 HTTP&#x2F;2 的请求头），连同序列化好的参数一起发送出去。</li>\n<li><strong>服务端 - 验证“身份证”：</strong> 服务端在启动时就建立了一个“身份证 -&gt; 处理函数”的路由表。收到请求后，只需读取“身份证”，就能快速找到对应的处理函数。</li>\n</ol>\n<p>本文，我们就将带着这个猜想，通过<strong>分析生成代码</strong>和<strong>Wireshark 抓包</strong>，完整地走一遍 RPC 的全链路之旅。</p>","more":"<h3 id=\"第一站：编译时的约定-——-Stub-中隐藏的“身份证”\"><a href=\"#第一站：编译时的约定-——-Stub-中隐藏的“身份证”\" class=\"headerlink\" title=\"第一站：编译时的约定 —— Stub 中隐藏的“身份证”\"></a><strong>第一站：编译时的约定 —— Stub 中隐藏的“身份证”</strong></h3><p>一切的起点都在客户端。我们从 protoc 生成的 Stub 类入手，寻找“身份证”是如何被制造出来的。</p>\n<p>&#x2F;&#x2F; 客户端代码<br>grpc::Status status &#x3D; stub_-&gt;GetVersion(context, request, &amp;response);</p>\n<p>当我们查看生成的 controller.grpc.pb.cc 文件时，证据立刻就出现了：</p>\n<p><strong>controller.grpc.pb.cc (生成代码摘录)</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 证据 1：定义了一个全局唯一的“方法名身份证”  </span></span><br><span class=\"line\"><span class=\"type\">static</span> <span class=\"type\">const</span> <span class=\"type\">char</span>* Controller_method_names[] = &#123;  </span><br><span class=\"line\"><span class=\"string\">&quot;/controller.Controller/GetVersion&quot;</span>,  </span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// ...</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 证据 2：Stub 的 GetVersion 方法实现  </span></span><br><span class=\"line\">::grpc::Status Controller::Stub::<span class=\"built_in\">GetVersion</span>(...) &#123;  </span><br><span class=\"line\"><span class=\"comment\">// 将“身份证”和所有参数，打包交给一个更底层的通用函数  </span></span><br><span class=\"line\"><span class=\"keyword\">return</span> ::grpc::internal::<span class=\"built_in\">BlockingUnaryCall</span>&lt;...&gt;(channel_.<span class=\"built_in\">get</span>(), rpcmethod_GetVersion_, ...);  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>源码剖析：</strong></p>\n<ul>\n<li><strong>方法名字符串：</strong> protoc 明确地为我们的 GetVersion RPC 生成了一个全局唯一的字符串标识符 “&#x2F;controller.Controller&#x2F;GetVersion”。这完美印证了我们猜想的第一步——“身份证”是在编译时被创建的。</li>\n<li><strong>BlockingUnaryCall：</strong> 用户的调用最终被委托给了这个内部函数。Stub 的作用，就是为这个通用函数准备好所有必要的参数，其中最重要的就是 rpcmethod_GetVersion_，这是一个封装了上述“身份证”字符串的对象。</li>\n</ul>\n<p>至此，我们已经证明了，每一次 RPC 调用在 C++ 代码层面，都与一个唯一的方法签名字符串绑定在了一起。但这个字符串是如何跨越网络的呢？</p>\n<h3 id=\"第二站：网络上的“信封”-——-Wireshark-抓包分析\"><a href=\"#第二站：网络上的“信封”-——-Wireshark-抓包分析\" class=\"headerlink\" title=\"第二站：网络上的“信封” —— Wireshark 抓包分析\"></a><strong>第二站：网络上的“信封” —— Wireshark 抓包分析</strong></h3><p>理论和源码分析固然重要，但网络抓包的结果才是“铁证”。我使用 Wireshark 捕获了一次客户端调用 GetVersion 的网络流量，结果完全印证了我们的猜想。</p>\n<p>一次 gRPC 调用在网络上表现为一次 HTTP&#x2F;2 的请求-响应交换。在请求的 HEADERS 帧中，我们发现了决定性的证据：</p>\n<p><strong>Wireshark 抓包结果 (概念示意)</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Hypertext Transfer Protocol <span class=\"number\">2</span>  </span><br><span class=\"line\">Stream: HEADERS, Stream ID: <span class=\"number\">1</span>, Length <span class=\"number\">87</span>  </span><br><span class=\"line\">:method: POST  </span><br><span class=\"line\">:scheme: http  </span><br><span class=\"line\">:path: /controller.Controller/GetVersion  &lt;-- 铁证如山！  </span><br><span class=\"line\">:authority: localhost:<span class=\"number\">50051</span>  </span><br><span class=\"line\">content-type: application/grpc  </span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n\n\n<p><strong>抓包分析：</strong></p>\n<ul>\n<li><strong>:path 伪头：</strong> 我们在 Stub 源码中找到的那个“身份证”字符串 “&#x2F;controller.Controller&#x2F;GetVersion”，被原封不动地放在了 HTTP&#x2F;2 的 :path 伪头中。</li>\n<li><strong>这就是 gRPC 的“信封”！</strong> 它清晰地告诉了网络上的任何接收方：“这封信是寄给 &#x2F;controller.Controller&#x2F;GetVersion 这个处理单元的”。</li>\n</ul>\n<p>同样，在响应的 HEADERS 帧中，我们也能看到 gRPC 的状态码，而在 DATA 帧中，则是 Protobuf 序列化后的响应体。</p>\n<p><strong>小结：</strong> Wireshark 的抓包结果，完美地连接了我们的代码分析和网络现实。它证明了 gRPC 的“寻址”机制，就是通过将编译时生成的唯一方法签名，作为运行时 HTTP&#x2F;2 请求的 :path 来实现的。</p>\n<h3 id=\"第三站：服务端的“中央调度室”\"><a href=\"#第三站：服务端的“中央调度室”\" class=\"headerlink\" title=\"第三站：服务端的“中央调度室”\"></a><strong>第三站：服务端的“中央调度室”</strong></h3><p>现在，请求已经带着清晰的“信封”抵达服务端。服务端是如何根据这个地址，找到正确的处理函数的呢？答案的起点，在于 Service 的构造函数。</p>\n<p><strong>controller.grpc.pb.cc (生成代码摘录)</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Controller::Service::<span class=\"built_in\">Service</span>() &#123;  </span><br><span class=\"line\"><span class=\"comment\">// 在构造时，就调用 AddMethod  </span></span><br><span class=\"line\"><span class=\"built_in\">AddMethod</span>(<span class=\"keyword\">new</span> ::grpc::internal::<span class=\"built_in\">RpcServiceMethod</span>(  </span><br><span class=\"line\">Controller_method_names[<span class=\"number\">0</span>], <span class=\"comment\">// Key: 还是那个唯一的“身份证”  </span></span><br><span class=\"line\">...,  </span><br><span class=\"line\"><span class=\"keyword\">new</span> ::grpc::internal::<span class=\"built_in\">RpcMethodHandler</span>&lt;...&gt;(...))); <span class=\"comment\">// Value: 处理器  </span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>源码剖析：</strong></p>\n<ul>\n<li><strong>AddMethod：</strong> Service 基类在构造时，就为每个 RPC 方法调用 AddMethod。这个函数的核心作用，就是将<strong>方法签名字符串 (Key)</strong> 和一个知道如何调用具体实现的<strong>处理器 Handler (Value)</strong> 绑定在一起。</li>\n</ul>\n<p>当我们调用 ServerBuilder::RegisterService(&amp;service) 时，这些 Key-Value 对会被收集起来，并通过底层的 grpc_server_register_method 函数，正式注册到 grpc-core 内部的一个<strong>方法路由表</strong>中。从逻辑上推断，这个路由表必然是一个<strong>哈希表</strong>，以保证 O(1) 的查找效率。</p>\n<p><strong>至此，服务端的“中央调度室”就构建完成了。</strong> 当一个网络请求到来时：</p>\n<ol>\n<li>grpc-core 的 I&#x2F;O 线程接收到 HTTP&#x2F;2 请求，解析出 :path 头，得到 Key。</li>\n<li>以这个 Key 在内部的哈希路由表中进行查找，得到 Value (对应的 Handler)。</li>\n<li>这个 Handler 随后会反序列化请求的 Protobuf 数据，并最终调用我们自己重写的 ControllerServiceImpl::GetVersion C++ 成员函数。</li>\n</ol>\n<h3 id=\"结论：从猜想到证据的闭环\"><a href=\"#结论：从猜想到证据的闭环\" class=\"headerlink\" title=\"结论：从猜想到证据的闭环\"></a><strong>结论：从猜想到证据的闭环</strong></h3><p>通过这次“代码生成分析”和“网络抓包”相结合的探索，我们为开篇提出的核心问题，找到了一个完整且证据确凿的答案：</p>\n<p><strong>gRPC 通过一个编译时和运行时协同工作的精巧机制，保证了 RPC 调用与网络请求的一一对应：</strong></p>\n<ol>\n<li><strong>编译时契约：</strong> protoc 为每个 RPC 方法生成一个全局唯一的<strong>方法签名字符串</strong>。</li>\n<li><strong>运行时传输：</strong> 客户端将此签名作为 <strong>HTTP&#x2F;2 的 :path</strong>，连同 Protobuf 数据一起发送。</li>\n<li><strong>服务端路由：</strong> 服务端在启动时，已构建好一个从<strong>方法签名</strong>到<strong>处理函数</strong>的<strong>哈希路由表</strong>，收到请求后按图索骥，实现 O(1) 高效分发。</li>\n</ol>\n<p>正是这套标准化的“身份证制造 -&gt; 邮寄 -&gt; 验证”体系，构建起了 gRPC 强大、高效且灵活的 RPC 世界。</p>"},{"title":"grpc实践之路:03.Qt与grpc的集成使用","date":"2025-08-26T16:00:00.000Z","_content":"## **前言**\n\n在之前的文章中，我们从一个Qt应用的角度出发，探讨了怎么使用grpc作为进程间通信的手段，进行点对点的调用，并且讲解了怎么处理服务端产生的**流**数据。\n但是，既然都没涉及到Qt相关的内容，本篇文章就讲解下在Qt中怎么去使用Grpc作为客户端的集成。\n\nQt作为一个主要应用在GUI中的应用框架，在其中最大的挑战就是：**如何避免阻塞 UI 主线程**。当然可以利用QThread和信号槽的机制去解决这个问题，\n但是却有些繁琐，需要我们自己去进行线程管理和对象的生命周期。但是，好消息是自动 Qt6.9版本之后，**Qt 官方已经正式提供了对 gRPC 的原生支持** (Qt Grpc 模块)。这意味着我们不再需要手动创建线程来包装\ngRPC 调用了。Qt 将 gRPC与它核心的事件循环和信号槽机制完美地融合在了一起。\n\n本文，我们将探索这个“官方解决方案”，看看如何利用 Qt Grpc 模块，以一种前所未有的、极其优雅的方式，在 Qt 应用中实践 gRPC 通信。\n\n<!--more-->\n## **准备工作：CMake 与 Qt gRPC 模块**\n\n要使用 Qt 官方的 gRPC 支持，首先你需要确保在安装 Qt 时，已经勾选并安装了 Qt Protobuf 和 Qt Grpc 这两个模块，并且安装好了Grpc和Protobuf。\n\n并且Qt官方也提供了Grpc的函数去处理grpc的原生命令\n\n**CMakeLists.txt**\n```cmake\ncmake_minimum_required(VERSION 3.16)  \nproject(MyGrpcQtProject)\n\n#配置你的项目,保证先安装了grpc和protobuf\n\n# 找到 Qt6，并确保 Protobuf 和 Grpc 组件可用  \nfind_package(Qt6 REQUIRED COMPONENTS Protobuf Grpc)  \nqt_standard_project_setup()\n\n# 添加你的可执行文件  \nqt_add_executable(MyApp main.cpp clientguide.cpp) # 假设你的客户端逻辑在 clientguide.cpp\n\n# Qt 提供的 magic command，自动处理 .proto 文件！  \n# 它会调用 protoc 和 grpc_cpp_plugin 生成 Qt 风格的代码  \nqt_add_grpc(MyApp CLIENT # 或者 SERVER, BIDI  \nPROTO_FILES  \npath/to/your/service.proto  \n)\n\n# 链接到 Qt 提供的库  \ntarget_link_libraries(MyApp PRIVATE Qt6::Protobuf Qt6::Grpc)\n```\n\nqt_add_grpc 这个命令了它会自动处理代码生成和编译，也不需要去手动处理proto文件的生成c代码了\n\n## **代码生成**\n\n我们还是使用之前类似的 .proto 文件，但这次，由 qt_add_grpc 生成的文件会有些不同，它们是为 Qt 量身定做的。\n\n**clientguide.proto**\n\n```protobuf\nsyntax = \"proto3\";  \npackage client.guide; // enclosing namespace\n\nmessage Request { /* ... */ }  \nmessage Response { /* ... */ }\n\nservice ClientGuideService {  \nrpc UnaryCall (Request) returns (Response);  \nrpc ServerStreaming (Request) returns (stream Response);\n}\n\n```\n\n生成的文件名会带有 .qpb.h 和 .grpc.qpb.h 的后缀。它们不仅包含了 Protobuf 消息的 C++ 类，更重要的是，生成的 gRPC Stub 和\nService 基类，其所有方法都**原生返回 Qt 的异步对象**，并**通过信号槽来通知结果**。\n\n下面是生成Qt grpc中源码生成的示意图\n![qt_grpc_plugin](/images/qt_add_grpc.png)\n\n## **实践：一个纯 Qt 风格的体验**\n\n现在，让我们看看 Qt 官方示例中的客户端代码是如何利用这些新工具的。\n\n**clientguide.cpp (核心逻辑)**\n\n### **1. 初始化：创建 Channel 和 Client Stub**\n\n```c++\n//引入Qt生成的头文件\n#include \"clientguide.qpb.h\"\n#include \"clientguide_client.grpc.qpb.h\"\n//! [gen-includes]\n\n#include <QtGrpc/QGrpcHttp2Channel>\n#include <QtGrpc/QGrpcServerStream.h>\n\n#include <QtCore/QCommandLineParser>\n#include <QtCore/QCoreApplication>\n#include <QtCore/QDateTime>\n#include <QtCore/QProcess>\n#include <QtCore/QThread>\n#include <QtCore/QUrl>\n\n#include <limits>\n#include <memory>\n\nusing namespace client;\n\nvoid startServerProcess();\nQDebug operator<<(QDebug debug, const guide::Response &response);\n\nclass ClientGuide : public QObject\n{\npublic:\n    explicit ClientGuide(std::shared_ptr<QAbstractGrpcChannel> channel)\n    {\n        // 将 Qt 的 Channel 附加到 Qt 生成的 Client Stub 上 \n        // 这一步和原生 gRPC 类似，但 Channel 和 Client 都是 Qt gRPC 提供的类型。\n        m_client.attachChannel(std::move(channel));\n    }\n\n    static guide::Request createRequest(int32_t num, bool fail = false)\n    {\n        guide::Request request;\n        request.setNum(num);\n        request.setTime(fail ? std::numeric_limits<int64_t>::max()\n                             : QDateTime::currentMSecsSinceEpoch());\n        return request;\n    }\n   \n    void unaryCall(const guide::Request &request)\n    {\n        std::unique_ptr<QGrpcCallReply> reply = m_client.UnaryCall(request);\n        const auto *replyPtr = reply.get();\n        QObject::connect(\n            replyPtr, &QGrpcCallReply::finished, replyPtr,\n            [reply = std::move(reply)](const QGrpcStatus &status) {\n                if (status.isOk()) {\n                    if (const auto response = reply->read<guide::Response>())\n                        qDebug() << \"Client (UnaryCall) finished, received:\" << *response;\n                    else\n                        qDebug(\"Client (UnaryCall) deserialization failed\");\n                } else {\n                    qDebug() << \"Client (UnaryCall) failed:\" << status;\n                }\n            },\n            Qt::SingleShotConnection);\n    }\n\n    void serverStreaming(const guide::Request &initialRequest)\n    {\n        std::unique_ptr<QGrpcServerStream> stream = m_client.ServerStreaming(initialRequest);\n        const auto *streamPtr = stream.get();\n\n        QObject::connect(\n            streamPtr, &QGrpcServerStream::finished, streamPtr,\n            [stream = std::move(stream)](const QGrpcStatus &status) {\n                if (status.isOk())\n                    qDebug(\"Client (ServerStreaming) finished\");\n                else\n                    qDebug() << \"Client (ServerStreaming) failed:\" << status;\n            },\n            Qt::SingleShotConnection);\n\n        QObject::connect(streamPtr, &QGrpcServerStream::messageReceived, streamPtr, [streamPtr] {\n            if (const auto response = streamPtr->read<guide::Response>())\n                qDebug() << \"Client (ServerStream) received:\" << *response;\n            else\n                qDebug(\"Client (ServerStream) deserialization failed\");\n        });\n    }\nprivate:\n    guide::ClientGuideService::Client m_client;\n};\n\nint main(int argc, char *argv[])\n{\n    QCoreApplication app(argc, argv);\n\n    QCommandLineParser parser;\n    QCommandLineOption enableUnary(\"U\", \"Enable UnaryCalls\");\n    QCommandLineOption enableSStream(\"S\", \"Enable ServerStream\");\n\n    parser.addHelpOption();\n    parser.addOption(enableUnary);\n    parser.addOption(enableSStream);\n    parser.process(app);\n\n    bool defaultRun = !parser.isSet(enableUnary) && !parser.isSet(enableSStream)\n        && !parser.isSet(enableCStream) && !parser.isSet(enableBStream);\n\n    qDebug(\"Welcome to the clientguide!\");\n    qDebug(\"Starting the server process ...\");\n    startServerProcess();\n\n    //! [basic-0]\n    auto channel = std::make_shared<QGrpcHttp2Channel>(\n        QUrl(\"http://localhost:50056\")\n        /* without channel options. */\n    );\n    ClientGuide clientGuide(channel);\n    \n    if (defaultRun || parser.isSet(enableUnary)) {\n        clientGuide.unaryCall(ClientGuide::createRequest(1));\n        clientGuide.unaryCall(ClientGuide::createRequest(2, true)); // fail the RPC\n        clientGuide.unaryCall(ClientGuide::createRequest(3));\n    }\n\n    if (defaultRun || parser.isSet(enableSStream)) {\n        clientGuide.serverStreaming(ClientGuide::createRequest(3));\n    }\n\n    return app.exec();\n}\n```\n\n### **2. Unary RPC (点对点调用)**\n\nQt生成的客户端可以让我们直接利用信号槽的机制，不必为了避免阻塞UI，自动手动处理线程\n\n```c++\nvoid ClientGuide::unaryCall(const guide::Request &request)  \n{  \n// 调用 RPC 方法，不再返回 Status，而是返回一个 QGrpcCallReply 指针！  \nstd::unique_ptr<QGrpcCallReply> reply = m_client.UnaryCall(request);\n\n    // QGrpcCallReply 是一个 QObject，我们可以连接它的 finished 信号！  \n    QObject::connect(reply.get(), &QGrpcCallReply::finished, this,  \n        // Lambda 表达式作为槽函数  \n        [reply = std::move(reply)](const QGrpcStatus &status) {  \n            // 这个 Lambda 将在 Qt 的事件循环中被安全地调用，不会阻塞  \n            if (status.isOk()) {  \n                if (const auto response = reply->read<guide::Response>())  \n                    qDebug() << \"Client (UnaryCall) finished, received:\" << *response;  \n            } else {  \n                qDebug() << \"Client (UnaryCall) failed:\" << status;  \n            }  \n        });  \n\n}\n```\n\nm_client.UnaryCall 立即返回一个 QGrpcCallReply 对象，**完全不会阻塞**。我们只需要连接它的 finished\n信号，就可以在未来的某个时刻，当 RPC 调用完成时，在槽函数中处理结果。整个过程是**纯异步、事件驱动**的，完美融入了 Qt 的体系。\n\n下面的是调用过程的示意图:\n![qt_client](/images/qt_client.png)\n### **3. Server Streaming (服务端流)**\n\n处理流式数据也变得异常简单。调用流式 RPC 方法会返回一个 QGrpcServerStream 对象。\n\n```c++\nvoid ClientGuide::serverStreaming(const guide::Request &initialRequest)  \n{  \n// 调用流式 RPC，返回一个 QGrpcServerStream 指针  \nstd::unique_ptr<QGrpcServerStream> stream = m_client.ServerStreaming(initialRequest);  \nconst auto *streamPtr = stream.get();\n\n    // 连接 finished 信号，处理流结束事件  \n    QObject::connect(streamPtr, &QGrpcServerStream::finished, this,  \n        [stream = std::move(stream)](const QGrpcStatus &status) {  \n            if (status.isOk())  \n                qDebug(\"Client (ServerStreaming) finished\");  \n            else  \n                qDebug() << \"Client (ServerStreaming) failed:\" << status;  \n        });  \n      \n    // 连接 messageReceived 信号，处理每一条从服务端推送来的消息！  \n    QObject::connect(streamPtr, &QGrpcServerStream::messageReceived, this, [streamPtr] {  \n        if (const auto response = streamPtr->read<guide::Response>())  \n            qDebug() << \"Client (ServerStream) received:\" << *response;  \n    });  \n\n}\n\n```\n\n我们无需编写 while 循环读取响应数据了，取而代之的是连接 messageReceived\n信号。每当服务端推送一条新消息，这个信号就会被发射一次，我们的槽函数就会被调用一次。这正是我们梦寐以求的、真正的事件驱动的流式数据处理方式！\n\n## **个人思考：Qt gRPC 封装的优雅之处**\n\nQt的接口设计和使用方式确实有很多可取之处,Qt gRPC 模块的封装，堪称教科书级别的“框架集成”：\n\n1. **使用风格的统一：** 将grpc的调用过程统一成信号槽的方式与Qt的控件使用完全一致。\n2. **原生信号槽的胜利：** 整个 gRPC 的生命周期——发起调用、收到消息、调用结束——都被映射成了 Qt 的信号。这使得 gRPC\n   的异步事件能像按钮点击、鼠标移动一样，被无缝地集成到 Qt 的事件循环中。\n3. **使用更加简单：** 开发者不再需要关心线程问题，只需关注业务逻辑。Qt 将这一切都隐藏在了\n   QGrpcCallReply 和 QGrpcServerStream 对象的背后，提供了极其简洁和符合直觉的 API。\n\n## **总结与展望**\n\n本文，我们探索了 Qt 官方提供的 Qt Grpc 模块，见证了它如何将 gRPC 的强大功能与 Qt 优雅的信号槽机制完美结合。通过使用\nQGrpcCallReply 和 QGrpcServerStream，我们以一种纯异步、事件驱动的方式，轻松地实现了 Unary 和 Streaming RPC，彻底解决了在 GUI\n应用中进行网络通信的核心痛点。\n\n这无疑是 Qt C++ 开发者的一大福音。它极大地降低了在桌面和移动应用中使用 gRPC 的门槛，让我们能更专注于创造富有价值的应用本身。\n","source":"_posts/grpc/grpc实践之路:03.Qt与grpc的集成使用.md","raw":"---\ntitle: \"grpc实践之路:03.Qt与grpc的集成使用\"\ndate: 2025-08-27\ncategories: \n  - 动手实践-三方库\n  - grpc\ntags:\n  - C++\n  - grpc\n  - 进程间通信\n---\n## **前言**\n\n在之前的文章中，我们从一个Qt应用的角度出发，探讨了怎么使用grpc作为进程间通信的手段，进行点对点的调用，并且讲解了怎么处理服务端产生的**流**数据。\n但是，既然都没涉及到Qt相关的内容，本篇文章就讲解下在Qt中怎么去使用Grpc作为客户端的集成。\n\nQt作为一个主要应用在GUI中的应用框架，在其中最大的挑战就是：**如何避免阻塞 UI 主线程**。当然可以利用QThread和信号槽的机制去解决这个问题，\n但是却有些繁琐，需要我们自己去进行线程管理和对象的生命周期。但是，好消息是自动 Qt6.9版本之后，**Qt 官方已经正式提供了对 gRPC 的原生支持** (Qt Grpc 模块)。这意味着我们不再需要手动创建线程来包装\ngRPC 调用了。Qt 将 gRPC与它核心的事件循环和信号槽机制完美地融合在了一起。\n\n本文，我们将探索这个“官方解决方案”，看看如何利用 Qt Grpc 模块，以一种前所未有的、极其优雅的方式，在 Qt 应用中实践 gRPC 通信。\n\n<!--more-->\n## **准备工作：CMake 与 Qt gRPC 模块**\n\n要使用 Qt 官方的 gRPC 支持，首先你需要确保在安装 Qt 时，已经勾选并安装了 Qt Protobuf 和 Qt Grpc 这两个模块，并且安装好了Grpc和Protobuf。\n\n并且Qt官方也提供了Grpc的函数去处理grpc的原生命令\n\n**CMakeLists.txt**\n```cmake\ncmake_minimum_required(VERSION 3.16)  \nproject(MyGrpcQtProject)\n\n#配置你的项目,保证先安装了grpc和protobuf\n\n# 找到 Qt6，并确保 Protobuf 和 Grpc 组件可用  \nfind_package(Qt6 REQUIRED COMPONENTS Protobuf Grpc)  \nqt_standard_project_setup()\n\n# 添加你的可执行文件  \nqt_add_executable(MyApp main.cpp clientguide.cpp) # 假设你的客户端逻辑在 clientguide.cpp\n\n# Qt 提供的 magic command，自动处理 .proto 文件！  \n# 它会调用 protoc 和 grpc_cpp_plugin 生成 Qt 风格的代码  \nqt_add_grpc(MyApp CLIENT # 或者 SERVER, BIDI  \nPROTO_FILES  \npath/to/your/service.proto  \n)\n\n# 链接到 Qt 提供的库  \ntarget_link_libraries(MyApp PRIVATE Qt6::Protobuf Qt6::Grpc)\n```\n\nqt_add_grpc 这个命令了它会自动处理代码生成和编译，也不需要去手动处理proto文件的生成c代码了\n\n## **代码生成**\n\n我们还是使用之前类似的 .proto 文件，但这次，由 qt_add_grpc 生成的文件会有些不同，它们是为 Qt 量身定做的。\n\n**clientguide.proto**\n\n```protobuf\nsyntax = \"proto3\";  \npackage client.guide; // enclosing namespace\n\nmessage Request { /* ... */ }  \nmessage Response { /* ... */ }\n\nservice ClientGuideService {  \nrpc UnaryCall (Request) returns (Response);  \nrpc ServerStreaming (Request) returns (stream Response);\n}\n\n```\n\n生成的文件名会带有 .qpb.h 和 .grpc.qpb.h 的后缀。它们不仅包含了 Protobuf 消息的 C++ 类，更重要的是，生成的 gRPC Stub 和\nService 基类，其所有方法都**原生返回 Qt 的异步对象**，并**通过信号槽来通知结果**。\n\n下面是生成Qt grpc中源码生成的示意图\n![qt_grpc_plugin](/images/qt_add_grpc.png)\n\n## **实践：一个纯 Qt 风格的体验**\n\n现在，让我们看看 Qt 官方示例中的客户端代码是如何利用这些新工具的。\n\n**clientguide.cpp (核心逻辑)**\n\n### **1. 初始化：创建 Channel 和 Client Stub**\n\n```c++\n//引入Qt生成的头文件\n#include \"clientguide.qpb.h\"\n#include \"clientguide_client.grpc.qpb.h\"\n//! [gen-includes]\n\n#include <QtGrpc/QGrpcHttp2Channel>\n#include <QtGrpc/QGrpcServerStream.h>\n\n#include <QtCore/QCommandLineParser>\n#include <QtCore/QCoreApplication>\n#include <QtCore/QDateTime>\n#include <QtCore/QProcess>\n#include <QtCore/QThread>\n#include <QtCore/QUrl>\n\n#include <limits>\n#include <memory>\n\nusing namespace client;\n\nvoid startServerProcess();\nQDebug operator<<(QDebug debug, const guide::Response &response);\n\nclass ClientGuide : public QObject\n{\npublic:\n    explicit ClientGuide(std::shared_ptr<QAbstractGrpcChannel> channel)\n    {\n        // 将 Qt 的 Channel 附加到 Qt 生成的 Client Stub 上 \n        // 这一步和原生 gRPC 类似，但 Channel 和 Client 都是 Qt gRPC 提供的类型。\n        m_client.attachChannel(std::move(channel));\n    }\n\n    static guide::Request createRequest(int32_t num, bool fail = false)\n    {\n        guide::Request request;\n        request.setNum(num);\n        request.setTime(fail ? std::numeric_limits<int64_t>::max()\n                             : QDateTime::currentMSecsSinceEpoch());\n        return request;\n    }\n   \n    void unaryCall(const guide::Request &request)\n    {\n        std::unique_ptr<QGrpcCallReply> reply = m_client.UnaryCall(request);\n        const auto *replyPtr = reply.get();\n        QObject::connect(\n            replyPtr, &QGrpcCallReply::finished, replyPtr,\n            [reply = std::move(reply)](const QGrpcStatus &status) {\n                if (status.isOk()) {\n                    if (const auto response = reply->read<guide::Response>())\n                        qDebug() << \"Client (UnaryCall) finished, received:\" << *response;\n                    else\n                        qDebug(\"Client (UnaryCall) deserialization failed\");\n                } else {\n                    qDebug() << \"Client (UnaryCall) failed:\" << status;\n                }\n            },\n            Qt::SingleShotConnection);\n    }\n\n    void serverStreaming(const guide::Request &initialRequest)\n    {\n        std::unique_ptr<QGrpcServerStream> stream = m_client.ServerStreaming(initialRequest);\n        const auto *streamPtr = stream.get();\n\n        QObject::connect(\n            streamPtr, &QGrpcServerStream::finished, streamPtr,\n            [stream = std::move(stream)](const QGrpcStatus &status) {\n                if (status.isOk())\n                    qDebug(\"Client (ServerStreaming) finished\");\n                else\n                    qDebug() << \"Client (ServerStreaming) failed:\" << status;\n            },\n            Qt::SingleShotConnection);\n\n        QObject::connect(streamPtr, &QGrpcServerStream::messageReceived, streamPtr, [streamPtr] {\n            if (const auto response = streamPtr->read<guide::Response>())\n                qDebug() << \"Client (ServerStream) received:\" << *response;\n            else\n                qDebug(\"Client (ServerStream) deserialization failed\");\n        });\n    }\nprivate:\n    guide::ClientGuideService::Client m_client;\n};\n\nint main(int argc, char *argv[])\n{\n    QCoreApplication app(argc, argv);\n\n    QCommandLineParser parser;\n    QCommandLineOption enableUnary(\"U\", \"Enable UnaryCalls\");\n    QCommandLineOption enableSStream(\"S\", \"Enable ServerStream\");\n\n    parser.addHelpOption();\n    parser.addOption(enableUnary);\n    parser.addOption(enableSStream);\n    parser.process(app);\n\n    bool defaultRun = !parser.isSet(enableUnary) && !parser.isSet(enableSStream)\n        && !parser.isSet(enableCStream) && !parser.isSet(enableBStream);\n\n    qDebug(\"Welcome to the clientguide!\");\n    qDebug(\"Starting the server process ...\");\n    startServerProcess();\n\n    //! [basic-0]\n    auto channel = std::make_shared<QGrpcHttp2Channel>(\n        QUrl(\"http://localhost:50056\")\n        /* without channel options. */\n    );\n    ClientGuide clientGuide(channel);\n    \n    if (defaultRun || parser.isSet(enableUnary)) {\n        clientGuide.unaryCall(ClientGuide::createRequest(1));\n        clientGuide.unaryCall(ClientGuide::createRequest(2, true)); // fail the RPC\n        clientGuide.unaryCall(ClientGuide::createRequest(3));\n    }\n\n    if (defaultRun || parser.isSet(enableSStream)) {\n        clientGuide.serverStreaming(ClientGuide::createRequest(3));\n    }\n\n    return app.exec();\n}\n```\n\n### **2. Unary RPC (点对点调用)**\n\nQt生成的客户端可以让我们直接利用信号槽的机制，不必为了避免阻塞UI，自动手动处理线程\n\n```c++\nvoid ClientGuide::unaryCall(const guide::Request &request)  \n{  \n// 调用 RPC 方法，不再返回 Status，而是返回一个 QGrpcCallReply 指针！  \nstd::unique_ptr<QGrpcCallReply> reply = m_client.UnaryCall(request);\n\n    // QGrpcCallReply 是一个 QObject，我们可以连接它的 finished 信号！  \n    QObject::connect(reply.get(), &QGrpcCallReply::finished, this,  \n        // Lambda 表达式作为槽函数  \n        [reply = std::move(reply)](const QGrpcStatus &status) {  \n            // 这个 Lambda 将在 Qt 的事件循环中被安全地调用，不会阻塞  \n            if (status.isOk()) {  \n                if (const auto response = reply->read<guide::Response>())  \n                    qDebug() << \"Client (UnaryCall) finished, received:\" << *response;  \n            } else {  \n                qDebug() << \"Client (UnaryCall) failed:\" << status;  \n            }  \n        });  \n\n}\n```\n\nm_client.UnaryCall 立即返回一个 QGrpcCallReply 对象，**完全不会阻塞**。我们只需要连接它的 finished\n信号，就可以在未来的某个时刻，当 RPC 调用完成时，在槽函数中处理结果。整个过程是**纯异步、事件驱动**的，完美融入了 Qt 的体系。\n\n下面的是调用过程的示意图:\n![qt_client](/images/qt_client.png)\n### **3. Server Streaming (服务端流)**\n\n处理流式数据也变得异常简单。调用流式 RPC 方法会返回一个 QGrpcServerStream 对象。\n\n```c++\nvoid ClientGuide::serverStreaming(const guide::Request &initialRequest)  \n{  \n// 调用流式 RPC，返回一个 QGrpcServerStream 指针  \nstd::unique_ptr<QGrpcServerStream> stream = m_client.ServerStreaming(initialRequest);  \nconst auto *streamPtr = stream.get();\n\n    // 连接 finished 信号，处理流结束事件  \n    QObject::connect(streamPtr, &QGrpcServerStream::finished, this,  \n        [stream = std::move(stream)](const QGrpcStatus &status) {  \n            if (status.isOk())  \n                qDebug(\"Client (ServerStreaming) finished\");  \n            else  \n                qDebug() << \"Client (ServerStreaming) failed:\" << status;  \n        });  \n      \n    // 连接 messageReceived 信号，处理每一条从服务端推送来的消息！  \n    QObject::connect(streamPtr, &QGrpcServerStream::messageReceived, this, [streamPtr] {  \n        if (const auto response = streamPtr->read<guide::Response>())  \n            qDebug() << \"Client (ServerStream) received:\" << *response;  \n    });  \n\n}\n\n```\n\n我们无需编写 while 循环读取响应数据了，取而代之的是连接 messageReceived\n信号。每当服务端推送一条新消息，这个信号就会被发射一次，我们的槽函数就会被调用一次。这正是我们梦寐以求的、真正的事件驱动的流式数据处理方式！\n\n## **个人思考：Qt gRPC 封装的优雅之处**\n\nQt的接口设计和使用方式确实有很多可取之处,Qt gRPC 模块的封装，堪称教科书级别的“框架集成”：\n\n1. **使用风格的统一：** 将grpc的调用过程统一成信号槽的方式与Qt的控件使用完全一致。\n2. **原生信号槽的胜利：** 整个 gRPC 的生命周期——发起调用、收到消息、调用结束——都被映射成了 Qt 的信号。这使得 gRPC\n   的异步事件能像按钮点击、鼠标移动一样，被无缝地集成到 Qt 的事件循环中。\n3. **使用更加简单：** 开发者不再需要关心线程问题，只需关注业务逻辑。Qt 将这一切都隐藏在了\n   QGrpcCallReply 和 QGrpcServerStream 对象的背后，提供了极其简洁和符合直觉的 API。\n\n## **总结与展望**\n\n本文，我们探索了 Qt 官方提供的 Qt Grpc 模块，见证了它如何将 gRPC 的强大功能与 Qt 优雅的信号槽机制完美结合。通过使用\nQGrpcCallReply 和 QGrpcServerStream，我们以一种纯异步、事件驱动的方式，轻松地实现了 Unary 和 Streaming RPC，彻底解决了在 GUI\n应用中进行网络通信的核心痛点。\n\n这无疑是 Qt C++ 开发者的一大福音。它极大地降低了在桌面和移动应用中使用 gRPC 的门槛，让我们能更专注于创造富有价值的应用本身。\n","slug":"grpc/grpc实践之路:03.Qt与grpc的集成使用","published":1,"updated":"2025-08-28T12:43:33.178Z","comments":1,"layout":"post","photos":[],"_id":"cmevecvs70008hfro5epn065l","content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a><strong>前言</strong></h2><p>在之前的文章中，我们从一个Qt应用的角度出发，探讨了怎么使用grpc作为进程间通信的手段，进行点对点的调用，并且讲解了怎么处理服务端产生的<strong>流</strong>数据。<br>但是，既然都没涉及到Qt相关的内容，本篇文章就讲解下在Qt中怎么去使用Grpc作为客户端的集成。</p>\n<p>Qt作为一个主要应用在GUI中的应用框架，在其中最大的挑战就是：<strong>如何避免阻塞 UI 主线程</strong>。当然可以利用QThread和信号槽的机制去解决这个问题，<br>但是却有些繁琐，需要我们自己去进行线程管理和对象的生命周期。但是，好消息是自动 Qt6.9版本之后，<strong>Qt 官方已经正式提供了对 gRPC 的原生支持</strong> (Qt Grpc 模块)。这意味着我们不再需要手动创建线程来包装<br>gRPC 调用了。Qt 将 gRPC与它核心的事件循环和信号槽机制完美地融合在了一起。</p>\n<p>本文，我们将探索这个“官方解决方案”，看看如何利用 Qt Grpc 模块，以一种前所未有的、极其优雅的方式，在 Qt 应用中实践 gRPC 通信。</p>\n<span id=\"more\"></span>\n<h2 id=\"准备工作：CMake-与-Qt-gRPC-模块\"><a href=\"#准备工作：CMake-与-Qt-gRPC-模块\" class=\"headerlink\" title=\"准备工作：CMake 与 Qt gRPC 模块\"></a><strong>准备工作：CMake 与 Qt gRPC 模块</strong></h2><p>要使用 Qt 官方的 gRPC 支持，首先你需要确保在安装 Qt 时，已经勾选并安装了 Qt Protobuf 和 Qt Grpc 这两个模块，并且安装好了Grpc和Protobuf。</p>\n<p>并且Qt官方也提供了Grpc的函数去处理grpc的原生命令</p>\n<p><strong>CMakeLists.txt</strong></p>\n<figure class=\"highlight cmake\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">cmake_minimum_required</span>(VERSION <span class=\"number\">3.16</span>)  </span><br><span class=\"line\"><span class=\"keyword\">project</span>(MyGrpcQtProject)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#配置你的项目,保证先安装了grpc和protobuf</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 找到 Qt6，并确保 Protobuf 和 Grpc 组件可用  </span></span><br><span class=\"line\"><span class=\"keyword\">find_package</span>(Qt6 REQUIRED COMPONENTS Protobuf Grpc)  </span><br><span class=\"line\">qt_standard_project_setup()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 添加你的可执行文件  </span></span><br><span class=\"line\">qt_add_executable(MyApp main.cpp clientguide.cpp) <span class=\"comment\"># 假设你的客户端逻辑在 clientguide.cpp</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Qt 提供的 magic command，自动处理 .proto 文件！  </span></span><br><span class=\"line\"><span class=\"comment\"># 它会调用 protoc 和 grpc_cpp_plugin 生成 Qt 风格的代码  </span></span><br><span class=\"line\">qt_add_grpc(MyApp CLIENT <span class=\"comment\"># 或者 SERVER, BIDI  </span></span><br><span class=\"line\">PROTO_FILES  </span><br><span class=\"line\">path/to/your/service.proto  </span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 链接到 Qt 提供的库  </span></span><br><span class=\"line\"><span class=\"keyword\">target_link_libraries</span>(MyApp PRIVATE Qt6::Protobuf Qt6::Grpc)</span><br></pre></td></tr></table></figure>\n\n<p>qt_add_grpc 这个命令了它会自动处理代码生成和编译，也不需要去手动处理proto文件的生成c代码了</p>\n<h2 id=\"代码生成\"><a href=\"#代码生成\" class=\"headerlink\" title=\"代码生成\"></a><strong>代码生成</strong></h2><p>我们还是使用之前类似的 .proto 文件，但这次，由 qt_add_grpc 生成的文件会有些不同，它们是为 Qt 量身定做的。</p>\n<p><strong>clientguide.proto</strong></p>\n<figure class=\"highlight protobuf\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">syntax = <span class=\"string\">&quot;proto3&quot;</span>;  </span><br><span class=\"line\"><span class=\"keyword\">package</span> client.guide; <span class=\"comment\">// enclosing namespace</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">message </span><span class=\"title class_\">Request</span> &#123; <span class=\"comment\">/* ... */</span> &#125;  </span><br><span class=\"line\"><span class=\"keyword\">message </span><span class=\"title class_\">Response</span> &#123; <span class=\"comment\">/* ... */</span> &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">service </span><span class=\"title class_\">ClientGuideService</span> &#123;  </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">rpc</span> UnaryCall (Request) <span class=\"keyword\">returns</span> (Response)</span>;  </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">rpc</span> ServerStreaming (Request) <span class=\"keyword\">returns</span> (stream Response)</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>生成的文件名会带有 .qpb.h 和 .grpc.qpb.h 的后缀。它们不仅包含了 Protobuf 消息的 C++ 类，更重要的是，生成的 gRPC Stub 和<br>Service 基类，其所有方法都<strong>原生返回 Qt 的异步对象</strong>，并<strong>通过信号槽来通知结果</strong>。</p>\n<p>下面是生成Qt grpc中源码生成的示意图<br><img src=\"/images/qt_add_grpc.png\" alt=\"qt_grpc_plugin\"></p>\n<h2 id=\"实践：一个纯-Qt-风格的体验\"><a href=\"#实践：一个纯-Qt-风格的体验\" class=\"headerlink\" title=\"实践：一个纯 Qt 风格的体验\"></a><strong>实践：一个纯 Qt 风格的体验</strong></h2><p>现在，让我们看看 Qt 官方示例中的客户端代码是如何利用这些新工具的。</p>\n<p><strong>clientguide.cpp (核心逻辑)</strong></p>\n<h3 id=\"1-初始化：创建-Channel-和-Client-Stub\"><a href=\"#1-初始化：创建-Channel-和-Client-Stub\" class=\"headerlink\" title=\"1. 初始化：创建 Channel 和 Client Stub\"></a><strong>1. 初始化：创建 Channel 和 Client Stub</strong></h3><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//引入Qt生成的头文件</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;clientguide.qpb.h&quot;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;clientguide_client.grpc.qpb.h&quot;</span></span></span><br><span class=\"line\"><span class=\"comment\">//! [gen-includes]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;QtGrpc/QGrpcHttp2Channel&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;QtGrpc/QGrpcServerStream.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;QtCore/QCommandLineParser&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;QtCore/QCoreApplication&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;QtCore/QDateTime&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;QtCore/QProcess&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;QtCore/QThread&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;QtCore/QUrl&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;limits&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;memory&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> client;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">startServerProcess</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">QDebug <span class=\"keyword\">operator</span>&lt;&lt;(QDebug debug, <span class=\"type\">const</span> guide::Response &amp;response);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">ClientGuide</span> : <span class=\"keyword\">public</span> QObject</span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">explicit</span> <span class=\"title\">ClientGuide</span><span class=\"params\">(std::shared_ptr&lt;QAbstractGrpcChannel&gt; channel)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 将 Qt 的 Channel 附加到 Qt 生成的 Client Stub 上 </span></span><br><span class=\"line\">        <span class=\"comment\">// 这一步和原生 gRPC 类似，但 Channel 和 Client 都是 Qt gRPC 提供的类型。</span></span><br><span class=\"line\">        m_client.<span class=\"built_in\">attachChannel</span>(std::<span class=\"built_in\">move</span>(channel));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">static</span> guide::Request <span class=\"title\">createRequest</span><span class=\"params\">(<span class=\"type\">int32_t</span> num, <span class=\"type\">bool</span> fail = <span class=\"literal\">false</span>)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        guide::Request request;</span><br><span class=\"line\">        request.<span class=\"built_in\">setNum</span>(num);</span><br><span class=\"line\">        request.<span class=\"built_in\">setTime</span>(fail ? std::numeric_limits&lt;<span class=\"type\">int64_t</span>&gt;::<span class=\"built_in\">max</span>()</span><br><span class=\"line\">                             : QDateTime::<span class=\"built_in\">currentMSecsSinceEpoch</span>());</span><br><span class=\"line\">        <span class=\"keyword\">return</span> request;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">   </span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">unaryCall</span><span class=\"params\">(<span class=\"type\">const</span> guide::Request &amp;request)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        std::unique_ptr&lt;QGrpcCallReply&gt; reply = m_client.<span class=\"built_in\">UnaryCall</span>(request);</span><br><span class=\"line\">        <span class=\"type\">const</span> <span class=\"keyword\">auto</span> *replyPtr = reply.<span class=\"built_in\">get</span>();</span><br><span class=\"line\">        QObject::<span class=\"built_in\">connect</span>(</span><br><span class=\"line\">            replyPtr, &amp;QGrpcCallReply::finished, replyPtr,</span><br><span class=\"line\">            [reply = std::<span class=\"built_in\">move</span>(reply)](<span class=\"type\">const</span> QGrpcStatus &amp;status) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (status.<span class=\"built_in\">isOk</span>()) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (<span class=\"type\">const</span> <span class=\"keyword\">auto</span> response = reply-&gt;<span class=\"built_in\">read</span>&lt;guide::Response&gt;())</span><br><span class=\"line\">                        <span class=\"built_in\">qDebug</span>() &lt;&lt; <span class=\"string\">&quot;Client (UnaryCall) finished, received:&quot;</span> &lt;&lt; *response;</span><br><span class=\"line\">                    <span class=\"keyword\">else</span></span><br><span class=\"line\">                        <span class=\"built_in\">qDebug</span>(<span class=\"string\">&quot;Client (UnaryCall) deserialization failed&quot;</span>);</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                    <span class=\"built_in\">qDebug</span>() &lt;&lt; <span class=\"string\">&quot;Client (UnaryCall) failed:&quot;</span> &lt;&lt; status;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            Qt::SingleShotConnection);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">serverStreaming</span><span class=\"params\">(<span class=\"type\">const</span> guide::Request &amp;initialRequest)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        std::unique_ptr&lt;QGrpcServerStream&gt; stream = m_client.<span class=\"built_in\">ServerStreaming</span>(initialRequest);</span><br><span class=\"line\">        <span class=\"type\">const</span> <span class=\"keyword\">auto</span> *streamPtr = stream.<span class=\"built_in\">get</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">        QObject::<span class=\"built_in\">connect</span>(</span><br><span class=\"line\">            streamPtr, &amp;QGrpcServerStream::finished, streamPtr,</span><br><span class=\"line\">            [stream = std::<span class=\"built_in\">move</span>(stream)](<span class=\"type\">const</span> QGrpcStatus &amp;status) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (status.<span class=\"built_in\">isOk</span>())</span><br><span class=\"line\">                    <span class=\"built_in\">qDebug</span>(<span class=\"string\">&quot;Client (ServerStreaming) finished&quot;</span>);</span><br><span class=\"line\">                <span class=\"keyword\">else</span></span><br><span class=\"line\">                    <span class=\"built_in\">qDebug</span>() &lt;&lt; <span class=\"string\">&quot;Client (ServerStreaming) failed:&quot;</span> &lt;&lt; status;</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            Qt::SingleShotConnection);</span><br><span class=\"line\"></span><br><span class=\"line\">        QObject::<span class=\"built_in\">connect</span>(streamPtr, &amp;QGrpcServerStream::messageReceived, streamPtr, [streamPtr] &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (<span class=\"type\">const</span> <span class=\"keyword\">auto</span> response = streamPtr-&gt;<span class=\"built_in\">read</span>&lt;guide::Response&gt;())</span><br><span class=\"line\">                <span class=\"built_in\">qDebug</span>() &lt;&lt; <span class=\"string\">&quot;Client (ServerStream) received:&quot;</span> &lt;&lt; *response;</span><br><span class=\"line\">            <span class=\"keyword\">else</span></span><br><span class=\"line\">                <span class=\"built_in\">qDebug</span>(<span class=\"string\">&quot;Client (ServerStream) deserialization failed&quot;</span>);</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">    guide::ClientGuideService::Client m_client;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"type\">int</span> argc, <span class=\"type\">char</span> *argv[])</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"function\">QCoreApplication <span class=\"title\">app</span><span class=\"params\">(argc, argv)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    QCommandLineParser parser;</span><br><span class=\"line\">    <span class=\"function\">QCommandLineOption <span class=\"title\">enableUnary</span><span class=\"params\">(<span class=\"string\">&quot;U&quot;</span>, <span class=\"string\">&quot;Enable UnaryCalls&quot;</span>)</span></span>;</span><br><span class=\"line\">    <span class=\"function\">QCommandLineOption <span class=\"title\">enableSStream</span><span class=\"params\">(<span class=\"string\">&quot;S&quot;</span>, <span class=\"string\">&quot;Enable ServerStream&quot;</span>)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    parser.<span class=\"built_in\">addHelpOption</span>();</span><br><span class=\"line\">    parser.<span class=\"built_in\">addOption</span>(enableUnary);</span><br><span class=\"line\">    parser.<span class=\"built_in\">addOption</span>(enableSStream);</span><br><span class=\"line\">    parser.<span class=\"built_in\">process</span>(app);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">bool</span> defaultRun = !parser.<span class=\"built_in\">isSet</span>(enableUnary) &amp;&amp; !parser.<span class=\"built_in\">isSet</span>(enableSStream)</span><br><span class=\"line\">        &amp;&amp; !parser.<span class=\"built_in\">isSet</span>(enableCStream) &amp;&amp; !parser.<span class=\"built_in\">isSet</span>(enableBStream);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">qDebug</span>(<span class=\"string\">&quot;Welcome to the clientguide!&quot;</span>);</span><br><span class=\"line\">    <span class=\"built_in\">qDebug</span>(<span class=\"string\">&quot;Starting the server process ...&quot;</span>);</span><br><span class=\"line\">    <span class=\"built_in\">startServerProcess</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//! [basic-0]</span></span><br><span class=\"line\">    <span class=\"keyword\">auto</span> channel = std::<span class=\"built_in\">make_shared</span>&lt;QGrpcHttp2Channel&gt;(</span><br><span class=\"line\">        <span class=\"built_in\">QUrl</span>(<span class=\"string\">&quot;http://localhost:50056&quot;</span>)</span><br><span class=\"line\">        <span class=\"comment\">/* without channel options. */</span></span><br><span class=\"line\">    );</span><br><span class=\"line\">    <span class=\"function\">ClientGuide <span class=\"title\">clientGuide</span><span class=\"params\">(channel)</span></span>;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">if</span> (defaultRun || parser.<span class=\"built_in\">isSet</span>(enableUnary)) &#123;</span><br><span class=\"line\">        clientGuide.<span class=\"built_in\">unaryCall</span>(ClientGuide::<span class=\"built_in\">createRequest</span>(<span class=\"number\">1</span>));</span><br><span class=\"line\">        clientGuide.<span class=\"built_in\">unaryCall</span>(ClientGuide::<span class=\"built_in\">createRequest</span>(<span class=\"number\">2</span>, <span class=\"literal\">true</span>)); <span class=\"comment\">// fail the RPC</span></span><br><span class=\"line\">        clientGuide.<span class=\"built_in\">unaryCall</span>(ClientGuide::<span class=\"built_in\">createRequest</span>(<span class=\"number\">3</span>));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (defaultRun || parser.<span class=\"built_in\">isSet</span>(enableSStream)) &#123;</span><br><span class=\"line\">        clientGuide.<span class=\"built_in\">serverStreaming</span>(ClientGuide::<span class=\"built_in\">createRequest</span>(<span class=\"number\">3</span>));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> app.<span class=\"built_in\">exec</span>();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-Unary-RPC-点对点调用\"><a href=\"#2-Unary-RPC-点对点调用\" class=\"headerlink\" title=\"2. Unary RPC (点对点调用)\"></a><strong>2. Unary RPC (点对点调用)</strong></h3><p>Qt生成的客户端可以让我们直接利用信号槽的机制，不必为了避免阻塞UI，自动手动处理线程</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">ClientGuide::unaryCall</span><span class=\"params\">(<span class=\"type\">const</span> guide::Request &amp;request)</span>  </span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;  </span><br><span class=\"line\"><span class=\"comment\">// 调用 RPC 方法，不再返回 Status，而是返回一个 QGrpcCallReply 指针！  </span></span><br><span class=\"line\">std::unique_ptr&lt;QGrpcCallReply&gt; reply = m_client.<span class=\"built_in\">UnaryCall</span>(request);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// QGrpcCallReply 是一个 QObject，我们可以连接它的 finished 信号！  </span></span><br><span class=\"line\">    QObject::<span class=\"built_in\">connect</span>(reply.<span class=\"built_in\">get</span>(), &amp;QGrpcCallReply::finished, <span class=\"keyword\">this</span>,  </span><br><span class=\"line\">        <span class=\"comment\">// Lambda 表达式作为槽函数  </span></span><br><span class=\"line\">        [reply = std::<span class=\"built_in\">move</span>(reply)](<span class=\"type\">const</span> QGrpcStatus &amp;status) &#123;  </span><br><span class=\"line\">            <span class=\"comment\">// 这个 Lambda 将在 Qt 的事件循环中被安全地调用，不会阻塞  </span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (status.<span class=\"built_in\">isOk</span>()) &#123;  </span><br><span class=\"line\">                <span class=\"keyword\">if</span> (<span class=\"type\">const</span> <span class=\"keyword\">auto</span> response = reply-&gt;<span class=\"built_in\">read</span>&lt;guide::Response&gt;())  </span><br><span class=\"line\">                    <span class=\"built_in\">qDebug</span>() &lt;&lt; <span class=\"string\">&quot;Client (UnaryCall) finished, received:&quot;</span> &lt;&lt; *response;  </span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;  </span><br><span class=\"line\">                <span class=\"built_in\">qDebug</span>() &lt;&lt; <span class=\"string\">&quot;Client (UnaryCall) failed:&quot;</span> &lt;&lt; status;  </span><br><span class=\"line\">            &#125;  </span><br><span class=\"line\">        &#125;);  </span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>m_client.UnaryCall 立即返回一个 QGrpcCallReply 对象，<strong>完全不会阻塞</strong>。我们只需要连接它的 finished<br>信号，就可以在未来的某个时刻，当 RPC 调用完成时，在槽函数中处理结果。整个过程是<strong>纯异步、事件驱动</strong>的，完美融入了 Qt 的体系。</p>\n<p>下面的是调用过程的示意图:<br><img src=\"/images/qt_client.png\" alt=\"qt_client\"></p>\n<h3 id=\"3-Server-Streaming-服务端流\"><a href=\"#3-Server-Streaming-服务端流\" class=\"headerlink\" title=\"3. Server Streaming (服务端流)\"></a><strong>3. Server Streaming (服务端流)</strong></h3><p>处理流式数据也变得异常简单。调用流式 RPC 方法会返回一个 QGrpcServerStream 对象。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">ClientGuide::serverStreaming</span><span class=\"params\">(<span class=\"type\">const</span> guide::Request &amp;initialRequest)</span>  </span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;  </span><br><span class=\"line\"><span class=\"comment\">// 调用流式 RPC，返回一个 QGrpcServerStream 指针  </span></span><br><span class=\"line\">std::unique_ptr&lt;QGrpcServerStream&gt; stream = m_client.<span class=\"built_in\">ServerStreaming</span>(initialRequest);  </span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"keyword\">auto</span> *streamPtr = stream.<span class=\"built_in\">get</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 连接 finished 信号，处理流结束事件  </span></span><br><span class=\"line\">    QObject::<span class=\"built_in\">connect</span>(streamPtr, &amp;QGrpcServerStream::finished, <span class=\"keyword\">this</span>,  </span><br><span class=\"line\">        [stream = std::<span class=\"built_in\">move</span>(stream)](<span class=\"type\">const</span> QGrpcStatus &amp;status) &#123;  </span><br><span class=\"line\">            <span class=\"keyword\">if</span> (status.<span class=\"built_in\">isOk</span>())  </span><br><span class=\"line\">                <span class=\"built_in\">qDebug</span>(<span class=\"string\">&quot;Client (ServerStreaming) finished&quot;</span>);  </span><br><span class=\"line\">            <span class=\"keyword\">else</span>  </span><br><span class=\"line\">                <span class=\"built_in\">qDebug</span>() &lt;&lt; <span class=\"string\">&quot;Client (ServerStreaming) failed:&quot;</span> &lt;&lt; status;  </span><br><span class=\"line\">        &#125;);  </span><br><span class=\"line\">      </span><br><span class=\"line\">    <span class=\"comment\">// 连接 messageReceived 信号，处理每一条从服务端推送来的消息！  </span></span><br><span class=\"line\">    QObject::<span class=\"built_in\">connect</span>(streamPtr, &amp;QGrpcServerStream::messageReceived, <span class=\"keyword\">this</span>, [streamPtr] &#123;  </span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"type\">const</span> <span class=\"keyword\">auto</span> response = streamPtr-&gt;<span class=\"built_in\">read</span>&lt;guide::Response&gt;())  </span><br><span class=\"line\">            <span class=\"built_in\">qDebug</span>() &lt;&lt; <span class=\"string\">&quot;Client (ServerStream) received:&quot;</span> &lt;&lt; *response;  </span><br><span class=\"line\">    &#125;);  </span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>我们无需编写 while 循环读取响应数据了，取而代之的是连接 messageReceived<br>信号。每当服务端推送一条新消息，这个信号就会被发射一次，我们的槽函数就会被调用一次。这正是我们梦寐以求的、真正的事件驱动的流式数据处理方式！</p>\n<h2 id=\"个人思考：Qt-gRPC-封装的优雅之处\"><a href=\"#个人思考：Qt-gRPC-封装的优雅之处\" class=\"headerlink\" title=\"个人思考：Qt gRPC 封装的优雅之处\"></a><strong>个人思考：Qt gRPC 封装的优雅之处</strong></h2><p>Qt的接口设计和使用方式确实有很多可取之处,Qt gRPC 模块的封装，堪称教科书级别的“框架集成”：</p>\n<ol>\n<li><strong>使用风格的统一：</strong> 将grpc的调用过程统一成信号槽的方式与Qt的控件使用完全一致。</li>\n<li><strong>原生信号槽的胜利：</strong> 整个 gRPC 的生命周期——发起调用、收到消息、调用结束——都被映射成了 Qt 的信号。这使得 gRPC<br>的异步事件能像按钮点击、鼠标移动一样，被无缝地集成到 Qt 的事件循环中。</li>\n<li><strong>使用更加简单：</strong> 开发者不再需要关心线程问题，只需关注业务逻辑。Qt 将这一切都隐藏在了<br>QGrpcCallReply 和 QGrpcServerStream 对象的背后，提供了极其简洁和符合直觉的 API。</li>\n</ol>\n<h2 id=\"总结与展望\"><a href=\"#总结与展望\" class=\"headerlink\" title=\"总结与展望\"></a><strong>总结与展望</strong></h2><p>本文，我们探索了 Qt 官方提供的 Qt Grpc 模块，见证了它如何将 gRPC 的强大功能与 Qt 优雅的信号槽机制完美结合。通过使用<br>QGrpcCallReply 和 QGrpcServerStream，我们以一种纯异步、事件驱动的方式，轻松地实现了 Unary 和 Streaming RPC，彻底解决了在 GUI<br>应用中进行网络通信的核心痛点。</p>\n<p>这无疑是 Qt C++ 开发者的一大福音。它极大地降低了在桌面和移动应用中使用 gRPC 的门槛，让我们能更专注于创造富有价值的应用本身。</p>\n","excerpt":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a><strong>前言</strong></h2><p>在之前的文章中，我们从一个Qt应用的角度出发，探讨了怎么使用grpc作为进程间通信的手段，进行点对点的调用，并且讲解了怎么处理服务端产生的<strong>流</strong>数据。<br>但是，既然都没涉及到Qt相关的内容，本篇文章就讲解下在Qt中怎么去使用Grpc作为客户端的集成。</p>\n<p>Qt作为一个主要应用在GUI中的应用框架，在其中最大的挑战就是：<strong>如何避免阻塞 UI 主线程</strong>。当然可以利用QThread和信号槽的机制去解决这个问题，<br>但是却有些繁琐，需要我们自己去进行线程管理和对象的生命周期。但是，好消息是自动 Qt6.9版本之后，<strong>Qt 官方已经正式提供了对 gRPC 的原生支持</strong> (Qt Grpc 模块)。这意味着我们不再需要手动创建线程来包装<br>gRPC 调用了。Qt 将 gRPC与它核心的事件循环和信号槽机制完美地融合在了一起。</p>\n<p>本文，我们将探索这个“官方解决方案”，看看如何利用 Qt Grpc 模块，以一种前所未有的、极其优雅的方式，在 Qt 应用中实践 gRPC 通信。</p>","more":"<h2 id=\"准备工作：CMake-与-Qt-gRPC-模块\"><a href=\"#准备工作：CMake-与-Qt-gRPC-模块\" class=\"headerlink\" title=\"准备工作：CMake 与 Qt gRPC 模块\"></a><strong>准备工作：CMake 与 Qt gRPC 模块</strong></h2><p>要使用 Qt 官方的 gRPC 支持，首先你需要确保在安装 Qt 时，已经勾选并安装了 Qt Protobuf 和 Qt Grpc 这两个模块，并且安装好了Grpc和Protobuf。</p>\n<p>并且Qt官方也提供了Grpc的函数去处理grpc的原生命令</p>\n<p><strong>CMakeLists.txt</strong></p>\n<figure class=\"highlight cmake\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">cmake_minimum_required</span>(VERSION <span class=\"number\">3.16</span>)  </span><br><span class=\"line\"><span class=\"keyword\">project</span>(MyGrpcQtProject)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#配置你的项目,保证先安装了grpc和protobuf</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 找到 Qt6，并确保 Protobuf 和 Grpc 组件可用  </span></span><br><span class=\"line\"><span class=\"keyword\">find_package</span>(Qt6 REQUIRED COMPONENTS Protobuf Grpc)  </span><br><span class=\"line\">qt_standard_project_setup()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 添加你的可执行文件  </span></span><br><span class=\"line\">qt_add_executable(MyApp main.cpp clientguide.cpp) <span class=\"comment\"># 假设你的客户端逻辑在 clientguide.cpp</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Qt 提供的 magic command，自动处理 .proto 文件！  </span></span><br><span class=\"line\"><span class=\"comment\"># 它会调用 protoc 和 grpc_cpp_plugin 生成 Qt 风格的代码  </span></span><br><span class=\"line\">qt_add_grpc(MyApp CLIENT <span class=\"comment\"># 或者 SERVER, BIDI  </span></span><br><span class=\"line\">PROTO_FILES  </span><br><span class=\"line\">path/to/your/service.proto  </span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 链接到 Qt 提供的库  </span></span><br><span class=\"line\"><span class=\"keyword\">target_link_libraries</span>(MyApp PRIVATE Qt6::Protobuf Qt6::Grpc)</span><br></pre></td></tr></table></figure>\n\n<p>qt_add_grpc 这个命令了它会自动处理代码生成和编译，也不需要去手动处理proto文件的生成c代码了</p>\n<h2 id=\"代码生成\"><a href=\"#代码生成\" class=\"headerlink\" title=\"代码生成\"></a><strong>代码生成</strong></h2><p>我们还是使用之前类似的 .proto 文件，但这次，由 qt_add_grpc 生成的文件会有些不同，它们是为 Qt 量身定做的。</p>\n<p><strong>clientguide.proto</strong></p>\n<figure class=\"highlight protobuf\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">syntax = <span class=\"string\">&quot;proto3&quot;</span>;  </span><br><span class=\"line\"><span class=\"keyword\">package</span> client.guide; <span class=\"comment\">// enclosing namespace</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">message </span><span class=\"title class_\">Request</span> &#123; <span class=\"comment\">/* ... */</span> &#125;  </span><br><span class=\"line\"><span class=\"keyword\">message </span><span class=\"title class_\">Response</span> &#123; <span class=\"comment\">/* ... */</span> &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">service </span><span class=\"title class_\">ClientGuideService</span> &#123;  </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">rpc</span> UnaryCall (Request) <span class=\"keyword\">returns</span> (Response)</span>;  </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">rpc</span> ServerStreaming (Request) <span class=\"keyword\">returns</span> (stream Response)</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>生成的文件名会带有 .qpb.h 和 .grpc.qpb.h 的后缀。它们不仅包含了 Protobuf 消息的 C++ 类，更重要的是，生成的 gRPC Stub 和<br>Service 基类，其所有方法都<strong>原生返回 Qt 的异步对象</strong>，并<strong>通过信号槽来通知结果</strong>。</p>\n<p>下面是生成Qt grpc中源码生成的示意图<br><img src=\"/images/qt_add_grpc.png\" alt=\"qt_grpc_plugin\"></p>\n<h2 id=\"实践：一个纯-Qt-风格的体验\"><a href=\"#实践：一个纯-Qt-风格的体验\" class=\"headerlink\" title=\"实践：一个纯 Qt 风格的体验\"></a><strong>实践：一个纯 Qt 风格的体验</strong></h2><p>现在，让我们看看 Qt 官方示例中的客户端代码是如何利用这些新工具的。</p>\n<p><strong>clientguide.cpp (核心逻辑)</strong></p>\n<h3 id=\"1-初始化：创建-Channel-和-Client-Stub\"><a href=\"#1-初始化：创建-Channel-和-Client-Stub\" class=\"headerlink\" title=\"1. 初始化：创建 Channel 和 Client Stub\"></a><strong>1. 初始化：创建 Channel 和 Client Stub</strong></h3><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//引入Qt生成的头文件</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;clientguide.qpb.h&quot;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;clientguide_client.grpc.qpb.h&quot;</span></span></span><br><span class=\"line\"><span class=\"comment\">//! [gen-includes]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;QtGrpc/QGrpcHttp2Channel&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;QtGrpc/QGrpcServerStream.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;QtCore/QCommandLineParser&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;QtCore/QCoreApplication&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;QtCore/QDateTime&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;QtCore/QProcess&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;QtCore/QThread&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;QtCore/QUrl&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;limits&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;memory&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> client;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">startServerProcess</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">QDebug <span class=\"keyword\">operator</span>&lt;&lt;(QDebug debug, <span class=\"type\">const</span> guide::Response &amp;response);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">ClientGuide</span> : <span class=\"keyword\">public</span> QObject</span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">explicit</span> <span class=\"title\">ClientGuide</span><span class=\"params\">(std::shared_ptr&lt;QAbstractGrpcChannel&gt; channel)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 将 Qt 的 Channel 附加到 Qt 生成的 Client Stub 上 </span></span><br><span class=\"line\">        <span class=\"comment\">// 这一步和原生 gRPC 类似，但 Channel 和 Client 都是 Qt gRPC 提供的类型。</span></span><br><span class=\"line\">        m_client.<span class=\"built_in\">attachChannel</span>(std::<span class=\"built_in\">move</span>(channel));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">static</span> guide::Request <span class=\"title\">createRequest</span><span class=\"params\">(<span class=\"type\">int32_t</span> num, <span class=\"type\">bool</span> fail = <span class=\"literal\">false</span>)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        guide::Request request;</span><br><span class=\"line\">        request.<span class=\"built_in\">setNum</span>(num);</span><br><span class=\"line\">        request.<span class=\"built_in\">setTime</span>(fail ? std::numeric_limits&lt;<span class=\"type\">int64_t</span>&gt;::<span class=\"built_in\">max</span>()</span><br><span class=\"line\">                             : QDateTime::<span class=\"built_in\">currentMSecsSinceEpoch</span>());</span><br><span class=\"line\">        <span class=\"keyword\">return</span> request;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">   </span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">unaryCall</span><span class=\"params\">(<span class=\"type\">const</span> guide::Request &amp;request)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        std::unique_ptr&lt;QGrpcCallReply&gt; reply = m_client.<span class=\"built_in\">UnaryCall</span>(request);</span><br><span class=\"line\">        <span class=\"type\">const</span> <span class=\"keyword\">auto</span> *replyPtr = reply.<span class=\"built_in\">get</span>();</span><br><span class=\"line\">        QObject::<span class=\"built_in\">connect</span>(</span><br><span class=\"line\">            replyPtr, &amp;QGrpcCallReply::finished, replyPtr,</span><br><span class=\"line\">            [reply = std::<span class=\"built_in\">move</span>(reply)](<span class=\"type\">const</span> QGrpcStatus &amp;status) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (status.<span class=\"built_in\">isOk</span>()) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (<span class=\"type\">const</span> <span class=\"keyword\">auto</span> response = reply-&gt;<span class=\"built_in\">read</span>&lt;guide::Response&gt;())</span><br><span class=\"line\">                        <span class=\"built_in\">qDebug</span>() &lt;&lt; <span class=\"string\">&quot;Client (UnaryCall) finished, received:&quot;</span> &lt;&lt; *response;</span><br><span class=\"line\">                    <span class=\"keyword\">else</span></span><br><span class=\"line\">                        <span class=\"built_in\">qDebug</span>(<span class=\"string\">&quot;Client (UnaryCall) deserialization failed&quot;</span>);</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                    <span class=\"built_in\">qDebug</span>() &lt;&lt; <span class=\"string\">&quot;Client (UnaryCall) failed:&quot;</span> &lt;&lt; status;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            Qt::SingleShotConnection);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">serverStreaming</span><span class=\"params\">(<span class=\"type\">const</span> guide::Request &amp;initialRequest)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        std::unique_ptr&lt;QGrpcServerStream&gt; stream = m_client.<span class=\"built_in\">ServerStreaming</span>(initialRequest);</span><br><span class=\"line\">        <span class=\"type\">const</span> <span class=\"keyword\">auto</span> *streamPtr = stream.<span class=\"built_in\">get</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">        QObject::<span class=\"built_in\">connect</span>(</span><br><span class=\"line\">            streamPtr, &amp;QGrpcServerStream::finished, streamPtr,</span><br><span class=\"line\">            [stream = std::<span class=\"built_in\">move</span>(stream)](<span class=\"type\">const</span> QGrpcStatus &amp;status) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (status.<span class=\"built_in\">isOk</span>())</span><br><span class=\"line\">                    <span class=\"built_in\">qDebug</span>(<span class=\"string\">&quot;Client (ServerStreaming) finished&quot;</span>);</span><br><span class=\"line\">                <span class=\"keyword\">else</span></span><br><span class=\"line\">                    <span class=\"built_in\">qDebug</span>() &lt;&lt; <span class=\"string\">&quot;Client (ServerStreaming) failed:&quot;</span> &lt;&lt; status;</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            Qt::SingleShotConnection);</span><br><span class=\"line\"></span><br><span class=\"line\">        QObject::<span class=\"built_in\">connect</span>(streamPtr, &amp;QGrpcServerStream::messageReceived, streamPtr, [streamPtr] &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (<span class=\"type\">const</span> <span class=\"keyword\">auto</span> response = streamPtr-&gt;<span class=\"built_in\">read</span>&lt;guide::Response&gt;())</span><br><span class=\"line\">                <span class=\"built_in\">qDebug</span>() &lt;&lt; <span class=\"string\">&quot;Client (ServerStream) received:&quot;</span> &lt;&lt; *response;</span><br><span class=\"line\">            <span class=\"keyword\">else</span></span><br><span class=\"line\">                <span class=\"built_in\">qDebug</span>(<span class=\"string\">&quot;Client (ServerStream) deserialization failed&quot;</span>);</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">    guide::ClientGuideService::Client m_client;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"type\">int</span> argc, <span class=\"type\">char</span> *argv[])</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"function\">QCoreApplication <span class=\"title\">app</span><span class=\"params\">(argc, argv)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    QCommandLineParser parser;</span><br><span class=\"line\">    <span class=\"function\">QCommandLineOption <span class=\"title\">enableUnary</span><span class=\"params\">(<span class=\"string\">&quot;U&quot;</span>, <span class=\"string\">&quot;Enable UnaryCalls&quot;</span>)</span></span>;</span><br><span class=\"line\">    <span class=\"function\">QCommandLineOption <span class=\"title\">enableSStream</span><span class=\"params\">(<span class=\"string\">&quot;S&quot;</span>, <span class=\"string\">&quot;Enable ServerStream&quot;</span>)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    parser.<span class=\"built_in\">addHelpOption</span>();</span><br><span class=\"line\">    parser.<span class=\"built_in\">addOption</span>(enableUnary);</span><br><span class=\"line\">    parser.<span class=\"built_in\">addOption</span>(enableSStream);</span><br><span class=\"line\">    parser.<span class=\"built_in\">process</span>(app);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">bool</span> defaultRun = !parser.<span class=\"built_in\">isSet</span>(enableUnary) &amp;&amp; !parser.<span class=\"built_in\">isSet</span>(enableSStream)</span><br><span class=\"line\">        &amp;&amp; !parser.<span class=\"built_in\">isSet</span>(enableCStream) &amp;&amp; !parser.<span class=\"built_in\">isSet</span>(enableBStream);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">qDebug</span>(<span class=\"string\">&quot;Welcome to the clientguide!&quot;</span>);</span><br><span class=\"line\">    <span class=\"built_in\">qDebug</span>(<span class=\"string\">&quot;Starting the server process ...&quot;</span>);</span><br><span class=\"line\">    <span class=\"built_in\">startServerProcess</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//! [basic-0]</span></span><br><span class=\"line\">    <span class=\"keyword\">auto</span> channel = std::<span class=\"built_in\">make_shared</span>&lt;QGrpcHttp2Channel&gt;(</span><br><span class=\"line\">        <span class=\"built_in\">QUrl</span>(<span class=\"string\">&quot;http://localhost:50056&quot;</span>)</span><br><span class=\"line\">        <span class=\"comment\">/* without channel options. */</span></span><br><span class=\"line\">    );</span><br><span class=\"line\">    <span class=\"function\">ClientGuide <span class=\"title\">clientGuide</span><span class=\"params\">(channel)</span></span>;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">if</span> (defaultRun || parser.<span class=\"built_in\">isSet</span>(enableUnary)) &#123;</span><br><span class=\"line\">        clientGuide.<span class=\"built_in\">unaryCall</span>(ClientGuide::<span class=\"built_in\">createRequest</span>(<span class=\"number\">1</span>));</span><br><span class=\"line\">        clientGuide.<span class=\"built_in\">unaryCall</span>(ClientGuide::<span class=\"built_in\">createRequest</span>(<span class=\"number\">2</span>, <span class=\"literal\">true</span>)); <span class=\"comment\">// fail the RPC</span></span><br><span class=\"line\">        clientGuide.<span class=\"built_in\">unaryCall</span>(ClientGuide::<span class=\"built_in\">createRequest</span>(<span class=\"number\">3</span>));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (defaultRun || parser.<span class=\"built_in\">isSet</span>(enableSStream)) &#123;</span><br><span class=\"line\">        clientGuide.<span class=\"built_in\">serverStreaming</span>(ClientGuide::<span class=\"built_in\">createRequest</span>(<span class=\"number\">3</span>));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> app.<span class=\"built_in\">exec</span>();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-Unary-RPC-点对点调用\"><a href=\"#2-Unary-RPC-点对点调用\" class=\"headerlink\" title=\"2. Unary RPC (点对点调用)\"></a><strong>2. Unary RPC (点对点调用)</strong></h3><p>Qt生成的客户端可以让我们直接利用信号槽的机制，不必为了避免阻塞UI，自动手动处理线程</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">ClientGuide::unaryCall</span><span class=\"params\">(<span class=\"type\">const</span> guide::Request &amp;request)</span>  </span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;  </span><br><span class=\"line\"><span class=\"comment\">// 调用 RPC 方法，不再返回 Status，而是返回一个 QGrpcCallReply 指针！  </span></span><br><span class=\"line\">std::unique_ptr&lt;QGrpcCallReply&gt; reply = m_client.<span class=\"built_in\">UnaryCall</span>(request);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// QGrpcCallReply 是一个 QObject，我们可以连接它的 finished 信号！  </span></span><br><span class=\"line\">    QObject::<span class=\"built_in\">connect</span>(reply.<span class=\"built_in\">get</span>(), &amp;QGrpcCallReply::finished, <span class=\"keyword\">this</span>,  </span><br><span class=\"line\">        <span class=\"comment\">// Lambda 表达式作为槽函数  </span></span><br><span class=\"line\">        [reply = std::<span class=\"built_in\">move</span>(reply)](<span class=\"type\">const</span> QGrpcStatus &amp;status) &#123;  </span><br><span class=\"line\">            <span class=\"comment\">// 这个 Lambda 将在 Qt 的事件循环中被安全地调用，不会阻塞  </span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (status.<span class=\"built_in\">isOk</span>()) &#123;  </span><br><span class=\"line\">                <span class=\"keyword\">if</span> (<span class=\"type\">const</span> <span class=\"keyword\">auto</span> response = reply-&gt;<span class=\"built_in\">read</span>&lt;guide::Response&gt;())  </span><br><span class=\"line\">                    <span class=\"built_in\">qDebug</span>() &lt;&lt; <span class=\"string\">&quot;Client (UnaryCall) finished, received:&quot;</span> &lt;&lt; *response;  </span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;  </span><br><span class=\"line\">                <span class=\"built_in\">qDebug</span>() &lt;&lt; <span class=\"string\">&quot;Client (UnaryCall) failed:&quot;</span> &lt;&lt; status;  </span><br><span class=\"line\">            &#125;  </span><br><span class=\"line\">        &#125;);  </span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>m_client.UnaryCall 立即返回一个 QGrpcCallReply 对象，<strong>完全不会阻塞</strong>。我们只需要连接它的 finished<br>信号，就可以在未来的某个时刻，当 RPC 调用完成时，在槽函数中处理结果。整个过程是<strong>纯异步、事件驱动</strong>的，完美融入了 Qt 的体系。</p>\n<p>下面的是调用过程的示意图:<br><img src=\"/images/qt_client.png\" alt=\"qt_client\"></p>\n<h3 id=\"3-Server-Streaming-服务端流\"><a href=\"#3-Server-Streaming-服务端流\" class=\"headerlink\" title=\"3. Server Streaming (服务端流)\"></a><strong>3. Server Streaming (服务端流)</strong></h3><p>处理流式数据也变得异常简单。调用流式 RPC 方法会返回一个 QGrpcServerStream 对象。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">ClientGuide::serverStreaming</span><span class=\"params\">(<span class=\"type\">const</span> guide::Request &amp;initialRequest)</span>  </span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;  </span><br><span class=\"line\"><span class=\"comment\">// 调用流式 RPC，返回一个 QGrpcServerStream 指针  </span></span><br><span class=\"line\">std::unique_ptr&lt;QGrpcServerStream&gt; stream = m_client.<span class=\"built_in\">ServerStreaming</span>(initialRequest);  </span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"keyword\">auto</span> *streamPtr = stream.<span class=\"built_in\">get</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 连接 finished 信号，处理流结束事件  </span></span><br><span class=\"line\">    QObject::<span class=\"built_in\">connect</span>(streamPtr, &amp;QGrpcServerStream::finished, <span class=\"keyword\">this</span>,  </span><br><span class=\"line\">        [stream = std::<span class=\"built_in\">move</span>(stream)](<span class=\"type\">const</span> QGrpcStatus &amp;status) &#123;  </span><br><span class=\"line\">            <span class=\"keyword\">if</span> (status.<span class=\"built_in\">isOk</span>())  </span><br><span class=\"line\">                <span class=\"built_in\">qDebug</span>(<span class=\"string\">&quot;Client (ServerStreaming) finished&quot;</span>);  </span><br><span class=\"line\">            <span class=\"keyword\">else</span>  </span><br><span class=\"line\">                <span class=\"built_in\">qDebug</span>() &lt;&lt; <span class=\"string\">&quot;Client (ServerStreaming) failed:&quot;</span> &lt;&lt; status;  </span><br><span class=\"line\">        &#125;);  </span><br><span class=\"line\">      </span><br><span class=\"line\">    <span class=\"comment\">// 连接 messageReceived 信号，处理每一条从服务端推送来的消息！  </span></span><br><span class=\"line\">    QObject::<span class=\"built_in\">connect</span>(streamPtr, &amp;QGrpcServerStream::messageReceived, <span class=\"keyword\">this</span>, [streamPtr] &#123;  </span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"type\">const</span> <span class=\"keyword\">auto</span> response = streamPtr-&gt;<span class=\"built_in\">read</span>&lt;guide::Response&gt;())  </span><br><span class=\"line\">            <span class=\"built_in\">qDebug</span>() &lt;&lt; <span class=\"string\">&quot;Client (ServerStream) received:&quot;</span> &lt;&lt; *response;  </span><br><span class=\"line\">    &#125;);  </span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>我们无需编写 while 循环读取响应数据了，取而代之的是连接 messageReceived<br>信号。每当服务端推送一条新消息，这个信号就会被发射一次，我们的槽函数就会被调用一次。这正是我们梦寐以求的、真正的事件驱动的流式数据处理方式！</p>\n<h2 id=\"个人思考：Qt-gRPC-封装的优雅之处\"><a href=\"#个人思考：Qt-gRPC-封装的优雅之处\" class=\"headerlink\" title=\"个人思考：Qt gRPC 封装的优雅之处\"></a><strong>个人思考：Qt gRPC 封装的优雅之处</strong></h2><p>Qt的接口设计和使用方式确实有很多可取之处,Qt gRPC 模块的封装，堪称教科书级别的“框架集成”：</p>\n<ol>\n<li><strong>使用风格的统一：</strong> 将grpc的调用过程统一成信号槽的方式与Qt的控件使用完全一致。</li>\n<li><strong>原生信号槽的胜利：</strong> 整个 gRPC 的生命周期——发起调用、收到消息、调用结束——都被映射成了 Qt 的信号。这使得 gRPC<br>的异步事件能像按钮点击、鼠标移动一样，被无缝地集成到 Qt 的事件循环中。</li>\n<li><strong>使用更加简单：</strong> 开发者不再需要关心线程问题，只需关注业务逻辑。Qt 将这一切都隐藏在了<br>QGrpcCallReply 和 QGrpcServerStream 对象的背后，提供了极其简洁和符合直觉的 API。</li>\n</ol>\n<h2 id=\"总结与展望\"><a href=\"#总结与展望\" class=\"headerlink\" title=\"总结与展望\"></a><strong>总结与展望</strong></h2><p>本文，我们探索了 Qt 官方提供的 Qt Grpc 模块，见证了它如何将 gRPC 的强大功能与 Qt 优雅的信号槽机制完美结合。通过使用<br>QGrpcCallReply 和 QGrpcServerStream，我们以一种纯异步、事件驱动的方式，轻松地实现了 Unary 和 Streaming RPC，彻底解决了在 GUI<br>应用中进行网络通信的核心痛点。</p>\n<p>这无疑是 Qt C++ 开发者的一大福音。它极大地降低了在桌面和移动应用中使用 gRPC 的门槛，让我们能更专注于创造富有价值的应用本身。</p>"},{"title":"grpc实践之路:06.rpc的大问题思考","date":"2025-08-26T16:00:00.000Z","_content":"## **前言**\n\n在之前的源码剖析文章中，我们深入了 gRPC 的一些具体实现。\n\n但随着探索的深入，我时常感到一种“盲人摸象”式的困惑——我们触摸到了大象的腿、鼻子、耳朵，但大象的全貌究竟是怎样的？如果只是追逐源码的细枝末节，很容易迷失在复杂的调用链中。\n\n我决定或一种方式，像笛卡尔在沉思中探求“我思故我在”那样，让我们暂时忽略所有 RPC 框架的具体实现，回到最根本的出发点，用第一性原理去思考：**如果让我们自己从零开始设计一个 RPC 框架，必然要解决哪些问题？**\n\n那些必然要解决的问题，或者说自己思考到的问题，就是现阶段自己可以学习与掌握的问题,也就是RPC中的**大问题**。\n\n本文，就是我对自己这些思考的总结。之后我的行动也将从这些能力出发，探索框架如何实现这些能力。\n<!--more-->\n### **思考过程：从网络编程推导 RPC 的必然形态**\n\n1. **起点：** RPC 是进程间通信，其底层是网络编程。那么，一次 RPC 调用，本质上就是一次**网络请求**；函数的返回值，就是**网络响应**。\n2. **翻译：** 为了让远端的服务器能执行本地函数调用，客户端必须将“调用”这个行为，**翻译**成一种能在网络上传输的数据格式。同理，服务端也需要将“执行结果”**翻译**回来。\n3. **管理：** 为了模拟本地函数调用的体验，客户端需要**管理**所有发出去的请求，确保响应能准确地返回给对应的调用者。\n4. **效率：** 为了应对海量的并发请求，服务端必须设计一套高效的**网络 I/O 处理模型**。\n5. **健壮性：** 网络是不可靠的。因此，一个合格的 RPC 框架必须处理各种网络异常。\n\n基于此，我们可以推断出 RPC 框架的核心功能。\n\n### **一、 RPC 框架的核心职责：客户端与服务端的“契约”**\n\n一个 RPC 框架，首先要明确定义通信双方各自需要完成的任务。\n\n#### **客户端的核心任务：**\n\n1. **请求的构建与封装：**\n    * 根据用户调用的方法，构造一个标准的网络**请求**。这个请求必须清晰地包含两部分：\n        * **“信封”（元数据/请求头）：** 用来告诉服务端“我要调用哪个方法”、“这次通话的超时时间是多久”等控制信息。\n        * **“信件”（数据/请求体）：** 将用户传入的 C++ 函数参数，通过**序列化**，转换成二进制字节流。\n2. **请求的生命周期管理：**\n    * 发出请求后，需要像一个“任务管理器”一样，追踪每一个请求的生命周期。\n    * 必须将处理网络异常的能力（如**超时、重试、取消**），无缝地集成到看似简单的函数调用中。\n3. **响应的处理：**\n    * 接收网络响应后，能准确地找到这个响应属于哪个请求。\n    * 将响应的二进制数据**反序列化**，转换成用户代码可以理解的 C++ 对象。\n\n#### **服务端的核心任务：**\n\n1. **服务的注册与管理：**\n    * 在启动时，必须提供一种机制，让开发者能将业务逻辑（服务）注册到框架中。\n    * 内部必须维护一个高效的**“路由表”**，能够根据请求“信封”中的方法标识，快速找到对应的处理函数。\n2. **请求与响应的关联：**\n    * 收到一个请求后，必须为其分配一个唯一的上下文，确保处理完成后，能将正确的响应准确无误地发回给对应的客户端。\n3. **高效的 I/O 处理：**\n    * 这是高性能服务器的灵魂。必须采用高效的网络 I/O 模型（如基于 epoll 的 Reactor 模式），用少量线程处理海量并发连接。\n4. **异常情况的处理：**\n    * 能够优雅地处理客户端的**取消**操作，及时释放资源。\n    * 能够处理自身的**超时**和**内部错误**，并向客户端返回明确的错误状态。\n\n### **二、 RPC 的本质：网络编程的“三位一体”**\n\n总结来说，RPC 框架就是**网络编程的进一步抽象和封装**。它将繁琐的网络细节隐藏起来，让开发者能像调用本地函数一样进行远程通信。这个封装主要体现在三个方面：\n\n1. **协议 (Protocol) - 通信的“语言”**\n    * 这是客户端与服务端之间最重要的**契约**。它定义了“信封”和“信件”的格式。\n    * **方法签名**（如 gRPC 的 /package.Service/Method）就是这个语言中的“动词”，它规定了要执行什么操作。\n2. **序列化 (Serialization) - 数据的“标准化”**\n    * 这是将内存中千奇百怪的 C++ 对象，转换为可以在网络上传输的、统一格式的二进制流的过程。\n    * Protobuf, JSON, FlatBuffers 等就是不同的序列化方案。\n3. **高级网络处理 (Advanced Networking) - 健壮性的“保障”**\n    * 一个 RPC 框架的价值，很大程度上体现在它如何处理那些棘手的网络编程问题。\n    * **超时、重试、取消、负载均衡、流量控制**等进阶功能，都是对底层网络问题的上层封装和策略实现。\n\n### **三、 我的行动指南：带着问题探索源码**\n\n基于上述的思考，我为自己接下来的源码探索之旅，列出了几个核心问题。这些问题，以及不同框架对它们的解答，也将是我学习的重点。\n\n* **问题 1：如何保证每个请求的唯一标识？**\n* **问题 2：如何保证请求在网络上的安全？**\n* **问题 3：如何保证查找请求（路由）的高效性？**\n* **问题 4：重试与超时机制是如何无缝衔接到函数调用中的？**\n* **问题 5：同步与异步处理的底层机制是怎样的？**\n* **问题 6：如何做好高并发下的线程安全？**\n\n\n### **四、结语**\n\n这，就是我的探索地图。希望它也能为你带来一些启发，如果有什么错误或者不足，希望也能在评论区指出。","source":"_posts/grpc/grpc实践之路:06.rpc的大问题思考.md","raw":"---\ntitle: \"grpc实践之路:06.rpc的大问题思考\"\ndate: 2025-08-27\ncategories: \n  - 动手实践-三方库\n  - grpc\ntags:\n  - C++\n  - grpc\n  - 进程间通信\n---\n## **前言**\n\n在之前的源码剖析文章中，我们深入了 gRPC 的一些具体实现。\n\n但随着探索的深入，我时常感到一种“盲人摸象”式的困惑——我们触摸到了大象的腿、鼻子、耳朵，但大象的全貌究竟是怎样的？如果只是追逐源码的细枝末节，很容易迷失在复杂的调用链中。\n\n我决定或一种方式，像笛卡尔在沉思中探求“我思故我在”那样，让我们暂时忽略所有 RPC 框架的具体实现，回到最根本的出发点，用第一性原理去思考：**如果让我们自己从零开始设计一个 RPC 框架，必然要解决哪些问题？**\n\n那些必然要解决的问题，或者说自己思考到的问题，就是现阶段自己可以学习与掌握的问题,也就是RPC中的**大问题**。\n\n本文，就是我对自己这些思考的总结。之后我的行动也将从这些能力出发，探索框架如何实现这些能力。\n<!--more-->\n### **思考过程：从网络编程推导 RPC 的必然形态**\n\n1. **起点：** RPC 是进程间通信，其底层是网络编程。那么，一次 RPC 调用，本质上就是一次**网络请求**；函数的返回值，就是**网络响应**。\n2. **翻译：** 为了让远端的服务器能执行本地函数调用，客户端必须将“调用”这个行为，**翻译**成一种能在网络上传输的数据格式。同理，服务端也需要将“执行结果”**翻译**回来。\n3. **管理：** 为了模拟本地函数调用的体验，客户端需要**管理**所有发出去的请求，确保响应能准确地返回给对应的调用者。\n4. **效率：** 为了应对海量的并发请求，服务端必须设计一套高效的**网络 I/O 处理模型**。\n5. **健壮性：** 网络是不可靠的。因此，一个合格的 RPC 框架必须处理各种网络异常。\n\n基于此，我们可以推断出 RPC 框架的核心功能。\n\n### **一、 RPC 框架的核心职责：客户端与服务端的“契约”**\n\n一个 RPC 框架，首先要明确定义通信双方各自需要完成的任务。\n\n#### **客户端的核心任务：**\n\n1. **请求的构建与封装：**\n    * 根据用户调用的方法，构造一个标准的网络**请求**。这个请求必须清晰地包含两部分：\n        * **“信封”（元数据/请求头）：** 用来告诉服务端“我要调用哪个方法”、“这次通话的超时时间是多久”等控制信息。\n        * **“信件”（数据/请求体）：** 将用户传入的 C++ 函数参数，通过**序列化**，转换成二进制字节流。\n2. **请求的生命周期管理：**\n    * 发出请求后，需要像一个“任务管理器”一样，追踪每一个请求的生命周期。\n    * 必须将处理网络异常的能力（如**超时、重试、取消**），无缝地集成到看似简单的函数调用中。\n3. **响应的处理：**\n    * 接收网络响应后，能准确地找到这个响应属于哪个请求。\n    * 将响应的二进制数据**反序列化**，转换成用户代码可以理解的 C++ 对象。\n\n#### **服务端的核心任务：**\n\n1. **服务的注册与管理：**\n    * 在启动时，必须提供一种机制，让开发者能将业务逻辑（服务）注册到框架中。\n    * 内部必须维护一个高效的**“路由表”**，能够根据请求“信封”中的方法标识，快速找到对应的处理函数。\n2. **请求与响应的关联：**\n    * 收到一个请求后，必须为其分配一个唯一的上下文，确保处理完成后，能将正确的响应准确无误地发回给对应的客户端。\n3. **高效的 I/O 处理：**\n    * 这是高性能服务器的灵魂。必须采用高效的网络 I/O 模型（如基于 epoll 的 Reactor 模式），用少量线程处理海量并发连接。\n4. **异常情况的处理：**\n    * 能够优雅地处理客户端的**取消**操作，及时释放资源。\n    * 能够处理自身的**超时**和**内部错误**，并向客户端返回明确的错误状态。\n\n### **二、 RPC 的本质：网络编程的“三位一体”**\n\n总结来说，RPC 框架就是**网络编程的进一步抽象和封装**。它将繁琐的网络细节隐藏起来，让开发者能像调用本地函数一样进行远程通信。这个封装主要体现在三个方面：\n\n1. **协议 (Protocol) - 通信的“语言”**\n    * 这是客户端与服务端之间最重要的**契约**。它定义了“信封”和“信件”的格式。\n    * **方法签名**（如 gRPC 的 /package.Service/Method）就是这个语言中的“动词”，它规定了要执行什么操作。\n2. **序列化 (Serialization) - 数据的“标准化”**\n    * 这是将内存中千奇百怪的 C++ 对象，转换为可以在网络上传输的、统一格式的二进制流的过程。\n    * Protobuf, JSON, FlatBuffers 等就是不同的序列化方案。\n3. **高级网络处理 (Advanced Networking) - 健壮性的“保障”**\n    * 一个 RPC 框架的价值，很大程度上体现在它如何处理那些棘手的网络编程问题。\n    * **超时、重试、取消、负载均衡、流量控制**等进阶功能，都是对底层网络问题的上层封装和策略实现。\n\n### **三、 我的行动指南：带着问题探索源码**\n\n基于上述的思考，我为自己接下来的源码探索之旅，列出了几个核心问题。这些问题，以及不同框架对它们的解答，也将是我学习的重点。\n\n* **问题 1：如何保证每个请求的唯一标识？**\n* **问题 2：如何保证请求在网络上的安全？**\n* **问题 3：如何保证查找请求（路由）的高效性？**\n* **问题 4：重试与超时机制是如何无缝衔接到函数调用中的？**\n* **问题 5：同步与异步处理的底层机制是怎样的？**\n* **问题 6：如何做好高并发下的线程安全？**\n\n\n### **四、结语**\n\n这，就是我的探索地图。希望它也能为你带来一些启发，如果有什么错误或者不足，希望也能在评论区指出。","slug":"grpc/grpc实践之路:06.rpc的大问题思考","published":1,"updated":"2025-08-28T12:43:50.470Z","comments":1,"layout":"post","photos":[],"_id":"cmevecvs8000bhfro02b1egix","content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a><strong>前言</strong></h2><p>在之前的源码剖析文章中，我们深入了 gRPC 的一些具体实现。</p>\n<p>但随着探索的深入，我时常感到一种“盲人摸象”式的困惑——我们触摸到了大象的腿、鼻子、耳朵，但大象的全貌究竟是怎样的？如果只是追逐源码的细枝末节，很容易迷失在复杂的调用链中。</p>\n<p>我决定或一种方式，像笛卡尔在沉思中探求“我思故我在”那样，让我们暂时忽略所有 RPC 框架的具体实现，回到最根本的出发点，用第一性原理去思考：<strong>如果让我们自己从零开始设计一个 RPC 框架，必然要解决哪些问题？</strong></p>\n<p>那些必然要解决的问题，或者说自己思考到的问题，就是现阶段自己可以学习与掌握的问题,也就是RPC中的<strong>大问题</strong>。</p>\n<p>本文，就是我对自己这些思考的总结。之后我的行动也将从这些能力出发，探索框架如何实现这些能力。</p>\n<span id=\"more\"></span>\n<h3 id=\"思考过程：从网络编程推导-RPC-的必然形态\"><a href=\"#思考过程：从网络编程推导-RPC-的必然形态\" class=\"headerlink\" title=\"思考过程：从网络编程推导 RPC 的必然形态\"></a><strong>思考过程：从网络编程推导 RPC 的必然形态</strong></h3><ol>\n<li><strong>起点：</strong> RPC 是进程间通信，其底层是网络编程。那么，一次 RPC 调用，本质上就是一次<strong>网络请求</strong>；函数的返回值，就是<strong>网络响应</strong>。</li>\n<li><strong>翻译：</strong> 为了让远端的服务器能执行本地函数调用，客户端必须将“调用”这个行为，<strong>翻译</strong>成一种能在网络上传输的数据格式。同理，服务端也需要将“执行结果”<strong>翻译</strong>回来。</li>\n<li><strong>管理：</strong> 为了模拟本地函数调用的体验，客户端需要<strong>管理</strong>所有发出去的请求，确保响应能准确地返回给对应的调用者。</li>\n<li><strong>效率：</strong> 为了应对海量的并发请求，服务端必须设计一套高效的<strong>网络 I&#x2F;O 处理模型</strong>。</li>\n<li><strong>健壮性：</strong> 网络是不可靠的。因此，一个合格的 RPC 框架必须处理各种网络异常。</li>\n</ol>\n<p>基于此，我们可以推断出 RPC 框架的核心功能。</p>\n<h3 id=\"一、-RPC-框架的核心职责：客户端与服务端的“契约”\"><a href=\"#一、-RPC-框架的核心职责：客户端与服务端的“契约”\" class=\"headerlink\" title=\"一、 RPC 框架的核心职责：客户端与服务端的“契约”\"></a><strong>一、 RPC 框架的核心职责：客户端与服务端的“契约”</strong></h3><p>一个 RPC 框架，首先要明确定义通信双方各自需要完成的任务。</p>\n<h4 id=\"客户端的核心任务：\"><a href=\"#客户端的核心任务：\" class=\"headerlink\" title=\"客户端的核心任务：\"></a><strong>客户端的核心任务：</strong></h4><ol>\n<li><strong>请求的构建与封装：</strong><ul>\n<li>根据用户调用的方法，构造一个标准的网络<strong>请求</strong>。这个请求必须清晰地包含两部分：<ul>\n<li><strong>“信封”（元数据&#x2F;请求头）：</strong> 用来告诉服务端“我要调用哪个方法”、“这次通话的超时时间是多久”等控制信息。</li>\n<li><strong>“信件”（数据&#x2F;请求体）：</strong> 将用户传入的 C++ 函数参数，通过<strong>序列化</strong>，转换成二进制字节流。</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><strong>请求的生命周期管理：</strong><ul>\n<li>发出请求后，需要像一个“任务管理器”一样，追踪每一个请求的生命周期。</li>\n<li>必须将处理网络异常的能力（如<strong>超时、重试、取消</strong>），无缝地集成到看似简单的函数调用中。</li>\n</ul>\n</li>\n<li><strong>响应的处理：</strong><ul>\n<li>接收网络响应后，能准确地找到这个响应属于哪个请求。</li>\n<li>将响应的二进制数据<strong>反序列化</strong>，转换成用户代码可以理解的 C++ 对象。</li>\n</ul>\n</li>\n</ol>\n<h4 id=\"服务端的核心任务：\"><a href=\"#服务端的核心任务：\" class=\"headerlink\" title=\"服务端的核心任务：\"></a><strong>服务端的核心任务：</strong></h4><ol>\n<li><strong>服务的注册与管理：</strong><ul>\n<li>在启动时，必须提供一种机制，让开发者能将业务逻辑（服务）注册到框架中。</li>\n<li>内部必须维护一个高效的<strong>“路由表”</strong>，能够根据请求“信封”中的方法标识，快速找到对应的处理函数。</li>\n</ul>\n</li>\n<li><strong>请求与响应的关联：</strong><ul>\n<li>收到一个请求后，必须为其分配一个唯一的上下文，确保处理完成后，能将正确的响应准确无误地发回给对应的客户端。</li>\n</ul>\n</li>\n<li><strong>高效的 I&#x2F;O 处理：</strong><ul>\n<li>这是高性能服务器的灵魂。必须采用高效的网络 I&#x2F;O 模型（如基于 epoll 的 Reactor 模式），用少量线程处理海量并发连接。</li>\n</ul>\n</li>\n<li><strong>异常情况的处理：</strong><ul>\n<li>能够优雅地处理客户端的<strong>取消</strong>操作，及时释放资源。</li>\n<li>能够处理自身的<strong>超时</strong>和<strong>内部错误</strong>，并向客户端返回明确的错误状态。</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"二、-RPC-的本质：网络编程的“三位一体”\"><a href=\"#二、-RPC-的本质：网络编程的“三位一体”\" class=\"headerlink\" title=\"二、 RPC 的本质：网络编程的“三位一体”\"></a><strong>二、 RPC 的本质：网络编程的“三位一体”</strong></h3><p>总结来说，RPC 框架就是<strong>网络编程的进一步抽象和封装</strong>。它将繁琐的网络细节隐藏起来，让开发者能像调用本地函数一样进行远程通信。这个封装主要体现在三个方面：</p>\n<ol>\n<li><strong>协议 (Protocol) - 通信的“语言”</strong><ul>\n<li>这是客户端与服务端之间最重要的<strong>契约</strong>。它定义了“信封”和“信件”的格式。</li>\n<li><strong>方法签名</strong>（如 gRPC 的 &#x2F;package.Service&#x2F;Method）就是这个语言中的“动词”，它规定了要执行什么操作。</li>\n</ul>\n</li>\n<li><strong>序列化 (Serialization) - 数据的“标准化”</strong><ul>\n<li>这是将内存中千奇百怪的 C++ 对象，转换为可以在网络上传输的、统一格式的二进制流的过程。</li>\n<li>Protobuf, JSON, FlatBuffers 等就是不同的序列化方案。</li>\n</ul>\n</li>\n<li><strong>高级网络处理 (Advanced Networking) - 健壮性的“保障”</strong><ul>\n<li>一个 RPC 框架的价值，很大程度上体现在它如何处理那些棘手的网络编程问题。</li>\n<li><strong>超时、重试、取消、负载均衡、流量控制</strong>等进阶功能，都是对底层网络问题的上层封装和策略实现。</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"三、-我的行动指南：带着问题探索源码\"><a href=\"#三、-我的行动指南：带着问题探索源码\" class=\"headerlink\" title=\"三、 我的行动指南：带着问题探索源码\"></a><strong>三、 我的行动指南：带着问题探索源码</strong></h3><p>基于上述的思考，我为自己接下来的源码探索之旅，列出了几个核心问题。这些问题，以及不同框架对它们的解答，也将是我学习的重点。</p>\n<ul>\n<li><strong>问题 1：如何保证每个请求的唯一标识？</strong></li>\n<li><strong>问题 2：如何保证请求在网络上的安全？</strong></li>\n<li><strong>问题 3：如何保证查找请求（路由）的高效性？</strong></li>\n<li><strong>问题 4：重试与超时机制是如何无缝衔接到函数调用中的？</strong></li>\n<li><strong>问题 5：同步与异步处理的底层机制是怎样的？</strong></li>\n<li><strong>问题 6：如何做好高并发下的线程安全？</strong></li>\n</ul>\n<h3 id=\"四、结语\"><a href=\"#四、结语\" class=\"headerlink\" title=\"四、结语\"></a><strong>四、结语</strong></h3><p>这，就是我的探索地图。希望它也能为你带来一些启发，如果有什么错误或者不足，希望也能在评论区指出。</p>\n","excerpt":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a><strong>前言</strong></h2><p>在之前的源码剖析文章中，我们深入了 gRPC 的一些具体实现。</p>\n<p>但随着探索的深入，我时常感到一种“盲人摸象”式的困惑——我们触摸到了大象的腿、鼻子、耳朵，但大象的全貌究竟是怎样的？如果只是追逐源码的细枝末节，很容易迷失在复杂的调用链中。</p>\n<p>我决定或一种方式，像笛卡尔在沉思中探求“我思故我在”那样，让我们暂时忽略所有 RPC 框架的具体实现，回到最根本的出发点，用第一性原理去思考：<strong>如果让我们自己从零开始设计一个 RPC 框架，必然要解决哪些问题？</strong></p>\n<p>那些必然要解决的问题，或者说自己思考到的问题，就是现阶段自己可以学习与掌握的问题,也就是RPC中的<strong>大问题</strong>。</p>\n<p>本文，就是我对自己这些思考的总结。之后我的行动也将从这些能力出发，探索框架如何实现这些能力。</p>","more":"<h3 id=\"思考过程：从网络编程推导-RPC-的必然形态\"><a href=\"#思考过程：从网络编程推导-RPC-的必然形态\" class=\"headerlink\" title=\"思考过程：从网络编程推导 RPC 的必然形态\"></a><strong>思考过程：从网络编程推导 RPC 的必然形态</strong></h3><ol>\n<li><strong>起点：</strong> RPC 是进程间通信，其底层是网络编程。那么，一次 RPC 调用，本质上就是一次<strong>网络请求</strong>；函数的返回值，就是<strong>网络响应</strong>。</li>\n<li><strong>翻译：</strong> 为了让远端的服务器能执行本地函数调用，客户端必须将“调用”这个行为，<strong>翻译</strong>成一种能在网络上传输的数据格式。同理，服务端也需要将“执行结果”<strong>翻译</strong>回来。</li>\n<li><strong>管理：</strong> 为了模拟本地函数调用的体验，客户端需要<strong>管理</strong>所有发出去的请求，确保响应能准确地返回给对应的调用者。</li>\n<li><strong>效率：</strong> 为了应对海量的并发请求，服务端必须设计一套高效的<strong>网络 I&#x2F;O 处理模型</strong>。</li>\n<li><strong>健壮性：</strong> 网络是不可靠的。因此，一个合格的 RPC 框架必须处理各种网络异常。</li>\n</ol>\n<p>基于此，我们可以推断出 RPC 框架的核心功能。</p>\n<h3 id=\"一、-RPC-框架的核心职责：客户端与服务端的“契约”\"><a href=\"#一、-RPC-框架的核心职责：客户端与服务端的“契约”\" class=\"headerlink\" title=\"一、 RPC 框架的核心职责：客户端与服务端的“契约”\"></a><strong>一、 RPC 框架的核心职责：客户端与服务端的“契约”</strong></h3><p>一个 RPC 框架，首先要明确定义通信双方各自需要完成的任务。</p>\n<h4 id=\"客户端的核心任务：\"><a href=\"#客户端的核心任务：\" class=\"headerlink\" title=\"客户端的核心任务：\"></a><strong>客户端的核心任务：</strong></h4><ol>\n<li><strong>请求的构建与封装：</strong><ul>\n<li>根据用户调用的方法，构造一个标准的网络<strong>请求</strong>。这个请求必须清晰地包含两部分：<ul>\n<li><strong>“信封”（元数据&#x2F;请求头）：</strong> 用来告诉服务端“我要调用哪个方法”、“这次通话的超时时间是多久”等控制信息。</li>\n<li><strong>“信件”（数据&#x2F;请求体）：</strong> 将用户传入的 C++ 函数参数，通过<strong>序列化</strong>，转换成二进制字节流。</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><strong>请求的生命周期管理：</strong><ul>\n<li>发出请求后，需要像一个“任务管理器”一样，追踪每一个请求的生命周期。</li>\n<li>必须将处理网络异常的能力（如<strong>超时、重试、取消</strong>），无缝地集成到看似简单的函数调用中。</li>\n</ul>\n</li>\n<li><strong>响应的处理：</strong><ul>\n<li>接收网络响应后，能准确地找到这个响应属于哪个请求。</li>\n<li>将响应的二进制数据<strong>反序列化</strong>，转换成用户代码可以理解的 C++ 对象。</li>\n</ul>\n</li>\n</ol>\n<h4 id=\"服务端的核心任务：\"><a href=\"#服务端的核心任务：\" class=\"headerlink\" title=\"服务端的核心任务：\"></a><strong>服务端的核心任务：</strong></h4><ol>\n<li><strong>服务的注册与管理：</strong><ul>\n<li>在启动时，必须提供一种机制，让开发者能将业务逻辑（服务）注册到框架中。</li>\n<li>内部必须维护一个高效的<strong>“路由表”</strong>，能够根据请求“信封”中的方法标识，快速找到对应的处理函数。</li>\n</ul>\n</li>\n<li><strong>请求与响应的关联：</strong><ul>\n<li>收到一个请求后，必须为其分配一个唯一的上下文，确保处理完成后，能将正确的响应准确无误地发回给对应的客户端。</li>\n</ul>\n</li>\n<li><strong>高效的 I&#x2F;O 处理：</strong><ul>\n<li>这是高性能服务器的灵魂。必须采用高效的网络 I&#x2F;O 模型（如基于 epoll 的 Reactor 模式），用少量线程处理海量并发连接。</li>\n</ul>\n</li>\n<li><strong>异常情况的处理：</strong><ul>\n<li>能够优雅地处理客户端的<strong>取消</strong>操作，及时释放资源。</li>\n<li>能够处理自身的<strong>超时</strong>和<strong>内部错误</strong>，并向客户端返回明确的错误状态。</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"二、-RPC-的本质：网络编程的“三位一体”\"><a href=\"#二、-RPC-的本质：网络编程的“三位一体”\" class=\"headerlink\" title=\"二、 RPC 的本质：网络编程的“三位一体”\"></a><strong>二、 RPC 的本质：网络编程的“三位一体”</strong></h3><p>总结来说，RPC 框架就是<strong>网络编程的进一步抽象和封装</strong>。它将繁琐的网络细节隐藏起来，让开发者能像调用本地函数一样进行远程通信。这个封装主要体现在三个方面：</p>\n<ol>\n<li><strong>协议 (Protocol) - 通信的“语言”</strong><ul>\n<li>这是客户端与服务端之间最重要的<strong>契约</strong>。它定义了“信封”和“信件”的格式。</li>\n<li><strong>方法签名</strong>（如 gRPC 的 &#x2F;package.Service&#x2F;Method）就是这个语言中的“动词”，它规定了要执行什么操作。</li>\n</ul>\n</li>\n<li><strong>序列化 (Serialization) - 数据的“标准化”</strong><ul>\n<li>这是将内存中千奇百怪的 C++ 对象，转换为可以在网络上传输的、统一格式的二进制流的过程。</li>\n<li>Protobuf, JSON, FlatBuffers 等就是不同的序列化方案。</li>\n</ul>\n</li>\n<li><strong>高级网络处理 (Advanced Networking) - 健壮性的“保障”</strong><ul>\n<li>一个 RPC 框架的价值，很大程度上体现在它如何处理那些棘手的网络编程问题。</li>\n<li><strong>超时、重试、取消、负载均衡、流量控制</strong>等进阶功能，都是对底层网络问题的上层封装和策略实现。</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"三、-我的行动指南：带着问题探索源码\"><a href=\"#三、-我的行动指南：带着问题探索源码\" class=\"headerlink\" title=\"三、 我的行动指南：带着问题探索源码\"></a><strong>三、 我的行动指南：带着问题探索源码</strong></h3><p>基于上述的思考，我为自己接下来的源码探索之旅，列出了几个核心问题。这些问题，以及不同框架对它们的解答，也将是我学习的重点。</p>\n<ul>\n<li><strong>问题 1：如何保证每个请求的唯一标识？</strong></li>\n<li><strong>问题 2：如何保证请求在网络上的安全？</strong></li>\n<li><strong>问题 3：如何保证查找请求（路由）的高效性？</strong></li>\n<li><strong>问题 4：重试与超时机制是如何无缝衔接到函数调用中的？</strong></li>\n<li><strong>问题 5：同步与异步处理的底层机制是怎样的？</strong></li>\n<li><strong>问题 6：如何做好高并发下的线程安全？</strong></li>\n</ul>\n<h3 id=\"四、结语\"><a href=\"#四、结语\" class=\"headerlink\" title=\"四、结语\"></a><strong>四、结语</strong></h3><p>这，就是我的探索地图。希望它也能为你带来一些启发，如果有什么错误或者不足，希望也能在评论区指出。</p>"},{"title":"muduo源码剖析:01.一个线程一个Eventloop","date":"2025-08-26T16:00:00.000Z","_content":"\n## **前言：再探 muduo，一次与过去的对话**\n\n记得自己刚开始学 C++ 的时候，刚学会语法，学完 Linux 系统编程，也是在知乎上搜各种回答，以什么样的方式提升自己的 C++ 编程水平，看什么书让自己的编程水平突飞猛进，那些书让你的 C++ 水平顿悟的感觉等等问题。后来也是搜索到了一个回答是看 muduo 网络库，当时尝试去看，很惭愧，完全看不进去，看《Linux 多线程服务器编程》这本书也是，看了和没看一样。\n\n现在工作了一段时间了，积累了一些经验，突然之间又在刷知乎的时候看到了这个问题，并且刷到了 muduo 这个库，想着趁这个机会再看看，看自己是不是能看懂了，也算是对过去的自己的一个交代吧。\n<!-- more -->\n## **muduo 的设计哲学：基于对象与事件驱动**\n\n一个自己能够做主的开源程序，体现的大多是作者本身在软件设计上的理念。陈硕大佬在《Linux 多线程服务器编程》这本书中，清晰地表达了他的几个核心观点：\n\n1. **核心事件：** 网络连接中的几个重要事件：建立新连接、关闭连接、收到消息、消息发送完成（所谓的“三个半事件”）。  \n2. **线程模型：** 一个好的网络库的模型应该是“一个线程一个事件循环 (One Loop Per Thread)”。  \n3. **设计风格：** muduo 是**基于对象的 (Object-Based)**，而不是面向对象的 (Object-Oriented)，并表达了对面向对象中虚函数与继承滥用的不满。\n\n我们的 muduo 源码剖析系列文章，就将围绕陈硕大佬是如何在 muduo 这个库中实现这些核心观点的来展开。\n\n**而本篇文章，我们将着重分析第一个核心观点——“一个线程一个 EventLoop” 是如何实现的，以及第二个关键问题——EventLoop 自身的操作（特别是跨线程提交任务）是如何保证在其所属的线程中执行的。**\n\n## **从 echo 示例说起：muduo 的直观用法**\n\n在深入源码之前，我们先看一个 muduo 最简单的 echo 示例，了解其基本用法：\n\n```c++\n#include <muduo/net/TcpServer.h>  \n#include <muduo/net/EventLoop.h>  \n#include <muduo/base/Logging.h>  \n#include <unistd.h>  \n#include <functional>\n\nclass EchoServer  \n{  \n public:  \n  EchoServer(muduo::net::EventLoop* loop,  \n             const muduo::net::InetAddress& listenAddr)  \n    : server_(loop, listenAddr, \"EchoServer\")  \n  {  \n    server_.setConnectionCallback(  \n        std::bind(&EchoServer::onConnection, this, std::placeholders::_1));  \n    server_.setMessageCallback(  \n        std::bind(&EchoServer::onMessage, this,  \n                  std::placeholders::_1, std::placeholders::_2, std::placeholders::_3));  \n  }\n\n  void start()  \n  {  \n    server_.start();  \n  }\n\n private:  \n  void onConnection(const muduo::net::TcpConnectionPtr& conn)  \n  {  \n    LOG_INFO << \"EchoServer - \" << conn->peerAddress().toIpPort() << \" -> \"  \n             << conn->localAddress().toIpPort() << \" is \"  \n             << (conn->connected() ? \"UP\" : \"DOWN\");  \n  }\n\n  void onMessage(const muduo::net::TcpConnectionPtr& conn,  \n                 muduo::net::Buffer* buf,  \n                 muduo::Timestamp time)  \n  {  \n    muduo::string msg(buf->retrieveAllAsString());  \n    LOG_INFO << conn->name() << \" echo \" << msg.size() << \" bytes, \"  \n             << \"data received at \" << time.toString();  \n    conn->send(msg);  \n  }\n\n  muduo::net::TcpServer server_;  \n};\n\nint main()  \n{  \n  LOG_INFO << \"pid = \" << getpid();  \n  muduo::net::EventLoop loop; // 1. 创建主 EventLoop  \n  muduo::net::InetAddress listenAddr(2007);  \n  EchoServer server(&loop, listenAddr); // 2. 创建 EchoServer (内部包含 TcpServer)  \n  server.start(); // 3. 启动服务器 (内部会启动 I/O 线程池和 Acceptor)  \n  loop.loop(); // 4. 启动主 EventLoop 的事件循环  \n}\n```\n\n\n可以看到，使用 muduo 确实很简单：创建一个主 EventLoop，用它和监听地址构造 TcpServer（通过组合），设置好连接和消息处理的回调函数，然后启动 TcpServer，最后启动主 EventLoop 的循环。\n\n## **多个 EventLoop 的启动与线程绑定**\n\n那么，TcpServer 是如何实现 \"One Loop Per Thread\" 并启动多个 EventLoop 的呢？关键在于 TcpServer::start() 方法和其内部的 EventLoopThreadPool。\n\n### **1. TcpServer::start() - 启动引擎**\n\n```c++\nvoid TcpServer::start()  \n{  \n  if (started_.getAndSet(1) == 0) // 通过原子操作保证只启动一次  \n  {  \n    threadPool_->start(threadInitCallback_); // 1. 启动 EventLoopThreadPool\n\n    assert(!acceptor_->listenning());  \n    // 2. 将 Acceptor::listen 任务提交到主 EventLoop 执行  \n    loop_->runInLoop(  \n        std::bind(&Acceptor::listen, get_pointer(acceptor_)));  \n  }  \n}\n```\n\nTcpServer::start() 主要做了两件事：启动 EventLoopThreadPool 和启动 Acceptor 的监听。我们先关注第一件。\n\n### **2. EventLoopThreadPool::start() - 创建并启动 I/O 线程**\n\nEventLoopThreadPool 负责管理一组 I/O 线程，每个线程运行一个 EventLoop。\n\n```c++\nvoid EventLoopThreadPool::start(const ThreadInitCallback& cb)  \n{  \n  assert(!started_);  \n  baseLoop_->assertInLoopThread(); // 确保在主 EventLoop 线程中调用\n\n  started_ = true;\n\n  for (int i = 0; i < numThreads_; ++i) // 根据配置的线程数循环  \n  {  \n    char buf[name_.size() + 32];  \n    snprintf(buf, sizeof buf, \"%s%d\", name_.c_str(), i);  \n    // 创建 EventLoopThread 对象  \n    EventLoopThread* t = new EventLoopThread(cb, buf);  \n    threads_.push_back(std::unique_ptr<EventLoopThread>(t));  \n    // 启动线程并获取 EventLoop 指针，存入 loops_ 向量  \n    loops_.push_back(t->startLoop());  \n  }  \n  if (numThreads_ == 0 && cb)  \n  {  \n    cb(baseLoop_);  \n  }  \n}\n```\n\n这里可以看到，线程池会根据用户通过 TcpServer::setThreadNum() 设置的线程数（如果没设置，默认为 0，即所有 I/O 都在主 EventLoop 中），创建相应数量的 EventLoopThread 对象，并调用 startLoop() 获取 EventLoop 指针。\n\n### **3. EventLoopThread - \"One Loop Per Thread\" 的实现者**\n\nEventLoopThread 是实现 \"One Loop Per Thread\" 的核心。它在构造时会创建一个 muduo::Thread 对象，并将自己的 threadFunc 作为线程入口函数。\n\n```c++\nEventLoopThread::EventLoopThread(const ThreadInitCallback& cb,  \n                                 const string& name)  \n  : loop_(NULL),  \n    exiting_(false),  \n    thread_(std::bind(&EventLoopThread::threadFunc, this), name), // 创建线程对象  \n    mutex_(),  \n    cond_(mutex_),  \n    callback_(cb)  \n{  \n}\n```\n\nstartLoop() 方法负责启动这个线程，并**阻塞等待**新线程中的 EventLoop 创建完成。\n\n```c++\nEventLoop* EventLoopThread::startLoop()  \n{  \n  assert(!thread_.started());  \n  thread_.start(); // 启动新线程，执行 threadFunc\n\n  EventLoop* loop = NULL;  \n  {  \n    MutexLockGuard lock(mutex_);  \n    while (loop_ == NULL) // 使用条件变量等待 loop_ 被赋值  \n    {  \n      cond_.wait();  \n    }  \n    loop = loop_; // 获取 EventLoop 指针  \n  }\n\n  return loop;  \n}\n```\n\n新线程启动后，会执行 threadFunc：\n\n```c++\nvoid EventLoopThread::threadFunc()  \n{  \n  EventLoop loop; // 1. 在新线程的栈上创建 EventLoop 对象\n\n  if (callback_) // 2. 执行线程初始化回调  \n  {  \n    callback_(&loop);  \n  }\n\n  {  \n    MutexLockGuard lock(mutex_);  \n    loop_ = &loop; // 3. 将 EventLoop 指针赋值给成员变量  \n    cond_.notify(); // 4. 通知 startLoop() 已创建完毕  \n  }\n\n  loop.loop(); // 5. 启动事件循环，阻塞在此  \n    \n  MutexLockGuard lock(mutex_); // loop 退出后清理  \n  loop_ = NULL;  \n}\n```\n\nEventLoop 的构造函数中会检查 thread_local EventLoop* t_loopInThisThread 变量，如果该线程已有 EventLoop，则会 LOG_FATAL 退出，从而保证了每个线程只有一个 EventLoop。\n\n### **4. 启动流程总结与时序图**\n\n总结一下，启动多个事件循环的流程是：\n\n1. 用户（可选）调用 TcpServer::setThreadNum() 设置 I/O 线程数。  \n2. 用户调用 TcpServer::start()。  \n3. TcpServer 调用 EventLoopThreadPool::start()。  \n4. EventLoopThreadPool 循环创建 EventLoopThread 对象。  \n5. 每个 EventLoopThread 对象调用 startLoop()。  \n6. startLoop() 启动一个新线程。  \n7. 新线程执行 threadFunc()，在**自己的栈上创建 EventLoop 对象**，并通过条件变量通知 startLoop()。  \n8. startLoop() 返回 EventLoop 指针给 EventLoopThreadPool。  \n9. 新线程执行 EventLoop::loop()，进入事件循环。\n\n下面是这个过程的时序图：\n\n![evntloop启动时序图](/images/eventloop启动.png)\n\n## **runInLoop：确保任务在正确的 EventLoop 中执行**\n\n理解了 EventLoop 如何与线程绑定后，我们来看第二个关键问题：muduo 如何保证对 EventLoop 及其管理的对象的操作，都在其所属的线程中执行？核心在于 EventLoop::runInLoop 和 EventLoop::queueInLoop。\n\nrunInLoop 的逻辑很清晰：如果当前线程就是 EventLoop 所在的线程，则直接执行回调函数 cb；否则，将 cb 交给 queueInLoop 处理。\n\n```c++\nvoid EventLoop::runInLoop(Functor cb)  \n{  \n  if (isInLoopThread()) // 判断是否在当前 EventLoop 线程  \n  {  \n    cb(); // 是，则直接执行  \n  }  \n  else  \n  {  \n    queueInLoop(std::move(cb)); // 不是，则入队  \n  }  \n}\n```\n\nqueueInLoop 负责将任务放入 pendingFunctors_ 队列，并唤醒目标 EventLoop 线程（如果它正在阻塞等待）。\n\n\n```c++\nvoid EventLoop::queueInLoop(Functor cb)  \n{  \n  {  \n    MutexLockGuard lock(mutex_); // 加锁保护 pendingFunctors_  \n    pendingFunctors_.push_back(std::move(cb));  \n  }\n\n  // 如果调用者不是 EventLoop 线程，或者 EventLoop 线程正在处理任务队列则需要唤醒  \n  if (!isInLoopThread() || callingPendingFunctors_)  \n  {  \n    wakeup();  \n  }  \n}\n```\n\n唤醒操作通过向 EventLoop 内部的 wakeupFd_ (一个 eventfd) 写入一个字节来实现。这个 wakeupFd_ 已经被封装成一个 Channel 并注册到了 Poller 中，监听读事件。\n\n```c++\nEventLoop::EventLoop()  \n  :  ...  \n    wakeupFd_(createEventfd()), // 创建 eventfd  \n    wakeupChannel_(new Channel(this, wakeupFd_)), // 创建 Channel  \n     ...  \n{  \n   ...  \n  wakeupChannel_->setReadCallback(  \n      std::bind(&EventLoop::handleRead, this)); // 设置读回调  \n  wakeupChannel_->enableReading(); // 启用读事件监听  \n}\n```\n```c++\nvoid EventLoop::wakeup()  \n{  \n  uint64_t one = 1;  \n  // 向 wakeupFd_ 写入 1 个字节，触发可读事件  \n  ssize_t n = sockets::write(wakeupFd_, &one, sizeof one);  \n  if (n != sizeof one)  \n  {  \n    LOG_ERROR << \"EventLoop::wakeup() writes \" << n << \" bytes instead of 8\";  \n  }  \n}\n\nvoid EventLoop::handleRead() // wakeupChannel_ 的读回调  \n{  \n  uint64_t one = 1;  \n  // 读取 wakeupFd_ 的数据，清空事件通知  \n  ssize_t n = sockets::read(wakeupFd_, &one, sizeof one);  \n  if (n != sizeof one)  \n  {  \n    LOG_ERROR << \"EventLoop::handleRead() reads \" << n << \" bytes instead of 8\";  \n  }  \n}\n```\n\n当 Poller::poll() 因为 wakeupFd_ 可读而返回后，EventLoop::loop() 会处理 wakeupChannel_ 的 handleRead 事件，之后会调用 doPendingFunctors() 来执行队列中的所有任务。\n\n```c++\nvoid EventLoop::loop()  \n{  \n  // ...  \n  while (!quit_)  \n  {  \n    activeChannels_.clear();  \n    pollReturnTime_ = poller_->poll(kPollTimeMs, &activeChannels_); // 等待事件  \n    // ... 处理 I/O 事件 ...  \n    eventHandling_ = true;  \n    for (Channel* channel : activeChannels_)  \n    {  \n      currentActiveChannel_ = channel;  \n      currentActiveChannel_->handleEvent(pollReturnTime_);  \n    }  \n    currentActiveChannel_ = NULL;  \n    eventHandling_ = false;  \n    doPendingFunctors(); // 处理队列中的任务  \n  }  \n  // ...  \n}\n\nvoid EventLoop::doPendingFunctors()  \n{  \n  std::vector<Functor> functors;  \n  callingPendingFunctors_ = true; // 标记正在处理任务\n\n  {  \n    MutexLockGuard lock(mutex_);  \n    functors.swap(pendingFunctors_); // 将任务队列交换出来，减小临界区  \n  }\n\n  for (const Functor& functor : functors) // 执行所有任务  \n  {  \n    functor();  \n  }  \n  callingPendingFunctors_ = false; // 标记处理完毕  \n}\n```\n\n\n这样，muduo 就通过 runInLoop / queueInLoop 结合 eventfd 唤醒机制，巧妙地实现了跨线程任务提交，并严格保证了所有操作都在其所属的 EventLoop 线程中执行，完美诠释了陈硕大佬的设计思想。\n\n下面是这个过程的时序图：\n\n![eventloop事件传递](/images/eventloop传递事件.png)\n\n## **后记**\n\n文学家用文字表达自己的思想，程序开发人员用程序表达自己对软件设计的思想。我始终坚信，程序开发人员，应该坚信自己的程序是表达自己想法的工作，我们是 艺术家 而不是单纯的码农，我们在自己能够做主的程序里，应该去体现自己的思想。\n\n在这个系列的文章中，我们不是要去争论对与错，不是要去争论程序设计面向对象的优缺点，到底是该基于对象还是面向对象。我们可以有自己的偏好，认同某些观点，我们要做的是从开源代码中学习这个思想。无论我们是认同一个观点还是学习一个观点，我们都应该深入学习一个观点。\n\n通过对 muduo 启动流程和跨线程调用机制的分析，我们得以一窥其“One Loop Per Thread”模型实现的精妙之处。这只是 muduo 设计魅力的冰山一角，在接下来的文章中，我们将继续探索其事件处理、连接管理等核心机制。","source":"_posts/muduo/muduo源码剖析:01.一个线程一个Eventloop.md","raw":"---\ntitle: \"muduo源码剖析:01.一个线程一个Eventloop\"\ndate: 2025-08-27\ncategories: \n  - 源码分析\n  - muduo\ntags:\n  - C++\n  - muduo\n  - 网络库\n---\n\n## **前言：再探 muduo，一次与过去的对话**\n\n记得自己刚开始学 C++ 的时候，刚学会语法，学完 Linux 系统编程，也是在知乎上搜各种回答，以什么样的方式提升自己的 C++ 编程水平，看什么书让自己的编程水平突飞猛进，那些书让你的 C++ 水平顿悟的感觉等等问题。后来也是搜索到了一个回答是看 muduo 网络库，当时尝试去看，很惭愧，完全看不进去，看《Linux 多线程服务器编程》这本书也是，看了和没看一样。\n\n现在工作了一段时间了，积累了一些经验，突然之间又在刷知乎的时候看到了这个问题，并且刷到了 muduo 这个库，想着趁这个机会再看看，看自己是不是能看懂了，也算是对过去的自己的一个交代吧。\n<!-- more -->\n## **muduo 的设计哲学：基于对象与事件驱动**\n\n一个自己能够做主的开源程序，体现的大多是作者本身在软件设计上的理念。陈硕大佬在《Linux 多线程服务器编程》这本书中，清晰地表达了他的几个核心观点：\n\n1. **核心事件：** 网络连接中的几个重要事件：建立新连接、关闭连接、收到消息、消息发送完成（所谓的“三个半事件”）。  \n2. **线程模型：** 一个好的网络库的模型应该是“一个线程一个事件循环 (One Loop Per Thread)”。  \n3. **设计风格：** muduo 是**基于对象的 (Object-Based)**，而不是面向对象的 (Object-Oriented)，并表达了对面向对象中虚函数与继承滥用的不满。\n\n我们的 muduo 源码剖析系列文章，就将围绕陈硕大佬是如何在 muduo 这个库中实现这些核心观点的来展开。\n\n**而本篇文章，我们将着重分析第一个核心观点——“一个线程一个 EventLoop” 是如何实现的，以及第二个关键问题——EventLoop 自身的操作（特别是跨线程提交任务）是如何保证在其所属的线程中执行的。**\n\n## **从 echo 示例说起：muduo 的直观用法**\n\n在深入源码之前，我们先看一个 muduo 最简单的 echo 示例，了解其基本用法：\n\n```c++\n#include <muduo/net/TcpServer.h>  \n#include <muduo/net/EventLoop.h>  \n#include <muduo/base/Logging.h>  \n#include <unistd.h>  \n#include <functional>\n\nclass EchoServer  \n{  \n public:  \n  EchoServer(muduo::net::EventLoop* loop,  \n             const muduo::net::InetAddress& listenAddr)  \n    : server_(loop, listenAddr, \"EchoServer\")  \n  {  \n    server_.setConnectionCallback(  \n        std::bind(&EchoServer::onConnection, this, std::placeholders::_1));  \n    server_.setMessageCallback(  \n        std::bind(&EchoServer::onMessage, this,  \n                  std::placeholders::_1, std::placeholders::_2, std::placeholders::_3));  \n  }\n\n  void start()  \n  {  \n    server_.start();  \n  }\n\n private:  \n  void onConnection(const muduo::net::TcpConnectionPtr& conn)  \n  {  \n    LOG_INFO << \"EchoServer - \" << conn->peerAddress().toIpPort() << \" -> \"  \n             << conn->localAddress().toIpPort() << \" is \"  \n             << (conn->connected() ? \"UP\" : \"DOWN\");  \n  }\n\n  void onMessage(const muduo::net::TcpConnectionPtr& conn,  \n                 muduo::net::Buffer* buf,  \n                 muduo::Timestamp time)  \n  {  \n    muduo::string msg(buf->retrieveAllAsString());  \n    LOG_INFO << conn->name() << \" echo \" << msg.size() << \" bytes, \"  \n             << \"data received at \" << time.toString();  \n    conn->send(msg);  \n  }\n\n  muduo::net::TcpServer server_;  \n};\n\nint main()  \n{  \n  LOG_INFO << \"pid = \" << getpid();  \n  muduo::net::EventLoop loop; // 1. 创建主 EventLoop  \n  muduo::net::InetAddress listenAddr(2007);  \n  EchoServer server(&loop, listenAddr); // 2. 创建 EchoServer (内部包含 TcpServer)  \n  server.start(); // 3. 启动服务器 (内部会启动 I/O 线程池和 Acceptor)  \n  loop.loop(); // 4. 启动主 EventLoop 的事件循环  \n}\n```\n\n\n可以看到，使用 muduo 确实很简单：创建一个主 EventLoop，用它和监听地址构造 TcpServer（通过组合），设置好连接和消息处理的回调函数，然后启动 TcpServer，最后启动主 EventLoop 的循环。\n\n## **多个 EventLoop 的启动与线程绑定**\n\n那么，TcpServer 是如何实现 \"One Loop Per Thread\" 并启动多个 EventLoop 的呢？关键在于 TcpServer::start() 方法和其内部的 EventLoopThreadPool。\n\n### **1. TcpServer::start() - 启动引擎**\n\n```c++\nvoid TcpServer::start()  \n{  \n  if (started_.getAndSet(1) == 0) // 通过原子操作保证只启动一次  \n  {  \n    threadPool_->start(threadInitCallback_); // 1. 启动 EventLoopThreadPool\n\n    assert(!acceptor_->listenning());  \n    // 2. 将 Acceptor::listen 任务提交到主 EventLoop 执行  \n    loop_->runInLoop(  \n        std::bind(&Acceptor::listen, get_pointer(acceptor_)));  \n  }  \n}\n```\n\nTcpServer::start() 主要做了两件事：启动 EventLoopThreadPool 和启动 Acceptor 的监听。我们先关注第一件。\n\n### **2. EventLoopThreadPool::start() - 创建并启动 I/O 线程**\n\nEventLoopThreadPool 负责管理一组 I/O 线程，每个线程运行一个 EventLoop。\n\n```c++\nvoid EventLoopThreadPool::start(const ThreadInitCallback& cb)  \n{  \n  assert(!started_);  \n  baseLoop_->assertInLoopThread(); // 确保在主 EventLoop 线程中调用\n\n  started_ = true;\n\n  for (int i = 0; i < numThreads_; ++i) // 根据配置的线程数循环  \n  {  \n    char buf[name_.size() + 32];  \n    snprintf(buf, sizeof buf, \"%s%d\", name_.c_str(), i);  \n    // 创建 EventLoopThread 对象  \n    EventLoopThread* t = new EventLoopThread(cb, buf);  \n    threads_.push_back(std::unique_ptr<EventLoopThread>(t));  \n    // 启动线程并获取 EventLoop 指针，存入 loops_ 向量  \n    loops_.push_back(t->startLoop());  \n  }  \n  if (numThreads_ == 0 && cb)  \n  {  \n    cb(baseLoop_);  \n  }  \n}\n```\n\n这里可以看到，线程池会根据用户通过 TcpServer::setThreadNum() 设置的线程数（如果没设置，默认为 0，即所有 I/O 都在主 EventLoop 中），创建相应数量的 EventLoopThread 对象，并调用 startLoop() 获取 EventLoop 指针。\n\n### **3. EventLoopThread - \"One Loop Per Thread\" 的实现者**\n\nEventLoopThread 是实现 \"One Loop Per Thread\" 的核心。它在构造时会创建一个 muduo::Thread 对象，并将自己的 threadFunc 作为线程入口函数。\n\n```c++\nEventLoopThread::EventLoopThread(const ThreadInitCallback& cb,  \n                                 const string& name)  \n  : loop_(NULL),  \n    exiting_(false),  \n    thread_(std::bind(&EventLoopThread::threadFunc, this), name), // 创建线程对象  \n    mutex_(),  \n    cond_(mutex_),  \n    callback_(cb)  \n{  \n}\n```\n\nstartLoop() 方法负责启动这个线程，并**阻塞等待**新线程中的 EventLoop 创建完成。\n\n```c++\nEventLoop* EventLoopThread::startLoop()  \n{  \n  assert(!thread_.started());  \n  thread_.start(); // 启动新线程，执行 threadFunc\n\n  EventLoop* loop = NULL;  \n  {  \n    MutexLockGuard lock(mutex_);  \n    while (loop_ == NULL) // 使用条件变量等待 loop_ 被赋值  \n    {  \n      cond_.wait();  \n    }  \n    loop = loop_; // 获取 EventLoop 指针  \n  }\n\n  return loop;  \n}\n```\n\n新线程启动后，会执行 threadFunc：\n\n```c++\nvoid EventLoopThread::threadFunc()  \n{  \n  EventLoop loop; // 1. 在新线程的栈上创建 EventLoop 对象\n\n  if (callback_) // 2. 执行线程初始化回调  \n  {  \n    callback_(&loop);  \n  }\n\n  {  \n    MutexLockGuard lock(mutex_);  \n    loop_ = &loop; // 3. 将 EventLoop 指针赋值给成员变量  \n    cond_.notify(); // 4. 通知 startLoop() 已创建完毕  \n  }\n\n  loop.loop(); // 5. 启动事件循环，阻塞在此  \n    \n  MutexLockGuard lock(mutex_); // loop 退出后清理  \n  loop_ = NULL;  \n}\n```\n\nEventLoop 的构造函数中会检查 thread_local EventLoop* t_loopInThisThread 变量，如果该线程已有 EventLoop，则会 LOG_FATAL 退出，从而保证了每个线程只有一个 EventLoop。\n\n### **4. 启动流程总结与时序图**\n\n总结一下，启动多个事件循环的流程是：\n\n1. 用户（可选）调用 TcpServer::setThreadNum() 设置 I/O 线程数。  \n2. 用户调用 TcpServer::start()。  \n3. TcpServer 调用 EventLoopThreadPool::start()。  \n4. EventLoopThreadPool 循环创建 EventLoopThread 对象。  \n5. 每个 EventLoopThread 对象调用 startLoop()。  \n6. startLoop() 启动一个新线程。  \n7. 新线程执行 threadFunc()，在**自己的栈上创建 EventLoop 对象**，并通过条件变量通知 startLoop()。  \n8. startLoop() 返回 EventLoop 指针给 EventLoopThreadPool。  \n9. 新线程执行 EventLoop::loop()，进入事件循环。\n\n下面是这个过程的时序图：\n\n![evntloop启动时序图](/images/eventloop启动.png)\n\n## **runInLoop：确保任务在正确的 EventLoop 中执行**\n\n理解了 EventLoop 如何与线程绑定后，我们来看第二个关键问题：muduo 如何保证对 EventLoop 及其管理的对象的操作，都在其所属的线程中执行？核心在于 EventLoop::runInLoop 和 EventLoop::queueInLoop。\n\nrunInLoop 的逻辑很清晰：如果当前线程就是 EventLoop 所在的线程，则直接执行回调函数 cb；否则，将 cb 交给 queueInLoop 处理。\n\n```c++\nvoid EventLoop::runInLoop(Functor cb)  \n{  \n  if (isInLoopThread()) // 判断是否在当前 EventLoop 线程  \n  {  \n    cb(); // 是，则直接执行  \n  }  \n  else  \n  {  \n    queueInLoop(std::move(cb)); // 不是，则入队  \n  }  \n}\n```\n\nqueueInLoop 负责将任务放入 pendingFunctors_ 队列，并唤醒目标 EventLoop 线程（如果它正在阻塞等待）。\n\n\n```c++\nvoid EventLoop::queueInLoop(Functor cb)  \n{  \n  {  \n    MutexLockGuard lock(mutex_); // 加锁保护 pendingFunctors_  \n    pendingFunctors_.push_back(std::move(cb));  \n  }\n\n  // 如果调用者不是 EventLoop 线程，或者 EventLoop 线程正在处理任务队列则需要唤醒  \n  if (!isInLoopThread() || callingPendingFunctors_)  \n  {  \n    wakeup();  \n  }  \n}\n```\n\n唤醒操作通过向 EventLoop 内部的 wakeupFd_ (一个 eventfd) 写入一个字节来实现。这个 wakeupFd_ 已经被封装成一个 Channel 并注册到了 Poller 中，监听读事件。\n\n```c++\nEventLoop::EventLoop()  \n  :  ...  \n    wakeupFd_(createEventfd()), // 创建 eventfd  \n    wakeupChannel_(new Channel(this, wakeupFd_)), // 创建 Channel  \n     ...  \n{  \n   ...  \n  wakeupChannel_->setReadCallback(  \n      std::bind(&EventLoop::handleRead, this)); // 设置读回调  \n  wakeupChannel_->enableReading(); // 启用读事件监听  \n}\n```\n```c++\nvoid EventLoop::wakeup()  \n{  \n  uint64_t one = 1;  \n  // 向 wakeupFd_ 写入 1 个字节，触发可读事件  \n  ssize_t n = sockets::write(wakeupFd_, &one, sizeof one);  \n  if (n != sizeof one)  \n  {  \n    LOG_ERROR << \"EventLoop::wakeup() writes \" << n << \" bytes instead of 8\";  \n  }  \n}\n\nvoid EventLoop::handleRead() // wakeupChannel_ 的读回调  \n{  \n  uint64_t one = 1;  \n  // 读取 wakeupFd_ 的数据，清空事件通知  \n  ssize_t n = sockets::read(wakeupFd_, &one, sizeof one);  \n  if (n != sizeof one)  \n  {  \n    LOG_ERROR << \"EventLoop::handleRead() reads \" << n << \" bytes instead of 8\";  \n  }  \n}\n```\n\n当 Poller::poll() 因为 wakeupFd_ 可读而返回后，EventLoop::loop() 会处理 wakeupChannel_ 的 handleRead 事件，之后会调用 doPendingFunctors() 来执行队列中的所有任务。\n\n```c++\nvoid EventLoop::loop()  \n{  \n  // ...  \n  while (!quit_)  \n  {  \n    activeChannels_.clear();  \n    pollReturnTime_ = poller_->poll(kPollTimeMs, &activeChannels_); // 等待事件  \n    // ... 处理 I/O 事件 ...  \n    eventHandling_ = true;  \n    for (Channel* channel : activeChannels_)  \n    {  \n      currentActiveChannel_ = channel;  \n      currentActiveChannel_->handleEvent(pollReturnTime_);  \n    }  \n    currentActiveChannel_ = NULL;  \n    eventHandling_ = false;  \n    doPendingFunctors(); // 处理队列中的任务  \n  }  \n  // ...  \n}\n\nvoid EventLoop::doPendingFunctors()  \n{  \n  std::vector<Functor> functors;  \n  callingPendingFunctors_ = true; // 标记正在处理任务\n\n  {  \n    MutexLockGuard lock(mutex_);  \n    functors.swap(pendingFunctors_); // 将任务队列交换出来，减小临界区  \n  }\n\n  for (const Functor& functor : functors) // 执行所有任务  \n  {  \n    functor();  \n  }  \n  callingPendingFunctors_ = false; // 标记处理完毕  \n}\n```\n\n\n这样，muduo 就通过 runInLoop / queueInLoop 结合 eventfd 唤醒机制，巧妙地实现了跨线程任务提交，并严格保证了所有操作都在其所属的 EventLoop 线程中执行，完美诠释了陈硕大佬的设计思想。\n\n下面是这个过程的时序图：\n\n![eventloop事件传递](/images/eventloop传递事件.png)\n\n## **后记**\n\n文学家用文字表达自己的思想，程序开发人员用程序表达自己对软件设计的思想。我始终坚信，程序开发人员，应该坚信自己的程序是表达自己想法的工作，我们是 艺术家 而不是单纯的码农，我们在自己能够做主的程序里，应该去体现自己的思想。\n\n在这个系列的文章中，我们不是要去争论对与错，不是要去争论程序设计面向对象的优缺点，到底是该基于对象还是面向对象。我们可以有自己的偏好，认同某些观点，我们要做的是从开源代码中学习这个思想。无论我们是认同一个观点还是学习一个观点，我们都应该深入学习一个观点。\n\n通过对 muduo 启动流程和跨线程调用机制的分析，我们得以一窥其“One Loop Per Thread”模型实现的精妙之处。这只是 muduo 设计魅力的冰山一角，在接下来的文章中，我们将继续探索其事件处理、连接管理等核心机制。","slug":"muduo/muduo源码剖析:01.一个线程一个Eventloop","published":1,"updated":"2025-08-28T12:44:06.576Z","comments":1,"layout":"post","photos":[],"_id":"cmevecvsf001phfroesbc26ls","content":"<h2 id=\"前言：再探-muduo，一次与过去的对话\"><a href=\"#前言：再探-muduo，一次与过去的对话\" class=\"headerlink\" title=\"前言：再探 muduo，一次与过去的对话\"></a><strong>前言：再探 muduo，一次与过去的对话</strong></h2><p>记得自己刚开始学 C++ 的时候，刚学会语法，学完 Linux 系统编程，也是在知乎上搜各种回答，以什么样的方式提升自己的 C++ 编程水平，看什么书让自己的编程水平突飞猛进，那些书让你的 C++ 水平顿悟的感觉等等问题。后来也是搜索到了一个回答是看 muduo 网络库，当时尝试去看，很惭愧，完全看不进去，看《Linux 多线程服务器编程》这本书也是，看了和没看一样。</p>\n<p>现在工作了一段时间了，积累了一些经验，突然之间又在刷知乎的时候看到了这个问题，并且刷到了 muduo 这个库，想着趁这个机会再看看，看自己是不是能看懂了，也算是对过去的自己的一个交代吧。</p>\n<span id=\"more\"></span>\n<h2 id=\"muduo-的设计哲学：基于对象与事件驱动\"><a href=\"#muduo-的设计哲学：基于对象与事件驱动\" class=\"headerlink\" title=\"muduo 的设计哲学：基于对象与事件驱动\"></a><strong>muduo 的设计哲学：基于对象与事件驱动</strong></h2><p>一个自己能够做主的开源程序，体现的大多是作者本身在软件设计上的理念。陈硕大佬在《Linux 多线程服务器编程》这本书中，清晰地表达了他的几个核心观点：</p>\n<ol>\n<li><strong>核心事件：</strong> 网络连接中的几个重要事件：建立新连接、关闭连接、收到消息、消息发送完成（所谓的“三个半事件”）。  </li>\n<li><strong>线程模型：</strong> 一个好的网络库的模型应该是“一个线程一个事件循环 (One Loop Per Thread)”。  </li>\n<li><strong>设计风格：</strong> muduo 是**基于对象的 (Object-Based)**，而不是面向对象的 (Object-Oriented)，并表达了对面向对象中虚函数与继承滥用的不满。</li>\n</ol>\n<p>我们的 muduo 源码剖析系列文章，就将围绕陈硕大佬是如何在 muduo 这个库中实现这些核心观点的来展开。</p>\n<p><strong>而本篇文章，我们将着重分析第一个核心观点——“一个线程一个 EventLoop” 是如何实现的，以及第二个关键问题——EventLoop 自身的操作（特别是跨线程提交任务）是如何保证在其所属的线程中执行的。</strong></p>\n<h2 id=\"从-echo-示例说起：muduo-的直观用法\"><a href=\"#从-echo-示例说起：muduo-的直观用法\" class=\"headerlink\" title=\"从 echo 示例说起：muduo 的直观用法\"></a><strong>从 echo 示例说起：muduo 的直观用法</strong></h2><p>在深入源码之前，我们先看一个 muduo 最简单的 echo 示例，了解其基本用法：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;muduo/net/TcpServer.h&gt;</span>  </span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;muduo/net/EventLoop.h&gt;</span>  </span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;muduo/base/Logging.h&gt;</span>  </span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;unistd.h&gt;</span>  </span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;functional&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">EchoServer</span>  </span><br><span class=\"line\">&#123;  </span><br><span class=\"line\"> <span class=\"keyword\">public</span>:  </span><br><span class=\"line\">  <span class=\"built_in\">EchoServer</span>(muduo::net::EventLoop* loop,  </span><br><span class=\"line\">             <span class=\"type\">const</span> muduo::net::InetAddress&amp; listenAddr)  </span><br><span class=\"line\">    : <span class=\"built_in\">server_</span>(loop, listenAddr, <span class=\"string\">&quot;EchoServer&quot;</span>)  </span><br><span class=\"line\">  &#123;  </span><br><span class=\"line\">    server_.<span class=\"built_in\">setConnectionCallback</span>(  </span><br><span class=\"line\">        std::<span class=\"built_in\">bind</span>(&amp;EchoServer::onConnection, <span class=\"keyword\">this</span>, std::placeholders::_1));  </span><br><span class=\"line\">    server_.<span class=\"built_in\">setMessageCallback</span>(  </span><br><span class=\"line\">        std::<span class=\"built_in\">bind</span>(&amp;EchoServer::onMessage, <span class=\"keyword\">this</span>,  </span><br><span class=\"line\">                  std::placeholders::_1, std::placeholders::_2, std::placeholders::_3));  </span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">start</span><span class=\"params\">()</span>  </span></span><br><span class=\"line\"><span class=\"function\">  </span>&#123;  </span><br><span class=\"line\">    server_.<span class=\"built_in\">start</span>();  </span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"keyword\">private</span>:  </span><br><span class=\"line\">  <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">onConnection</span><span class=\"params\">(<span class=\"type\">const</span> muduo::net::TcpConnectionPtr&amp; conn)</span>  </span></span><br><span class=\"line\"><span class=\"function\">  </span>&#123;  </span><br><span class=\"line\">    LOG_INFO &lt;&lt; <span class=\"string\">&quot;EchoServer - &quot;</span> &lt;&lt; conn-&gt;<span class=\"built_in\">peerAddress</span>().<span class=\"built_in\">toIpPort</span>() &lt;&lt; <span class=\"string\">&quot; -&gt; &quot;</span>  </span><br><span class=\"line\">             &lt;&lt; conn-&gt;<span class=\"built_in\">localAddress</span>().<span class=\"built_in\">toIpPort</span>() &lt;&lt; <span class=\"string\">&quot; is &quot;</span>  </span><br><span class=\"line\">             &lt;&lt; (conn-&gt;<span class=\"built_in\">connected</span>() ? <span class=\"string\">&quot;UP&quot;</span> : <span class=\"string\">&quot;DOWN&quot;</span>);  </span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">onMessage</span><span class=\"params\">(<span class=\"type\">const</span> muduo::net::TcpConnectionPtr&amp; conn,  </span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">                 muduo::net::Buffer* buf,  </span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">                 muduo::Timestamp time)</span>  </span></span><br><span class=\"line\"><span class=\"function\">  </span>&#123;  </span><br><span class=\"line\">    <span class=\"function\">muduo::string <span class=\"title\">msg</span><span class=\"params\">(buf-&gt;retrieveAllAsString())</span></span>;  </span><br><span class=\"line\">    LOG_INFO &lt;&lt; conn-&gt;<span class=\"built_in\">name</span>() &lt;&lt; <span class=\"string\">&quot; echo &quot;</span> &lt;&lt; msg.<span class=\"built_in\">size</span>() &lt;&lt; <span class=\"string\">&quot; bytes, &quot;</span>  </span><br><span class=\"line\">             &lt;&lt; <span class=\"string\">&quot;data received at &quot;</span> &lt;&lt; time.<span class=\"built_in\">toString</span>();  </span><br><span class=\"line\">    conn-&gt;<span class=\"built_in\">send</span>(msg);  </span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  muduo::net::TcpServer server_;  </span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span>  </span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;  </span><br><span class=\"line\">  LOG_INFO &lt;&lt; <span class=\"string\">&quot;pid = &quot;</span> &lt;&lt; <span class=\"built_in\">getpid</span>();  </span><br><span class=\"line\">  muduo::net::EventLoop loop; <span class=\"comment\">// 1. 创建主 EventLoop  </span></span><br><span class=\"line\">  muduo::<span class=\"function\">net::InetAddress <span class=\"title\">listenAddr</span><span class=\"params\">(<span class=\"number\">2007</span>)</span></span>;  </span><br><span class=\"line\">  <span class=\"function\">EchoServer <span class=\"title\">server</span><span class=\"params\">(&amp;loop, listenAddr)</span></span>; <span class=\"comment\">// 2. 创建 EchoServer (内部包含 TcpServer)  </span></span><br><span class=\"line\">  server.<span class=\"built_in\">start</span>(); <span class=\"comment\">// 3. 启动服务器 (内部会启动 I/O 线程池和 Acceptor)  </span></span><br><span class=\"line\">  loop.<span class=\"built_in\">loop</span>(); <span class=\"comment\">// 4. 启动主 EventLoop 的事件循环  </span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n<p>可以看到，使用 muduo 确实很简单：创建一个主 EventLoop，用它和监听地址构造 TcpServer（通过组合），设置好连接和消息处理的回调函数，然后启动 TcpServer，最后启动主 EventLoop 的循环。</p>\n<h2 id=\"多个-EventLoop-的启动与线程绑定\"><a href=\"#多个-EventLoop-的启动与线程绑定\" class=\"headerlink\" title=\"多个 EventLoop 的启动与线程绑定\"></a><strong>多个 EventLoop 的启动与线程绑定</strong></h2><p>那么，TcpServer 是如何实现 “One Loop Per Thread” 并启动多个 EventLoop 的呢？关键在于 TcpServer::start() 方法和其内部的 EventLoopThreadPool。</p>\n<h3 id=\"1-TcpServer-start-启动引擎\"><a href=\"#1-TcpServer-start-启动引擎\" class=\"headerlink\" title=\"1. TcpServer::start() - 启动引擎\"></a><strong>1. TcpServer::start() - 启动引擎</strong></h3><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">TcpServer::start</span><span class=\"params\">()</span>  </span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;  </span><br><span class=\"line\">  <span class=\"keyword\">if</span> (started_.<span class=\"built_in\">getAndSet</span>(<span class=\"number\">1</span>) == <span class=\"number\">0</span>) <span class=\"comment\">// 通过原子操作保证只启动一次  </span></span><br><span class=\"line\">  &#123;  </span><br><span class=\"line\">    threadPool_-&gt;<span class=\"built_in\">start</span>(threadInitCallback_); <span class=\"comment\">// 1. 启动 EventLoopThreadPool</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">assert</span>(!acceptor_-&gt;<span class=\"built_in\">listenning</span>());  </span><br><span class=\"line\">    <span class=\"comment\">// 2. 将 Acceptor::listen 任务提交到主 EventLoop 执行  </span></span><br><span class=\"line\">    loop_-&gt;<span class=\"built_in\">runInLoop</span>(  </span><br><span class=\"line\">        std::<span class=\"built_in\">bind</span>(&amp;Acceptor::listen, <span class=\"built_in\">get_pointer</span>(acceptor_)));  </span><br><span class=\"line\">  &#125;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>TcpServer::start() 主要做了两件事：启动 EventLoopThreadPool 和启动 Acceptor 的监听。我们先关注第一件。</p>\n<h3 id=\"2-EventLoopThreadPool-start-创建并启动-I-x2F-O-线程\"><a href=\"#2-EventLoopThreadPool-start-创建并启动-I-x2F-O-线程\" class=\"headerlink\" title=\"2. EventLoopThreadPool::start() - 创建并启动 I&#x2F;O 线程\"></a><strong>2. EventLoopThreadPool::start() - 创建并启动 I&#x2F;O 线程</strong></h3><p>EventLoopThreadPool 负责管理一组 I&#x2F;O 线程，每个线程运行一个 EventLoop。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">EventLoopThreadPool::start</span><span class=\"params\">(<span class=\"type\">const</span> ThreadInitCallback&amp; cb)</span>  </span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;  </span><br><span class=\"line\">  <span class=\"built_in\">assert</span>(!started_);  </span><br><span class=\"line\">  baseLoop_-&gt;<span class=\"built_in\">assertInLoopThread</span>(); <span class=\"comment\">// 确保在主 EventLoop 线程中调用</span></span><br><span class=\"line\"></span><br><span class=\"line\">  started_ = <span class=\"literal\">true</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; numThreads_; ++i) <span class=\"comment\">// 根据配置的线程数循环  </span></span><br><span class=\"line\">  &#123;  </span><br><span class=\"line\">    <span class=\"type\">char</span> buf[name_.<span class=\"built_in\">size</span>() + <span class=\"number\">32</span>];  </span><br><span class=\"line\">    <span class=\"built_in\">snprintf</span>(buf, <span class=\"keyword\">sizeof</span> buf, <span class=\"string\">&quot;%s%d&quot;</span>, name_.<span class=\"built_in\">c_str</span>(), i);  </span><br><span class=\"line\">    <span class=\"comment\">// 创建 EventLoopThread 对象  </span></span><br><span class=\"line\">    EventLoopThread* t = <span class=\"keyword\">new</span> <span class=\"built_in\">EventLoopThread</span>(cb, buf);  </span><br><span class=\"line\">    threads_.<span class=\"built_in\">push_back</span>(std::<span class=\"built_in\">unique_ptr</span>&lt;EventLoopThread&gt;(t));  </span><br><span class=\"line\">    <span class=\"comment\">// 启动线程并获取 EventLoop 指针，存入 loops_ 向量  </span></span><br><span class=\"line\">    loops_.<span class=\"built_in\">push_back</span>(t-&gt;<span class=\"built_in\">startLoop</span>());  </span><br><span class=\"line\">  &#125;  </span><br><span class=\"line\">  <span class=\"keyword\">if</span> (numThreads_ == <span class=\"number\">0</span> &amp;&amp; cb)  </span><br><span class=\"line\">  &#123;  </span><br><span class=\"line\">    <span class=\"built_in\">cb</span>(baseLoop_);  </span><br><span class=\"line\">  &#125;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这里可以看到，线程池会根据用户通过 TcpServer::setThreadNum() 设置的线程数（如果没设置，默认为 0，即所有 I&#x2F;O 都在主 EventLoop 中），创建相应数量的 EventLoopThread 对象，并调用 startLoop() 获取 EventLoop 指针。</p>\n<h3 id=\"3-EventLoopThread-“One-Loop-Per-Thread”-的实现者\"><a href=\"#3-EventLoopThread-“One-Loop-Per-Thread”-的实现者\" class=\"headerlink\" title=\"3. EventLoopThread - “One Loop Per Thread” 的实现者\"></a><strong>3. EventLoopThread - “One Loop Per Thread” 的实现者</strong></h3><p>EventLoopThread 是实现 “One Loop Per Thread” 的核心。它在构造时会创建一个 muduo::Thread 对象，并将自己的 threadFunc 作为线程入口函数。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">EventLoopThread::<span class=\"built_in\">EventLoopThread</span>(<span class=\"type\">const</span> ThreadInitCallback&amp; cb,  </span><br><span class=\"line\">                                 <span class=\"type\">const</span> string&amp; name)  </span><br><span class=\"line\">  : <span class=\"built_in\">loop_</span>(<span class=\"literal\">NULL</span>),  </span><br><span class=\"line\">    <span class=\"built_in\">exiting_</span>(<span class=\"literal\">false</span>),  </span><br><span class=\"line\">    <span class=\"built_in\">thread_</span>(std::<span class=\"built_in\">bind</span>(&amp;EventLoopThread::threadFunc, <span class=\"keyword\">this</span>), name), <span class=\"comment\">// 创建线程对象  </span></span><br><span class=\"line\">    <span class=\"built_in\">mutex_</span>(),  </span><br><span class=\"line\">    <span class=\"built_in\">cond_</span>(mutex_),  </span><br><span class=\"line\">    <span class=\"built_in\">callback_</span>(cb)  </span><br><span class=\"line\">&#123;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>startLoop() 方法负责启动这个线程，并<strong>阻塞等待</strong>新线程中的 EventLoop 创建完成。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">EventLoop* <span class=\"title\">EventLoopThread::startLoop</span><span class=\"params\">()</span>  </span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;  </span><br><span class=\"line\">  <span class=\"built_in\">assert</span>(!thread_.<span class=\"built_in\">started</span>());  </span><br><span class=\"line\">  thread_.<span class=\"built_in\">start</span>(); <span class=\"comment\">// 启动新线程，执行 threadFunc</span></span><br><span class=\"line\"></span><br><span class=\"line\">  EventLoop* loop = <span class=\"literal\">NULL</span>;  </span><br><span class=\"line\">  &#123;  </span><br><span class=\"line\">    <span class=\"function\">MutexLockGuard <span class=\"title\">lock</span><span class=\"params\">(mutex_)</span></span>;  </span><br><span class=\"line\">    <span class=\"keyword\">while</span> (loop_ == <span class=\"literal\">NULL</span>) <span class=\"comment\">// 使用条件变量等待 loop_ 被赋值  </span></span><br><span class=\"line\">    &#123;  </span><br><span class=\"line\">      cond_.<span class=\"built_in\">wait</span>();  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">    loop = loop_; <span class=\"comment\">// 获取 EventLoop 指针  </span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> loop;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>新线程启动后，会执行 threadFunc：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">EventLoopThread::threadFunc</span><span class=\"params\">()</span>  </span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;  </span><br><span class=\"line\">  EventLoop loop; <span class=\"comment\">// 1. 在新线程的栈上创建 EventLoop 对象</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (callback_) <span class=\"comment\">// 2. 执行线程初始化回调  </span></span><br><span class=\"line\">  &#123;  </span><br><span class=\"line\">    <span class=\"built_in\">callback_</span>(&amp;loop);  </span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  &#123;  </span><br><span class=\"line\">    <span class=\"function\">MutexLockGuard <span class=\"title\">lock</span><span class=\"params\">(mutex_)</span></span>;  </span><br><span class=\"line\">    loop_ = &amp;loop; <span class=\"comment\">// 3. 将 EventLoop 指针赋值给成员变量  </span></span><br><span class=\"line\">    cond_.<span class=\"built_in\">notify</span>(); <span class=\"comment\">// 4. 通知 startLoop() 已创建完毕  </span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  loop.<span class=\"built_in\">loop</span>(); <span class=\"comment\">// 5. 启动事件循环，阻塞在此  </span></span><br><span class=\"line\">    </span><br><span class=\"line\">  <span class=\"function\">MutexLockGuard <span class=\"title\">lock</span><span class=\"params\">(mutex_)</span></span>; <span class=\"comment\">// loop 退出后清理  </span></span><br><span class=\"line\">  loop_ = <span class=\"literal\">NULL</span>;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>EventLoop 的构造函数中会检查 thread_local EventLoop* t_loopInThisThread 变量，如果该线程已有 EventLoop，则会 LOG_FATAL 退出，从而保证了每个线程只有一个 EventLoop。</p>\n<h3 id=\"4-启动流程总结与时序图\"><a href=\"#4-启动流程总结与时序图\" class=\"headerlink\" title=\"4. 启动流程总结与时序图\"></a><strong>4. 启动流程总结与时序图</strong></h3><p>总结一下，启动多个事件循环的流程是：</p>\n<ol>\n<li>用户（可选）调用 TcpServer::setThreadNum() 设置 I&#x2F;O 线程数。  </li>\n<li>用户调用 TcpServer::start()。  </li>\n<li>TcpServer 调用 EventLoopThreadPool::start()。  </li>\n<li>EventLoopThreadPool 循环创建 EventLoopThread 对象。  </li>\n<li>每个 EventLoopThread 对象调用 startLoop()。  </li>\n<li>startLoop() 启动一个新线程。  </li>\n<li>新线程执行 threadFunc()，在<strong>自己的栈上创建 EventLoop 对象</strong>，并通过条件变量通知 startLoop()。  </li>\n<li>startLoop() 返回 EventLoop 指针给 EventLoopThreadPool。  </li>\n<li>新线程执行 EventLoop::loop()，进入事件循环。</li>\n</ol>\n<p>下面是这个过程的时序图：</p>\n<p><img src=\"/images/eventloop%E5%90%AF%E5%8A%A8.png\" alt=\"evntloop启动时序图\"></p>\n<h2 id=\"runInLoop：确保任务在正确的-EventLoop-中执行\"><a href=\"#runInLoop：确保任务在正确的-EventLoop-中执行\" class=\"headerlink\" title=\"runInLoop：确保任务在正确的 EventLoop 中执行\"></a><strong>runInLoop：确保任务在正确的 EventLoop 中执行</strong></h2><p>理解了 EventLoop 如何与线程绑定后，我们来看第二个关键问题：muduo 如何保证对 EventLoop 及其管理的对象的操作，都在其所属的线程中执行？核心在于 EventLoop::runInLoop 和 EventLoop::queueInLoop。</p>\n<p>runInLoop 的逻辑很清晰：如果当前线程就是 EventLoop 所在的线程，则直接执行回调函数 cb；否则，将 cb 交给 queueInLoop 处理。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">EventLoop::runInLoop</span><span class=\"params\">(Functor cb)</span>  </span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;  </span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"built_in\">isInLoopThread</span>()) <span class=\"comment\">// 判断是否在当前 EventLoop 线程  </span></span><br><span class=\"line\">  &#123;  </span><br><span class=\"line\">    <span class=\"built_in\">cb</span>(); <span class=\"comment\">// 是，则直接执行  </span></span><br><span class=\"line\">  &#125;  </span><br><span class=\"line\">  <span class=\"keyword\">else</span>  </span><br><span class=\"line\">  &#123;  </span><br><span class=\"line\">    <span class=\"built_in\">queueInLoop</span>(std::<span class=\"built_in\">move</span>(cb)); <span class=\"comment\">// 不是，则入队  </span></span><br><span class=\"line\">  &#125;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>queueInLoop 负责将任务放入 pendingFunctors_ 队列，并唤醒目标 EventLoop 线程（如果它正在阻塞等待）。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">EventLoop::queueInLoop</span><span class=\"params\">(Functor cb)</span>  </span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;  </span><br><span class=\"line\">  &#123;  </span><br><span class=\"line\">    <span class=\"function\">MutexLockGuard <span class=\"title\">lock</span><span class=\"params\">(mutex_)</span></span>; <span class=\"comment\">// 加锁保护 pendingFunctors_  </span></span><br><span class=\"line\">    pendingFunctors_.<span class=\"built_in\">push_back</span>(std::<span class=\"built_in\">move</span>(cb));  </span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 如果调用者不是 EventLoop 线程，或者 EventLoop 线程正在处理任务队列则需要唤醒  </span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!<span class=\"built_in\">isInLoopThread</span>() || callingPendingFunctors_)  </span><br><span class=\"line\">  &#123;  </span><br><span class=\"line\">    <span class=\"built_in\">wakeup</span>();  </span><br><span class=\"line\">  &#125;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>唤醒操作通过向 EventLoop 内部的 wakeupFd_ (一个 eventfd) 写入一个字节来实现。这个 wakeupFd_ 已经被封装成一个 Channel 并注册到了 Poller 中，监听读事件。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">EventLoop::<span class=\"built_in\">EventLoop</span>()  </span><br><span class=\"line\">  :  ...  </span><br><span class=\"line\">    <span class=\"built_in\">wakeupFd_</span>(<span class=\"built_in\">createEventfd</span>()), <span class=\"comment\">// 创建 eventfd  </span></span><br><span class=\"line\">    <span class=\"built_in\">wakeupChannel_</span>(<span class=\"keyword\">new</span> <span class=\"built_in\">Channel</span>(<span class=\"keyword\">this</span>, wakeupFd_)), <span class=\"comment\">// 创建 Channel  </span></span><br><span class=\"line\">     ...  </span><br><span class=\"line\">&#123;  </span><br><span class=\"line\">   ...  </span><br><span class=\"line\">  wakeupChannel_-&gt;<span class=\"built_in\">setReadCallback</span>(  </span><br><span class=\"line\">      std::<span class=\"built_in\">bind</span>(&amp;EventLoop::handleRead, <span class=\"keyword\">this</span>)); <span class=\"comment\">// 设置读回调  </span></span><br><span class=\"line\">  wakeupChannel_-&gt;<span class=\"built_in\">enableReading</span>(); <span class=\"comment\">// 启用读事件监听  </span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">EventLoop::wakeup</span><span class=\"params\">()</span>  </span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;  </span><br><span class=\"line\">  <span class=\"type\">uint64_t</span> one = <span class=\"number\">1</span>;  </span><br><span class=\"line\">  <span class=\"comment\">// 向 wakeupFd_ 写入 1 个字节，触发可读事件  </span></span><br><span class=\"line\">  <span class=\"type\">ssize_t</span> n = sockets::<span class=\"built_in\">write</span>(wakeupFd_, &amp;one, <span class=\"keyword\">sizeof</span> one);  </span><br><span class=\"line\">  <span class=\"keyword\">if</span> (n != <span class=\"keyword\">sizeof</span> one)  </span><br><span class=\"line\">  &#123;  </span><br><span class=\"line\">    LOG_ERROR &lt;&lt; <span class=\"string\">&quot;EventLoop::wakeup() writes &quot;</span> &lt;&lt; n &lt;&lt; <span class=\"string\">&quot; bytes instead of 8&quot;</span>;  </span><br><span class=\"line\">  &#125;  </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">EventLoop::handleRead</span><span class=\"params\">()</span> <span class=\"comment\">// wakeupChannel_ 的读回调  </span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;  </span><br><span class=\"line\">  <span class=\"type\">uint64_t</span> one = <span class=\"number\">1</span>;  </span><br><span class=\"line\">  <span class=\"comment\">// 读取 wakeupFd_ 的数据，清空事件通知  </span></span><br><span class=\"line\">  <span class=\"type\">ssize_t</span> n = sockets::<span class=\"built_in\">read</span>(wakeupFd_, &amp;one, <span class=\"keyword\">sizeof</span> one);  </span><br><span class=\"line\">  <span class=\"keyword\">if</span> (n != <span class=\"keyword\">sizeof</span> one)  </span><br><span class=\"line\">  &#123;  </span><br><span class=\"line\">    LOG_ERROR &lt;&lt; <span class=\"string\">&quot;EventLoop::handleRead() reads &quot;</span> &lt;&lt; n &lt;&lt; <span class=\"string\">&quot; bytes instead of 8&quot;</span>;  </span><br><span class=\"line\">  &#125;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>当 Poller::poll() 因为 wakeupFd_ 可读而返回后，EventLoop::loop() 会处理 wakeupChannel_ 的 handleRead 事件，之后会调用 doPendingFunctors() 来执行队列中的所有任务。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">EventLoop::loop</span><span class=\"params\">()</span>  </span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;  </span><br><span class=\"line\">  <span class=\"comment\">// ...  </span></span><br><span class=\"line\">  <span class=\"keyword\">while</span> (!quit_)  </span><br><span class=\"line\">  &#123;  </span><br><span class=\"line\">    activeChannels_.<span class=\"built_in\">clear</span>();  </span><br><span class=\"line\">    pollReturnTime_ = poller_-&gt;<span class=\"built_in\">poll</span>(kPollTimeMs, &amp;activeChannels_); <span class=\"comment\">// 等待事件  </span></span><br><span class=\"line\">    <span class=\"comment\">// ... 处理 I/O 事件 ...  </span></span><br><span class=\"line\">    eventHandling_ = <span class=\"literal\">true</span>;  </span><br><span class=\"line\">    <span class=\"keyword\">for</span> (Channel* channel : activeChannels_)  </span><br><span class=\"line\">    &#123;  </span><br><span class=\"line\">      currentActiveChannel_ = channel;  </span><br><span class=\"line\">      currentActiveChannel_-&gt;<span class=\"built_in\">handleEvent</span>(pollReturnTime_);  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">    currentActiveChannel_ = <span class=\"literal\">NULL</span>;  </span><br><span class=\"line\">    eventHandling_ = <span class=\"literal\">false</span>;  </span><br><span class=\"line\">    <span class=\"built_in\">doPendingFunctors</span>(); <span class=\"comment\">// 处理队列中的任务  </span></span><br><span class=\"line\">  &#125;  </span><br><span class=\"line\">  <span class=\"comment\">// ...  </span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">EventLoop::doPendingFunctors</span><span class=\"params\">()</span>  </span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;  </span><br><span class=\"line\">  std::vector&lt;Functor&gt; functors;  </span><br><span class=\"line\">  callingPendingFunctors_ = <span class=\"literal\">true</span>; <span class=\"comment\">// 标记正在处理任务</span></span><br><span class=\"line\"></span><br><span class=\"line\">  &#123;  </span><br><span class=\"line\">    <span class=\"function\">MutexLockGuard <span class=\"title\">lock</span><span class=\"params\">(mutex_)</span></span>;  </span><br><span class=\"line\">    functors.<span class=\"built_in\">swap</span>(pendingFunctors_); <span class=\"comment\">// 将任务队列交换出来，减小临界区  </span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"type\">const</span> Functor&amp; functor : functors) <span class=\"comment\">// 执行所有任务  </span></span><br><span class=\"line\">  &#123;  </span><br><span class=\"line\">    <span class=\"built_in\">functor</span>();  </span><br><span class=\"line\">  &#125;  </span><br><span class=\"line\">  callingPendingFunctors_ = <span class=\"literal\">false</span>; <span class=\"comment\">// 标记处理完毕  </span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n<p>这样，muduo 就通过 runInLoop &#x2F; queueInLoop 结合 eventfd 唤醒机制，巧妙地实现了跨线程任务提交，并严格保证了所有操作都在其所属的 EventLoop 线程中执行，完美诠释了陈硕大佬的设计思想。</p>\n<p>下面是这个过程的时序图：</p>\n<p><img src=\"/images/eventloop%E4%BC%A0%E9%80%92%E4%BA%8B%E4%BB%B6.png\" alt=\"eventloop事件传递\"></p>\n<h2 id=\"后记\"><a href=\"#后记\" class=\"headerlink\" title=\"后记\"></a><strong>后记</strong></h2><p>文学家用文字表达自己的思想，程序开发人员用程序表达自己对软件设计的思想。我始终坚信，程序开发人员，应该坚信自己的程序是表达自己想法的工作，我们是 艺术家 而不是单纯的码农，我们在自己能够做主的程序里，应该去体现自己的思想。</p>\n<p>在这个系列的文章中，我们不是要去争论对与错，不是要去争论程序设计面向对象的优缺点，到底是该基于对象还是面向对象。我们可以有自己的偏好，认同某些观点，我们要做的是从开源代码中学习这个思想。无论我们是认同一个观点还是学习一个观点，我们都应该深入学习一个观点。</p>\n<p>通过对 muduo 启动流程和跨线程调用机制的分析，我们得以一窥其“One Loop Per Thread”模型实现的精妙之处。这只是 muduo 设计魅力的冰山一角，在接下来的文章中，我们将继续探索其事件处理、连接管理等核心机制。</p>\n","excerpt":"<h2 id=\"前言：再探-muduo，一次与过去的对话\"><a href=\"#前言：再探-muduo，一次与过去的对话\" class=\"headerlink\" title=\"前言：再探 muduo，一次与过去的对话\"></a><strong>前言：再探 muduo，一次与过去的对话</strong></h2><p>记得自己刚开始学 C++ 的时候，刚学会语法，学完 Linux 系统编程，也是在知乎上搜各种回答，以什么样的方式提升自己的 C++ 编程水平，看什么书让自己的编程水平突飞猛进，那些书让你的 C++ 水平顿悟的感觉等等问题。后来也是搜索到了一个回答是看 muduo 网络库，当时尝试去看，很惭愧，完全看不进去，看《Linux 多线程服务器编程》这本书也是，看了和没看一样。</p>\n<p>现在工作了一段时间了，积累了一些经验，突然之间又在刷知乎的时候看到了这个问题，并且刷到了 muduo 这个库，想着趁这个机会再看看，看自己是不是能看懂了，也算是对过去的自己的一个交代吧。</p>","more":"<h2 id=\"muduo-的设计哲学：基于对象与事件驱动\"><a href=\"#muduo-的设计哲学：基于对象与事件驱动\" class=\"headerlink\" title=\"muduo 的设计哲学：基于对象与事件驱动\"></a><strong>muduo 的设计哲学：基于对象与事件驱动</strong></h2><p>一个自己能够做主的开源程序，体现的大多是作者本身在软件设计上的理念。陈硕大佬在《Linux 多线程服务器编程》这本书中，清晰地表达了他的几个核心观点：</p>\n<ol>\n<li><strong>核心事件：</strong> 网络连接中的几个重要事件：建立新连接、关闭连接、收到消息、消息发送完成（所谓的“三个半事件”）。  </li>\n<li><strong>线程模型：</strong> 一个好的网络库的模型应该是“一个线程一个事件循环 (One Loop Per Thread)”。  </li>\n<li><strong>设计风格：</strong> muduo 是**基于对象的 (Object-Based)**，而不是面向对象的 (Object-Oriented)，并表达了对面向对象中虚函数与继承滥用的不满。</li>\n</ol>\n<p>我们的 muduo 源码剖析系列文章，就将围绕陈硕大佬是如何在 muduo 这个库中实现这些核心观点的来展开。</p>\n<p><strong>而本篇文章，我们将着重分析第一个核心观点——“一个线程一个 EventLoop” 是如何实现的，以及第二个关键问题——EventLoop 自身的操作（特别是跨线程提交任务）是如何保证在其所属的线程中执行的。</strong></p>\n<h2 id=\"从-echo-示例说起：muduo-的直观用法\"><a href=\"#从-echo-示例说起：muduo-的直观用法\" class=\"headerlink\" title=\"从 echo 示例说起：muduo 的直观用法\"></a><strong>从 echo 示例说起：muduo 的直观用法</strong></h2><p>在深入源码之前，我们先看一个 muduo 最简单的 echo 示例，了解其基本用法：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;muduo/net/TcpServer.h&gt;</span>  </span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;muduo/net/EventLoop.h&gt;</span>  </span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;muduo/base/Logging.h&gt;</span>  </span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;unistd.h&gt;</span>  </span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;functional&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">EchoServer</span>  </span><br><span class=\"line\">&#123;  </span><br><span class=\"line\"> <span class=\"keyword\">public</span>:  </span><br><span class=\"line\">  <span class=\"built_in\">EchoServer</span>(muduo::net::EventLoop* loop,  </span><br><span class=\"line\">             <span class=\"type\">const</span> muduo::net::InetAddress&amp; listenAddr)  </span><br><span class=\"line\">    : <span class=\"built_in\">server_</span>(loop, listenAddr, <span class=\"string\">&quot;EchoServer&quot;</span>)  </span><br><span class=\"line\">  &#123;  </span><br><span class=\"line\">    server_.<span class=\"built_in\">setConnectionCallback</span>(  </span><br><span class=\"line\">        std::<span class=\"built_in\">bind</span>(&amp;EchoServer::onConnection, <span class=\"keyword\">this</span>, std::placeholders::_1));  </span><br><span class=\"line\">    server_.<span class=\"built_in\">setMessageCallback</span>(  </span><br><span class=\"line\">        std::<span class=\"built_in\">bind</span>(&amp;EchoServer::onMessage, <span class=\"keyword\">this</span>,  </span><br><span class=\"line\">                  std::placeholders::_1, std::placeholders::_2, std::placeholders::_3));  </span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">start</span><span class=\"params\">()</span>  </span></span><br><span class=\"line\"><span class=\"function\">  </span>&#123;  </span><br><span class=\"line\">    server_.<span class=\"built_in\">start</span>();  </span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"keyword\">private</span>:  </span><br><span class=\"line\">  <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">onConnection</span><span class=\"params\">(<span class=\"type\">const</span> muduo::net::TcpConnectionPtr&amp; conn)</span>  </span></span><br><span class=\"line\"><span class=\"function\">  </span>&#123;  </span><br><span class=\"line\">    LOG_INFO &lt;&lt; <span class=\"string\">&quot;EchoServer - &quot;</span> &lt;&lt; conn-&gt;<span class=\"built_in\">peerAddress</span>().<span class=\"built_in\">toIpPort</span>() &lt;&lt; <span class=\"string\">&quot; -&gt; &quot;</span>  </span><br><span class=\"line\">             &lt;&lt; conn-&gt;<span class=\"built_in\">localAddress</span>().<span class=\"built_in\">toIpPort</span>() &lt;&lt; <span class=\"string\">&quot; is &quot;</span>  </span><br><span class=\"line\">             &lt;&lt; (conn-&gt;<span class=\"built_in\">connected</span>() ? <span class=\"string\">&quot;UP&quot;</span> : <span class=\"string\">&quot;DOWN&quot;</span>);  </span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">onMessage</span><span class=\"params\">(<span class=\"type\">const</span> muduo::net::TcpConnectionPtr&amp; conn,  </span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">                 muduo::net::Buffer* buf,  </span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">                 muduo::Timestamp time)</span>  </span></span><br><span class=\"line\"><span class=\"function\">  </span>&#123;  </span><br><span class=\"line\">    <span class=\"function\">muduo::string <span class=\"title\">msg</span><span class=\"params\">(buf-&gt;retrieveAllAsString())</span></span>;  </span><br><span class=\"line\">    LOG_INFO &lt;&lt; conn-&gt;<span class=\"built_in\">name</span>() &lt;&lt; <span class=\"string\">&quot; echo &quot;</span> &lt;&lt; msg.<span class=\"built_in\">size</span>() &lt;&lt; <span class=\"string\">&quot; bytes, &quot;</span>  </span><br><span class=\"line\">             &lt;&lt; <span class=\"string\">&quot;data received at &quot;</span> &lt;&lt; time.<span class=\"built_in\">toString</span>();  </span><br><span class=\"line\">    conn-&gt;<span class=\"built_in\">send</span>(msg);  </span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  muduo::net::TcpServer server_;  </span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span>  </span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;  </span><br><span class=\"line\">  LOG_INFO &lt;&lt; <span class=\"string\">&quot;pid = &quot;</span> &lt;&lt; <span class=\"built_in\">getpid</span>();  </span><br><span class=\"line\">  muduo::net::EventLoop loop; <span class=\"comment\">// 1. 创建主 EventLoop  </span></span><br><span class=\"line\">  muduo::<span class=\"function\">net::InetAddress <span class=\"title\">listenAddr</span><span class=\"params\">(<span class=\"number\">2007</span>)</span></span>;  </span><br><span class=\"line\">  <span class=\"function\">EchoServer <span class=\"title\">server</span><span class=\"params\">(&amp;loop, listenAddr)</span></span>; <span class=\"comment\">// 2. 创建 EchoServer (内部包含 TcpServer)  </span></span><br><span class=\"line\">  server.<span class=\"built_in\">start</span>(); <span class=\"comment\">// 3. 启动服务器 (内部会启动 I/O 线程池和 Acceptor)  </span></span><br><span class=\"line\">  loop.<span class=\"built_in\">loop</span>(); <span class=\"comment\">// 4. 启动主 EventLoop 的事件循环  </span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n<p>可以看到，使用 muduo 确实很简单：创建一个主 EventLoop，用它和监听地址构造 TcpServer（通过组合），设置好连接和消息处理的回调函数，然后启动 TcpServer，最后启动主 EventLoop 的循环。</p>\n<h2 id=\"多个-EventLoop-的启动与线程绑定\"><a href=\"#多个-EventLoop-的启动与线程绑定\" class=\"headerlink\" title=\"多个 EventLoop 的启动与线程绑定\"></a><strong>多个 EventLoop 的启动与线程绑定</strong></h2><p>那么，TcpServer 是如何实现 “One Loop Per Thread” 并启动多个 EventLoop 的呢？关键在于 TcpServer::start() 方法和其内部的 EventLoopThreadPool。</p>\n<h3 id=\"1-TcpServer-start-启动引擎\"><a href=\"#1-TcpServer-start-启动引擎\" class=\"headerlink\" title=\"1. TcpServer::start() - 启动引擎\"></a><strong>1. TcpServer::start() - 启动引擎</strong></h3><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">TcpServer::start</span><span class=\"params\">()</span>  </span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;  </span><br><span class=\"line\">  <span class=\"keyword\">if</span> (started_.<span class=\"built_in\">getAndSet</span>(<span class=\"number\">1</span>) == <span class=\"number\">0</span>) <span class=\"comment\">// 通过原子操作保证只启动一次  </span></span><br><span class=\"line\">  &#123;  </span><br><span class=\"line\">    threadPool_-&gt;<span class=\"built_in\">start</span>(threadInitCallback_); <span class=\"comment\">// 1. 启动 EventLoopThreadPool</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">assert</span>(!acceptor_-&gt;<span class=\"built_in\">listenning</span>());  </span><br><span class=\"line\">    <span class=\"comment\">// 2. 将 Acceptor::listen 任务提交到主 EventLoop 执行  </span></span><br><span class=\"line\">    loop_-&gt;<span class=\"built_in\">runInLoop</span>(  </span><br><span class=\"line\">        std::<span class=\"built_in\">bind</span>(&amp;Acceptor::listen, <span class=\"built_in\">get_pointer</span>(acceptor_)));  </span><br><span class=\"line\">  &#125;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>TcpServer::start() 主要做了两件事：启动 EventLoopThreadPool 和启动 Acceptor 的监听。我们先关注第一件。</p>\n<h3 id=\"2-EventLoopThreadPool-start-创建并启动-I-x2F-O-线程\"><a href=\"#2-EventLoopThreadPool-start-创建并启动-I-x2F-O-线程\" class=\"headerlink\" title=\"2. EventLoopThreadPool::start() - 创建并启动 I&#x2F;O 线程\"></a><strong>2. EventLoopThreadPool::start() - 创建并启动 I&#x2F;O 线程</strong></h3><p>EventLoopThreadPool 负责管理一组 I&#x2F;O 线程，每个线程运行一个 EventLoop。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">EventLoopThreadPool::start</span><span class=\"params\">(<span class=\"type\">const</span> ThreadInitCallback&amp; cb)</span>  </span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;  </span><br><span class=\"line\">  <span class=\"built_in\">assert</span>(!started_);  </span><br><span class=\"line\">  baseLoop_-&gt;<span class=\"built_in\">assertInLoopThread</span>(); <span class=\"comment\">// 确保在主 EventLoop 线程中调用</span></span><br><span class=\"line\"></span><br><span class=\"line\">  started_ = <span class=\"literal\">true</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; numThreads_; ++i) <span class=\"comment\">// 根据配置的线程数循环  </span></span><br><span class=\"line\">  &#123;  </span><br><span class=\"line\">    <span class=\"type\">char</span> buf[name_.<span class=\"built_in\">size</span>() + <span class=\"number\">32</span>];  </span><br><span class=\"line\">    <span class=\"built_in\">snprintf</span>(buf, <span class=\"keyword\">sizeof</span> buf, <span class=\"string\">&quot;%s%d&quot;</span>, name_.<span class=\"built_in\">c_str</span>(), i);  </span><br><span class=\"line\">    <span class=\"comment\">// 创建 EventLoopThread 对象  </span></span><br><span class=\"line\">    EventLoopThread* t = <span class=\"keyword\">new</span> <span class=\"built_in\">EventLoopThread</span>(cb, buf);  </span><br><span class=\"line\">    threads_.<span class=\"built_in\">push_back</span>(std::<span class=\"built_in\">unique_ptr</span>&lt;EventLoopThread&gt;(t));  </span><br><span class=\"line\">    <span class=\"comment\">// 启动线程并获取 EventLoop 指针，存入 loops_ 向量  </span></span><br><span class=\"line\">    loops_.<span class=\"built_in\">push_back</span>(t-&gt;<span class=\"built_in\">startLoop</span>());  </span><br><span class=\"line\">  &#125;  </span><br><span class=\"line\">  <span class=\"keyword\">if</span> (numThreads_ == <span class=\"number\">0</span> &amp;&amp; cb)  </span><br><span class=\"line\">  &#123;  </span><br><span class=\"line\">    <span class=\"built_in\">cb</span>(baseLoop_);  </span><br><span class=\"line\">  &#125;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这里可以看到，线程池会根据用户通过 TcpServer::setThreadNum() 设置的线程数（如果没设置，默认为 0，即所有 I&#x2F;O 都在主 EventLoop 中），创建相应数量的 EventLoopThread 对象，并调用 startLoop() 获取 EventLoop 指针。</p>\n<h3 id=\"3-EventLoopThread-“One-Loop-Per-Thread”-的实现者\"><a href=\"#3-EventLoopThread-“One-Loop-Per-Thread”-的实现者\" class=\"headerlink\" title=\"3. EventLoopThread - “One Loop Per Thread” 的实现者\"></a><strong>3. EventLoopThread - “One Loop Per Thread” 的实现者</strong></h3><p>EventLoopThread 是实现 “One Loop Per Thread” 的核心。它在构造时会创建一个 muduo::Thread 对象，并将自己的 threadFunc 作为线程入口函数。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">EventLoopThread::<span class=\"built_in\">EventLoopThread</span>(<span class=\"type\">const</span> ThreadInitCallback&amp; cb,  </span><br><span class=\"line\">                                 <span class=\"type\">const</span> string&amp; name)  </span><br><span class=\"line\">  : <span class=\"built_in\">loop_</span>(<span class=\"literal\">NULL</span>),  </span><br><span class=\"line\">    <span class=\"built_in\">exiting_</span>(<span class=\"literal\">false</span>),  </span><br><span class=\"line\">    <span class=\"built_in\">thread_</span>(std::<span class=\"built_in\">bind</span>(&amp;EventLoopThread::threadFunc, <span class=\"keyword\">this</span>), name), <span class=\"comment\">// 创建线程对象  </span></span><br><span class=\"line\">    <span class=\"built_in\">mutex_</span>(),  </span><br><span class=\"line\">    <span class=\"built_in\">cond_</span>(mutex_),  </span><br><span class=\"line\">    <span class=\"built_in\">callback_</span>(cb)  </span><br><span class=\"line\">&#123;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>startLoop() 方法负责启动这个线程，并<strong>阻塞等待</strong>新线程中的 EventLoop 创建完成。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">EventLoop* <span class=\"title\">EventLoopThread::startLoop</span><span class=\"params\">()</span>  </span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;  </span><br><span class=\"line\">  <span class=\"built_in\">assert</span>(!thread_.<span class=\"built_in\">started</span>());  </span><br><span class=\"line\">  thread_.<span class=\"built_in\">start</span>(); <span class=\"comment\">// 启动新线程，执行 threadFunc</span></span><br><span class=\"line\"></span><br><span class=\"line\">  EventLoop* loop = <span class=\"literal\">NULL</span>;  </span><br><span class=\"line\">  &#123;  </span><br><span class=\"line\">    <span class=\"function\">MutexLockGuard <span class=\"title\">lock</span><span class=\"params\">(mutex_)</span></span>;  </span><br><span class=\"line\">    <span class=\"keyword\">while</span> (loop_ == <span class=\"literal\">NULL</span>) <span class=\"comment\">// 使用条件变量等待 loop_ 被赋值  </span></span><br><span class=\"line\">    &#123;  </span><br><span class=\"line\">      cond_.<span class=\"built_in\">wait</span>();  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">    loop = loop_; <span class=\"comment\">// 获取 EventLoop 指针  </span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> loop;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>新线程启动后，会执行 threadFunc：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">EventLoopThread::threadFunc</span><span class=\"params\">()</span>  </span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;  </span><br><span class=\"line\">  EventLoop loop; <span class=\"comment\">// 1. 在新线程的栈上创建 EventLoop 对象</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (callback_) <span class=\"comment\">// 2. 执行线程初始化回调  </span></span><br><span class=\"line\">  &#123;  </span><br><span class=\"line\">    <span class=\"built_in\">callback_</span>(&amp;loop);  </span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  &#123;  </span><br><span class=\"line\">    <span class=\"function\">MutexLockGuard <span class=\"title\">lock</span><span class=\"params\">(mutex_)</span></span>;  </span><br><span class=\"line\">    loop_ = &amp;loop; <span class=\"comment\">// 3. 将 EventLoop 指针赋值给成员变量  </span></span><br><span class=\"line\">    cond_.<span class=\"built_in\">notify</span>(); <span class=\"comment\">// 4. 通知 startLoop() 已创建完毕  </span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  loop.<span class=\"built_in\">loop</span>(); <span class=\"comment\">// 5. 启动事件循环，阻塞在此  </span></span><br><span class=\"line\">    </span><br><span class=\"line\">  <span class=\"function\">MutexLockGuard <span class=\"title\">lock</span><span class=\"params\">(mutex_)</span></span>; <span class=\"comment\">// loop 退出后清理  </span></span><br><span class=\"line\">  loop_ = <span class=\"literal\">NULL</span>;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>EventLoop 的构造函数中会检查 thread_local EventLoop* t_loopInThisThread 变量，如果该线程已有 EventLoop，则会 LOG_FATAL 退出，从而保证了每个线程只有一个 EventLoop。</p>\n<h3 id=\"4-启动流程总结与时序图\"><a href=\"#4-启动流程总结与时序图\" class=\"headerlink\" title=\"4. 启动流程总结与时序图\"></a><strong>4. 启动流程总结与时序图</strong></h3><p>总结一下，启动多个事件循环的流程是：</p>\n<ol>\n<li>用户（可选）调用 TcpServer::setThreadNum() 设置 I&#x2F;O 线程数。  </li>\n<li>用户调用 TcpServer::start()。  </li>\n<li>TcpServer 调用 EventLoopThreadPool::start()。  </li>\n<li>EventLoopThreadPool 循环创建 EventLoopThread 对象。  </li>\n<li>每个 EventLoopThread 对象调用 startLoop()。  </li>\n<li>startLoop() 启动一个新线程。  </li>\n<li>新线程执行 threadFunc()，在<strong>自己的栈上创建 EventLoop 对象</strong>，并通过条件变量通知 startLoop()。  </li>\n<li>startLoop() 返回 EventLoop 指针给 EventLoopThreadPool。  </li>\n<li>新线程执行 EventLoop::loop()，进入事件循环。</li>\n</ol>\n<p>下面是这个过程的时序图：</p>\n<p><img src=\"/images/eventloop%E5%90%AF%E5%8A%A8.png\" alt=\"evntloop启动时序图\"></p>\n<h2 id=\"runInLoop：确保任务在正确的-EventLoop-中执行\"><a href=\"#runInLoop：确保任务在正确的-EventLoop-中执行\" class=\"headerlink\" title=\"runInLoop：确保任务在正确的 EventLoop 中执行\"></a><strong>runInLoop：确保任务在正确的 EventLoop 中执行</strong></h2><p>理解了 EventLoop 如何与线程绑定后，我们来看第二个关键问题：muduo 如何保证对 EventLoop 及其管理的对象的操作，都在其所属的线程中执行？核心在于 EventLoop::runInLoop 和 EventLoop::queueInLoop。</p>\n<p>runInLoop 的逻辑很清晰：如果当前线程就是 EventLoop 所在的线程，则直接执行回调函数 cb；否则，将 cb 交给 queueInLoop 处理。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">EventLoop::runInLoop</span><span class=\"params\">(Functor cb)</span>  </span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;  </span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"built_in\">isInLoopThread</span>()) <span class=\"comment\">// 判断是否在当前 EventLoop 线程  </span></span><br><span class=\"line\">  &#123;  </span><br><span class=\"line\">    <span class=\"built_in\">cb</span>(); <span class=\"comment\">// 是，则直接执行  </span></span><br><span class=\"line\">  &#125;  </span><br><span class=\"line\">  <span class=\"keyword\">else</span>  </span><br><span class=\"line\">  &#123;  </span><br><span class=\"line\">    <span class=\"built_in\">queueInLoop</span>(std::<span class=\"built_in\">move</span>(cb)); <span class=\"comment\">// 不是，则入队  </span></span><br><span class=\"line\">  &#125;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>queueInLoop 负责将任务放入 pendingFunctors_ 队列，并唤醒目标 EventLoop 线程（如果它正在阻塞等待）。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">EventLoop::queueInLoop</span><span class=\"params\">(Functor cb)</span>  </span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;  </span><br><span class=\"line\">  &#123;  </span><br><span class=\"line\">    <span class=\"function\">MutexLockGuard <span class=\"title\">lock</span><span class=\"params\">(mutex_)</span></span>; <span class=\"comment\">// 加锁保护 pendingFunctors_  </span></span><br><span class=\"line\">    pendingFunctors_.<span class=\"built_in\">push_back</span>(std::<span class=\"built_in\">move</span>(cb));  </span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 如果调用者不是 EventLoop 线程，或者 EventLoop 线程正在处理任务队列则需要唤醒  </span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!<span class=\"built_in\">isInLoopThread</span>() || callingPendingFunctors_)  </span><br><span class=\"line\">  &#123;  </span><br><span class=\"line\">    <span class=\"built_in\">wakeup</span>();  </span><br><span class=\"line\">  &#125;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>唤醒操作通过向 EventLoop 内部的 wakeupFd_ (一个 eventfd) 写入一个字节来实现。这个 wakeupFd_ 已经被封装成一个 Channel 并注册到了 Poller 中，监听读事件。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">EventLoop::<span class=\"built_in\">EventLoop</span>()  </span><br><span class=\"line\">  :  ...  </span><br><span class=\"line\">    <span class=\"built_in\">wakeupFd_</span>(<span class=\"built_in\">createEventfd</span>()), <span class=\"comment\">// 创建 eventfd  </span></span><br><span class=\"line\">    <span class=\"built_in\">wakeupChannel_</span>(<span class=\"keyword\">new</span> <span class=\"built_in\">Channel</span>(<span class=\"keyword\">this</span>, wakeupFd_)), <span class=\"comment\">// 创建 Channel  </span></span><br><span class=\"line\">     ...  </span><br><span class=\"line\">&#123;  </span><br><span class=\"line\">   ...  </span><br><span class=\"line\">  wakeupChannel_-&gt;<span class=\"built_in\">setReadCallback</span>(  </span><br><span class=\"line\">      std::<span class=\"built_in\">bind</span>(&amp;EventLoop::handleRead, <span class=\"keyword\">this</span>)); <span class=\"comment\">// 设置读回调  </span></span><br><span class=\"line\">  wakeupChannel_-&gt;<span class=\"built_in\">enableReading</span>(); <span class=\"comment\">// 启用读事件监听  </span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">EventLoop::wakeup</span><span class=\"params\">()</span>  </span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;  </span><br><span class=\"line\">  <span class=\"type\">uint64_t</span> one = <span class=\"number\">1</span>;  </span><br><span class=\"line\">  <span class=\"comment\">// 向 wakeupFd_ 写入 1 个字节，触发可读事件  </span></span><br><span class=\"line\">  <span class=\"type\">ssize_t</span> n = sockets::<span class=\"built_in\">write</span>(wakeupFd_, &amp;one, <span class=\"keyword\">sizeof</span> one);  </span><br><span class=\"line\">  <span class=\"keyword\">if</span> (n != <span class=\"keyword\">sizeof</span> one)  </span><br><span class=\"line\">  &#123;  </span><br><span class=\"line\">    LOG_ERROR &lt;&lt; <span class=\"string\">&quot;EventLoop::wakeup() writes &quot;</span> &lt;&lt; n &lt;&lt; <span class=\"string\">&quot; bytes instead of 8&quot;</span>;  </span><br><span class=\"line\">  &#125;  </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">EventLoop::handleRead</span><span class=\"params\">()</span> <span class=\"comment\">// wakeupChannel_ 的读回调  </span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;  </span><br><span class=\"line\">  <span class=\"type\">uint64_t</span> one = <span class=\"number\">1</span>;  </span><br><span class=\"line\">  <span class=\"comment\">// 读取 wakeupFd_ 的数据，清空事件通知  </span></span><br><span class=\"line\">  <span class=\"type\">ssize_t</span> n = sockets::<span class=\"built_in\">read</span>(wakeupFd_, &amp;one, <span class=\"keyword\">sizeof</span> one);  </span><br><span class=\"line\">  <span class=\"keyword\">if</span> (n != <span class=\"keyword\">sizeof</span> one)  </span><br><span class=\"line\">  &#123;  </span><br><span class=\"line\">    LOG_ERROR &lt;&lt; <span class=\"string\">&quot;EventLoop::handleRead() reads &quot;</span> &lt;&lt; n &lt;&lt; <span class=\"string\">&quot; bytes instead of 8&quot;</span>;  </span><br><span class=\"line\">  &#125;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>当 Poller::poll() 因为 wakeupFd_ 可读而返回后，EventLoop::loop() 会处理 wakeupChannel_ 的 handleRead 事件，之后会调用 doPendingFunctors() 来执行队列中的所有任务。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">EventLoop::loop</span><span class=\"params\">()</span>  </span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;  </span><br><span class=\"line\">  <span class=\"comment\">// ...  </span></span><br><span class=\"line\">  <span class=\"keyword\">while</span> (!quit_)  </span><br><span class=\"line\">  &#123;  </span><br><span class=\"line\">    activeChannels_.<span class=\"built_in\">clear</span>();  </span><br><span class=\"line\">    pollReturnTime_ = poller_-&gt;<span class=\"built_in\">poll</span>(kPollTimeMs, &amp;activeChannels_); <span class=\"comment\">// 等待事件  </span></span><br><span class=\"line\">    <span class=\"comment\">// ... 处理 I/O 事件 ...  </span></span><br><span class=\"line\">    eventHandling_ = <span class=\"literal\">true</span>;  </span><br><span class=\"line\">    <span class=\"keyword\">for</span> (Channel* channel : activeChannels_)  </span><br><span class=\"line\">    &#123;  </span><br><span class=\"line\">      currentActiveChannel_ = channel;  </span><br><span class=\"line\">      currentActiveChannel_-&gt;<span class=\"built_in\">handleEvent</span>(pollReturnTime_);  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">    currentActiveChannel_ = <span class=\"literal\">NULL</span>;  </span><br><span class=\"line\">    eventHandling_ = <span class=\"literal\">false</span>;  </span><br><span class=\"line\">    <span class=\"built_in\">doPendingFunctors</span>(); <span class=\"comment\">// 处理队列中的任务  </span></span><br><span class=\"line\">  &#125;  </span><br><span class=\"line\">  <span class=\"comment\">// ...  </span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">EventLoop::doPendingFunctors</span><span class=\"params\">()</span>  </span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;  </span><br><span class=\"line\">  std::vector&lt;Functor&gt; functors;  </span><br><span class=\"line\">  callingPendingFunctors_ = <span class=\"literal\">true</span>; <span class=\"comment\">// 标记正在处理任务</span></span><br><span class=\"line\"></span><br><span class=\"line\">  &#123;  </span><br><span class=\"line\">    <span class=\"function\">MutexLockGuard <span class=\"title\">lock</span><span class=\"params\">(mutex_)</span></span>;  </span><br><span class=\"line\">    functors.<span class=\"built_in\">swap</span>(pendingFunctors_); <span class=\"comment\">// 将任务队列交换出来，减小临界区  </span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"type\">const</span> Functor&amp; functor : functors) <span class=\"comment\">// 执行所有任务  </span></span><br><span class=\"line\">  &#123;  </span><br><span class=\"line\">    <span class=\"built_in\">functor</span>();  </span><br><span class=\"line\">  &#125;  </span><br><span class=\"line\">  callingPendingFunctors_ = <span class=\"literal\">false</span>; <span class=\"comment\">// 标记处理完毕  </span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n<p>这样，muduo 就通过 runInLoop &#x2F; queueInLoop 结合 eventfd 唤醒机制，巧妙地实现了跨线程任务提交，并严格保证了所有操作都在其所属的 EventLoop 线程中执行，完美诠释了陈硕大佬的设计思想。</p>\n<p>下面是这个过程的时序图：</p>\n<p><img src=\"/images/eventloop%E4%BC%A0%E9%80%92%E4%BA%8B%E4%BB%B6.png\" alt=\"eventloop事件传递\"></p>\n<h2 id=\"后记\"><a href=\"#后记\" class=\"headerlink\" title=\"后记\"></a><strong>后记</strong></h2><p>文学家用文字表达自己的思想，程序开发人员用程序表达自己对软件设计的思想。我始终坚信，程序开发人员，应该坚信自己的程序是表达自己想法的工作，我们是 艺术家 而不是单纯的码农，我们在自己能够做主的程序里，应该去体现自己的思想。</p>\n<p>在这个系列的文章中，我们不是要去争论对与错，不是要去争论程序设计面向对象的优缺点，到底是该基于对象还是面向对象。我们可以有自己的偏好，认同某些观点，我们要做的是从开源代码中学习这个思想。无论我们是认同一个观点还是学习一个观点，我们都应该深入学习一个观点。</p>\n<p>通过对 muduo 启动流程和跨线程调用机制的分析，我们得以一窥其“One Loop Per Thread”模型实现的精妙之处。这只是 muduo 设计魅力的冰山一角，在接下来的文章中，我们将继续探索其事件处理、连接管理等核心机制。</p>"},{"title":"muduo源码剖析:02.事件的处理","date":"2025-08-26T16:00:00.000Z","_content":"## **前言**\n\n在上一篇文章《muduo 源码剖析（一）：深入 'One Loop Per Thread' 与 EventLoop 的实现》中，我们分析了 muduo 如何通过 EventLoopThreadPool 和 EventLoopThread 实现 \"One Loop Per Thread\" 的并发模型，以及 EventLoop 如何通过 eventfd 机制支持跨线程的任务提交。这些是 muduo 事件驱动框架的基石。\n\n本文我们将聚焦于网络编程的核心——TCP 连接，以及陈硕大佬提出的“三个半事件”中的核心部分：**新连接的建立与分发、连接上数据的接收与发送、以及连接的关闭与资源回收**。我们将深入探讨在 muduo 中，这些事件是如何被优雅地融入其基于对象的事件驱动框架中的。\n<!-- more -->\n## **EventLoop::loop()：事件处理的核心驱动**\n\n在深入具体事件之前，我们首先需要理解 EventLoop 的主循环 loop() 是如何驱动事件处理的。其核心逻辑非常直观：\n\n1. 调用 Poller::poll() (底层通常是 epoll_wait) 等待 I/O 事件的发生，或者等待被 wakeupFd_ 唤醒。\n2. 获取到活跃的 Channel 列表 (activeChannels_)。\n3. 遍历 activeChannels_，对每个 Channel 调用其 handleEvent() 方法。\n4. 执行所有通过 runInLoop 或 queueInLoop 提交的待处理任务 (doPendingFunctors())。\n\n```c++\nvoid EventLoop::loop()  \n{  \nassert(!looping_);  \nassertInLoopThread();  \nlooping_ = true;  \nquit_ = false;  // FIXME: what if someone calls quit() before loop() ?  \nLOG_TRACE << \"EventLoop \" << this << \" start looping\";\n\nwhile (!quit_)  \n{  \nactiveChannels_.clear();  \n// 1. 等待事件发生  \npollReturnTime_ = poller_->poll(kPollTimeMs, &activeChannels_);  \n++iteration_;  \nif (Logger::logLevel() <= Logger::TRACE)  \n{  \nprintActiveChannels();  \n}  \neventHandling_ = true;  \n// 2. 处理活跃 Channel 的事件  \nfor (Channel* channel : activeChannels_)  \n{  \ncurrentActiveChannel_ = channel;  \ncurrentActiveChannel_->handleEvent(pollReturnTime_);  \n}  \ncurrentActiveChannel_ = NULL;  \neventHandling_ = false;  \n// 3. 执行 EventLoop 内部任务队列中的任务  \ndoPendingFunctors();  \n}\n\nLOG_TRACE << \"EventLoop \" << this << \" stop looping\";  \nlooping_ = false;  \n}  \n```\n\n`Poller` (以 `EPollPoller` 为例) 的 `poll()` 方法负责调用 `epoll_wait`，并将返回的就绪事件填充到 `activeChannels` 列表中。\n\n```c++\n// EPollPoller.cc  \nTimestamp EPollPoller::poll(int timeoutMs, ChannelList* activeChannels)  \n{  \nLOG_TRACE << \"fd total count \" << channels_.size();  \nint numEvents = ::epoll_wait(epollfd_,  \n&*events_.begin(), // events_ 是 epoll_event 数组  \nstatic_cast<int>(events_.size()),  \ntimeoutMs);  \nint savedErrno = errno;  \nTimestamp now(Timestamp::now());  \nif (numEvents > 0)  \n{  \nLOG_TRACE << numEvents << \" events happened\";  \nfillActiveChannels(numEvents, activeChannels); // 将就绪事件转换为 Channel  \nif (implicit_cast<size_t>(numEvents) == events_.size()) // 如果 epoll_event 数组满了，则扩容  \n{  \nevents_.resize(events_.size()*2);  \n}  \n}  \nelse if (numEvents == 0)  \n{  \nLOG_TRACE << \"nothing happened\";  \n}  \nelse // 出错处理  \n{  \nif (savedErrno != EINTR)  \n{  \nerrno = savedErrno;  \nLOG_SYSERR << \"EPollPoller::poll()\";  \n}  \n}  \nreturn now;  \n}\n\nvoid EPollPoller::fillActiveChannels(int numEvents,  \nChannelList* activeChannels) const  \n{  \nassert(implicit_cast<size_t>(numEvents) <= events_.size());  \nfor (int i = 0; i < numEvents; ++i)  \n{  \n// 注册时将 Channel* 存放在 epoll_event 的 data.ptr 中  \nChannel* channel = static_cast<Channel*>(events_[i].data.ptr);  \n// ... (省略 NDEBUG 下的断言检查) ...  \nchannel->set_revents(events_[i].events); // 设置 Channel 实际发生的事件  \nactiveChannels->push_back(channel);  \n}  \n}\n``` \n\n当 EventLoop 获取到活跃的 Channel 后，会调用 Channel::handleEvent()。\n这个方法是事件分发的枢纽，它根据 Channel 上实际发生的事件类型 (revents_)，调用相应的回调函数。\n\n```c++\n// Channel.cc  \nvoid Channel::handleEvent(Timestamp receiveTime)  \n{  \nstd::shared_ptr<void> guard;  \nif (tied_) // 如果 Channel 与某个对象（通常是 TcpConnection）绑定了生命周期  \n{  \nguard = tie_.lock(); // 尝试获取对象的 shared_ptr  \nif (guard) // 对象仍然存活  \n{  \nhandleEventWithGuard(receiveTime);  \n}  \n// 如果 guard 为空，说明对象已销毁，Channel 不再处理事件  \n}  \nelse // 未绑定生命周期  \n{  \nhandleEventWithGuard(receiveTime);  \n}  \n}\n\nvoid Channel::handleEventWithGuard(Timestamp receiveTime)  \n{  \neventHandling_ = true;  \nLOG_TRACE << reventsToString();  \n// 对端关闭连接 (POLLHUP)，并且没有可读数据 (POLLIN)  \nif ((revents_ & POLLHUP) && !(revents_ & POLLIN))  \n{  \nif (logHup_)  \n{  \nLOG_WARN << \"fd = \" << fd_ << \" Channel::handle_event() POLLHUP\";  \n}  \nif (closeCallback_) closeCallback_(); // 执行关闭回调  \n}\n\nif (revents_ & POLLNVAL) // 无效的请求，通常是 fd 已关闭  \n{  \nLOG_WARN << \"fd = \" << fd_ << \" Channel::handle_event() POLLNVAL\";  \n}\n\n// 错误事件 (POLLERR) 或无效请求 (POLLNVAL)  \nif (revents_ & (POLLERR | POLLNVAL))  \n{  \nif (errorCallback_) errorCallback_(); // 执行错误回调  \n}  \n// 可读事件 (POLLIN)、高优先级可读 (POLLPRI)、对端关闭连接且仍有数据可读 (POLLRDHUP)  \nif (revents_ & (POLLIN | POLLPRI | POLLRDHUP))  \n{  \nif (readCallback_) readCallback_(receiveTime); // 执行读回调  \n}  \n// 可写事件 (POLLOUT)  \nif (revents_ & POLLOUT)  \n{  \nif (writeCallback_) writeCallback_(); // 执行写回调  \n}  \neventHandling_ = false;  \n}\n```\n\n下面的就是loop事件循环的时序图:\n\n![loop循环](/images/loop循环.png)\n\n理解了 EventLoop 的核心驱动逻辑和 Channel 的事件分发机制后，我们就可以具体分析“三个半事件”的处理了。\n\n## **事件一：新连接的建立与分发**\n\n学习过 Linux 网络编程的都知道，服务器接受新连接的基本流程是 socket -> bind -> listen -> accept。muduo 将这个过程优雅地封装在 Acceptor 和 TcpServer 类中。\n\n### **1. Acceptor：新连接的接收者**\n\nTcpServer 在构造时会创建一个 Acceptor 对象，并将其与主 EventLoop 关联。\nAcceptor 负责创建监听套接字、绑定地址、并设置当有新连接到来时（监听套接字可读）的回调函数为 Acceptor::handleRead。\n\n```c++\n// TcpServer.cc (构造函数部分)  \nTcpServer::TcpServer(EventLoop* loop,  \nconst InetAddress& listenAddr,  \nconst string& nameArg,  \nOption option)  \n: loop_(CHECK_NOTNULL(loop)),  \nacceptor_(new Acceptor(loop, listenAddr, option == kReusePort)),  \n// ...  \n{  \nacceptor_->setNewConnectionCallback(  \nstd::bind(&TcpServer::newConnection, this, _1, _2));  \n}\n\n// Acceptor.cc (构造函数部分)\nAcceptor::Acceptor(EventLoop* loop, const InetAddress& listenAddr, bool reuseport)\n: loop_(loop),  \nacceptSocket_(sockets::createNonblockingOrDie(listenAddr.family())),  \nacceptChannel_(loop, acceptSocket_.fd()), // 为监听套接字创建 Channel  \n// ...  \n{  \n// ...  \nacceptSocket_.bindAddress(listenAddr);  \nacceptChannel_.setReadCallback(  \nstd::bind(&Acceptor::handleRead, this)); // 设置 Channel 的读回调  \n}  \n```\n\n调用`TcpServer::start()` 时，会通过 `loop_->runInLoop()` 调用 `Acceptor::listen()`，该方法会调用 `listen()` 系统调用并使 `acceptChannel_` 开始关注读事件。\n\n```c++  \n// Acceptor.cc  \nvoid Acceptor::listen()  \n{  \nloop_->assertInLoopThread();  \nlistenning_ = true;  \nacceptSocket_.listen();  \nacceptChannel_.enableReading(); // 将 acceptChannel_ 加入 Poller 监听  \n}\n```\n\n当新连接到达时，acceptChannel_ 的 handleRead 被触发：\n\n```c++\n// Acceptor.cc  \nvoid Acceptor::handleRead()  \n{  \nloop_->assertInLoopThread();  \nInetAddress peerAddr;  \nint connfd = acceptSocket_.accept(&peerAddr); // 接受新连接  \nif (connfd >= 0)  \n{  \nif (newConnectionCallback_)  \n{  \nnewConnectionCallback_(connfd, peerAddr); // 调用 TcpServer::newConnection  \n}  \nelse  \n{  \nsockets::close(connfd);  \n}  \n}  \n// ... (错误处理和 EMFILE 处理) ...  \n}\n```\n\n### **2. TcpServer::newConnection：连接的分发**\n\nAcceptor 将新接受的 connfd 和对端地址传递给 TcpServer::newConnection。此方法的核心职责是：\n\n1. 从 EventLoopThreadPool 中通过轮询选择一个 I/O EventLoop。\n2. 为新连接创建一个 TcpConnection 对象，并将选择的 I/O EventLoop 传递给它。\n3. 设置 TcpConnection 的各种回调（连接状态、消息到达、写完成、关闭）。\n4. 将 TcpConnection::connectEstablished 方法提交到选定的 I/O EventLoop 中执行。\n\n```c++\n// TcpServer.cc  \nvoid TcpServer::newConnection(int sockfd, const InetAddress& peerAddr)  \n{  \nloop_->assertInLoopThread(); // 确保在主 EventLoop 中  \nEventLoop* ioLoop = threadPool_->getNextLoop(); // 轮询选择 I/O Loop  \n// ... (生成连接名 connName) ...  \nTcpConnectionPtr conn(new TcpConnection(ioLoop, // 将 ioLoop 传递给 TcpConnection  \nconnName,  \nsockfd,  \nlocalAddr,  \npeerAddr));  \nconnections_[connName] = conn; // 保存连接  \n// ... (设置各种回调) ...  \nconn->setCloseCallback(  \nstd::bind(&TcpServer::removeConnection, this, _1));  \n// 将连接建立的后续操作交给 ioLoop 执行  \nioLoop->runInLoop(std::bind(&TcpConnection::connectEstablished, conn));  \n}\n```\n\n### **3. TcpConnection::connectEstablished：连接的最终建立**\n\n此方法在选定的 I/O EventLoop 线程中执行，完成连接的最后步骤：\n\n```c++\n// TcpConnection.cc  \nvoid TcpConnection::connectEstablished()  \n{  \nloop_->assertInLoopThread(); // 确保在 ioLoop 中  \nassert(state_ == kConnecting);  \nsetState(kConnected);  \nchannel_->tie(shared_from_this()); // 绑定生命周期  \nchannel_->enableReading(); // 开始关注该连接上的读事件  \nconnectionCallback_(shared_from_this()); // 调用用户设置的连接建立回调  \n}\n```\n\n至此，新连接的建立和分发完成，后续该连接上的所有 I/O 事件都将在其被分配到的 I/O EventLoop 线程中处理。\n\n这是建立连接的时序图：\n\n![建立新连接](/images/建立新连接.png)\n## **事件二：收到消息 (MessageCallback)**\n\n当客户端发送数据时，TcpConnection 对应的 channel_ 会触发读事件，进而调用 TcpConnection::handleRead。\n\n```c++\n// TcpConnection.cc (构造函数中设置)  \nchannel_->setReadCallback(  \nstd::bind(&TcpConnection::handleRead, this, _1));\n\n// TcpConnection.cc  \nvoid TcpConnection::handleRead(Timestamp receiveTime)  \n{  \nloop_->assertInLoopThread();  \nint savedErrno = 0;  \nssize_t n = inputBuffer_.readFd(channel_->fd(), &savedErrno); // 从 socket 读取数据到 inputBuffer_  \nif (n > 0)  \n{  \n// 调用用户在 TcpServer 中设置的 messageCallback_  \nmessageCallback_(shared_from_this(), &inputBuffer_, receiveTime);  \n}  \nelse if (n == 0) // 对端关闭  \n{  \nhandleClose();  \n}  \nelse // 错误  \n{  \nerrno = savedErrno;  \nLOG_SYSERR << \"TcpConnection::handleRead\";  \nhandleError(); // 通常也会调用 handleClose  \n}  \n}\n```\n\n\n用户通过 TcpServer::setMessageCallback 设置的回调函数会在这里被调用，参数包括 TcpConnectionPtr、存有接收数据的 Buffer* 以及时间戳。用户可以在回调中从 Buffer 中取出数据进行业务处理。\n\n这是处理读事件的时序图:\n\n![收到消息](/images/处理消息.png)\n\n## **事件三：消息发送完成 (WriteCompleteCallback)**\n\n当用户调用 TcpConnection::send() 发送数据时：\n\n1. 如果当前线程不是连接所属的 ioLoop，则将发送任务 sendInLoop 提交到 ioLoop 执行。\n2. sendInLoop 会尝试直接 write() 数据到 socket。\n    * 如果数据一次性全部写完，且用户设置了 writeCompleteCallback_，则将其提交到 ioLoop 的任务队列中执行。\n    * 如果数据没有一次性写完（例如内核发送缓冲区满），则将剩余数据存入 outputBuffer_，并使 channel_ 开始关注写事件 (enableWriting())。\n3. 当 socket 变为可写时，channel_ 的写事件回调 TcpConnection::handleWrite 被触发。\n4. handleWrite 会继续从 outputBuffer_ 中发送数据。如果所有数据都发送完毕，则取消对写事件的关注 (disableWriting())，并调用 writeCompleteCallback_。\n\n```c++\n// TcpConnection.cc (sendInLoop 核心逻辑)  \nvoid TcpConnection::sendInLoop(const void* data, size_t len)  \n{  \nloop_->assertInLoopThread();  \nssize_t nwrote = 0;  \nsize_t remaining = len;  \nbool faultError = false;  \nif (state_ == kDisconnected) { /* ... return ... */ }\n\n// 如果输出队列为空，尝试直接发送  \nif (!channel_->isWriting() && outputBuffer_.readableBytes() == 0)  \n{  \nnwrote = sockets::write(channel_->fd(), data, len);  \nif (nwrote >= 0)  \n{  \nremaining = len - nwrote;  \nif (remaining == 0 && writeCompleteCallback_) // 全部发送完毕  \n{  \nloop_->queueInLoop(std::bind(writeCompleteCallback_, shared_from_this()));  \n}  \n}  \nelse // nwrote < 0 (错误)  \n{  \n// ... 错误处理 ...  \n}  \n}\n\nif (!faultError && remaining > 0) // 如果还有数据未发送  \n{  \n// ... (检查高水位回调 HighWaterMarkCallback) ...  \noutputBuffer_.append(static_cast<const char*>(data)+nwrote, remaining); // 存入输出缓冲区  \nif (!channel_->isWriting())  \n{  \nchannel_->enableWriting(); // 开始关注写事件  \n}  \n}  \n}\n\n// TcpConnection.cc (构造函数中设置)  \nchannel_->setWriteCallback(  \nstd::bind(&TcpConnection::handleWrite, this));\n\n// TcpConnection.cc  \nvoid TcpConnection::handleWrite()  \n{  \nloop_->assertInLoopThread();  \nif (channel_->isWriting())  \n{  \nssize_t n = sockets::write(channel_->fd(),  \noutputBuffer_.peek(),  \noutputBuffer_.readableBytes());  \nif (n > 0)  \n{  \noutputBuffer_.retrieve(n);  \nif (outputBuffer_.readableBytes() == 0) // 输出缓冲区已空  \n{  \nchannel_->disableWriting(); // 不再关注写事件  \nif (writeCompleteCallback_)  \n{  \nloop_->queueInLoop(std::bind(writeCompleteCallback_, shared_from_this()));  \n}  \nif (state_ == kDisconnecting) // 如果正在关闭连接  \n{  \nshutdownInLoop();  \n}  \n}  \n}  \nelse  \n{  \nLOG_SYSERR << \"TcpConnection::handleWrite\";  \n}  \n}  \nelse  \n{  \nLOG_TRACE << \"Connection fd = \" << channel_->fd()  \n<< \" is down, no more writing\";  \n}  \n}\n```\n\n“消息发送完成”这个“半个事件”是通过 WriteCompleteCallback 来体现的，它在输出缓冲区的数据全部成功写入内核后被调用。\n\n因为写数据是用户关注的，如果一次性写完成就不必关心了，写不完就先放到buffer中，等到可写的时候，处理下写事件，将数据再次发送，发送完就不必关注了，这样也可以避免busyloop了\n\n这是上述过程的时序图\n\n![消息写完](/images/消息写完.png)\n\n## **事件四：连接关闭**\n\n连接关闭的触发点有多种：对端关闭（handleRead 读到 EOF）、本地主动关闭（用户调用 TcpConnection::shutdown()）、或发生错误（handleError） 。\n这些路径通常都会汇聚到 TcpConnection::handleClose()。\n\nTcpConnection 在构造时设置了其 channel_ 的关闭回调为 handleClose。\n\n```c++\n// TcpConnection.cc (构造函数中设置)  \nchannel_->setCloseCallback(  \nstd::bind(&TcpConnection::handleClose, this));  \n```\n\n`handleClose()` 的核心逻辑：  \n1.  断言在正确的 `ioLoop` 中执行。  \n2.  将连接状态设为 `kDisconnected`。  \n3.  调用 `channel_->disableAll()`，使该 `Channel` 不再关注任何事件。  \n4.  调用用户设置的 `connectionCallback_`（此时连接状态已变为 `kDisconnected`）。  \n5.  调用 `closeCallback_`（在 `TcpServer::newConnection` 中被绑定到 `TcpServer::removeConnection`）。\n\n```c++  \n// TcpConnection.cc  \nvoid TcpConnection::handleClose()  \n{  \nloop_->assertInLoopThread();  \nLOG_TRACE << \"fd = \" << channel_->fd() << \" state = \" << stateToString();  \nassert(state_ == kConnected || state_ == kDisconnecting);  \nsetState(kDisconnected);  \nchannel_->disableAll(); // 如果是那种建立过连接的文件描述符，在这一步就会被从poller移除了\n\nTcpConnectionPtr guardThis(shared_from_this()); // 确保回调期间对象存活  \nconnectionCallback_(guardThis);  \ncloseCallback_(guardThis); // 调用 TcpServer::removeConnection  \n}  \n```\n`TcpServer::removeConnection` 会将实际的移除操作（从 `connections_` map 中删除）提交到 `TcpServer` 的主 `EventLoop` 中执行（`removeConnectionInLoop`），以保证线程安全。之后，它会将最终的销毁操作 `TcpConnection::connectDestroyed` 提交回该连接所属的 I/O `EventLoop` 中执行。\n\n```c++  \n// TcpServer.cc  \nvoid TcpServer::removeConnection(const TcpConnectionPtr& conn)  \n{  \nloop_->runInLoop(std::bind(&TcpServer::removeConnectionInLoop, this, conn));  \n}\n\nvoid TcpServer::removeConnectionInLoop(const TcpConnectionPtr& conn)  \n{  \nloop_->assertInLoopThread();  \nLOG_INFO << \"TcpServer::removeConnectionInLoop [\" << name_  \n<< \"] - connection \" << conn->name();  \nconnections_.erase(conn->name()); // 从 TcpServer 管理的 map 中移除  \nEventLoop* ioLoop = conn->getLoop();  \n// 将最后的清理工作交给连接所属的 ioLoop  \nioLoop->queueInLoop(  \nstd::bind(&TcpConnection::connectDestroyed, conn));  \n}  \n``` \n`TcpConnection::connectDestroyed` 负责将 `Channel` 从其 `EventLoop` 的 `Poller` 中移除。\n\n```c++  \n// TcpConnection.cc  \nvoid TcpConnection::connectDestroyed()  \n{  \nloop_->assertInLoopThread();  \nif (state_ == kConnected) // 如果之前是连接状态，则先更新状态并调用回调  \n{  \nsetState(kDisconnected);  \nchannel_->disableAll();  \nconnectionCallback_(shared_from_this());  \n}  \nchannel_->remove(); // 从 Poller 中移除 Channel  \n}\n\n// Channel.cc  \nvoid Channel::remove()  \n{  \nassert(isNoneEvent());  \naddedToLoop_ = false;  \nloop_->removeChannel(this); // 通知 EventLoop 从 Poller 中移除  \n}\n```\n\nEventLoop::removeChannel 会调用 Poller::removeChannel，最终通过 epoll_ctl(EPOLL_CTL_DEL, ...) 将文件描述符从 epoll 实例中移除。\n\n这是关闭连接的时序图:\n\n![连接关闭](/images/连接关闭.png)\n当 TcpConnectionPtr 的最后一个 shared_ptr 引用（通常是在 connectDestroyed 的 std::bind 对象析构时）消失后，TcpConnection 对象及其拥有的 Socket（会在析构时关闭 fd）和 Channel 对象会被自动析构，完成资源的彻底回收。\n\n这一套精心设计的流程，严格遵守了“对象生命周期管理”和“线程封闭”的原则，确保了连接关闭的正确性和资源的有效释放。\n\n## **总结**\n\n通过对 muduo 中新连接建立、数据收发、连接关闭这“三个半事件”处理流程的分析，我们可以看到陈硕大佬是如何将这些网络编程中的核心操作，优雅地融入其基于对象的事件驱动框架中的。\n\n* **事件的统一处理入口：** EventLoop::loop() 是所有事件处理的起点。\n* **Channel 作为事件分发的核心：** 它封装了文件描述符和相关的事件回调。\n* **职责明确的类设计：** Acceptor 专注于接受新连接，TcpServer 负责管理和分发连接，TcpConnection 负责处理单个连接的生命周期和业务逻辑。\n* **线程安全的保证：** 通过 \"One Loop Per Thread\" 和 runInLoop/queueInLoop 机制，确保了所有对象的操作都在其所属的线程中执行。\n* **回调机制的广泛应用：** 将具体的业务逻辑与框架逻辑解耦，提高了灵活性和可扩展性。\n\n通过这些操作，在遵循陈硕大佬的 `基于对象` 的理念的前提下，完成了对“三个半事件”的处理。","source":"_posts/muduo/muduo源码剖析:02.事件的处理.md","raw":"---\ntitle: \"muduo源码剖析:02.事件的处理\"\ndate: 2025-08-27\ncategories: \n  - 源码分析\n  - muduo\ntags:\n  - C++\n  - muduo\n  - 网络库\n---\n## **前言**\n\n在上一篇文章《muduo 源码剖析（一）：深入 'One Loop Per Thread' 与 EventLoop 的实现》中，我们分析了 muduo 如何通过 EventLoopThreadPool 和 EventLoopThread 实现 \"One Loop Per Thread\" 的并发模型，以及 EventLoop 如何通过 eventfd 机制支持跨线程的任务提交。这些是 muduo 事件驱动框架的基石。\n\n本文我们将聚焦于网络编程的核心——TCP 连接，以及陈硕大佬提出的“三个半事件”中的核心部分：**新连接的建立与分发、连接上数据的接收与发送、以及连接的关闭与资源回收**。我们将深入探讨在 muduo 中，这些事件是如何被优雅地融入其基于对象的事件驱动框架中的。\n<!-- more -->\n## **EventLoop::loop()：事件处理的核心驱动**\n\n在深入具体事件之前，我们首先需要理解 EventLoop 的主循环 loop() 是如何驱动事件处理的。其核心逻辑非常直观：\n\n1. 调用 Poller::poll() (底层通常是 epoll_wait) 等待 I/O 事件的发生，或者等待被 wakeupFd_ 唤醒。\n2. 获取到活跃的 Channel 列表 (activeChannels_)。\n3. 遍历 activeChannels_，对每个 Channel 调用其 handleEvent() 方法。\n4. 执行所有通过 runInLoop 或 queueInLoop 提交的待处理任务 (doPendingFunctors())。\n\n```c++\nvoid EventLoop::loop()  \n{  \nassert(!looping_);  \nassertInLoopThread();  \nlooping_ = true;  \nquit_ = false;  // FIXME: what if someone calls quit() before loop() ?  \nLOG_TRACE << \"EventLoop \" << this << \" start looping\";\n\nwhile (!quit_)  \n{  \nactiveChannels_.clear();  \n// 1. 等待事件发生  \npollReturnTime_ = poller_->poll(kPollTimeMs, &activeChannels_);  \n++iteration_;  \nif (Logger::logLevel() <= Logger::TRACE)  \n{  \nprintActiveChannels();  \n}  \neventHandling_ = true;  \n// 2. 处理活跃 Channel 的事件  \nfor (Channel* channel : activeChannels_)  \n{  \ncurrentActiveChannel_ = channel;  \ncurrentActiveChannel_->handleEvent(pollReturnTime_);  \n}  \ncurrentActiveChannel_ = NULL;  \neventHandling_ = false;  \n// 3. 执行 EventLoop 内部任务队列中的任务  \ndoPendingFunctors();  \n}\n\nLOG_TRACE << \"EventLoop \" << this << \" stop looping\";  \nlooping_ = false;  \n}  \n```\n\n`Poller` (以 `EPollPoller` 为例) 的 `poll()` 方法负责调用 `epoll_wait`，并将返回的就绪事件填充到 `activeChannels` 列表中。\n\n```c++\n// EPollPoller.cc  \nTimestamp EPollPoller::poll(int timeoutMs, ChannelList* activeChannels)  \n{  \nLOG_TRACE << \"fd total count \" << channels_.size();  \nint numEvents = ::epoll_wait(epollfd_,  \n&*events_.begin(), // events_ 是 epoll_event 数组  \nstatic_cast<int>(events_.size()),  \ntimeoutMs);  \nint savedErrno = errno;  \nTimestamp now(Timestamp::now());  \nif (numEvents > 0)  \n{  \nLOG_TRACE << numEvents << \" events happened\";  \nfillActiveChannels(numEvents, activeChannels); // 将就绪事件转换为 Channel  \nif (implicit_cast<size_t>(numEvents) == events_.size()) // 如果 epoll_event 数组满了，则扩容  \n{  \nevents_.resize(events_.size()*2);  \n}  \n}  \nelse if (numEvents == 0)  \n{  \nLOG_TRACE << \"nothing happened\";  \n}  \nelse // 出错处理  \n{  \nif (savedErrno != EINTR)  \n{  \nerrno = savedErrno;  \nLOG_SYSERR << \"EPollPoller::poll()\";  \n}  \n}  \nreturn now;  \n}\n\nvoid EPollPoller::fillActiveChannels(int numEvents,  \nChannelList* activeChannels) const  \n{  \nassert(implicit_cast<size_t>(numEvents) <= events_.size());  \nfor (int i = 0; i < numEvents; ++i)  \n{  \n// 注册时将 Channel* 存放在 epoll_event 的 data.ptr 中  \nChannel* channel = static_cast<Channel*>(events_[i].data.ptr);  \n// ... (省略 NDEBUG 下的断言检查) ...  \nchannel->set_revents(events_[i].events); // 设置 Channel 实际发生的事件  \nactiveChannels->push_back(channel);  \n}  \n}\n``` \n\n当 EventLoop 获取到活跃的 Channel 后，会调用 Channel::handleEvent()。\n这个方法是事件分发的枢纽，它根据 Channel 上实际发生的事件类型 (revents_)，调用相应的回调函数。\n\n```c++\n// Channel.cc  \nvoid Channel::handleEvent(Timestamp receiveTime)  \n{  \nstd::shared_ptr<void> guard;  \nif (tied_) // 如果 Channel 与某个对象（通常是 TcpConnection）绑定了生命周期  \n{  \nguard = tie_.lock(); // 尝试获取对象的 shared_ptr  \nif (guard) // 对象仍然存活  \n{  \nhandleEventWithGuard(receiveTime);  \n}  \n// 如果 guard 为空，说明对象已销毁，Channel 不再处理事件  \n}  \nelse // 未绑定生命周期  \n{  \nhandleEventWithGuard(receiveTime);  \n}  \n}\n\nvoid Channel::handleEventWithGuard(Timestamp receiveTime)  \n{  \neventHandling_ = true;  \nLOG_TRACE << reventsToString();  \n// 对端关闭连接 (POLLHUP)，并且没有可读数据 (POLLIN)  \nif ((revents_ & POLLHUP) && !(revents_ & POLLIN))  \n{  \nif (logHup_)  \n{  \nLOG_WARN << \"fd = \" << fd_ << \" Channel::handle_event() POLLHUP\";  \n}  \nif (closeCallback_) closeCallback_(); // 执行关闭回调  \n}\n\nif (revents_ & POLLNVAL) // 无效的请求，通常是 fd 已关闭  \n{  \nLOG_WARN << \"fd = \" << fd_ << \" Channel::handle_event() POLLNVAL\";  \n}\n\n// 错误事件 (POLLERR) 或无效请求 (POLLNVAL)  \nif (revents_ & (POLLERR | POLLNVAL))  \n{  \nif (errorCallback_) errorCallback_(); // 执行错误回调  \n}  \n// 可读事件 (POLLIN)、高优先级可读 (POLLPRI)、对端关闭连接且仍有数据可读 (POLLRDHUP)  \nif (revents_ & (POLLIN | POLLPRI | POLLRDHUP))  \n{  \nif (readCallback_) readCallback_(receiveTime); // 执行读回调  \n}  \n// 可写事件 (POLLOUT)  \nif (revents_ & POLLOUT)  \n{  \nif (writeCallback_) writeCallback_(); // 执行写回调  \n}  \neventHandling_ = false;  \n}\n```\n\n下面的就是loop事件循环的时序图:\n\n![loop循环](/images/loop循环.png)\n\n理解了 EventLoop 的核心驱动逻辑和 Channel 的事件分发机制后，我们就可以具体分析“三个半事件”的处理了。\n\n## **事件一：新连接的建立与分发**\n\n学习过 Linux 网络编程的都知道，服务器接受新连接的基本流程是 socket -> bind -> listen -> accept。muduo 将这个过程优雅地封装在 Acceptor 和 TcpServer 类中。\n\n### **1. Acceptor：新连接的接收者**\n\nTcpServer 在构造时会创建一个 Acceptor 对象，并将其与主 EventLoop 关联。\nAcceptor 负责创建监听套接字、绑定地址、并设置当有新连接到来时（监听套接字可读）的回调函数为 Acceptor::handleRead。\n\n```c++\n// TcpServer.cc (构造函数部分)  \nTcpServer::TcpServer(EventLoop* loop,  \nconst InetAddress& listenAddr,  \nconst string& nameArg,  \nOption option)  \n: loop_(CHECK_NOTNULL(loop)),  \nacceptor_(new Acceptor(loop, listenAddr, option == kReusePort)),  \n// ...  \n{  \nacceptor_->setNewConnectionCallback(  \nstd::bind(&TcpServer::newConnection, this, _1, _2));  \n}\n\n// Acceptor.cc (构造函数部分)\nAcceptor::Acceptor(EventLoop* loop, const InetAddress& listenAddr, bool reuseport)\n: loop_(loop),  \nacceptSocket_(sockets::createNonblockingOrDie(listenAddr.family())),  \nacceptChannel_(loop, acceptSocket_.fd()), // 为监听套接字创建 Channel  \n// ...  \n{  \n// ...  \nacceptSocket_.bindAddress(listenAddr);  \nacceptChannel_.setReadCallback(  \nstd::bind(&Acceptor::handleRead, this)); // 设置 Channel 的读回调  \n}  \n```\n\n调用`TcpServer::start()` 时，会通过 `loop_->runInLoop()` 调用 `Acceptor::listen()`，该方法会调用 `listen()` 系统调用并使 `acceptChannel_` 开始关注读事件。\n\n```c++  \n// Acceptor.cc  \nvoid Acceptor::listen()  \n{  \nloop_->assertInLoopThread();  \nlistenning_ = true;  \nacceptSocket_.listen();  \nacceptChannel_.enableReading(); // 将 acceptChannel_ 加入 Poller 监听  \n}\n```\n\n当新连接到达时，acceptChannel_ 的 handleRead 被触发：\n\n```c++\n// Acceptor.cc  \nvoid Acceptor::handleRead()  \n{  \nloop_->assertInLoopThread();  \nInetAddress peerAddr;  \nint connfd = acceptSocket_.accept(&peerAddr); // 接受新连接  \nif (connfd >= 0)  \n{  \nif (newConnectionCallback_)  \n{  \nnewConnectionCallback_(connfd, peerAddr); // 调用 TcpServer::newConnection  \n}  \nelse  \n{  \nsockets::close(connfd);  \n}  \n}  \n// ... (错误处理和 EMFILE 处理) ...  \n}\n```\n\n### **2. TcpServer::newConnection：连接的分发**\n\nAcceptor 将新接受的 connfd 和对端地址传递给 TcpServer::newConnection。此方法的核心职责是：\n\n1. 从 EventLoopThreadPool 中通过轮询选择一个 I/O EventLoop。\n2. 为新连接创建一个 TcpConnection 对象，并将选择的 I/O EventLoop 传递给它。\n3. 设置 TcpConnection 的各种回调（连接状态、消息到达、写完成、关闭）。\n4. 将 TcpConnection::connectEstablished 方法提交到选定的 I/O EventLoop 中执行。\n\n```c++\n// TcpServer.cc  \nvoid TcpServer::newConnection(int sockfd, const InetAddress& peerAddr)  \n{  \nloop_->assertInLoopThread(); // 确保在主 EventLoop 中  \nEventLoop* ioLoop = threadPool_->getNextLoop(); // 轮询选择 I/O Loop  \n// ... (生成连接名 connName) ...  \nTcpConnectionPtr conn(new TcpConnection(ioLoop, // 将 ioLoop 传递给 TcpConnection  \nconnName,  \nsockfd,  \nlocalAddr,  \npeerAddr));  \nconnections_[connName] = conn; // 保存连接  \n// ... (设置各种回调) ...  \nconn->setCloseCallback(  \nstd::bind(&TcpServer::removeConnection, this, _1));  \n// 将连接建立的后续操作交给 ioLoop 执行  \nioLoop->runInLoop(std::bind(&TcpConnection::connectEstablished, conn));  \n}\n```\n\n### **3. TcpConnection::connectEstablished：连接的最终建立**\n\n此方法在选定的 I/O EventLoop 线程中执行，完成连接的最后步骤：\n\n```c++\n// TcpConnection.cc  \nvoid TcpConnection::connectEstablished()  \n{  \nloop_->assertInLoopThread(); // 确保在 ioLoop 中  \nassert(state_ == kConnecting);  \nsetState(kConnected);  \nchannel_->tie(shared_from_this()); // 绑定生命周期  \nchannel_->enableReading(); // 开始关注该连接上的读事件  \nconnectionCallback_(shared_from_this()); // 调用用户设置的连接建立回调  \n}\n```\n\n至此，新连接的建立和分发完成，后续该连接上的所有 I/O 事件都将在其被分配到的 I/O EventLoop 线程中处理。\n\n这是建立连接的时序图：\n\n![建立新连接](/images/建立新连接.png)\n## **事件二：收到消息 (MessageCallback)**\n\n当客户端发送数据时，TcpConnection 对应的 channel_ 会触发读事件，进而调用 TcpConnection::handleRead。\n\n```c++\n// TcpConnection.cc (构造函数中设置)  \nchannel_->setReadCallback(  \nstd::bind(&TcpConnection::handleRead, this, _1));\n\n// TcpConnection.cc  \nvoid TcpConnection::handleRead(Timestamp receiveTime)  \n{  \nloop_->assertInLoopThread();  \nint savedErrno = 0;  \nssize_t n = inputBuffer_.readFd(channel_->fd(), &savedErrno); // 从 socket 读取数据到 inputBuffer_  \nif (n > 0)  \n{  \n// 调用用户在 TcpServer 中设置的 messageCallback_  \nmessageCallback_(shared_from_this(), &inputBuffer_, receiveTime);  \n}  \nelse if (n == 0) // 对端关闭  \n{  \nhandleClose();  \n}  \nelse // 错误  \n{  \nerrno = savedErrno;  \nLOG_SYSERR << \"TcpConnection::handleRead\";  \nhandleError(); // 通常也会调用 handleClose  \n}  \n}\n```\n\n\n用户通过 TcpServer::setMessageCallback 设置的回调函数会在这里被调用，参数包括 TcpConnectionPtr、存有接收数据的 Buffer* 以及时间戳。用户可以在回调中从 Buffer 中取出数据进行业务处理。\n\n这是处理读事件的时序图:\n\n![收到消息](/images/处理消息.png)\n\n## **事件三：消息发送完成 (WriteCompleteCallback)**\n\n当用户调用 TcpConnection::send() 发送数据时：\n\n1. 如果当前线程不是连接所属的 ioLoop，则将发送任务 sendInLoop 提交到 ioLoop 执行。\n2. sendInLoop 会尝试直接 write() 数据到 socket。\n    * 如果数据一次性全部写完，且用户设置了 writeCompleteCallback_，则将其提交到 ioLoop 的任务队列中执行。\n    * 如果数据没有一次性写完（例如内核发送缓冲区满），则将剩余数据存入 outputBuffer_，并使 channel_ 开始关注写事件 (enableWriting())。\n3. 当 socket 变为可写时，channel_ 的写事件回调 TcpConnection::handleWrite 被触发。\n4. handleWrite 会继续从 outputBuffer_ 中发送数据。如果所有数据都发送完毕，则取消对写事件的关注 (disableWriting())，并调用 writeCompleteCallback_。\n\n```c++\n// TcpConnection.cc (sendInLoop 核心逻辑)  \nvoid TcpConnection::sendInLoop(const void* data, size_t len)  \n{  \nloop_->assertInLoopThread();  \nssize_t nwrote = 0;  \nsize_t remaining = len;  \nbool faultError = false;  \nif (state_ == kDisconnected) { /* ... return ... */ }\n\n// 如果输出队列为空，尝试直接发送  \nif (!channel_->isWriting() && outputBuffer_.readableBytes() == 0)  \n{  \nnwrote = sockets::write(channel_->fd(), data, len);  \nif (nwrote >= 0)  \n{  \nremaining = len - nwrote;  \nif (remaining == 0 && writeCompleteCallback_) // 全部发送完毕  \n{  \nloop_->queueInLoop(std::bind(writeCompleteCallback_, shared_from_this()));  \n}  \n}  \nelse // nwrote < 0 (错误)  \n{  \n// ... 错误处理 ...  \n}  \n}\n\nif (!faultError && remaining > 0) // 如果还有数据未发送  \n{  \n// ... (检查高水位回调 HighWaterMarkCallback) ...  \noutputBuffer_.append(static_cast<const char*>(data)+nwrote, remaining); // 存入输出缓冲区  \nif (!channel_->isWriting())  \n{  \nchannel_->enableWriting(); // 开始关注写事件  \n}  \n}  \n}\n\n// TcpConnection.cc (构造函数中设置)  \nchannel_->setWriteCallback(  \nstd::bind(&TcpConnection::handleWrite, this));\n\n// TcpConnection.cc  \nvoid TcpConnection::handleWrite()  \n{  \nloop_->assertInLoopThread();  \nif (channel_->isWriting())  \n{  \nssize_t n = sockets::write(channel_->fd(),  \noutputBuffer_.peek(),  \noutputBuffer_.readableBytes());  \nif (n > 0)  \n{  \noutputBuffer_.retrieve(n);  \nif (outputBuffer_.readableBytes() == 0) // 输出缓冲区已空  \n{  \nchannel_->disableWriting(); // 不再关注写事件  \nif (writeCompleteCallback_)  \n{  \nloop_->queueInLoop(std::bind(writeCompleteCallback_, shared_from_this()));  \n}  \nif (state_ == kDisconnecting) // 如果正在关闭连接  \n{  \nshutdownInLoop();  \n}  \n}  \n}  \nelse  \n{  \nLOG_SYSERR << \"TcpConnection::handleWrite\";  \n}  \n}  \nelse  \n{  \nLOG_TRACE << \"Connection fd = \" << channel_->fd()  \n<< \" is down, no more writing\";  \n}  \n}\n```\n\n“消息发送完成”这个“半个事件”是通过 WriteCompleteCallback 来体现的，它在输出缓冲区的数据全部成功写入内核后被调用。\n\n因为写数据是用户关注的，如果一次性写完成就不必关心了，写不完就先放到buffer中，等到可写的时候，处理下写事件，将数据再次发送，发送完就不必关注了，这样也可以避免busyloop了\n\n这是上述过程的时序图\n\n![消息写完](/images/消息写完.png)\n\n## **事件四：连接关闭**\n\n连接关闭的触发点有多种：对端关闭（handleRead 读到 EOF）、本地主动关闭（用户调用 TcpConnection::shutdown()）、或发生错误（handleError） 。\n这些路径通常都会汇聚到 TcpConnection::handleClose()。\n\nTcpConnection 在构造时设置了其 channel_ 的关闭回调为 handleClose。\n\n```c++\n// TcpConnection.cc (构造函数中设置)  \nchannel_->setCloseCallback(  \nstd::bind(&TcpConnection::handleClose, this));  \n```\n\n`handleClose()` 的核心逻辑：  \n1.  断言在正确的 `ioLoop` 中执行。  \n2.  将连接状态设为 `kDisconnected`。  \n3.  调用 `channel_->disableAll()`，使该 `Channel` 不再关注任何事件。  \n4.  调用用户设置的 `connectionCallback_`（此时连接状态已变为 `kDisconnected`）。  \n5.  调用 `closeCallback_`（在 `TcpServer::newConnection` 中被绑定到 `TcpServer::removeConnection`）。\n\n```c++  \n// TcpConnection.cc  \nvoid TcpConnection::handleClose()  \n{  \nloop_->assertInLoopThread();  \nLOG_TRACE << \"fd = \" << channel_->fd() << \" state = \" << stateToString();  \nassert(state_ == kConnected || state_ == kDisconnecting);  \nsetState(kDisconnected);  \nchannel_->disableAll(); // 如果是那种建立过连接的文件描述符，在这一步就会被从poller移除了\n\nTcpConnectionPtr guardThis(shared_from_this()); // 确保回调期间对象存活  \nconnectionCallback_(guardThis);  \ncloseCallback_(guardThis); // 调用 TcpServer::removeConnection  \n}  \n```\n`TcpServer::removeConnection` 会将实际的移除操作（从 `connections_` map 中删除）提交到 `TcpServer` 的主 `EventLoop` 中执行（`removeConnectionInLoop`），以保证线程安全。之后，它会将最终的销毁操作 `TcpConnection::connectDestroyed` 提交回该连接所属的 I/O `EventLoop` 中执行。\n\n```c++  \n// TcpServer.cc  \nvoid TcpServer::removeConnection(const TcpConnectionPtr& conn)  \n{  \nloop_->runInLoop(std::bind(&TcpServer::removeConnectionInLoop, this, conn));  \n}\n\nvoid TcpServer::removeConnectionInLoop(const TcpConnectionPtr& conn)  \n{  \nloop_->assertInLoopThread();  \nLOG_INFO << \"TcpServer::removeConnectionInLoop [\" << name_  \n<< \"] - connection \" << conn->name();  \nconnections_.erase(conn->name()); // 从 TcpServer 管理的 map 中移除  \nEventLoop* ioLoop = conn->getLoop();  \n// 将最后的清理工作交给连接所属的 ioLoop  \nioLoop->queueInLoop(  \nstd::bind(&TcpConnection::connectDestroyed, conn));  \n}  \n``` \n`TcpConnection::connectDestroyed` 负责将 `Channel` 从其 `EventLoop` 的 `Poller` 中移除。\n\n```c++  \n// TcpConnection.cc  \nvoid TcpConnection::connectDestroyed()  \n{  \nloop_->assertInLoopThread();  \nif (state_ == kConnected) // 如果之前是连接状态，则先更新状态并调用回调  \n{  \nsetState(kDisconnected);  \nchannel_->disableAll();  \nconnectionCallback_(shared_from_this());  \n}  \nchannel_->remove(); // 从 Poller 中移除 Channel  \n}\n\n// Channel.cc  \nvoid Channel::remove()  \n{  \nassert(isNoneEvent());  \naddedToLoop_ = false;  \nloop_->removeChannel(this); // 通知 EventLoop 从 Poller 中移除  \n}\n```\n\nEventLoop::removeChannel 会调用 Poller::removeChannel，最终通过 epoll_ctl(EPOLL_CTL_DEL, ...) 将文件描述符从 epoll 实例中移除。\n\n这是关闭连接的时序图:\n\n![连接关闭](/images/连接关闭.png)\n当 TcpConnectionPtr 的最后一个 shared_ptr 引用（通常是在 connectDestroyed 的 std::bind 对象析构时）消失后，TcpConnection 对象及其拥有的 Socket（会在析构时关闭 fd）和 Channel 对象会被自动析构，完成资源的彻底回收。\n\n这一套精心设计的流程，严格遵守了“对象生命周期管理”和“线程封闭”的原则，确保了连接关闭的正确性和资源的有效释放。\n\n## **总结**\n\n通过对 muduo 中新连接建立、数据收发、连接关闭这“三个半事件”处理流程的分析，我们可以看到陈硕大佬是如何将这些网络编程中的核心操作，优雅地融入其基于对象的事件驱动框架中的。\n\n* **事件的统一处理入口：** EventLoop::loop() 是所有事件处理的起点。\n* **Channel 作为事件分发的核心：** 它封装了文件描述符和相关的事件回调。\n* **职责明确的类设计：** Acceptor 专注于接受新连接，TcpServer 负责管理和分发连接，TcpConnection 负责处理单个连接的生命周期和业务逻辑。\n* **线程安全的保证：** 通过 \"One Loop Per Thread\" 和 runInLoop/queueInLoop 机制，确保了所有对象的操作都在其所属的线程中执行。\n* **回调机制的广泛应用：** 将具体的业务逻辑与框架逻辑解耦，提高了灵活性和可扩展性。\n\n通过这些操作，在遵循陈硕大佬的 `基于对象` 的理念的前提下，完成了对“三个半事件”的处理。","slug":"muduo/muduo源码剖析:02.事件的处理","published":1,"updated":"2025-08-28T12:46:45.056Z","_id":"cmevecvsg001qhfrodzv54ghi","comments":1,"layout":"post","photos":[],"content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a><strong>前言</strong></h2><p>在上一篇文章《muduo 源码剖析（一）：深入 ‘One Loop Per Thread’ 与 EventLoop 的实现》中，我们分析了 muduo 如何通过 EventLoopThreadPool 和 EventLoopThread 实现 “One Loop Per Thread” 的并发模型，以及 EventLoop 如何通过 eventfd 机制支持跨线程的任务提交。这些是 muduo 事件驱动框架的基石。</p>\n<p>本文我们将聚焦于网络编程的核心——TCP 连接，以及陈硕大佬提出的“三个半事件”中的核心部分：<strong>新连接的建立与分发、连接上数据的接收与发送、以及连接的关闭与资源回收</strong>。我们将深入探讨在 muduo 中，这些事件是如何被优雅地融入其基于对象的事件驱动框架中的。</p>\n<span id=\"more\"></span>\n<h2 id=\"EventLoop-loop-：事件处理的核心驱动\"><a href=\"#EventLoop-loop-：事件处理的核心驱动\" class=\"headerlink\" title=\"EventLoop::loop()：事件处理的核心驱动\"></a><strong>EventLoop::loop()：事件处理的核心驱动</strong></h2><p>在深入具体事件之前，我们首先需要理解 EventLoop 的主循环 loop() 是如何驱动事件处理的。其核心逻辑非常直观：</p>\n<ol>\n<li>调用 Poller::poll() (底层通常是 epoll_wait) 等待 I&#x2F;O 事件的发生，或者等待被 wakeupFd_ 唤醒。</li>\n<li>获取到活跃的 Channel 列表 (activeChannels_)。</li>\n<li>遍历 activeChannels_，对每个 Channel 调用其 handleEvent() 方法。</li>\n<li>执行所有通过 runInLoop 或 queueInLoop 提交的待处理任务 (doPendingFunctors())。</li>\n</ol>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">EventLoop::loop</span><span class=\"params\">()</span>  </span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;  </span><br><span class=\"line\"><span class=\"built_in\">assert</span>(!looping_);  </span><br><span class=\"line\"><span class=\"built_in\">assertInLoopThread</span>();  </span><br><span class=\"line\">looping_ = <span class=\"literal\">true</span>;  </span><br><span class=\"line\">quit_ = <span class=\"literal\">false</span>;  <span class=\"comment\">// <span class=\"doctag\">FIXME:</span> what if someone calls quit() before loop() ?  </span></span><br><span class=\"line\">LOG_TRACE &lt;&lt; <span class=\"string\">&quot;EventLoop &quot;</span> &lt;&lt; <span class=\"keyword\">this</span> &lt;&lt; <span class=\"string\">&quot; start looping&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">while</span> (!quit_)  </span><br><span class=\"line\">&#123;  </span><br><span class=\"line\">activeChannels_.<span class=\"built_in\">clear</span>();  </span><br><span class=\"line\"><span class=\"comment\">// 1. 等待事件发生  </span></span><br><span class=\"line\">pollReturnTime_ = poller_-&gt;<span class=\"built_in\">poll</span>(kPollTimeMs, &amp;activeChannels_);  </span><br><span class=\"line\">++iteration_;  </span><br><span class=\"line\"><span class=\"keyword\">if</span> (Logger::<span class=\"built_in\">logLevel</span>() &lt;= Logger::TRACE)  </span><br><span class=\"line\">&#123;  </span><br><span class=\"line\"><span class=\"built_in\">printActiveChannels</span>();  </span><br><span class=\"line\">&#125;  </span><br><span class=\"line\">eventHandling_ = <span class=\"literal\">true</span>;  </span><br><span class=\"line\"><span class=\"comment\">// 2. 处理活跃 Channel 的事件  </span></span><br><span class=\"line\"><span class=\"keyword\">for</span> (Channel* channel : activeChannels_)  </span><br><span class=\"line\">&#123;  </span><br><span class=\"line\">currentActiveChannel_ = channel;  </span><br><span class=\"line\">currentActiveChannel_-&gt;<span class=\"built_in\">handleEvent</span>(pollReturnTime_);  </span><br><span class=\"line\">&#125;  </span><br><span class=\"line\">currentActiveChannel_ = <span class=\"literal\">NULL</span>;  </span><br><span class=\"line\">eventHandling_ = <span class=\"literal\">false</span>;  </span><br><span class=\"line\"><span class=\"comment\">// 3. 执行 EventLoop 内部任务队列中的任务  </span></span><br><span class=\"line\"><span class=\"built_in\">doPendingFunctors</span>();  </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">LOG_TRACE &lt;&lt; <span class=\"string\">&quot;EventLoop &quot;</span> &lt;&lt; <span class=\"keyword\">this</span> &lt;&lt; <span class=\"string\">&quot; stop looping&quot;</span>;  </span><br><span class=\"line\">looping_ = <span class=\"literal\">false</span>;  </span><br><span class=\"line\">&#125;  </span><br></pre></td></tr></table></figure>\n\n<p><code>Poller</code> (以 <code>EPollPoller</code> 为例) 的 <code>poll()</code> 方法负责调用 <code>epoll_wait</code>，并将返回的就绪事件填充到 <code>activeChannels</code> 列表中。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// EPollPoller.cc  </span></span><br><span class=\"line\"><span class=\"function\">Timestamp <span class=\"title\">EPollPoller::poll</span><span class=\"params\">(<span class=\"type\">int</span> timeoutMs, ChannelList* activeChannels)</span>  </span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;  </span><br><span class=\"line\">LOG_TRACE &lt;&lt; <span class=\"string\">&quot;fd total count &quot;</span> &lt;&lt; channels_.<span class=\"built_in\">size</span>();  </span><br><span class=\"line\"><span class=\"type\">int</span> numEvents = ::<span class=\"built_in\">epoll_wait</span>(epollfd_,  </span><br><span class=\"line\">&amp;*events_.<span class=\"built_in\">begin</span>(), <span class=\"comment\">// events_ 是 epoll_event 数组  </span></span><br><span class=\"line\"><span class=\"built_in\">static_cast</span>&lt;<span class=\"type\">int</span>&gt;(events_.<span class=\"built_in\">size</span>()),  </span><br><span class=\"line\">timeoutMs);  </span><br><span class=\"line\"><span class=\"type\">int</span> savedErrno = errno;  </span><br><span class=\"line\"><span class=\"function\">Timestamp <span class=\"title\">now</span><span class=\"params\">(Timestamp::now())</span></span>;  </span><br><span class=\"line\"><span class=\"keyword\">if</span> (numEvents &gt; <span class=\"number\">0</span>)  </span><br><span class=\"line\">&#123;  </span><br><span class=\"line\">LOG_TRACE &lt;&lt; numEvents &lt;&lt; <span class=\"string\">&quot; events happened&quot;</span>;  </span><br><span class=\"line\"><span class=\"built_in\">fillActiveChannels</span>(numEvents, activeChannels); <span class=\"comment\">// 将就绪事件转换为 Channel  </span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"built_in\">implicit_cast</span>&lt;<span class=\"type\">size_t</span>&gt;(numEvents) == events_.<span class=\"built_in\">size</span>()) <span class=\"comment\">// 如果 epoll_event 数组满了，则扩容  </span></span><br><span class=\"line\">&#123;  </span><br><span class=\"line\">events_.<span class=\"built_in\">resize</span>(events_.<span class=\"built_in\">size</span>()*<span class=\"number\">2</span>);  </span><br><span class=\"line\">&#125;  </span><br><span class=\"line\">&#125;  </span><br><span class=\"line\"><span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (numEvents == <span class=\"number\">0</span>)  </span><br><span class=\"line\">&#123;  </span><br><span class=\"line\">LOG_TRACE &lt;&lt; <span class=\"string\">&quot;nothing happened&quot;</span>;  </span><br><span class=\"line\">&#125;  </span><br><span class=\"line\"><span class=\"keyword\">else</span> <span class=\"comment\">// 出错处理  </span></span><br><span class=\"line\">&#123;  </span><br><span class=\"line\"><span class=\"keyword\">if</span> (savedErrno != EINTR)  </span><br><span class=\"line\">&#123;  </span><br><span class=\"line\">errno = savedErrno;  </span><br><span class=\"line\">LOG_SYSERR &lt;&lt; <span class=\"string\">&quot;EPollPoller::poll()&quot;</span>;  </span><br><span class=\"line\">&#125;  </span><br><span class=\"line\">&#125;  </span><br><span class=\"line\"><span class=\"keyword\">return</span> now;  </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">EPollPoller::fillActiveChannels</span><span class=\"params\">(<span class=\"type\">int</span> numEvents,  </span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">ChannelList* activeChannels)</span> <span class=\"type\">const</span>  </span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;  </span><br><span class=\"line\"><span class=\"built_in\">assert</span>(<span class=\"built_in\">implicit_cast</span>&lt;<span class=\"type\">size_t</span>&gt;(numEvents) &lt;= events_.<span class=\"built_in\">size</span>());  </span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; numEvents; ++i)  </span><br><span class=\"line\">&#123;  </span><br><span class=\"line\"><span class=\"comment\">// 注册时将 Channel* 存放在 epoll_event 的 data.ptr 中  </span></span><br><span class=\"line\">Channel* channel = <span class=\"built_in\">static_cast</span>&lt;Channel*&gt;(events_[i].data.ptr);  </span><br><span class=\"line\"><span class=\"comment\">// ... (省略 NDEBUG 下的断言检查) ...  </span></span><br><span class=\"line\">channel-&gt;<span class=\"built_in\">set_revents</span>(events_[i].events); <span class=\"comment\">// 设置 Channel 实际发生的事件  </span></span><br><span class=\"line\">activeChannels-&gt;<span class=\"built_in\">push_back</span>(channel);  </span><br><span class=\"line\">&#125;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>当 EventLoop 获取到活跃的 Channel 后，会调用 Channel::handleEvent()。<br>这个方法是事件分发的枢纽，它根据 Channel 上实际发生的事件类型 (revents_)，调用相应的回调函数。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Channel.cc  </span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">Channel::handleEvent</span><span class=\"params\">(Timestamp receiveTime)</span>  </span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;  </span><br><span class=\"line\">std::shared_ptr&lt;<span class=\"type\">void</span>&gt; guard;  </span><br><span class=\"line\"><span class=\"keyword\">if</span> (tied_) <span class=\"comment\">// 如果 Channel 与某个对象（通常是 TcpConnection）绑定了生命周期  </span></span><br><span class=\"line\">&#123;  </span><br><span class=\"line\">guard = tie_.<span class=\"built_in\">lock</span>(); <span class=\"comment\">// 尝试获取对象的 shared_ptr  </span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (guard) <span class=\"comment\">// 对象仍然存活  </span></span><br><span class=\"line\">&#123;  </span><br><span class=\"line\"><span class=\"built_in\">handleEventWithGuard</span>(receiveTime);  </span><br><span class=\"line\">&#125;  </span><br><span class=\"line\"><span class=\"comment\">// 如果 guard 为空，说明对象已销毁，Channel 不再处理事件  </span></span><br><span class=\"line\">&#125;  </span><br><span class=\"line\"><span class=\"keyword\">else</span> <span class=\"comment\">// 未绑定生命周期  </span></span><br><span class=\"line\">&#123;  </span><br><span class=\"line\"><span class=\"built_in\">handleEventWithGuard</span>(receiveTime);  </span><br><span class=\"line\">&#125;  </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">Channel::handleEventWithGuard</span><span class=\"params\">(Timestamp receiveTime)</span>  </span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;  </span><br><span class=\"line\">eventHandling_ = <span class=\"literal\">true</span>;  </span><br><span class=\"line\">LOG_TRACE &lt;&lt; <span class=\"built_in\">reventsToString</span>();  </span><br><span class=\"line\"><span class=\"comment\">// 对端关闭连接 (POLLHUP)，并且没有可读数据 (POLLIN)  </span></span><br><span class=\"line\"><span class=\"keyword\">if</span> ((revents_ &amp; POLLHUP) &amp;&amp; !(revents_ &amp; POLLIN))  </span><br><span class=\"line\">&#123;  </span><br><span class=\"line\"><span class=\"keyword\">if</span> (logHup_)  </span><br><span class=\"line\">&#123;  </span><br><span class=\"line\">LOG_WARN &lt;&lt; <span class=\"string\">&quot;fd = &quot;</span> &lt;&lt; fd_ &lt;&lt; <span class=\"string\">&quot; Channel::handle_event() POLLHUP&quot;</span>;  </span><br><span class=\"line\">&#125;  </span><br><span class=\"line\"><span class=\"keyword\">if</span> (closeCallback_) <span class=\"built_in\">closeCallback_</span>(); <span class=\"comment\">// 执行关闭回调  </span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> (revents_ &amp; POLLNVAL) <span class=\"comment\">// 无效的请求，通常是 fd 已关闭  </span></span><br><span class=\"line\">&#123;  </span><br><span class=\"line\">LOG_WARN &lt;&lt; <span class=\"string\">&quot;fd = &quot;</span> &lt;&lt; fd_ &lt;&lt; <span class=\"string\">&quot; Channel::handle_event() POLLNVAL&quot;</span>;  </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 错误事件 (POLLERR) 或无效请求 (POLLNVAL)  </span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (revents_ &amp; (POLLERR | POLLNVAL))  </span><br><span class=\"line\">&#123;  </span><br><span class=\"line\"><span class=\"keyword\">if</span> (errorCallback_) <span class=\"built_in\">errorCallback_</span>(); <span class=\"comment\">// 执行错误回调  </span></span><br><span class=\"line\">&#125;  </span><br><span class=\"line\"><span class=\"comment\">// 可读事件 (POLLIN)、高优先级可读 (POLLPRI)、对端关闭连接且仍有数据可读 (POLLRDHUP)  </span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (revents_ &amp; (POLLIN | POLLPRI | POLLRDHUP))  </span><br><span class=\"line\">&#123;  </span><br><span class=\"line\"><span class=\"keyword\">if</span> (readCallback_) <span class=\"built_in\">readCallback_</span>(receiveTime); <span class=\"comment\">// 执行读回调  </span></span><br><span class=\"line\">&#125;  </span><br><span class=\"line\"><span class=\"comment\">// 可写事件 (POLLOUT)  </span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (revents_ &amp; POLLOUT)  </span><br><span class=\"line\">&#123;  </span><br><span class=\"line\"><span class=\"keyword\">if</span> (writeCallback_) <span class=\"built_in\">writeCallback_</span>(); <span class=\"comment\">// 执行写回调  </span></span><br><span class=\"line\">&#125;  </span><br><span class=\"line\">eventHandling_ = <span class=\"literal\">false</span>;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>下面的就是loop事件循环的时序图:</p>\n<p><img src=\"/images/loop%E5%BE%AA%E7%8E%AF.png\" alt=\"loop循环\"></p>\n<p>理解了 EventLoop 的核心驱动逻辑和 Channel 的事件分发机制后，我们就可以具体分析“三个半事件”的处理了。</p>\n<h2 id=\"事件一：新连接的建立与分发\"><a href=\"#事件一：新连接的建立与分发\" class=\"headerlink\" title=\"事件一：新连接的建立与分发\"></a><strong>事件一：新连接的建立与分发</strong></h2><p>学习过 Linux 网络编程的都知道，服务器接受新连接的基本流程是 socket -&gt; bind -&gt; listen -&gt; accept。muduo 将这个过程优雅地封装在 Acceptor 和 TcpServer 类中。</p>\n<h3 id=\"1-Acceptor：新连接的接收者\"><a href=\"#1-Acceptor：新连接的接收者\" class=\"headerlink\" title=\"1. Acceptor：新连接的接收者\"></a><strong>1. Acceptor：新连接的接收者</strong></h3><p>TcpServer 在构造时会创建一个 Acceptor 对象，并将其与主 EventLoop 关联。<br>Acceptor 负责创建监听套接字、绑定地址、并设置当有新连接到来时（监听套接字可读）的回调函数为 Acceptor::handleRead。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// TcpServer.cc (构造函数部分)  </span></span><br><span class=\"line\">TcpServer::<span class=\"built_in\">TcpServer</span>(EventLoop* loop,  </span><br><span class=\"line\"><span class=\"type\">const</span> InetAddress&amp; listenAddr,  </span><br><span class=\"line\"><span class=\"type\">const</span> string&amp; nameArg,  </span><br><span class=\"line\">Option option)  </span><br><span class=\"line\">: <span class=\"built_in\">loop_</span>(<span class=\"built_in\">CHECK_NOTNULL</span>(loop)),  </span><br><span class=\"line\"><span class=\"built_in\">acceptor_</span>(<span class=\"keyword\">new</span> <span class=\"built_in\">Acceptor</span>(loop, listenAddr, option == kReusePort)),  </span><br><span class=\"line\"><span class=\"comment\">// ...  </span></span><br><span class=\"line\">&#123;  </span><br><span class=\"line\">acceptor_-&gt;<span class=\"built_in\">setNewConnectionCallback</span>(  </span><br><span class=\"line\">std::<span class=\"built_in\">bind</span>(&amp;TcpServer::newConnection, <span class=\"keyword\">this</span>, _1, _2));  </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Acceptor.cc (构造函数部分)</span></span><br><span class=\"line\">Acceptor::<span class=\"built_in\">Acceptor</span>(EventLoop* loop, <span class=\"type\">const</span> InetAddress&amp; listenAddr, <span class=\"type\">bool</span> reuseport)</span><br><span class=\"line\">: <span class=\"built_in\">loop_</span>(loop),  </span><br><span class=\"line\"><span class=\"built_in\">acceptSocket_</span>(sockets::<span class=\"built_in\">createNonblockingOrDie</span>(listenAddr.<span class=\"built_in\">family</span>())),  </span><br><span class=\"line\"><span class=\"built_in\">acceptChannel_</span>(loop, acceptSocket_.<span class=\"built_in\">fd</span>()), <span class=\"comment\">// 为监听套接字创建 Channel  </span></span><br><span class=\"line\"><span class=\"comment\">// ...  </span></span><br><span class=\"line\">&#123;  </span><br><span class=\"line\"><span class=\"comment\">// ...  </span></span><br><span class=\"line\">acceptSocket_.<span class=\"built_in\">bindAddress</span>(listenAddr);  </span><br><span class=\"line\">acceptChannel_.<span class=\"built_in\">setReadCallback</span>(  </span><br><span class=\"line\">std::<span class=\"built_in\">bind</span>(&amp;Acceptor::handleRead, <span class=\"keyword\">this</span>)); <span class=\"comment\">// 设置 Channel 的读回调  </span></span><br><span class=\"line\">&#125;  </span><br></pre></td></tr></table></figure>\n\n<p>调用<code>TcpServer::start()</code> 时，会通过 <code>loop_-&gt;runInLoop()</code> 调用 <code>Acceptor::listen()</code>，该方法会调用 <code>listen()</code> 系统调用并使 <code>acceptChannel_</code> 开始关注读事件。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Acceptor.cc  </span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">Acceptor::listen</span><span class=\"params\">()</span>  </span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;  </span><br><span class=\"line\">loop_-&gt;<span class=\"built_in\">assertInLoopThread</span>();  </span><br><span class=\"line\">listenning_ = <span class=\"literal\">true</span>;  </span><br><span class=\"line\">acceptSocket_.<span class=\"built_in\">listen</span>();  </span><br><span class=\"line\">acceptChannel_.<span class=\"built_in\">enableReading</span>(); <span class=\"comment\">// 将 acceptChannel_ 加入 Poller 监听  </span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>当新连接到达时，acceptChannel_ 的 handleRead 被触发：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Acceptor.cc  </span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">Acceptor::handleRead</span><span class=\"params\">()</span>  </span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;  </span><br><span class=\"line\">loop_-&gt;<span class=\"built_in\">assertInLoopThread</span>();  </span><br><span class=\"line\">InetAddress peerAddr;  </span><br><span class=\"line\"><span class=\"type\">int</span> connfd = acceptSocket_.<span class=\"built_in\">accept</span>(&amp;peerAddr); <span class=\"comment\">// 接受新连接  </span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (connfd &gt;= <span class=\"number\">0</span>)  </span><br><span class=\"line\">&#123;  </span><br><span class=\"line\"><span class=\"keyword\">if</span> (newConnectionCallback_)  </span><br><span class=\"line\">&#123;  </span><br><span class=\"line\"><span class=\"built_in\">newConnectionCallback_</span>(connfd, peerAddr); <span class=\"comment\">// 调用 TcpServer::newConnection  </span></span><br><span class=\"line\">&#125;  </span><br><span class=\"line\"><span class=\"keyword\">else</span>  </span><br><span class=\"line\">&#123;  </span><br><span class=\"line\">sockets::<span class=\"built_in\">close</span>(connfd);  </span><br><span class=\"line\">&#125;  </span><br><span class=\"line\">&#125;  </span><br><span class=\"line\"><span class=\"comment\">// ... (错误处理和 EMFILE 处理) ...  </span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-TcpServer-newConnection：连接的分发\"><a href=\"#2-TcpServer-newConnection：连接的分发\" class=\"headerlink\" title=\"2. TcpServer::newConnection：连接的分发\"></a><strong>2. TcpServer::newConnection：连接的分发</strong></h3><p>Acceptor 将新接受的 connfd 和对端地址传递给 TcpServer::newConnection。此方法的核心职责是：</p>\n<ol>\n<li>从 EventLoopThreadPool 中通过轮询选择一个 I&#x2F;O EventLoop。</li>\n<li>为新连接创建一个 TcpConnection 对象，并将选择的 I&#x2F;O EventLoop 传递给它。</li>\n<li>设置 TcpConnection 的各种回调（连接状态、消息到达、写完成、关闭）。</li>\n<li>将 TcpConnection::connectEstablished 方法提交到选定的 I&#x2F;O EventLoop 中执行。</li>\n</ol>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// TcpServer.cc  </span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">TcpServer::newConnection</span><span class=\"params\">(<span class=\"type\">int</span> sockfd, <span class=\"type\">const</span> InetAddress&amp; peerAddr)</span>  </span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;  </span><br><span class=\"line\">loop_-&gt;<span class=\"built_in\">assertInLoopThread</span>(); <span class=\"comment\">// 确保在主 EventLoop 中  </span></span><br><span class=\"line\">EventLoop* ioLoop = threadPool_-&gt;<span class=\"built_in\">getNextLoop</span>(); <span class=\"comment\">// 轮询选择 I/O Loop  </span></span><br><span class=\"line\"><span class=\"comment\">// ... (生成连接名 connName) ...  </span></span><br><span class=\"line\"><span class=\"function\">TcpConnectionPtr <span class=\"title\">conn</span><span class=\"params\">(<span class=\"keyword\">new</span> TcpConnection(ioLoop, <span class=\"comment\">// 将 ioLoop 传递给 TcpConnection  </span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">connName,  </span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">sockfd,  </span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">localAddr,  </span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">peerAddr))</span></span>;  </span><br><span class=\"line\">connections_[connName] = conn; <span class=\"comment\">// 保存连接  </span></span><br><span class=\"line\"><span class=\"comment\">// ... (设置各种回调) ...  </span></span><br><span class=\"line\">conn-&gt;<span class=\"built_in\">setCloseCallback</span>(  </span><br><span class=\"line\">std::<span class=\"built_in\">bind</span>(&amp;TcpServer::removeConnection, <span class=\"keyword\">this</span>, _1));  </span><br><span class=\"line\"><span class=\"comment\">// 将连接建立的后续操作交给 ioLoop 执行  </span></span><br><span class=\"line\">ioLoop-&gt;<span class=\"built_in\">runInLoop</span>(std::<span class=\"built_in\">bind</span>(&amp;TcpConnection::connectEstablished, conn));  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3-TcpConnection-connectEstablished：连接的最终建立\"><a href=\"#3-TcpConnection-connectEstablished：连接的最终建立\" class=\"headerlink\" title=\"3. TcpConnection::connectEstablished：连接的最终建立\"></a><strong>3. TcpConnection::connectEstablished：连接的最终建立</strong></h3><p>此方法在选定的 I&#x2F;O EventLoop 线程中执行，完成连接的最后步骤：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// TcpConnection.cc  </span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">TcpConnection::connectEstablished</span><span class=\"params\">()</span>  </span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;  </span><br><span class=\"line\">loop_-&gt;<span class=\"built_in\">assertInLoopThread</span>(); <span class=\"comment\">// 确保在 ioLoop 中  </span></span><br><span class=\"line\"><span class=\"built_in\">assert</span>(state_ == kConnecting);  </span><br><span class=\"line\"><span class=\"built_in\">setState</span>(kConnected);  </span><br><span class=\"line\">channel_-&gt;<span class=\"built_in\">tie</span>(<span class=\"built_in\">shared_from_this</span>()); <span class=\"comment\">// 绑定生命周期  </span></span><br><span class=\"line\">channel_-&gt;<span class=\"built_in\">enableReading</span>(); <span class=\"comment\">// 开始关注该连接上的读事件  </span></span><br><span class=\"line\"><span class=\"built_in\">connectionCallback_</span>(<span class=\"built_in\">shared_from_this</span>()); <span class=\"comment\">// 调用用户设置的连接建立回调  </span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>至此，新连接的建立和分发完成，后续该连接上的所有 I&#x2F;O 事件都将在其被分配到的 I&#x2F;O EventLoop 线程中处理。</p>\n<p>这是建立连接的时序图：</p>\n<p><img src=\"/images/%E5%BB%BA%E7%AB%8B%E6%96%B0%E8%BF%9E%E6%8E%A5.png\" alt=\"建立新连接\"></p>\n<h2 id=\"事件二：收到消息-MessageCallback\"><a href=\"#事件二：收到消息-MessageCallback\" class=\"headerlink\" title=\"事件二：收到消息 (MessageCallback)\"></a><strong>事件二：收到消息 (MessageCallback)</strong></h2><p>当客户端发送数据时，TcpConnection 对应的 channel_ 会触发读事件，进而调用 TcpConnection::handleRead。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// TcpConnection.cc (构造函数中设置)  </span></span><br><span class=\"line\">channel_-&gt;<span class=\"built_in\">setReadCallback</span>(  </span><br><span class=\"line\">std::<span class=\"built_in\">bind</span>(&amp;TcpConnection::handleRead, <span class=\"keyword\">this</span>, _1));</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// TcpConnection.cc  </span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">TcpConnection::handleRead</span><span class=\"params\">(Timestamp receiveTime)</span>  </span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;  </span><br><span class=\"line\">loop_-&gt;<span class=\"built_in\">assertInLoopThread</span>();  </span><br><span class=\"line\"><span class=\"type\">int</span> savedErrno = <span class=\"number\">0</span>;  </span><br><span class=\"line\"><span class=\"type\">ssize_t</span> n = inputBuffer_.<span class=\"built_in\">readFd</span>(channel_-&gt;<span class=\"built_in\">fd</span>(), &amp;savedErrno); <span class=\"comment\">// 从 socket 读取数据到 inputBuffer_  </span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (n &gt; <span class=\"number\">0</span>)  </span><br><span class=\"line\">&#123;  </span><br><span class=\"line\"><span class=\"comment\">// 调用用户在 TcpServer 中设置的 messageCallback_  </span></span><br><span class=\"line\"><span class=\"built_in\">messageCallback_</span>(<span class=\"built_in\">shared_from_this</span>(), &amp;inputBuffer_, receiveTime);  </span><br><span class=\"line\">&#125;  </span><br><span class=\"line\"><span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (n == <span class=\"number\">0</span>) <span class=\"comment\">// 对端关闭  </span></span><br><span class=\"line\">&#123;  </span><br><span class=\"line\"><span class=\"built_in\">handleClose</span>();  </span><br><span class=\"line\">&#125;  </span><br><span class=\"line\"><span class=\"keyword\">else</span> <span class=\"comment\">// 错误  </span></span><br><span class=\"line\">&#123;  </span><br><span class=\"line\">errno = savedErrno;  </span><br><span class=\"line\">LOG_SYSERR &lt;&lt; <span class=\"string\">&quot;TcpConnection::handleRead&quot;</span>;  </span><br><span class=\"line\"><span class=\"built_in\">handleError</span>(); <span class=\"comment\">// 通常也会调用 handleClose  </span></span><br><span class=\"line\">&#125;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n<p>用户通过 TcpServer::setMessageCallback 设置的回调函数会在这里被调用，参数包括 TcpConnectionPtr、存有接收数据的 Buffer* 以及时间戳。用户可以在回调中从 Buffer 中取出数据进行业务处理。</p>\n<p>这是处理读事件的时序图:</p>\n<p><img src=\"/images/%E5%A4%84%E7%90%86%E6%B6%88%E6%81%AF.png\" alt=\"收到消息\"></p>\n<h2 id=\"事件三：消息发送完成-WriteCompleteCallback\"><a href=\"#事件三：消息发送完成-WriteCompleteCallback\" class=\"headerlink\" title=\"事件三：消息发送完成 (WriteCompleteCallback)\"></a><strong>事件三：消息发送完成 (WriteCompleteCallback)</strong></h2><p>当用户调用 TcpConnection::send() 发送数据时：</p>\n<ol>\n<li>如果当前线程不是连接所属的 ioLoop，则将发送任务 sendInLoop 提交到 ioLoop 执行。</li>\n<li>sendInLoop 会尝试直接 write() 数据到 socket。<ul>\n<li>如果数据一次性全部写完，且用户设置了 writeCompleteCallback_，则将其提交到 ioLoop 的任务队列中执行。</li>\n<li>如果数据没有一次性写完（例如内核发送缓冲区满），则将剩余数据存入 outputBuffer_，并使 channel_ 开始关注写事件 (enableWriting())。</li>\n</ul>\n</li>\n<li>当 socket 变为可写时，channel_ 的写事件回调 TcpConnection::handleWrite 被触发。</li>\n<li>handleWrite 会继续从 outputBuffer_ 中发送数据。如果所有数据都发送完毕，则取消对写事件的关注 (disableWriting())，并调用 writeCompleteCallback_。</li>\n</ol>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// TcpConnection.cc (sendInLoop 核心逻辑)  </span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">TcpConnection::sendInLoop</span><span class=\"params\">(<span class=\"type\">const</span> <span class=\"type\">void</span>* data, <span class=\"type\">size_t</span> len)</span>  </span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;  </span><br><span class=\"line\">loop_-&gt;<span class=\"built_in\">assertInLoopThread</span>();  </span><br><span class=\"line\"><span class=\"type\">ssize_t</span> nwrote = <span class=\"number\">0</span>;  </span><br><span class=\"line\"><span class=\"type\">size_t</span> remaining = len;  </span><br><span class=\"line\"><span class=\"type\">bool</span> faultError = <span class=\"literal\">false</span>;  </span><br><span class=\"line\"><span class=\"keyword\">if</span> (state_ == kDisconnected) &#123; <span class=\"comment\">/* ... return ... */</span> &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 如果输出队列为空，尝试直接发送  </span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (!channel_-&gt;<span class=\"built_in\">isWriting</span>() &amp;&amp; outputBuffer_.<span class=\"built_in\">readableBytes</span>() == <span class=\"number\">0</span>)  </span><br><span class=\"line\">&#123;  </span><br><span class=\"line\">nwrote = sockets::<span class=\"built_in\">write</span>(channel_-&gt;<span class=\"built_in\">fd</span>(), data, len);  </span><br><span class=\"line\"><span class=\"keyword\">if</span> (nwrote &gt;= <span class=\"number\">0</span>)  </span><br><span class=\"line\">&#123;  </span><br><span class=\"line\">remaining = len - nwrote;  </span><br><span class=\"line\"><span class=\"keyword\">if</span> (remaining == <span class=\"number\">0</span> &amp;&amp; writeCompleteCallback_) <span class=\"comment\">// 全部发送完毕  </span></span><br><span class=\"line\">&#123;  </span><br><span class=\"line\">loop_-&gt;<span class=\"built_in\">queueInLoop</span>(std::<span class=\"built_in\">bind</span>(writeCompleteCallback_, <span class=\"built_in\">shared_from_this</span>()));  </span><br><span class=\"line\">&#125;  </span><br><span class=\"line\">&#125;  </span><br><span class=\"line\"><span class=\"keyword\">else</span> <span class=\"comment\">// nwrote &lt; 0 (错误)  </span></span><br><span class=\"line\">&#123;  </span><br><span class=\"line\"><span class=\"comment\">// ... 错误处理 ...  </span></span><br><span class=\"line\">&#125;  </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> (!faultError &amp;&amp; remaining &gt; <span class=\"number\">0</span>) <span class=\"comment\">// 如果还有数据未发送  </span></span><br><span class=\"line\">&#123;  </span><br><span class=\"line\"><span class=\"comment\">// ... (检查高水位回调 HighWaterMarkCallback) ...  </span></span><br><span class=\"line\">outputBuffer_.<span class=\"built_in\">append</span>(<span class=\"built_in\">static_cast</span>&lt;<span class=\"type\">const</span> <span class=\"type\">char</span>*&gt;(data)+nwrote, remaining); <span class=\"comment\">// 存入输出缓冲区  </span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (!channel_-&gt;<span class=\"built_in\">isWriting</span>())  </span><br><span class=\"line\">&#123;  </span><br><span class=\"line\">channel_-&gt;<span class=\"built_in\">enableWriting</span>(); <span class=\"comment\">// 开始关注写事件  </span></span><br><span class=\"line\">&#125;  </span><br><span class=\"line\">&#125;  </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// TcpConnection.cc (构造函数中设置)  </span></span><br><span class=\"line\">channel_-&gt;<span class=\"built_in\">setWriteCallback</span>(  </span><br><span class=\"line\">std::<span class=\"built_in\">bind</span>(&amp;TcpConnection::handleWrite, <span class=\"keyword\">this</span>));</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// TcpConnection.cc  </span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">TcpConnection::handleWrite</span><span class=\"params\">()</span>  </span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;  </span><br><span class=\"line\">loop_-&gt;<span class=\"built_in\">assertInLoopThread</span>();  </span><br><span class=\"line\"><span class=\"keyword\">if</span> (channel_-&gt;<span class=\"built_in\">isWriting</span>())  </span><br><span class=\"line\">&#123;  </span><br><span class=\"line\"><span class=\"type\">ssize_t</span> n = sockets::<span class=\"built_in\">write</span>(channel_-&gt;<span class=\"built_in\">fd</span>(),  </span><br><span class=\"line\">outputBuffer_.<span class=\"built_in\">peek</span>(),  </span><br><span class=\"line\">outputBuffer_.<span class=\"built_in\">readableBytes</span>());  </span><br><span class=\"line\"><span class=\"keyword\">if</span> (n &gt; <span class=\"number\">0</span>)  </span><br><span class=\"line\">&#123;  </span><br><span class=\"line\">outputBuffer_.<span class=\"built_in\">retrieve</span>(n);  </span><br><span class=\"line\"><span class=\"keyword\">if</span> (outputBuffer_.<span class=\"built_in\">readableBytes</span>() == <span class=\"number\">0</span>) <span class=\"comment\">// 输出缓冲区已空  </span></span><br><span class=\"line\">&#123;  </span><br><span class=\"line\">channel_-&gt;<span class=\"built_in\">disableWriting</span>(); <span class=\"comment\">// 不再关注写事件  </span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (writeCompleteCallback_)  </span><br><span class=\"line\">&#123;  </span><br><span class=\"line\">loop_-&gt;<span class=\"built_in\">queueInLoop</span>(std::<span class=\"built_in\">bind</span>(writeCompleteCallback_, <span class=\"built_in\">shared_from_this</span>()));  </span><br><span class=\"line\">&#125;  </span><br><span class=\"line\"><span class=\"keyword\">if</span> (state_ == kDisconnecting) <span class=\"comment\">// 如果正在关闭连接  </span></span><br><span class=\"line\">&#123;  </span><br><span class=\"line\"><span class=\"built_in\">shutdownInLoop</span>();  </span><br><span class=\"line\">&#125;  </span><br><span class=\"line\">&#125;  </span><br><span class=\"line\">&#125;  </span><br><span class=\"line\"><span class=\"keyword\">else</span>  </span><br><span class=\"line\">&#123;  </span><br><span class=\"line\">LOG_SYSERR &lt;&lt; <span class=\"string\">&quot;TcpConnection::handleWrite&quot;</span>;  </span><br><span class=\"line\">&#125;  </span><br><span class=\"line\">&#125;  </span><br><span class=\"line\"><span class=\"keyword\">else</span>  </span><br><span class=\"line\">&#123;  </span><br><span class=\"line\">LOG_TRACE &lt;&lt; <span class=\"string\">&quot;Connection fd = &quot;</span> &lt;&lt; channel_-&gt;<span class=\"built_in\">fd</span>()  </span><br><span class=\"line\">&lt;&lt; <span class=\"string\">&quot; is down, no more writing&quot;</span>;  </span><br><span class=\"line\">&#125;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>“消息发送完成”这个“半个事件”是通过 WriteCompleteCallback 来体现的，它在输出缓冲区的数据全部成功写入内核后被调用。</p>\n<p>因为写数据是用户关注的，如果一次性写完成就不必关心了，写不完就先放到buffer中，等到可写的时候，处理下写事件，将数据再次发送，发送完就不必关注了，这样也可以避免busyloop了</p>\n<p>这是上述过程的时序图</p>\n<p><img src=\"/images/%E6%B6%88%E6%81%AF%E5%86%99%E5%AE%8C.png\" alt=\"消息写完\"></p>\n<h2 id=\"事件四：连接关闭\"><a href=\"#事件四：连接关闭\" class=\"headerlink\" title=\"事件四：连接关闭\"></a><strong>事件四：连接关闭</strong></h2><p>连接关闭的触发点有多种：对端关闭（handleRead 读到 EOF）、本地主动关闭（用户调用 TcpConnection::shutdown()）、或发生错误（handleError） 。<br>这些路径通常都会汇聚到 TcpConnection::handleClose()。</p>\n<p>TcpConnection 在构造时设置了其 channel_ 的关闭回调为 handleClose。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// TcpConnection.cc (构造函数中设置)  </span></span><br><span class=\"line\">channel_-&gt;<span class=\"built_in\">setCloseCallback</span>(  </span><br><span class=\"line\">std::<span class=\"built_in\">bind</span>(&amp;TcpConnection::handleClose, <span class=\"keyword\">this</span>));  </span><br></pre></td></tr></table></figure>\n\n<p><code>handleClose()</code> 的核心逻辑：  </p>\n<ol>\n<li>断言在正确的 <code>ioLoop</code> 中执行。  </li>\n<li>将连接状态设为 <code>kDisconnected</code>。  </li>\n<li>调用 <code>channel_-&gt;disableAll()</code>，使该 <code>Channel</code> 不再关注任何事件。  </li>\n<li>调用用户设置的 <code>connectionCallback_</code>（此时连接状态已变为 <code>kDisconnected</code>）。  </li>\n<li>调用 <code>closeCallback_</code>（在 <code>TcpServer::newConnection</code> 中被绑定到 <code>TcpServer::removeConnection</code>）。</li>\n</ol>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// TcpConnection.cc  </span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">TcpConnection::handleClose</span><span class=\"params\">()</span>  </span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;  </span><br><span class=\"line\">loop_-&gt;<span class=\"built_in\">assertInLoopThread</span>();  </span><br><span class=\"line\">LOG_TRACE &lt;&lt; <span class=\"string\">&quot;fd = &quot;</span> &lt;&lt; channel_-&gt;<span class=\"built_in\">fd</span>() &lt;&lt; <span class=\"string\">&quot; state = &quot;</span> &lt;&lt; <span class=\"built_in\">stateToString</span>();  </span><br><span class=\"line\"><span class=\"built_in\">assert</span>(state_ == kConnected || state_ == kDisconnecting);  </span><br><span class=\"line\"><span class=\"built_in\">setState</span>(kDisconnected);  </span><br><span class=\"line\">channel_-&gt;<span class=\"built_in\">disableAll</span>(); <span class=\"comment\">// 如果是那种建立过连接的文件描述符，在这一步就会被从poller移除了</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">TcpConnectionPtr <span class=\"title\">guardThis</span><span class=\"params\">(shared_from_this())</span></span>; <span class=\"comment\">// 确保回调期间对象存活  </span></span><br><span class=\"line\"><span class=\"built_in\">connectionCallback_</span>(guardThis);  </span><br><span class=\"line\"><span class=\"built_in\">closeCallback_</span>(guardThis); <span class=\"comment\">// 调用 TcpServer::removeConnection  </span></span><br><span class=\"line\">&#125;  </span><br></pre></td></tr></table></figure>\n<p><code>TcpServer::removeConnection</code> 会将实际的移除操作（从 <code>connections_</code> map 中删除）提交到 <code>TcpServer</code> 的主 <code>EventLoop</code> 中执行（<code>removeConnectionInLoop</code>），以保证线程安全。之后，它会将最终的销毁操作 <code>TcpConnection::connectDestroyed</code> 提交回该连接所属的 I&#x2F;O <code>EventLoop</code> 中执行。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// TcpServer.cc  </span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">TcpServer::removeConnection</span><span class=\"params\">(<span class=\"type\">const</span> TcpConnectionPtr&amp; conn)</span>  </span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;  </span><br><span class=\"line\">loop_-&gt;<span class=\"built_in\">runInLoop</span>(std::<span class=\"built_in\">bind</span>(&amp;TcpServer::removeConnectionInLoop, <span class=\"keyword\">this</span>, conn));  </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">TcpServer::removeConnectionInLoop</span><span class=\"params\">(<span class=\"type\">const</span> TcpConnectionPtr&amp; conn)</span>  </span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;  </span><br><span class=\"line\">loop_-&gt;<span class=\"built_in\">assertInLoopThread</span>();  </span><br><span class=\"line\">LOG_INFO &lt;&lt; <span class=\"string\">&quot;TcpServer::removeConnectionInLoop [&quot;</span> &lt;&lt; name_  </span><br><span class=\"line\">&lt;&lt; <span class=\"string\">&quot;] - connection &quot;</span> &lt;&lt; conn-&gt;<span class=\"built_in\">name</span>();  </span><br><span class=\"line\">connections_.<span class=\"built_in\">erase</span>(conn-&gt;<span class=\"built_in\">name</span>()); <span class=\"comment\">// 从 TcpServer 管理的 map 中移除  </span></span><br><span class=\"line\">EventLoop* ioLoop = conn-&gt;<span class=\"built_in\">getLoop</span>();  </span><br><span class=\"line\"><span class=\"comment\">// 将最后的清理工作交给连接所属的 ioLoop  </span></span><br><span class=\"line\">ioLoop-&gt;<span class=\"built_in\">queueInLoop</span>(  </span><br><span class=\"line\">std::<span class=\"built_in\">bind</span>(&amp;TcpConnection::connectDestroyed, conn));  </span><br><span class=\"line\">&#125;  </span><br></pre></td></tr></table></figure>\n<p><code>TcpConnection::connectDestroyed</code> 负责将 <code>Channel</code> 从其 <code>EventLoop</code> 的 <code>Poller</code> 中移除。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// TcpConnection.cc  </span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">TcpConnection::connectDestroyed</span><span class=\"params\">()</span>  </span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;  </span><br><span class=\"line\">loop_-&gt;<span class=\"built_in\">assertInLoopThread</span>();  </span><br><span class=\"line\"><span class=\"keyword\">if</span> (state_ == kConnected) <span class=\"comment\">// 如果之前是连接状态，则先更新状态并调用回调  </span></span><br><span class=\"line\">&#123;  </span><br><span class=\"line\"><span class=\"built_in\">setState</span>(kDisconnected);  </span><br><span class=\"line\">channel_-&gt;<span class=\"built_in\">disableAll</span>();  </span><br><span class=\"line\"><span class=\"built_in\">connectionCallback_</span>(<span class=\"built_in\">shared_from_this</span>());  </span><br><span class=\"line\">&#125;  </span><br><span class=\"line\">channel_-&gt;<span class=\"built_in\">remove</span>(); <span class=\"comment\">// 从 Poller 中移除 Channel  </span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Channel.cc  </span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">Channel::remove</span><span class=\"params\">()</span>  </span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;  </span><br><span class=\"line\"><span class=\"built_in\">assert</span>(<span class=\"built_in\">isNoneEvent</span>());  </span><br><span class=\"line\">addedToLoop_ = <span class=\"literal\">false</span>;  </span><br><span class=\"line\">loop_-&gt;<span class=\"built_in\">removeChannel</span>(<span class=\"keyword\">this</span>); <span class=\"comment\">// 通知 EventLoop 从 Poller 中移除  </span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>EventLoop::removeChannel 会调用 Poller::removeChannel，最终通过 epoll_ctl(EPOLL_CTL_DEL, …) 将文件描述符从 epoll 实例中移除。</p>\n<p>这是关闭连接的时序图:</p>\n<p><img src=\"/images/%E8%BF%9E%E6%8E%A5%E5%85%B3%E9%97%AD.png\" alt=\"连接关闭\"><br>当 TcpConnectionPtr 的最后一个 shared_ptr 引用（通常是在 connectDestroyed 的 std::bind 对象析构时）消失后，TcpConnection 对象及其拥有的 Socket（会在析构时关闭 fd）和 Channel 对象会被自动析构，完成资源的彻底回收。</p>\n<p>这一套精心设计的流程，严格遵守了“对象生命周期管理”和“线程封闭”的原则，确保了连接关闭的正确性和资源的有效释放。</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a><strong>总结</strong></h2><p>通过对 muduo 中新连接建立、数据收发、连接关闭这“三个半事件”处理流程的分析，我们可以看到陈硕大佬是如何将这些网络编程中的核心操作，优雅地融入其基于对象的事件驱动框架中的。</p>\n<ul>\n<li><strong>事件的统一处理入口：</strong> EventLoop::loop() 是所有事件处理的起点。</li>\n<li><strong>Channel 作为事件分发的核心：</strong> 它封装了文件描述符和相关的事件回调。</li>\n<li><strong>职责明确的类设计：</strong> Acceptor 专注于接受新连接，TcpServer 负责管理和分发连接，TcpConnection 负责处理单个连接的生命周期和业务逻辑。</li>\n<li><strong>线程安全的保证：</strong> 通过 “One Loop Per Thread” 和 runInLoop&#x2F;queueInLoop 机制，确保了所有对象的操作都在其所属的线程中执行。</li>\n<li><strong>回调机制的广泛应用：</strong> 将具体的业务逻辑与框架逻辑解耦，提高了灵活性和可扩展性。</li>\n</ul>\n<p>通过这些操作，在遵循陈硕大佬的 <code>基于对象</code> 的理念的前提下，完成了对“三个半事件”的处理。</p>\n","excerpt":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a><strong>前言</strong></h2><p>在上一篇文章《muduo 源码剖析（一）：深入 ‘One Loop Per Thread’ 与 EventLoop 的实现》中，我们分析了 muduo 如何通过 EventLoopThreadPool 和 EventLoopThread 实现 “One Loop Per Thread” 的并发模型，以及 EventLoop 如何通过 eventfd 机制支持跨线程的任务提交。这些是 muduo 事件驱动框架的基石。</p>\n<p>本文我们将聚焦于网络编程的核心——TCP 连接，以及陈硕大佬提出的“三个半事件”中的核心部分：<strong>新连接的建立与分发、连接上数据的接收与发送、以及连接的关闭与资源回收</strong>。我们将深入探讨在 muduo 中，这些事件是如何被优雅地融入其基于对象的事件驱动框架中的。</p>","more":"<h2 id=\"EventLoop-loop-：事件处理的核心驱动\"><a href=\"#EventLoop-loop-：事件处理的核心驱动\" class=\"headerlink\" title=\"EventLoop::loop()：事件处理的核心驱动\"></a><strong>EventLoop::loop()：事件处理的核心驱动</strong></h2><p>在深入具体事件之前，我们首先需要理解 EventLoop 的主循环 loop() 是如何驱动事件处理的。其核心逻辑非常直观：</p>\n<ol>\n<li>调用 Poller::poll() (底层通常是 epoll_wait) 等待 I&#x2F;O 事件的发生，或者等待被 wakeupFd_ 唤醒。</li>\n<li>获取到活跃的 Channel 列表 (activeChannels_)。</li>\n<li>遍历 activeChannels_，对每个 Channel 调用其 handleEvent() 方法。</li>\n<li>执行所有通过 runInLoop 或 queueInLoop 提交的待处理任务 (doPendingFunctors())。</li>\n</ol>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">EventLoop::loop</span><span class=\"params\">()</span>  </span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;  </span><br><span class=\"line\"><span class=\"built_in\">assert</span>(!looping_);  </span><br><span class=\"line\"><span class=\"built_in\">assertInLoopThread</span>();  </span><br><span class=\"line\">looping_ = <span class=\"literal\">true</span>;  </span><br><span class=\"line\">quit_ = <span class=\"literal\">false</span>;  <span class=\"comment\">// <span class=\"doctag\">FIXME:</span> what if someone calls quit() before loop() ?  </span></span><br><span class=\"line\">LOG_TRACE &lt;&lt; <span class=\"string\">&quot;EventLoop &quot;</span> &lt;&lt; <span class=\"keyword\">this</span> &lt;&lt; <span class=\"string\">&quot; start looping&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">while</span> (!quit_)  </span><br><span class=\"line\">&#123;  </span><br><span class=\"line\">activeChannels_.<span class=\"built_in\">clear</span>();  </span><br><span class=\"line\"><span class=\"comment\">// 1. 等待事件发生  </span></span><br><span class=\"line\">pollReturnTime_ = poller_-&gt;<span class=\"built_in\">poll</span>(kPollTimeMs, &amp;activeChannels_);  </span><br><span class=\"line\">++iteration_;  </span><br><span class=\"line\"><span class=\"keyword\">if</span> (Logger::<span class=\"built_in\">logLevel</span>() &lt;= Logger::TRACE)  </span><br><span class=\"line\">&#123;  </span><br><span class=\"line\"><span class=\"built_in\">printActiveChannels</span>();  </span><br><span class=\"line\">&#125;  </span><br><span class=\"line\">eventHandling_ = <span class=\"literal\">true</span>;  </span><br><span class=\"line\"><span class=\"comment\">// 2. 处理活跃 Channel 的事件  </span></span><br><span class=\"line\"><span class=\"keyword\">for</span> (Channel* channel : activeChannels_)  </span><br><span class=\"line\">&#123;  </span><br><span class=\"line\">currentActiveChannel_ = channel;  </span><br><span class=\"line\">currentActiveChannel_-&gt;<span class=\"built_in\">handleEvent</span>(pollReturnTime_);  </span><br><span class=\"line\">&#125;  </span><br><span class=\"line\">currentActiveChannel_ = <span class=\"literal\">NULL</span>;  </span><br><span class=\"line\">eventHandling_ = <span class=\"literal\">false</span>;  </span><br><span class=\"line\"><span class=\"comment\">// 3. 执行 EventLoop 内部任务队列中的任务  </span></span><br><span class=\"line\"><span class=\"built_in\">doPendingFunctors</span>();  </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">LOG_TRACE &lt;&lt; <span class=\"string\">&quot;EventLoop &quot;</span> &lt;&lt; <span class=\"keyword\">this</span> &lt;&lt; <span class=\"string\">&quot; stop looping&quot;</span>;  </span><br><span class=\"line\">looping_ = <span class=\"literal\">false</span>;  </span><br><span class=\"line\">&#125;  </span><br></pre></td></tr></table></figure>\n\n<p><code>Poller</code> (以 <code>EPollPoller</code> 为例) 的 <code>poll()</code> 方法负责调用 <code>epoll_wait</code>，并将返回的就绪事件填充到 <code>activeChannels</code> 列表中。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// EPollPoller.cc  </span></span><br><span class=\"line\"><span class=\"function\">Timestamp <span class=\"title\">EPollPoller::poll</span><span class=\"params\">(<span class=\"type\">int</span> timeoutMs, ChannelList* activeChannels)</span>  </span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;  </span><br><span class=\"line\">LOG_TRACE &lt;&lt; <span class=\"string\">&quot;fd total count &quot;</span> &lt;&lt; channels_.<span class=\"built_in\">size</span>();  </span><br><span class=\"line\"><span class=\"type\">int</span> numEvents = ::<span class=\"built_in\">epoll_wait</span>(epollfd_,  </span><br><span class=\"line\">&amp;*events_.<span class=\"built_in\">begin</span>(), <span class=\"comment\">// events_ 是 epoll_event 数组  </span></span><br><span class=\"line\"><span class=\"built_in\">static_cast</span>&lt;<span class=\"type\">int</span>&gt;(events_.<span class=\"built_in\">size</span>()),  </span><br><span class=\"line\">timeoutMs);  </span><br><span class=\"line\"><span class=\"type\">int</span> savedErrno = errno;  </span><br><span class=\"line\"><span class=\"function\">Timestamp <span class=\"title\">now</span><span class=\"params\">(Timestamp::now())</span></span>;  </span><br><span class=\"line\"><span class=\"keyword\">if</span> (numEvents &gt; <span class=\"number\">0</span>)  </span><br><span class=\"line\">&#123;  </span><br><span class=\"line\">LOG_TRACE &lt;&lt; numEvents &lt;&lt; <span class=\"string\">&quot; events happened&quot;</span>;  </span><br><span class=\"line\"><span class=\"built_in\">fillActiveChannels</span>(numEvents, activeChannels); <span class=\"comment\">// 将就绪事件转换为 Channel  </span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"built_in\">implicit_cast</span>&lt;<span class=\"type\">size_t</span>&gt;(numEvents) == events_.<span class=\"built_in\">size</span>()) <span class=\"comment\">// 如果 epoll_event 数组满了，则扩容  </span></span><br><span class=\"line\">&#123;  </span><br><span class=\"line\">events_.<span class=\"built_in\">resize</span>(events_.<span class=\"built_in\">size</span>()*<span class=\"number\">2</span>);  </span><br><span class=\"line\">&#125;  </span><br><span class=\"line\">&#125;  </span><br><span class=\"line\"><span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (numEvents == <span class=\"number\">0</span>)  </span><br><span class=\"line\">&#123;  </span><br><span class=\"line\">LOG_TRACE &lt;&lt; <span class=\"string\">&quot;nothing happened&quot;</span>;  </span><br><span class=\"line\">&#125;  </span><br><span class=\"line\"><span class=\"keyword\">else</span> <span class=\"comment\">// 出错处理  </span></span><br><span class=\"line\">&#123;  </span><br><span class=\"line\"><span class=\"keyword\">if</span> (savedErrno != EINTR)  </span><br><span class=\"line\">&#123;  </span><br><span class=\"line\">errno = savedErrno;  </span><br><span class=\"line\">LOG_SYSERR &lt;&lt; <span class=\"string\">&quot;EPollPoller::poll()&quot;</span>;  </span><br><span class=\"line\">&#125;  </span><br><span class=\"line\">&#125;  </span><br><span class=\"line\"><span class=\"keyword\">return</span> now;  </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">EPollPoller::fillActiveChannels</span><span class=\"params\">(<span class=\"type\">int</span> numEvents,  </span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">ChannelList* activeChannels)</span> <span class=\"type\">const</span>  </span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;  </span><br><span class=\"line\"><span class=\"built_in\">assert</span>(<span class=\"built_in\">implicit_cast</span>&lt;<span class=\"type\">size_t</span>&gt;(numEvents) &lt;= events_.<span class=\"built_in\">size</span>());  </span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; numEvents; ++i)  </span><br><span class=\"line\">&#123;  </span><br><span class=\"line\"><span class=\"comment\">// 注册时将 Channel* 存放在 epoll_event 的 data.ptr 中  </span></span><br><span class=\"line\">Channel* channel = <span class=\"built_in\">static_cast</span>&lt;Channel*&gt;(events_[i].data.ptr);  </span><br><span class=\"line\"><span class=\"comment\">// ... (省略 NDEBUG 下的断言检查) ...  </span></span><br><span class=\"line\">channel-&gt;<span class=\"built_in\">set_revents</span>(events_[i].events); <span class=\"comment\">// 设置 Channel 实际发生的事件  </span></span><br><span class=\"line\">activeChannels-&gt;<span class=\"built_in\">push_back</span>(channel);  </span><br><span class=\"line\">&#125;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>当 EventLoop 获取到活跃的 Channel 后，会调用 Channel::handleEvent()。<br>这个方法是事件分发的枢纽，它根据 Channel 上实际发生的事件类型 (revents_)，调用相应的回调函数。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Channel.cc  </span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">Channel::handleEvent</span><span class=\"params\">(Timestamp receiveTime)</span>  </span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;  </span><br><span class=\"line\">std::shared_ptr&lt;<span class=\"type\">void</span>&gt; guard;  </span><br><span class=\"line\"><span class=\"keyword\">if</span> (tied_) <span class=\"comment\">// 如果 Channel 与某个对象（通常是 TcpConnection）绑定了生命周期  </span></span><br><span class=\"line\">&#123;  </span><br><span class=\"line\">guard = tie_.<span class=\"built_in\">lock</span>(); <span class=\"comment\">// 尝试获取对象的 shared_ptr  </span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (guard) <span class=\"comment\">// 对象仍然存活  </span></span><br><span class=\"line\">&#123;  </span><br><span class=\"line\"><span class=\"built_in\">handleEventWithGuard</span>(receiveTime);  </span><br><span class=\"line\">&#125;  </span><br><span class=\"line\"><span class=\"comment\">// 如果 guard 为空，说明对象已销毁，Channel 不再处理事件  </span></span><br><span class=\"line\">&#125;  </span><br><span class=\"line\"><span class=\"keyword\">else</span> <span class=\"comment\">// 未绑定生命周期  </span></span><br><span class=\"line\">&#123;  </span><br><span class=\"line\"><span class=\"built_in\">handleEventWithGuard</span>(receiveTime);  </span><br><span class=\"line\">&#125;  </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">Channel::handleEventWithGuard</span><span class=\"params\">(Timestamp receiveTime)</span>  </span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;  </span><br><span class=\"line\">eventHandling_ = <span class=\"literal\">true</span>;  </span><br><span class=\"line\">LOG_TRACE &lt;&lt; <span class=\"built_in\">reventsToString</span>();  </span><br><span class=\"line\"><span class=\"comment\">// 对端关闭连接 (POLLHUP)，并且没有可读数据 (POLLIN)  </span></span><br><span class=\"line\"><span class=\"keyword\">if</span> ((revents_ &amp; POLLHUP) &amp;&amp; !(revents_ &amp; POLLIN))  </span><br><span class=\"line\">&#123;  </span><br><span class=\"line\"><span class=\"keyword\">if</span> (logHup_)  </span><br><span class=\"line\">&#123;  </span><br><span class=\"line\">LOG_WARN &lt;&lt; <span class=\"string\">&quot;fd = &quot;</span> &lt;&lt; fd_ &lt;&lt; <span class=\"string\">&quot; Channel::handle_event() POLLHUP&quot;</span>;  </span><br><span class=\"line\">&#125;  </span><br><span class=\"line\"><span class=\"keyword\">if</span> (closeCallback_) <span class=\"built_in\">closeCallback_</span>(); <span class=\"comment\">// 执行关闭回调  </span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> (revents_ &amp; POLLNVAL) <span class=\"comment\">// 无效的请求，通常是 fd 已关闭  </span></span><br><span class=\"line\">&#123;  </span><br><span class=\"line\">LOG_WARN &lt;&lt; <span class=\"string\">&quot;fd = &quot;</span> &lt;&lt; fd_ &lt;&lt; <span class=\"string\">&quot; Channel::handle_event() POLLNVAL&quot;</span>;  </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 错误事件 (POLLERR) 或无效请求 (POLLNVAL)  </span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (revents_ &amp; (POLLERR | POLLNVAL))  </span><br><span class=\"line\">&#123;  </span><br><span class=\"line\"><span class=\"keyword\">if</span> (errorCallback_) <span class=\"built_in\">errorCallback_</span>(); <span class=\"comment\">// 执行错误回调  </span></span><br><span class=\"line\">&#125;  </span><br><span class=\"line\"><span class=\"comment\">// 可读事件 (POLLIN)、高优先级可读 (POLLPRI)、对端关闭连接且仍有数据可读 (POLLRDHUP)  </span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (revents_ &amp; (POLLIN | POLLPRI | POLLRDHUP))  </span><br><span class=\"line\">&#123;  </span><br><span class=\"line\"><span class=\"keyword\">if</span> (readCallback_) <span class=\"built_in\">readCallback_</span>(receiveTime); <span class=\"comment\">// 执行读回调  </span></span><br><span class=\"line\">&#125;  </span><br><span class=\"line\"><span class=\"comment\">// 可写事件 (POLLOUT)  </span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (revents_ &amp; POLLOUT)  </span><br><span class=\"line\">&#123;  </span><br><span class=\"line\"><span class=\"keyword\">if</span> (writeCallback_) <span class=\"built_in\">writeCallback_</span>(); <span class=\"comment\">// 执行写回调  </span></span><br><span class=\"line\">&#125;  </span><br><span class=\"line\">eventHandling_ = <span class=\"literal\">false</span>;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>下面的就是loop事件循环的时序图:</p>\n<p><img src=\"/images/loop%E5%BE%AA%E7%8E%AF.png\" alt=\"loop循环\"></p>\n<p>理解了 EventLoop 的核心驱动逻辑和 Channel 的事件分发机制后，我们就可以具体分析“三个半事件”的处理了。</p>\n<h2 id=\"事件一：新连接的建立与分发\"><a href=\"#事件一：新连接的建立与分发\" class=\"headerlink\" title=\"事件一：新连接的建立与分发\"></a><strong>事件一：新连接的建立与分发</strong></h2><p>学习过 Linux 网络编程的都知道，服务器接受新连接的基本流程是 socket -&gt; bind -&gt; listen -&gt; accept。muduo 将这个过程优雅地封装在 Acceptor 和 TcpServer 类中。</p>\n<h3 id=\"1-Acceptor：新连接的接收者\"><a href=\"#1-Acceptor：新连接的接收者\" class=\"headerlink\" title=\"1. Acceptor：新连接的接收者\"></a><strong>1. Acceptor：新连接的接收者</strong></h3><p>TcpServer 在构造时会创建一个 Acceptor 对象，并将其与主 EventLoop 关联。<br>Acceptor 负责创建监听套接字、绑定地址、并设置当有新连接到来时（监听套接字可读）的回调函数为 Acceptor::handleRead。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// TcpServer.cc (构造函数部分)  </span></span><br><span class=\"line\">TcpServer::<span class=\"built_in\">TcpServer</span>(EventLoop* loop,  </span><br><span class=\"line\"><span class=\"type\">const</span> InetAddress&amp; listenAddr,  </span><br><span class=\"line\"><span class=\"type\">const</span> string&amp; nameArg,  </span><br><span class=\"line\">Option option)  </span><br><span class=\"line\">: <span class=\"built_in\">loop_</span>(<span class=\"built_in\">CHECK_NOTNULL</span>(loop)),  </span><br><span class=\"line\"><span class=\"built_in\">acceptor_</span>(<span class=\"keyword\">new</span> <span class=\"built_in\">Acceptor</span>(loop, listenAddr, option == kReusePort)),  </span><br><span class=\"line\"><span class=\"comment\">// ...  </span></span><br><span class=\"line\">&#123;  </span><br><span class=\"line\">acceptor_-&gt;<span class=\"built_in\">setNewConnectionCallback</span>(  </span><br><span class=\"line\">std::<span class=\"built_in\">bind</span>(&amp;TcpServer::newConnection, <span class=\"keyword\">this</span>, _1, _2));  </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Acceptor.cc (构造函数部分)</span></span><br><span class=\"line\">Acceptor::<span class=\"built_in\">Acceptor</span>(EventLoop* loop, <span class=\"type\">const</span> InetAddress&amp; listenAddr, <span class=\"type\">bool</span> reuseport)</span><br><span class=\"line\">: <span class=\"built_in\">loop_</span>(loop),  </span><br><span class=\"line\"><span class=\"built_in\">acceptSocket_</span>(sockets::<span class=\"built_in\">createNonblockingOrDie</span>(listenAddr.<span class=\"built_in\">family</span>())),  </span><br><span class=\"line\"><span class=\"built_in\">acceptChannel_</span>(loop, acceptSocket_.<span class=\"built_in\">fd</span>()), <span class=\"comment\">// 为监听套接字创建 Channel  </span></span><br><span class=\"line\"><span class=\"comment\">// ...  </span></span><br><span class=\"line\">&#123;  </span><br><span class=\"line\"><span class=\"comment\">// ...  </span></span><br><span class=\"line\">acceptSocket_.<span class=\"built_in\">bindAddress</span>(listenAddr);  </span><br><span class=\"line\">acceptChannel_.<span class=\"built_in\">setReadCallback</span>(  </span><br><span class=\"line\">std::<span class=\"built_in\">bind</span>(&amp;Acceptor::handleRead, <span class=\"keyword\">this</span>)); <span class=\"comment\">// 设置 Channel 的读回调  </span></span><br><span class=\"line\">&#125;  </span><br></pre></td></tr></table></figure>\n\n<p>调用<code>TcpServer::start()</code> 时，会通过 <code>loop_-&gt;runInLoop()</code> 调用 <code>Acceptor::listen()</code>，该方法会调用 <code>listen()</code> 系统调用并使 <code>acceptChannel_</code> 开始关注读事件。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Acceptor.cc  </span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">Acceptor::listen</span><span class=\"params\">()</span>  </span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;  </span><br><span class=\"line\">loop_-&gt;<span class=\"built_in\">assertInLoopThread</span>();  </span><br><span class=\"line\">listenning_ = <span class=\"literal\">true</span>;  </span><br><span class=\"line\">acceptSocket_.<span class=\"built_in\">listen</span>();  </span><br><span class=\"line\">acceptChannel_.<span class=\"built_in\">enableReading</span>(); <span class=\"comment\">// 将 acceptChannel_ 加入 Poller 监听  </span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>当新连接到达时，acceptChannel_ 的 handleRead 被触发：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Acceptor.cc  </span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">Acceptor::handleRead</span><span class=\"params\">()</span>  </span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;  </span><br><span class=\"line\">loop_-&gt;<span class=\"built_in\">assertInLoopThread</span>();  </span><br><span class=\"line\">InetAddress peerAddr;  </span><br><span class=\"line\"><span class=\"type\">int</span> connfd = acceptSocket_.<span class=\"built_in\">accept</span>(&amp;peerAddr); <span class=\"comment\">// 接受新连接  </span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (connfd &gt;= <span class=\"number\">0</span>)  </span><br><span class=\"line\">&#123;  </span><br><span class=\"line\"><span class=\"keyword\">if</span> (newConnectionCallback_)  </span><br><span class=\"line\">&#123;  </span><br><span class=\"line\"><span class=\"built_in\">newConnectionCallback_</span>(connfd, peerAddr); <span class=\"comment\">// 调用 TcpServer::newConnection  </span></span><br><span class=\"line\">&#125;  </span><br><span class=\"line\"><span class=\"keyword\">else</span>  </span><br><span class=\"line\">&#123;  </span><br><span class=\"line\">sockets::<span class=\"built_in\">close</span>(connfd);  </span><br><span class=\"line\">&#125;  </span><br><span class=\"line\">&#125;  </span><br><span class=\"line\"><span class=\"comment\">// ... (错误处理和 EMFILE 处理) ...  </span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-TcpServer-newConnection：连接的分发\"><a href=\"#2-TcpServer-newConnection：连接的分发\" class=\"headerlink\" title=\"2. TcpServer::newConnection：连接的分发\"></a><strong>2. TcpServer::newConnection：连接的分发</strong></h3><p>Acceptor 将新接受的 connfd 和对端地址传递给 TcpServer::newConnection。此方法的核心职责是：</p>\n<ol>\n<li>从 EventLoopThreadPool 中通过轮询选择一个 I&#x2F;O EventLoop。</li>\n<li>为新连接创建一个 TcpConnection 对象，并将选择的 I&#x2F;O EventLoop 传递给它。</li>\n<li>设置 TcpConnection 的各种回调（连接状态、消息到达、写完成、关闭）。</li>\n<li>将 TcpConnection::connectEstablished 方法提交到选定的 I&#x2F;O EventLoop 中执行。</li>\n</ol>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// TcpServer.cc  </span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">TcpServer::newConnection</span><span class=\"params\">(<span class=\"type\">int</span> sockfd, <span class=\"type\">const</span> InetAddress&amp; peerAddr)</span>  </span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;  </span><br><span class=\"line\">loop_-&gt;<span class=\"built_in\">assertInLoopThread</span>(); <span class=\"comment\">// 确保在主 EventLoop 中  </span></span><br><span class=\"line\">EventLoop* ioLoop = threadPool_-&gt;<span class=\"built_in\">getNextLoop</span>(); <span class=\"comment\">// 轮询选择 I/O Loop  </span></span><br><span class=\"line\"><span class=\"comment\">// ... (生成连接名 connName) ...  </span></span><br><span class=\"line\"><span class=\"function\">TcpConnectionPtr <span class=\"title\">conn</span><span class=\"params\">(<span class=\"keyword\">new</span> TcpConnection(ioLoop, <span class=\"comment\">// 将 ioLoop 传递给 TcpConnection  </span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">connName,  </span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">sockfd,  </span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">localAddr,  </span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">peerAddr))</span></span>;  </span><br><span class=\"line\">connections_[connName] = conn; <span class=\"comment\">// 保存连接  </span></span><br><span class=\"line\"><span class=\"comment\">// ... (设置各种回调) ...  </span></span><br><span class=\"line\">conn-&gt;<span class=\"built_in\">setCloseCallback</span>(  </span><br><span class=\"line\">std::<span class=\"built_in\">bind</span>(&amp;TcpServer::removeConnection, <span class=\"keyword\">this</span>, _1));  </span><br><span class=\"line\"><span class=\"comment\">// 将连接建立的后续操作交给 ioLoop 执行  </span></span><br><span class=\"line\">ioLoop-&gt;<span class=\"built_in\">runInLoop</span>(std::<span class=\"built_in\">bind</span>(&amp;TcpConnection::connectEstablished, conn));  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3-TcpConnection-connectEstablished：连接的最终建立\"><a href=\"#3-TcpConnection-connectEstablished：连接的最终建立\" class=\"headerlink\" title=\"3. TcpConnection::connectEstablished：连接的最终建立\"></a><strong>3. TcpConnection::connectEstablished：连接的最终建立</strong></h3><p>此方法在选定的 I&#x2F;O EventLoop 线程中执行，完成连接的最后步骤：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// TcpConnection.cc  </span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">TcpConnection::connectEstablished</span><span class=\"params\">()</span>  </span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;  </span><br><span class=\"line\">loop_-&gt;<span class=\"built_in\">assertInLoopThread</span>(); <span class=\"comment\">// 确保在 ioLoop 中  </span></span><br><span class=\"line\"><span class=\"built_in\">assert</span>(state_ == kConnecting);  </span><br><span class=\"line\"><span class=\"built_in\">setState</span>(kConnected);  </span><br><span class=\"line\">channel_-&gt;<span class=\"built_in\">tie</span>(<span class=\"built_in\">shared_from_this</span>()); <span class=\"comment\">// 绑定生命周期  </span></span><br><span class=\"line\">channel_-&gt;<span class=\"built_in\">enableReading</span>(); <span class=\"comment\">// 开始关注该连接上的读事件  </span></span><br><span class=\"line\"><span class=\"built_in\">connectionCallback_</span>(<span class=\"built_in\">shared_from_this</span>()); <span class=\"comment\">// 调用用户设置的连接建立回调  </span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>至此，新连接的建立和分发完成，后续该连接上的所有 I&#x2F;O 事件都将在其被分配到的 I&#x2F;O EventLoop 线程中处理。</p>\n<p>这是建立连接的时序图：</p>\n<p><img src=\"/images/%E5%BB%BA%E7%AB%8B%E6%96%B0%E8%BF%9E%E6%8E%A5.png\" alt=\"建立新连接\"></p>\n<h2 id=\"事件二：收到消息-MessageCallback\"><a href=\"#事件二：收到消息-MessageCallback\" class=\"headerlink\" title=\"事件二：收到消息 (MessageCallback)\"></a><strong>事件二：收到消息 (MessageCallback)</strong></h2><p>当客户端发送数据时，TcpConnection 对应的 channel_ 会触发读事件，进而调用 TcpConnection::handleRead。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// TcpConnection.cc (构造函数中设置)  </span></span><br><span class=\"line\">channel_-&gt;<span class=\"built_in\">setReadCallback</span>(  </span><br><span class=\"line\">std::<span class=\"built_in\">bind</span>(&amp;TcpConnection::handleRead, <span class=\"keyword\">this</span>, _1));</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// TcpConnection.cc  </span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">TcpConnection::handleRead</span><span class=\"params\">(Timestamp receiveTime)</span>  </span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;  </span><br><span class=\"line\">loop_-&gt;<span class=\"built_in\">assertInLoopThread</span>();  </span><br><span class=\"line\"><span class=\"type\">int</span> savedErrno = <span class=\"number\">0</span>;  </span><br><span class=\"line\"><span class=\"type\">ssize_t</span> n = inputBuffer_.<span class=\"built_in\">readFd</span>(channel_-&gt;<span class=\"built_in\">fd</span>(), &amp;savedErrno); <span class=\"comment\">// 从 socket 读取数据到 inputBuffer_  </span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (n &gt; <span class=\"number\">0</span>)  </span><br><span class=\"line\">&#123;  </span><br><span class=\"line\"><span class=\"comment\">// 调用用户在 TcpServer 中设置的 messageCallback_  </span></span><br><span class=\"line\"><span class=\"built_in\">messageCallback_</span>(<span class=\"built_in\">shared_from_this</span>(), &amp;inputBuffer_, receiveTime);  </span><br><span class=\"line\">&#125;  </span><br><span class=\"line\"><span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (n == <span class=\"number\">0</span>) <span class=\"comment\">// 对端关闭  </span></span><br><span class=\"line\">&#123;  </span><br><span class=\"line\"><span class=\"built_in\">handleClose</span>();  </span><br><span class=\"line\">&#125;  </span><br><span class=\"line\"><span class=\"keyword\">else</span> <span class=\"comment\">// 错误  </span></span><br><span class=\"line\">&#123;  </span><br><span class=\"line\">errno = savedErrno;  </span><br><span class=\"line\">LOG_SYSERR &lt;&lt; <span class=\"string\">&quot;TcpConnection::handleRead&quot;</span>;  </span><br><span class=\"line\"><span class=\"built_in\">handleError</span>(); <span class=\"comment\">// 通常也会调用 handleClose  </span></span><br><span class=\"line\">&#125;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n<p>用户通过 TcpServer::setMessageCallback 设置的回调函数会在这里被调用，参数包括 TcpConnectionPtr、存有接收数据的 Buffer* 以及时间戳。用户可以在回调中从 Buffer 中取出数据进行业务处理。</p>\n<p>这是处理读事件的时序图:</p>\n<p><img src=\"/images/%E5%A4%84%E7%90%86%E6%B6%88%E6%81%AF.png\" alt=\"收到消息\"></p>\n<h2 id=\"事件三：消息发送完成-WriteCompleteCallback\"><a href=\"#事件三：消息发送完成-WriteCompleteCallback\" class=\"headerlink\" title=\"事件三：消息发送完成 (WriteCompleteCallback)\"></a><strong>事件三：消息发送完成 (WriteCompleteCallback)</strong></h2><p>当用户调用 TcpConnection::send() 发送数据时：</p>\n<ol>\n<li>如果当前线程不是连接所属的 ioLoop，则将发送任务 sendInLoop 提交到 ioLoop 执行。</li>\n<li>sendInLoop 会尝试直接 write() 数据到 socket。<ul>\n<li>如果数据一次性全部写完，且用户设置了 writeCompleteCallback_，则将其提交到 ioLoop 的任务队列中执行。</li>\n<li>如果数据没有一次性写完（例如内核发送缓冲区满），则将剩余数据存入 outputBuffer_，并使 channel_ 开始关注写事件 (enableWriting())。</li>\n</ul>\n</li>\n<li>当 socket 变为可写时，channel_ 的写事件回调 TcpConnection::handleWrite 被触发。</li>\n<li>handleWrite 会继续从 outputBuffer_ 中发送数据。如果所有数据都发送完毕，则取消对写事件的关注 (disableWriting())，并调用 writeCompleteCallback_。</li>\n</ol>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// TcpConnection.cc (sendInLoop 核心逻辑)  </span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">TcpConnection::sendInLoop</span><span class=\"params\">(<span class=\"type\">const</span> <span class=\"type\">void</span>* data, <span class=\"type\">size_t</span> len)</span>  </span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;  </span><br><span class=\"line\">loop_-&gt;<span class=\"built_in\">assertInLoopThread</span>();  </span><br><span class=\"line\"><span class=\"type\">ssize_t</span> nwrote = <span class=\"number\">0</span>;  </span><br><span class=\"line\"><span class=\"type\">size_t</span> remaining = len;  </span><br><span class=\"line\"><span class=\"type\">bool</span> faultError = <span class=\"literal\">false</span>;  </span><br><span class=\"line\"><span class=\"keyword\">if</span> (state_ == kDisconnected) &#123; <span class=\"comment\">/* ... return ... */</span> &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 如果输出队列为空，尝试直接发送  </span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (!channel_-&gt;<span class=\"built_in\">isWriting</span>() &amp;&amp; outputBuffer_.<span class=\"built_in\">readableBytes</span>() == <span class=\"number\">0</span>)  </span><br><span class=\"line\">&#123;  </span><br><span class=\"line\">nwrote = sockets::<span class=\"built_in\">write</span>(channel_-&gt;<span class=\"built_in\">fd</span>(), data, len);  </span><br><span class=\"line\"><span class=\"keyword\">if</span> (nwrote &gt;= <span class=\"number\">0</span>)  </span><br><span class=\"line\">&#123;  </span><br><span class=\"line\">remaining = len - nwrote;  </span><br><span class=\"line\"><span class=\"keyword\">if</span> (remaining == <span class=\"number\">0</span> &amp;&amp; writeCompleteCallback_) <span class=\"comment\">// 全部发送完毕  </span></span><br><span class=\"line\">&#123;  </span><br><span class=\"line\">loop_-&gt;<span class=\"built_in\">queueInLoop</span>(std::<span class=\"built_in\">bind</span>(writeCompleteCallback_, <span class=\"built_in\">shared_from_this</span>()));  </span><br><span class=\"line\">&#125;  </span><br><span class=\"line\">&#125;  </span><br><span class=\"line\"><span class=\"keyword\">else</span> <span class=\"comment\">// nwrote &lt; 0 (错误)  </span></span><br><span class=\"line\">&#123;  </span><br><span class=\"line\"><span class=\"comment\">// ... 错误处理 ...  </span></span><br><span class=\"line\">&#125;  </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> (!faultError &amp;&amp; remaining &gt; <span class=\"number\">0</span>) <span class=\"comment\">// 如果还有数据未发送  </span></span><br><span class=\"line\">&#123;  </span><br><span class=\"line\"><span class=\"comment\">// ... (检查高水位回调 HighWaterMarkCallback) ...  </span></span><br><span class=\"line\">outputBuffer_.<span class=\"built_in\">append</span>(<span class=\"built_in\">static_cast</span>&lt;<span class=\"type\">const</span> <span class=\"type\">char</span>*&gt;(data)+nwrote, remaining); <span class=\"comment\">// 存入输出缓冲区  </span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (!channel_-&gt;<span class=\"built_in\">isWriting</span>())  </span><br><span class=\"line\">&#123;  </span><br><span class=\"line\">channel_-&gt;<span class=\"built_in\">enableWriting</span>(); <span class=\"comment\">// 开始关注写事件  </span></span><br><span class=\"line\">&#125;  </span><br><span class=\"line\">&#125;  </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// TcpConnection.cc (构造函数中设置)  </span></span><br><span class=\"line\">channel_-&gt;<span class=\"built_in\">setWriteCallback</span>(  </span><br><span class=\"line\">std::<span class=\"built_in\">bind</span>(&amp;TcpConnection::handleWrite, <span class=\"keyword\">this</span>));</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// TcpConnection.cc  </span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">TcpConnection::handleWrite</span><span class=\"params\">()</span>  </span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;  </span><br><span class=\"line\">loop_-&gt;<span class=\"built_in\">assertInLoopThread</span>();  </span><br><span class=\"line\"><span class=\"keyword\">if</span> (channel_-&gt;<span class=\"built_in\">isWriting</span>())  </span><br><span class=\"line\">&#123;  </span><br><span class=\"line\"><span class=\"type\">ssize_t</span> n = sockets::<span class=\"built_in\">write</span>(channel_-&gt;<span class=\"built_in\">fd</span>(),  </span><br><span class=\"line\">outputBuffer_.<span class=\"built_in\">peek</span>(),  </span><br><span class=\"line\">outputBuffer_.<span class=\"built_in\">readableBytes</span>());  </span><br><span class=\"line\"><span class=\"keyword\">if</span> (n &gt; <span class=\"number\">0</span>)  </span><br><span class=\"line\">&#123;  </span><br><span class=\"line\">outputBuffer_.<span class=\"built_in\">retrieve</span>(n);  </span><br><span class=\"line\"><span class=\"keyword\">if</span> (outputBuffer_.<span class=\"built_in\">readableBytes</span>() == <span class=\"number\">0</span>) <span class=\"comment\">// 输出缓冲区已空  </span></span><br><span class=\"line\">&#123;  </span><br><span class=\"line\">channel_-&gt;<span class=\"built_in\">disableWriting</span>(); <span class=\"comment\">// 不再关注写事件  </span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (writeCompleteCallback_)  </span><br><span class=\"line\">&#123;  </span><br><span class=\"line\">loop_-&gt;<span class=\"built_in\">queueInLoop</span>(std::<span class=\"built_in\">bind</span>(writeCompleteCallback_, <span class=\"built_in\">shared_from_this</span>()));  </span><br><span class=\"line\">&#125;  </span><br><span class=\"line\"><span class=\"keyword\">if</span> (state_ == kDisconnecting) <span class=\"comment\">// 如果正在关闭连接  </span></span><br><span class=\"line\">&#123;  </span><br><span class=\"line\"><span class=\"built_in\">shutdownInLoop</span>();  </span><br><span class=\"line\">&#125;  </span><br><span class=\"line\">&#125;  </span><br><span class=\"line\">&#125;  </span><br><span class=\"line\"><span class=\"keyword\">else</span>  </span><br><span class=\"line\">&#123;  </span><br><span class=\"line\">LOG_SYSERR &lt;&lt; <span class=\"string\">&quot;TcpConnection::handleWrite&quot;</span>;  </span><br><span class=\"line\">&#125;  </span><br><span class=\"line\">&#125;  </span><br><span class=\"line\"><span class=\"keyword\">else</span>  </span><br><span class=\"line\">&#123;  </span><br><span class=\"line\">LOG_TRACE &lt;&lt; <span class=\"string\">&quot;Connection fd = &quot;</span> &lt;&lt; channel_-&gt;<span class=\"built_in\">fd</span>()  </span><br><span class=\"line\">&lt;&lt; <span class=\"string\">&quot; is down, no more writing&quot;</span>;  </span><br><span class=\"line\">&#125;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>“消息发送完成”这个“半个事件”是通过 WriteCompleteCallback 来体现的，它在输出缓冲区的数据全部成功写入内核后被调用。</p>\n<p>因为写数据是用户关注的，如果一次性写完成就不必关心了，写不完就先放到buffer中，等到可写的时候，处理下写事件，将数据再次发送，发送完就不必关注了，这样也可以避免busyloop了</p>\n<p>这是上述过程的时序图</p>\n<p><img src=\"/images/%E6%B6%88%E6%81%AF%E5%86%99%E5%AE%8C.png\" alt=\"消息写完\"></p>\n<h2 id=\"事件四：连接关闭\"><a href=\"#事件四：连接关闭\" class=\"headerlink\" title=\"事件四：连接关闭\"></a><strong>事件四：连接关闭</strong></h2><p>连接关闭的触发点有多种：对端关闭（handleRead 读到 EOF）、本地主动关闭（用户调用 TcpConnection::shutdown()）、或发生错误（handleError） 。<br>这些路径通常都会汇聚到 TcpConnection::handleClose()。</p>\n<p>TcpConnection 在构造时设置了其 channel_ 的关闭回调为 handleClose。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// TcpConnection.cc (构造函数中设置)  </span></span><br><span class=\"line\">channel_-&gt;<span class=\"built_in\">setCloseCallback</span>(  </span><br><span class=\"line\">std::<span class=\"built_in\">bind</span>(&amp;TcpConnection::handleClose, <span class=\"keyword\">this</span>));  </span><br></pre></td></tr></table></figure>\n\n<p><code>handleClose()</code> 的核心逻辑：  </p>\n<ol>\n<li>断言在正确的 <code>ioLoop</code> 中执行。  </li>\n<li>将连接状态设为 <code>kDisconnected</code>。  </li>\n<li>调用 <code>channel_-&gt;disableAll()</code>，使该 <code>Channel</code> 不再关注任何事件。  </li>\n<li>调用用户设置的 <code>connectionCallback_</code>（此时连接状态已变为 <code>kDisconnected</code>）。  </li>\n<li>调用 <code>closeCallback_</code>（在 <code>TcpServer::newConnection</code> 中被绑定到 <code>TcpServer::removeConnection</code>）。</li>\n</ol>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// TcpConnection.cc  </span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">TcpConnection::handleClose</span><span class=\"params\">()</span>  </span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;  </span><br><span class=\"line\">loop_-&gt;<span class=\"built_in\">assertInLoopThread</span>();  </span><br><span class=\"line\">LOG_TRACE &lt;&lt; <span class=\"string\">&quot;fd = &quot;</span> &lt;&lt; channel_-&gt;<span class=\"built_in\">fd</span>() &lt;&lt; <span class=\"string\">&quot; state = &quot;</span> &lt;&lt; <span class=\"built_in\">stateToString</span>();  </span><br><span class=\"line\"><span class=\"built_in\">assert</span>(state_ == kConnected || state_ == kDisconnecting);  </span><br><span class=\"line\"><span class=\"built_in\">setState</span>(kDisconnected);  </span><br><span class=\"line\">channel_-&gt;<span class=\"built_in\">disableAll</span>(); <span class=\"comment\">// 如果是那种建立过连接的文件描述符，在这一步就会被从poller移除了</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">TcpConnectionPtr <span class=\"title\">guardThis</span><span class=\"params\">(shared_from_this())</span></span>; <span class=\"comment\">// 确保回调期间对象存活  </span></span><br><span class=\"line\"><span class=\"built_in\">connectionCallback_</span>(guardThis);  </span><br><span class=\"line\"><span class=\"built_in\">closeCallback_</span>(guardThis); <span class=\"comment\">// 调用 TcpServer::removeConnection  </span></span><br><span class=\"line\">&#125;  </span><br></pre></td></tr></table></figure>\n<p><code>TcpServer::removeConnection</code> 会将实际的移除操作（从 <code>connections_</code> map 中删除）提交到 <code>TcpServer</code> 的主 <code>EventLoop</code> 中执行（<code>removeConnectionInLoop</code>），以保证线程安全。之后，它会将最终的销毁操作 <code>TcpConnection::connectDestroyed</code> 提交回该连接所属的 I&#x2F;O <code>EventLoop</code> 中执行。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// TcpServer.cc  </span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">TcpServer::removeConnection</span><span class=\"params\">(<span class=\"type\">const</span> TcpConnectionPtr&amp; conn)</span>  </span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;  </span><br><span class=\"line\">loop_-&gt;<span class=\"built_in\">runInLoop</span>(std::<span class=\"built_in\">bind</span>(&amp;TcpServer::removeConnectionInLoop, <span class=\"keyword\">this</span>, conn));  </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">TcpServer::removeConnectionInLoop</span><span class=\"params\">(<span class=\"type\">const</span> TcpConnectionPtr&amp; conn)</span>  </span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;  </span><br><span class=\"line\">loop_-&gt;<span class=\"built_in\">assertInLoopThread</span>();  </span><br><span class=\"line\">LOG_INFO &lt;&lt; <span class=\"string\">&quot;TcpServer::removeConnectionInLoop [&quot;</span> &lt;&lt; name_  </span><br><span class=\"line\">&lt;&lt; <span class=\"string\">&quot;] - connection &quot;</span> &lt;&lt; conn-&gt;<span class=\"built_in\">name</span>();  </span><br><span class=\"line\">connections_.<span class=\"built_in\">erase</span>(conn-&gt;<span class=\"built_in\">name</span>()); <span class=\"comment\">// 从 TcpServer 管理的 map 中移除  </span></span><br><span class=\"line\">EventLoop* ioLoop = conn-&gt;<span class=\"built_in\">getLoop</span>();  </span><br><span class=\"line\"><span class=\"comment\">// 将最后的清理工作交给连接所属的 ioLoop  </span></span><br><span class=\"line\">ioLoop-&gt;<span class=\"built_in\">queueInLoop</span>(  </span><br><span class=\"line\">std::<span class=\"built_in\">bind</span>(&amp;TcpConnection::connectDestroyed, conn));  </span><br><span class=\"line\">&#125;  </span><br></pre></td></tr></table></figure>\n<p><code>TcpConnection::connectDestroyed</code> 负责将 <code>Channel</code> 从其 <code>EventLoop</code> 的 <code>Poller</code> 中移除。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// TcpConnection.cc  </span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">TcpConnection::connectDestroyed</span><span class=\"params\">()</span>  </span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;  </span><br><span class=\"line\">loop_-&gt;<span class=\"built_in\">assertInLoopThread</span>();  </span><br><span class=\"line\"><span class=\"keyword\">if</span> (state_ == kConnected) <span class=\"comment\">// 如果之前是连接状态，则先更新状态并调用回调  </span></span><br><span class=\"line\">&#123;  </span><br><span class=\"line\"><span class=\"built_in\">setState</span>(kDisconnected);  </span><br><span class=\"line\">channel_-&gt;<span class=\"built_in\">disableAll</span>();  </span><br><span class=\"line\"><span class=\"built_in\">connectionCallback_</span>(<span class=\"built_in\">shared_from_this</span>());  </span><br><span class=\"line\">&#125;  </span><br><span class=\"line\">channel_-&gt;<span class=\"built_in\">remove</span>(); <span class=\"comment\">// 从 Poller 中移除 Channel  </span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Channel.cc  </span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">Channel::remove</span><span class=\"params\">()</span>  </span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;  </span><br><span class=\"line\"><span class=\"built_in\">assert</span>(<span class=\"built_in\">isNoneEvent</span>());  </span><br><span class=\"line\">addedToLoop_ = <span class=\"literal\">false</span>;  </span><br><span class=\"line\">loop_-&gt;<span class=\"built_in\">removeChannel</span>(<span class=\"keyword\">this</span>); <span class=\"comment\">// 通知 EventLoop 从 Poller 中移除  </span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>EventLoop::removeChannel 会调用 Poller::removeChannel，最终通过 epoll_ctl(EPOLL_CTL_DEL, …) 将文件描述符从 epoll 实例中移除。</p>\n<p>这是关闭连接的时序图:</p>\n<p><img src=\"/images/%E8%BF%9E%E6%8E%A5%E5%85%B3%E9%97%AD.png\" alt=\"连接关闭\"><br>当 TcpConnectionPtr 的最后一个 shared_ptr 引用（通常是在 connectDestroyed 的 std::bind 对象析构时）消失后，TcpConnection 对象及其拥有的 Socket（会在析构时关闭 fd）和 Channel 对象会被自动析构，完成资源的彻底回收。</p>\n<p>这一套精心设计的流程，严格遵守了“对象生命周期管理”和“线程封闭”的原则，确保了连接关闭的正确性和资源的有效释放。</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a><strong>总结</strong></h2><p>通过对 muduo 中新连接建立、数据收发、连接关闭这“三个半事件”处理流程的分析，我们可以看到陈硕大佬是如何将这些网络编程中的核心操作，优雅地融入其基于对象的事件驱动框架中的。</p>\n<ul>\n<li><strong>事件的统一处理入口：</strong> EventLoop::loop() 是所有事件处理的起点。</li>\n<li><strong>Channel 作为事件分发的核心：</strong> 它封装了文件描述符和相关的事件回调。</li>\n<li><strong>职责明确的类设计：</strong> Acceptor 专注于接受新连接，TcpServer 负责管理和分发连接，TcpConnection 负责处理单个连接的生命周期和业务逻辑。</li>\n<li><strong>线程安全的保证：</strong> 通过 “One Loop Per Thread” 和 runInLoop&#x2F;queueInLoop 机制，确保了所有对象的操作都在其所属的线程中执行。</li>\n<li><strong>回调机制的广泛应用：</strong> 将具体的业务逻辑与框架逻辑解耦，提高了灵活性和可扩展性。</li>\n</ul>\n<p>通过这些操作，在遵循陈硕大佬的 <code>基于对象</code> 的理念的前提下，完成了对“三个半事件”的处理。</p>"},{"title":"muduo源码剖析:04.Buffer设计分析","date":"2025-08-26T16:00:00.000Z","_content":"## **前言**\n\n在本系列之前的源码剖析中，我们已经分析了 muduo “一个线程一个EventLoop”的实现方式、网络连接事件的处理（三个半事件）、以及 TimerQueue 如何将定时器纳入事件循环框架。\n至此，我们对 muduo 的事件驱动逻辑和核心调度机制已经有了深入的理解。\n\n在正式进入 Buffer 的剖析前，让我们先重新考虑下一下陈硕大佬在《Linux高性能网络编程》一书的 6.4.1 小节中提出的关于为什么要使用微应用层缓冲区的问题：\n\n1. 假设应用程序需要发送 40kB 数据，但是操作系统的 TCP 发送缓冲区只有 25kB 剩余空间，那么剩下的 15kB 数据怎么办？如果等待 OS 缓冲区可用，会阻塞当前线程…\n2. 如果应用程序随后又要发送 50kB 数据，而此时应用层发送缓冲区中尚有未发送的数据…那么网络库应该将这 50kB 数据追加到发送缓冲区的末尾，而不能立刻尝试 write()，因为这样有可能打乱数据的顺序。\n3. 在非阻塞网络编程中，为什么要使用应用层接收缓冲区？假如一次读到的数据不够一个完整的数据包，那么这些已经读到的数据是不是应该先暂存在某个地方…？\n4. 在非阻塞网络编程中，如何设计并使用缓冲区？一方面我们希望减少系统调用，一次读的数据越多越划算…另一方面，我们希望减少内存占用…muduo 用 readv(2) 结合栈上空间巧妙地解决了这个问题。\n\n这些问题实际上在说一个事情：**如何在非阻塞 I/O 模型下，高效、安全地处理数据的收发和内存管理。** \n\n在计算机界有一个经典的论断：`程序 = 数据结构 + 算法 `,muduo::net::Buffer就是陈硕大佬解决此问题的数据结构，也是他此问题的答案。\n\n本文，我们将深入剖析 muduo::net::Buffer 的设计与实现，理解其如何通过精巧的内部结构和操作，实现高效的内存管理和数据处理，从而为 muduo 的高性能网络 I/O 提供坚实基础。\n<!-- more -->\n## **muduo::Buffer 概览与设计目标**\n\nmuduo::net::Buffer 的核心目标是提供一个可动态增长的缓冲区，用于暂存网络套接字读写的数据。其设计深受 Netty ChannelBuffer 的启发，采用了经典的三段式内存布局：\n\n+-------------------+------------------+------------------+  \n| prependable bytes |  readable bytes  |  writable bytes  |  \n|                   |     (CONTENT)    |                  |  \n+-------------------+------------------+------------------+  \n|                   |                  |                  |  \n0      <=      readerIndex   <=   writerIndex    <=     size\n\n* **prependable bytes (可预置空间):** 位于缓冲区的最前端。它的一个妙用是在已有数据前方便地添加协议头（如消息长度），而无需移动现有数据。muduo 默认预留了 kCheapPrepend = 8 字节。\n* **readable bytes (可读数据区):** 存储了从网络接收到或准备发送的实际有效数据，从 readerIndex_ 开始，到 writerIndex_ 结束。\n* **writable bytes (可写空间):** 位于可读数据之后，用于追加新的数据，从 writerIndex_ 开始，到缓冲区末尾结束。\n\n这种设计使得 Buffer 在处理网络协议和进行数据读写时非常灵活和高效。\n\n## **核心数据成员与内存布局**\n\nBuffer 类的核心主要由以下三个成员构成：\n\n```c++\nclass Buffer : public muduo::copyable  \n{  \npublic:  \nstatic const size_t kCheapPrepend = 8;  \nstatic const size_t kInitialSize = 1024;\n\nexplicit Buffer(size_t initialSize = kInitialSize)\n: buffer_(kCheapPrepend + initialSize), // 内部使用 std::vector<char> 存储数据  \nreaderIndex_(kCheapPrepend),          // 读指针，初始指向预留空间之后  \nwriterIndex_(kCheapPrepend)           // 写指针，初始与读指针相同  \n{  \nassert(readableBytes() == 0);  \nassert(writableBytes() == initialSize);  \nassert(prependableBytes() == kCheapPrepend);  \n}  \n// ...  \nprivate:  \nstd::vector<char> buffer_; // 底层存储  \nsize_t readerIndex_;       // 读指针索引  \nsize_t writerIndex_;       // 写指针索引  \n// ...  \n};\n```\n\n* buffer_: 一个 std::vector<char>，作为实际存储数据的底层容器。其初始大小为 kCheapPrepend + initialSize。\n* readerIndex_: size_t 类型，标记可读数据的起始位置。\n* writerIndex_: size_t 类型，标记可读数据的结束位置，同时也是可写空间的起始位置。\n\n通过这两个索引，我们可以方便地计算出三段空间的大小，并获取可读数据的指针：\n\n```c++\nsize_t readableBytes() const  \n{ return writerIndex_ - readerIndex_; } // 可读数据长度\n\nsize_t writableBytes() const  \n{ return buffer_.size() - writerIndex_; } // 可写空间长度\n\nsize_t prependableBytes() const  \n{ return readerIndex_; } // 可预置空间长度\n\nconst char* peek() const  \n{ return begin() + readerIndex_; }\n```\n\n## **基本操作：数据读取 (Retrieve) 与追加 (Append)**\n\n### **1. 数据读取 (Retrieve) - 逻辑上的消耗**\n\n当数据被应用程序消耗后，需要从 Buffer 中“取出”这部分数据。muduo::Buffer 并不立即删除内存，而是通过移动 readerIndex_ 来高效地完成这个操作：\n\n```c++\nvoid Buffer::retrieve(size_t len)  \n{  \nassert(len <= readableBytes());  \nif (len < readableBytes())  \n{  \nreaderIndex_ += len; // 简单地将读指针后移  \n}  \nelse // 如果取出的长度等于或超过可读数据长度，则全部取出  \n{  \nretrieveAll();  \n}  \n}\n\nvoid Buffer::retrieveAll()  \n{  \n// 将读写指针都重置到预留空间之后，表示缓冲区已空。  \n// 之前已读的数据空间（0 到 readerIndex_）被逻辑上回收，成为新的 prependable 空间。  \nreaderIndex_ = kCheapPrepend;  \nwriterIndex_ = kCheapPrepend;  \n}\n\nstring Buffer::retrieveAsString(size_t len)  \n{  \nassert(len <= readableBytes());  \nstring result(peek(), len); // 从可读区构造字符串  \nretrieve(len); // 更新读指针  \nreturn result;  \n}\n```\n\n核心思想是通过增加 readerIndex_ 来“丢弃”已处理的数据，这些数据在物理上并未立即从 buffer_ 中删除，只是逻辑上变为不可读。当 retrieveAll() 被调用时，读写指针会重置，为下一次写入腾出大量空间。\n\n### **2. 数据追加 (Append) - 解决系统缓冲区满的问题**\n\n向 Buffer 中写入新数据是通过 append 系列方法实现的，这会移动 writerIndex_。这正是解决文章开头提出的“系统发送缓冲区满，数据怎么办”问题的答案——先将数据追加到应用层的 Buffer 中。\n\n```c++\nvoid Buffer::append(const char* /*restrict*/ data, size_t len)  \n{  \nensureWritableBytes(len); // 确保有足够的可写空间  \nstd::copy(data, data+len, beginWrite()); // 拷贝数据到可写区  \nhasWritten(len); // 更新写指针  \n}\n\nvoid Buffer::hasWritten(size_t len) // 更新写指针  \n{  \nassert(len <= writableBytes());  \nwriterIndex_ += len;  \n}\n\n```\n\n在追加数据前，会调用 ensureWritableBytes(len) 来确保有足够的空间。如果空间不足，则会触发 makeSpace(len) 逻辑。\n\n## **空间管理与扩容：makeSpace 的智慧**\n\nmakeSpace 是 Buffer 内存管理的核心，它智能地采取两种策略来获取更多可写空间：\n\n1. **内部腾挪 (空间复用)：** 如果 writableBytes() + prependableBytes()（即总的空闲空间）足够大，它会选择将当前可读数据 (readerIndex_ 到 writerIndex_ 之间的内容) **向前移动**到 kCheapPrepend 位置，从而将 prependableBytes 的已读空间转化为新的 writableBytes。这种方式**避免了 std::vector 的重新分配和数据拷贝**（如果 resize 导致了重新分配），效率极高。\n2. **外部扩容 (内存增长)：** 如果总空闲空间也不够用，说明缓冲区确实需要增长。此时，只能通过 buffer_.resize(writerIndex_ + len) 来扩展底层 std::vector 的大小。\n\n```c++\nvoid Buffer::makeSpace(size_t len)  \n{  \n// 条件：总空闲空间不足以容纳 len 和 kCheapPrepend  \nif (writableBytes() + prependableBytes() < len + kCheapPrepend)  \n{  \n// 只能扩容 vector  \nbuffer_.resize(writerIndex_ + len);  \n}  \nelse // 总空闲空间足够，通过移动数据来腾出可写空间  \n{  \nassert(kCheapPrepend < readerIndex_); // 确保 prependableBytes 区域确实有已读空间  \nsize_t readable = readableBytes();  \n// 将 [readerIndex_, writerIndex_) 的数据拷贝到 [kCheapPrepend, kCheapPrepend + readable)  \nstd::copy(begin() + readerIndex_,  \nbegin() + writerIndex_,  \nbegin() + kCheapPrepend);  \nreaderIndex_ = kCheapPrepend; // 更新读指针  \nwriterIndex_ = readerIndex_ + readable; // 更新写指针  \nassert(readable == readableBytes());  \n}  \n}\n```\n\n这种“优先内部腾挪，实在不行再扩容”的策略，完美兼顾了效率和空间利用率。\n\n## **高效的 Socket 读操作：readFd 与 readv 的绝妙配合**\n\nmuduo 通常工作在 LT (电平触发) 模式下，为了避免因数据未读完而导致的事件重复触发，需要一次性将 socket 缓冲区的数据尽可能读完。Buffer::readFd 正是为此设计的，它通过 readv (分散读) 系统调用和栈上临时缓冲区 extrabuf，巧妙地解决了这个问题，同时优化了性能。\n\n```c++\nssize_t Buffer::readFd(int fd, int* savedErrno)  \n{  \nchar extrabuf[65536]; // 在栈上分配一个较大的临时缓冲区 (64KB)  \nstruct iovec vec[2];  \nconst size_t writable = writableBytes(); // Buffer 内部当前可写空间\n\n// 第一块 iovec 指向 Buffer 内部的可写空间  \nvec[0].iov_base = begin() + writerIndex_;  \nvec[0].iov_len = writable;  \n// 第二块 iovec 指向栈上的 extrabuf  \nvec[1].iov_base = extrabuf;  \nvec[1].iov_len = sizeof extrabuf;\n\n// 如果 Buffer 内部可写空间较小，则同时使用两块 iovec 进行读操作  \nconst int iovcnt = (writable < sizeof extrabuf) ? 2 : 1;  \nconst ssize_t n = sockets::readv(fd, vec, iovcnt); // 一次系统调用，最多读取 writable + 64KB 数据\n\nif (n < 0)  \n{  \n*savedErrno = errno;  \n}  \nelse if (implicit_cast<size_t>(n) <= writable) // 读取的数据全部放入了 Buffer 的可写区  \n{  \nwriterIndex_ += n;  \n}  \nelse // 读取的数据量大于 Buffer 内部可写空间，说明 extrabuf 被用到了  \n{  \nwriterIndex_ = buffer_.size(); // Buffer 内部可写空间已写满  \nappend(extrabuf, n - writable); // 将 extrabuf 中多余的数据追加到 Buffer (此时会触发 makeSpace 扩容)  \n}  \nreturn n;  \n}  \n```\n\n`readFd` 的设计有几个显著优点：  \n1.  **减少系统调用：** 通过 `readv` 和 `extrabuf`，即使 `Buffer` 内部当前可写空间不大，也能尝试一次性从内核读取更多数据，避免了多次 `read` 系统调用。  \n2.  **避免内存浪费：** 解决了文章开头提出的“为每个连接分配大的缓冲区导致内存浪费”的问题。`Buffer` 可以以较小的初始大小启动，`readFd` 利用栈上临时空间来处理突发的大量数据，只有在确认需要时才真正扩容 `Buffer`。  \n3.  **避免 `ioctl(FIONREAD)`：** 它没有先查询有多少数据可读，而是直接尝试读取，更加高效。  \n4.  **栈上缓冲区：** `extrabuf` 分配在栈上，避免了额外的堆内存分配开销。\n\n## **其他实用特性**\n\n* **网络字节序处理：** `Buffer` 提供了一系列 `appendIntXX`、`readIntXX`、`peekIntXX` 方法，方便地处理网络字节序（Big Endian）的整型数据。  \n* **头部预置 (`prepend`)：** 利用 `prependableBytes_` 空间，在可读数据前高效地添加数据，非常适合用于封装协议头。  \n* **查找与收缩：** `findCRLF()` / `findEOL()` 辅助解析文本协议；`shrink()` 用于在 `Buffer` 容量远大于实际数据时回收内存。\n\n## **总结与设计启示**\n\n`muduo::net::Buffer` 通过其精巧的三段式内存布局、灵活的读写指针以及高效的空间管理和 I/O 策略，完美地回答了文章开头提出的所有关于网络编程中缓冲区设计的难题。 它为 `muduo` 网络库提供了坚实的数据缓冲基础。\n\n其核心设计启示包括：\n\n1.  **空间复用优于频繁分配：** `kCheapPrepend` 的设计和 `makeSpace` 中优先移动数据的策略，体现了对内存分配和数据拷贝的优化。  \n2.  **减少系统调用是关键：** `readFd` 中使用 `readv` 和栈上大缓冲区，是典型的用少量计算换取大量 I/O 系统调用开销的性能优化范例。  \n3.  **设计要贴合场景：** `Buffer` 的所有设计都紧密围绕 TCP 网络编程的特点和痛点，如协议头添加、避免阻塞等。  \n4.  **接口的完备性与易用性：** 提供了丰富的辅助函数，使得上层业务处理数据和解析协议变得更加简单和安全。\n\n理解了 `Buffer` 的设计，我们就能更好地理解 `muduo` 中数据是如何在网络连接中高效流转的。至此，我们对 `muduo` 核心的并发模型、事件处理、时间管理以及数据缓冲都有了深入的认识。","source":"_posts/muduo/muduo源码剖析:04.Bugffer设计分析.md","raw":"\n---\ntitle: \"muduo源码剖析:04.Buffer设计分析\"\ndate: 2025-08-27\ncategories: \n  - 源码分析\n  - muduo\ntags:\n  - C++\n  - muduo\n  - 网络库\n---\n## **前言**\n\n在本系列之前的源码剖析中，我们已经分析了 muduo “一个线程一个EventLoop”的实现方式、网络连接事件的处理（三个半事件）、以及 TimerQueue 如何将定时器纳入事件循环框架。\n至此，我们对 muduo 的事件驱动逻辑和核心调度机制已经有了深入的理解。\n\n在正式进入 Buffer 的剖析前，让我们先重新考虑下一下陈硕大佬在《Linux高性能网络编程》一书的 6.4.1 小节中提出的关于为什么要使用微应用层缓冲区的问题：\n\n1. 假设应用程序需要发送 40kB 数据，但是操作系统的 TCP 发送缓冲区只有 25kB 剩余空间，那么剩下的 15kB 数据怎么办？如果等待 OS 缓冲区可用，会阻塞当前线程…\n2. 如果应用程序随后又要发送 50kB 数据，而此时应用层发送缓冲区中尚有未发送的数据…那么网络库应该将这 50kB 数据追加到发送缓冲区的末尾，而不能立刻尝试 write()，因为这样有可能打乱数据的顺序。\n3. 在非阻塞网络编程中，为什么要使用应用层接收缓冲区？假如一次读到的数据不够一个完整的数据包，那么这些已经读到的数据是不是应该先暂存在某个地方…？\n4. 在非阻塞网络编程中，如何设计并使用缓冲区？一方面我们希望减少系统调用，一次读的数据越多越划算…另一方面，我们希望减少内存占用…muduo 用 readv(2) 结合栈上空间巧妙地解决了这个问题。\n\n这些问题实际上在说一个事情：**如何在非阻塞 I/O 模型下，高效、安全地处理数据的收发和内存管理。** \n\n在计算机界有一个经典的论断：`程序 = 数据结构 + 算法 `,muduo::net::Buffer就是陈硕大佬解决此问题的数据结构，也是他此问题的答案。\n\n本文，我们将深入剖析 muduo::net::Buffer 的设计与实现，理解其如何通过精巧的内部结构和操作，实现高效的内存管理和数据处理，从而为 muduo 的高性能网络 I/O 提供坚实基础。\n<!-- more -->\n## **muduo::Buffer 概览与设计目标**\n\nmuduo::net::Buffer 的核心目标是提供一个可动态增长的缓冲区，用于暂存网络套接字读写的数据。其设计深受 Netty ChannelBuffer 的启发，采用了经典的三段式内存布局：\n\n+-------------------+------------------+------------------+  \n| prependable bytes |  readable bytes  |  writable bytes  |  \n|                   |     (CONTENT)    |                  |  \n+-------------------+------------------+------------------+  \n|                   |                  |                  |  \n0      <=      readerIndex   <=   writerIndex    <=     size\n\n* **prependable bytes (可预置空间):** 位于缓冲区的最前端。它的一个妙用是在已有数据前方便地添加协议头（如消息长度），而无需移动现有数据。muduo 默认预留了 kCheapPrepend = 8 字节。\n* **readable bytes (可读数据区):** 存储了从网络接收到或准备发送的实际有效数据，从 readerIndex_ 开始，到 writerIndex_ 结束。\n* **writable bytes (可写空间):** 位于可读数据之后，用于追加新的数据，从 writerIndex_ 开始，到缓冲区末尾结束。\n\n这种设计使得 Buffer 在处理网络协议和进行数据读写时非常灵活和高效。\n\n## **核心数据成员与内存布局**\n\nBuffer 类的核心主要由以下三个成员构成：\n\n```c++\nclass Buffer : public muduo::copyable  \n{  \npublic:  \nstatic const size_t kCheapPrepend = 8;  \nstatic const size_t kInitialSize = 1024;\n\nexplicit Buffer(size_t initialSize = kInitialSize)\n: buffer_(kCheapPrepend + initialSize), // 内部使用 std::vector<char> 存储数据  \nreaderIndex_(kCheapPrepend),          // 读指针，初始指向预留空间之后  \nwriterIndex_(kCheapPrepend)           // 写指针，初始与读指针相同  \n{  \nassert(readableBytes() == 0);  \nassert(writableBytes() == initialSize);  \nassert(prependableBytes() == kCheapPrepend);  \n}  \n// ...  \nprivate:  \nstd::vector<char> buffer_; // 底层存储  \nsize_t readerIndex_;       // 读指针索引  \nsize_t writerIndex_;       // 写指针索引  \n// ...  \n};\n```\n\n* buffer_: 一个 std::vector<char>，作为实际存储数据的底层容器。其初始大小为 kCheapPrepend + initialSize。\n* readerIndex_: size_t 类型，标记可读数据的起始位置。\n* writerIndex_: size_t 类型，标记可读数据的结束位置，同时也是可写空间的起始位置。\n\n通过这两个索引，我们可以方便地计算出三段空间的大小，并获取可读数据的指针：\n\n```c++\nsize_t readableBytes() const  \n{ return writerIndex_ - readerIndex_; } // 可读数据长度\n\nsize_t writableBytes() const  \n{ return buffer_.size() - writerIndex_; } // 可写空间长度\n\nsize_t prependableBytes() const  \n{ return readerIndex_; } // 可预置空间长度\n\nconst char* peek() const  \n{ return begin() + readerIndex_; }\n```\n\n## **基本操作：数据读取 (Retrieve) 与追加 (Append)**\n\n### **1. 数据读取 (Retrieve) - 逻辑上的消耗**\n\n当数据被应用程序消耗后，需要从 Buffer 中“取出”这部分数据。muduo::Buffer 并不立即删除内存，而是通过移动 readerIndex_ 来高效地完成这个操作：\n\n```c++\nvoid Buffer::retrieve(size_t len)  \n{  \nassert(len <= readableBytes());  \nif (len < readableBytes())  \n{  \nreaderIndex_ += len; // 简单地将读指针后移  \n}  \nelse // 如果取出的长度等于或超过可读数据长度，则全部取出  \n{  \nretrieveAll();  \n}  \n}\n\nvoid Buffer::retrieveAll()  \n{  \n// 将读写指针都重置到预留空间之后，表示缓冲区已空。  \n// 之前已读的数据空间（0 到 readerIndex_）被逻辑上回收，成为新的 prependable 空间。  \nreaderIndex_ = kCheapPrepend;  \nwriterIndex_ = kCheapPrepend;  \n}\n\nstring Buffer::retrieveAsString(size_t len)  \n{  \nassert(len <= readableBytes());  \nstring result(peek(), len); // 从可读区构造字符串  \nretrieve(len); // 更新读指针  \nreturn result;  \n}\n```\n\n核心思想是通过增加 readerIndex_ 来“丢弃”已处理的数据，这些数据在物理上并未立即从 buffer_ 中删除，只是逻辑上变为不可读。当 retrieveAll() 被调用时，读写指针会重置，为下一次写入腾出大量空间。\n\n### **2. 数据追加 (Append) - 解决系统缓冲区满的问题**\n\n向 Buffer 中写入新数据是通过 append 系列方法实现的，这会移动 writerIndex_。这正是解决文章开头提出的“系统发送缓冲区满，数据怎么办”问题的答案——先将数据追加到应用层的 Buffer 中。\n\n```c++\nvoid Buffer::append(const char* /*restrict*/ data, size_t len)  \n{  \nensureWritableBytes(len); // 确保有足够的可写空间  \nstd::copy(data, data+len, beginWrite()); // 拷贝数据到可写区  \nhasWritten(len); // 更新写指针  \n}\n\nvoid Buffer::hasWritten(size_t len) // 更新写指针  \n{  \nassert(len <= writableBytes());  \nwriterIndex_ += len;  \n}\n\n```\n\n在追加数据前，会调用 ensureWritableBytes(len) 来确保有足够的空间。如果空间不足，则会触发 makeSpace(len) 逻辑。\n\n## **空间管理与扩容：makeSpace 的智慧**\n\nmakeSpace 是 Buffer 内存管理的核心，它智能地采取两种策略来获取更多可写空间：\n\n1. **内部腾挪 (空间复用)：** 如果 writableBytes() + prependableBytes()（即总的空闲空间）足够大，它会选择将当前可读数据 (readerIndex_ 到 writerIndex_ 之间的内容) **向前移动**到 kCheapPrepend 位置，从而将 prependableBytes 的已读空间转化为新的 writableBytes。这种方式**避免了 std::vector 的重新分配和数据拷贝**（如果 resize 导致了重新分配），效率极高。\n2. **外部扩容 (内存增长)：** 如果总空闲空间也不够用，说明缓冲区确实需要增长。此时，只能通过 buffer_.resize(writerIndex_ + len) 来扩展底层 std::vector 的大小。\n\n```c++\nvoid Buffer::makeSpace(size_t len)  \n{  \n// 条件：总空闲空间不足以容纳 len 和 kCheapPrepend  \nif (writableBytes() + prependableBytes() < len + kCheapPrepend)  \n{  \n// 只能扩容 vector  \nbuffer_.resize(writerIndex_ + len);  \n}  \nelse // 总空闲空间足够，通过移动数据来腾出可写空间  \n{  \nassert(kCheapPrepend < readerIndex_); // 确保 prependableBytes 区域确实有已读空间  \nsize_t readable = readableBytes();  \n// 将 [readerIndex_, writerIndex_) 的数据拷贝到 [kCheapPrepend, kCheapPrepend + readable)  \nstd::copy(begin() + readerIndex_,  \nbegin() + writerIndex_,  \nbegin() + kCheapPrepend);  \nreaderIndex_ = kCheapPrepend; // 更新读指针  \nwriterIndex_ = readerIndex_ + readable; // 更新写指针  \nassert(readable == readableBytes());  \n}  \n}\n```\n\n这种“优先内部腾挪，实在不行再扩容”的策略，完美兼顾了效率和空间利用率。\n\n## **高效的 Socket 读操作：readFd 与 readv 的绝妙配合**\n\nmuduo 通常工作在 LT (电平触发) 模式下，为了避免因数据未读完而导致的事件重复触发，需要一次性将 socket 缓冲区的数据尽可能读完。Buffer::readFd 正是为此设计的，它通过 readv (分散读) 系统调用和栈上临时缓冲区 extrabuf，巧妙地解决了这个问题，同时优化了性能。\n\n```c++\nssize_t Buffer::readFd(int fd, int* savedErrno)  \n{  \nchar extrabuf[65536]; // 在栈上分配一个较大的临时缓冲区 (64KB)  \nstruct iovec vec[2];  \nconst size_t writable = writableBytes(); // Buffer 内部当前可写空间\n\n// 第一块 iovec 指向 Buffer 内部的可写空间  \nvec[0].iov_base = begin() + writerIndex_;  \nvec[0].iov_len = writable;  \n// 第二块 iovec 指向栈上的 extrabuf  \nvec[1].iov_base = extrabuf;  \nvec[1].iov_len = sizeof extrabuf;\n\n// 如果 Buffer 内部可写空间较小，则同时使用两块 iovec 进行读操作  \nconst int iovcnt = (writable < sizeof extrabuf) ? 2 : 1;  \nconst ssize_t n = sockets::readv(fd, vec, iovcnt); // 一次系统调用，最多读取 writable + 64KB 数据\n\nif (n < 0)  \n{  \n*savedErrno = errno;  \n}  \nelse if (implicit_cast<size_t>(n) <= writable) // 读取的数据全部放入了 Buffer 的可写区  \n{  \nwriterIndex_ += n;  \n}  \nelse // 读取的数据量大于 Buffer 内部可写空间，说明 extrabuf 被用到了  \n{  \nwriterIndex_ = buffer_.size(); // Buffer 内部可写空间已写满  \nappend(extrabuf, n - writable); // 将 extrabuf 中多余的数据追加到 Buffer (此时会触发 makeSpace 扩容)  \n}  \nreturn n;  \n}  \n```\n\n`readFd` 的设计有几个显著优点：  \n1.  **减少系统调用：** 通过 `readv` 和 `extrabuf`，即使 `Buffer` 内部当前可写空间不大，也能尝试一次性从内核读取更多数据，避免了多次 `read` 系统调用。  \n2.  **避免内存浪费：** 解决了文章开头提出的“为每个连接分配大的缓冲区导致内存浪费”的问题。`Buffer` 可以以较小的初始大小启动，`readFd` 利用栈上临时空间来处理突发的大量数据，只有在确认需要时才真正扩容 `Buffer`。  \n3.  **避免 `ioctl(FIONREAD)`：** 它没有先查询有多少数据可读，而是直接尝试读取，更加高效。  \n4.  **栈上缓冲区：** `extrabuf` 分配在栈上，避免了额外的堆内存分配开销。\n\n## **其他实用特性**\n\n* **网络字节序处理：** `Buffer` 提供了一系列 `appendIntXX`、`readIntXX`、`peekIntXX` 方法，方便地处理网络字节序（Big Endian）的整型数据。  \n* **头部预置 (`prepend`)：** 利用 `prependableBytes_` 空间，在可读数据前高效地添加数据，非常适合用于封装协议头。  \n* **查找与收缩：** `findCRLF()` / `findEOL()` 辅助解析文本协议；`shrink()` 用于在 `Buffer` 容量远大于实际数据时回收内存。\n\n## **总结与设计启示**\n\n`muduo::net::Buffer` 通过其精巧的三段式内存布局、灵活的读写指针以及高效的空间管理和 I/O 策略，完美地回答了文章开头提出的所有关于网络编程中缓冲区设计的难题。 它为 `muduo` 网络库提供了坚实的数据缓冲基础。\n\n其核心设计启示包括：\n\n1.  **空间复用优于频繁分配：** `kCheapPrepend` 的设计和 `makeSpace` 中优先移动数据的策略，体现了对内存分配和数据拷贝的优化。  \n2.  **减少系统调用是关键：** `readFd` 中使用 `readv` 和栈上大缓冲区，是典型的用少量计算换取大量 I/O 系统调用开销的性能优化范例。  \n3.  **设计要贴合场景：** `Buffer` 的所有设计都紧密围绕 TCP 网络编程的特点和痛点，如协议头添加、避免阻塞等。  \n4.  **接口的完备性与易用性：** 提供了丰富的辅助函数，使得上层业务处理数据和解析协议变得更加简单和安全。\n\n理解了 `Buffer` 的设计，我们就能更好地理解 `muduo` 中数据是如何在网络连接中高效流转的。至此，我们对 `muduo` 核心的并发模型、事件处理、时间管理以及数据缓冲都有了深入的认识。","slug":"muduo/muduo源码剖析:04.Bugffer设计分析","published":1,"updated":"2025-08-28T12:44:13.964Z","comments":1,"layout":"post","photos":[],"_id":"cmevecvsg001thfro0cqa20tk","content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a><strong>前言</strong></h2><p>在本系列之前的源码剖析中，我们已经分析了 muduo “一个线程一个EventLoop”的实现方式、网络连接事件的处理（三个半事件）、以及 TimerQueue 如何将定时器纳入事件循环框架。<br>至此，我们对 muduo 的事件驱动逻辑和核心调度机制已经有了深入的理解。</p>\n<p>在正式进入 Buffer 的剖析前，让我们先重新考虑下一下陈硕大佬在《Linux高性能网络编程》一书的 6.4.1 小节中提出的关于为什么要使用微应用层缓冲区的问题：</p>\n<ol>\n<li>假设应用程序需要发送 40kB 数据，但是操作系统的 TCP 发送缓冲区只有 25kB 剩余空间，那么剩下的 15kB 数据怎么办？如果等待 OS 缓冲区可用，会阻塞当前线程…</li>\n<li>如果应用程序随后又要发送 50kB 数据，而此时应用层发送缓冲区中尚有未发送的数据…那么网络库应该将这 50kB 数据追加到发送缓冲区的末尾，而不能立刻尝试 write()，因为这样有可能打乱数据的顺序。</li>\n<li>在非阻塞网络编程中，为什么要使用应用层接收缓冲区？假如一次读到的数据不够一个完整的数据包，那么这些已经读到的数据是不是应该先暂存在某个地方…？</li>\n<li>在非阻塞网络编程中，如何设计并使用缓冲区？一方面我们希望减少系统调用，一次读的数据越多越划算…另一方面，我们希望减少内存占用…muduo 用 readv(2) 结合栈上空间巧妙地解决了这个问题。</li>\n</ol>\n<p>这些问题实际上在说一个事情：<strong>如何在非阻塞 I&#x2F;O 模型下，高效、安全地处理数据的收发和内存管理。</strong> </p>\n<p>在计算机界有一个经典的论断：<code>程序 = 数据结构 + 算法 </code>,muduo::net::Buffer就是陈硕大佬解决此问题的数据结构，也是他此问题的答案。</p>\n<p>本文，我们将深入剖析 muduo::net::Buffer 的设计与实现，理解其如何通过精巧的内部结构和操作，实现高效的内存管理和数据处理，从而为 muduo 的高性能网络 I&#x2F;O 提供坚实基础。</p>\n<span id=\"more\"></span>\n<h2 id=\"muduo-Buffer-概览与设计目标\"><a href=\"#muduo-Buffer-概览与设计目标\" class=\"headerlink\" title=\"muduo::Buffer 概览与设计目标\"></a><strong>muduo::Buffer 概览与设计目标</strong></h2><p>muduo::net::Buffer 的核心目标是提供一个可动态增长的缓冲区，用于暂存网络套接字读写的数据。其设计深受 Netty ChannelBuffer 的启发，采用了经典的三段式内存布局：</p>\n<p>+——————-+——————+——————+<br>| prependable bytes |  readable bytes  |  writable bytes  |<br>|                   |     (CONTENT)    |                  |<br>+——————-+——————+——————+<br>|                   |                  |                  |<br>0      &lt;&#x3D;      readerIndex   &lt;&#x3D;   writerIndex    &lt;&#x3D;     size</p>\n<ul>\n<li><strong>prependable bytes (可预置空间):</strong> 位于缓冲区的最前端。它的一个妙用是在已有数据前方便地添加协议头（如消息长度），而无需移动现有数据。muduo 默认预留了 kCheapPrepend &#x3D; 8 字节。</li>\n<li><strong>readable bytes (可读数据区):</strong> 存储了从网络接收到或准备发送的实际有效数据，从 readerIndex_ 开始，到 writerIndex_ 结束。</li>\n<li><strong>writable bytes (可写空间):</strong> 位于可读数据之后，用于追加新的数据，从 writerIndex_ 开始，到缓冲区末尾结束。</li>\n</ul>\n<p>这种设计使得 Buffer 在处理网络协议和进行数据读写时非常灵活和高效。</p>\n<h2 id=\"核心数据成员与内存布局\"><a href=\"#核心数据成员与内存布局\" class=\"headerlink\" title=\"核心数据成员与内存布局\"></a><strong>核心数据成员与内存布局</strong></h2><p>Buffer 类的核心主要由以下三个成员构成：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Buffer</span> : <span class=\"keyword\">public</span> muduo::copyable  </span><br><span class=\"line\">&#123;  </span><br><span class=\"line\"><span class=\"keyword\">public</span>:  </span><br><span class=\"line\"><span class=\"type\">static</span> <span class=\"type\">const</span> <span class=\"type\">size_t</span> kCheapPrepend = <span class=\"number\">8</span>;  </span><br><span class=\"line\"><span class=\"type\">static</span> <span class=\"type\">const</span> <span class=\"type\">size_t</span> kInitialSize = <span class=\"number\">1024</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">explicit</span> <span class=\"title\">Buffer</span><span class=\"params\">(<span class=\"type\">size_t</span> initialSize = kInitialSize)</span></span></span><br><span class=\"line\"><span class=\"function\">: buffer_(kCheapPrepend + initialSize), // 内部使用 std::vector&lt;char&gt; 存储数据  </span></span><br><span class=\"line\"><span class=\"function\">readerIndex_(kCheapPrepend),          // 读指针，初始指向预留空间之后  </span></span><br><span class=\"line\"><span class=\"function\">writerIndex_(kCheapPrepend)           // 写指针，初始与读指针相同  </span></span><br><span class=\"line\"><span class=\"function\">&#123;</span>  </span><br><span class=\"line\"><span class=\"built_in\">assert</span>(<span class=\"built_in\">readableBytes</span>() == <span class=\"number\">0</span>);  </span><br><span class=\"line\"><span class=\"built_in\">assert</span>(<span class=\"built_in\">writableBytes</span>() == initialSize);  </span><br><span class=\"line\"><span class=\"built_in\">assert</span>(<span class=\"built_in\">prependableBytes</span>() == kCheapPrepend);  </span><br><span class=\"line\">&#125;  </span><br><span class=\"line\"><span class=\"comment\">// ...  </span></span><br><span class=\"line\"><span class=\"keyword\">private</span>:  </span><br><span class=\"line\">std::vector&lt;<span class=\"type\">char</span>&gt; buffer_; <span class=\"comment\">// 底层存储  </span></span><br><span class=\"line\"><span class=\"type\">size_t</span> readerIndex_;       <span class=\"comment\">// 读指针索引  </span></span><br><span class=\"line\"><span class=\"type\">size_t</span> writerIndex_;       <span class=\"comment\">// 写指针索引  </span></span><br><span class=\"line\"><span class=\"comment\">// ...  </span></span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>buffer_: 一个 std::vector<char>，作为实际存储数据的底层容器。其初始大小为 kCheapPrepend + initialSize。</li>\n<li>readerIndex_: size_t 类型，标记可读数据的起始位置。</li>\n<li>writerIndex_: size_t 类型，标记可读数据的结束位置，同时也是可写空间的起始位置。</li>\n</ul>\n<p>通过这两个索引，我们可以方便地计算出三段空间的大小，并获取可读数据的指针：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">size_t</span> <span class=\"title\">readableBytes</span><span class=\"params\">()</span> <span class=\"type\">const</span>  </span></span><br><span class=\"line\"><span class=\"function\"></span>&#123; <span class=\"keyword\">return</span> writerIndex_ - readerIndex_; &#125; <span class=\"comment\">// 可读数据长度</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">size_t</span> <span class=\"title\">writableBytes</span><span class=\"params\">()</span> <span class=\"type\">const</span>  </span></span><br><span class=\"line\"><span class=\"function\"></span>&#123; <span class=\"keyword\">return</span> buffer_.<span class=\"built_in\">size</span>() - writerIndex_; &#125; <span class=\"comment\">// 可写空间长度</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">size_t</span> <span class=\"title\">prependableBytes</span><span class=\"params\">()</span> <span class=\"type\">const</span>  </span></span><br><span class=\"line\"><span class=\"function\"></span>&#123; <span class=\"keyword\">return</span> readerIndex_; &#125; <span class=\"comment\">// 可预置空间长度</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">const</span> <span class=\"type\">char</span>* <span class=\"title\">peek</span><span class=\"params\">()</span> <span class=\"type\">const</span>  </span></span><br><span class=\"line\"><span class=\"function\"></span>&#123; <span class=\"keyword\">return</span> <span class=\"built_in\">begin</span>() + readerIndex_; &#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"基本操作：数据读取-Retrieve-与追加-Append\"><a href=\"#基本操作：数据读取-Retrieve-与追加-Append\" class=\"headerlink\" title=\"基本操作：数据读取 (Retrieve) 与追加 (Append)\"></a><strong>基本操作：数据读取 (Retrieve) 与追加 (Append)</strong></h2><h3 id=\"1-数据读取-Retrieve-逻辑上的消耗\"><a href=\"#1-数据读取-Retrieve-逻辑上的消耗\" class=\"headerlink\" title=\"1. 数据读取 (Retrieve) - 逻辑上的消耗\"></a><strong>1. 数据读取 (Retrieve) - 逻辑上的消耗</strong></h3><p>当数据被应用程序消耗后，需要从 Buffer 中“取出”这部分数据。muduo::Buffer 并不立即删除内存，而是通过移动 readerIndex_ 来高效地完成这个操作：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">Buffer::retrieve</span><span class=\"params\">(<span class=\"type\">size_t</span> len)</span>  </span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;  </span><br><span class=\"line\"><span class=\"built_in\">assert</span>(len &lt;= <span class=\"built_in\">readableBytes</span>());  </span><br><span class=\"line\"><span class=\"keyword\">if</span> (len &lt; <span class=\"built_in\">readableBytes</span>())  </span><br><span class=\"line\">&#123;  </span><br><span class=\"line\">readerIndex_ += len; <span class=\"comment\">// 简单地将读指针后移  </span></span><br><span class=\"line\">&#125;  </span><br><span class=\"line\"><span class=\"keyword\">else</span> <span class=\"comment\">// 如果取出的长度等于或超过可读数据长度，则全部取出  </span></span><br><span class=\"line\">&#123;  </span><br><span class=\"line\"><span class=\"built_in\">retrieveAll</span>();  </span><br><span class=\"line\">&#125;  </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">Buffer::retrieveAll</span><span class=\"params\">()</span>  </span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;  </span><br><span class=\"line\"><span class=\"comment\">// 将读写指针都重置到预留空间之后，表示缓冲区已空。  </span></span><br><span class=\"line\"><span class=\"comment\">// 之前已读的数据空间（0 到 readerIndex_）被逻辑上回收，成为新的 prependable 空间。  </span></span><br><span class=\"line\">readerIndex_ = kCheapPrepend;  </span><br><span class=\"line\">writerIndex_ = kCheapPrepend;  </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">string <span class=\"title\">Buffer::retrieveAsString</span><span class=\"params\">(<span class=\"type\">size_t</span> len)</span>  </span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;  </span><br><span class=\"line\"><span class=\"built_in\">assert</span>(len &lt;= <span class=\"built_in\">readableBytes</span>());  </span><br><span class=\"line\"><span class=\"function\">string <span class=\"title\">result</span><span class=\"params\">(peek(), len)</span></span>; <span class=\"comment\">// 从可读区构造字符串  </span></span><br><span class=\"line\"><span class=\"built_in\">retrieve</span>(len); <span class=\"comment\">// 更新读指针  </span></span><br><span class=\"line\"><span class=\"keyword\">return</span> result;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>核心思想是通过增加 readerIndex_ 来“丢弃”已处理的数据，这些数据在物理上并未立即从 buffer_ 中删除，只是逻辑上变为不可读。当 retrieveAll() 被调用时，读写指针会重置，为下一次写入腾出大量空间。</p>\n<h3 id=\"2-数据追加-Append-解决系统缓冲区满的问题\"><a href=\"#2-数据追加-Append-解决系统缓冲区满的问题\" class=\"headerlink\" title=\"2. 数据追加 (Append) - 解决系统缓冲区满的问题\"></a><strong>2. 数据追加 (Append) - 解决系统缓冲区满的问题</strong></h3><p>向 Buffer 中写入新数据是通过 append 系列方法实现的，这会移动 writerIndex_。这正是解决文章开头提出的“系统发送缓冲区满，数据怎么办”问题的答案——先将数据追加到应用层的 Buffer 中。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">Buffer::append</span><span class=\"params\">(<span class=\"type\">const</span> <span class=\"type\">char</span>* <span class=\"comment\">/*restrict*/</span> data, <span class=\"type\">size_t</span> len)</span>  </span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;  </span><br><span class=\"line\"><span class=\"built_in\">ensureWritableBytes</span>(len); <span class=\"comment\">// 确保有足够的可写空间  </span></span><br><span class=\"line\">std::<span class=\"built_in\">copy</span>(data, data+len, <span class=\"built_in\">beginWrite</span>()); <span class=\"comment\">// 拷贝数据到可写区  </span></span><br><span class=\"line\"><span class=\"built_in\">hasWritten</span>(len); <span class=\"comment\">// 更新写指针  </span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">Buffer::hasWritten</span><span class=\"params\">(<span class=\"type\">size_t</span> len)</span> <span class=\"comment\">// 更新写指针  </span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;  </span><br><span class=\"line\"><span class=\"built_in\">assert</span>(len &lt;= <span class=\"built_in\">writableBytes</span>());  </span><br><span class=\"line\">writerIndex_ += len;  </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>在追加数据前，会调用 ensureWritableBytes(len) 来确保有足够的空间。如果空间不足，则会触发 makeSpace(len) 逻辑。</p>\n<h2 id=\"空间管理与扩容：makeSpace-的智慧\"><a href=\"#空间管理与扩容：makeSpace-的智慧\" class=\"headerlink\" title=\"空间管理与扩容：makeSpace 的智慧\"></a><strong>空间管理与扩容：makeSpace 的智慧</strong></h2><p>makeSpace 是 Buffer 内存管理的核心，它智能地采取两种策略来获取更多可写空间：</p>\n<ol>\n<li><strong>内部腾挪 (空间复用)：</strong> 如果 writableBytes() + prependableBytes()（即总的空闲空间）足够大，它会选择将当前可读数据 (readerIndex_ 到 writerIndex_ 之间的内容) <strong>向前移动</strong>到 kCheapPrepend 位置，从而将 prependableBytes 的已读空间转化为新的 writableBytes。这种方式<strong>避免了 std::vector 的重新分配和数据拷贝</strong>（如果 resize 导致了重新分配），效率极高。</li>\n<li><strong>外部扩容 (内存增长)：</strong> 如果总空闲空间也不够用，说明缓冲区确实需要增长。此时，只能通过 buffer_.resize(writerIndex_ + len) 来扩展底层 std::vector 的大小。</li>\n</ol>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">Buffer::makeSpace</span><span class=\"params\">(<span class=\"type\">size_t</span> len)</span>  </span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;  </span><br><span class=\"line\"><span class=\"comment\">// 条件：总空闲空间不足以容纳 len 和 kCheapPrepend  </span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"built_in\">writableBytes</span>() + <span class=\"built_in\">prependableBytes</span>() &lt; len + kCheapPrepend)  </span><br><span class=\"line\">&#123;  </span><br><span class=\"line\"><span class=\"comment\">// 只能扩容 vector  </span></span><br><span class=\"line\">buffer_.<span class=\"built_in\">resize</span>(writerIndex_ + len);  </span><br><span class=\"line\">&#125;  </span><br><span class=\"line\"><span class=\"keyword\">else</span> <span class=\"comment\">// 总空闲空间足够，通过移动数据来腾出可写空间  </span></span><br><span class=\"line\">&#123;  </span><br><span class=\"line\"><span class=\"built_in\">assert</span>(kCheapPrepend &lt; readerIndex_); <span class=\"comment\">// 确保 prependableBytes 区域确实有已读空间  </span></span><br><span class=\"line\"><span class=\"type\">size_t</span> readable = <span class=\"built_in\">readableBytes</span>();  </span><br><span class=\"line\"><span class=\"comment\">// 将 [readerIndex_, writerIndex_) 的数据拷贝到 [kCheapPrepend, kCheapPrepend + readable)  </span></span><br><span class=\"line\">std::<span class=\"built_in\">copy</span>(<span class=\"built_in\">begin</span>() + readerIndex_,  </span><br><span class=\"line\"><span class=\"built_in\">begin</span>() + writerIndex_,  </span><br><span class=\"line\"><span class=\"built_in\">begin</span>() + kCheapPrepend);  </span><br><span class=\"line\">readerIndex_ = kCheapPrepend; <span class=\"comment\">// 更新读指针  </span></span><br><span class=\"line\">writerIndex_ = readerIndex_ + readable; <span class=\"comment\">// 更新写指针  </span></span><br><span class=\"line\"><span class=\"built_in\">assert</span>(readable == <span class=\"built_in\">readableBytes</span>());  </span><br><span class=\"line\">&#125;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这种“优先内部腾挪，实在不行再扩容”的策略，完美兼顾了效率和空间利用率。</p>\n<h2 id=\"高效的-Socket-读操作：readFd-与-readv-的绝妙配合\"><a href=\"#高效的-Socket-读操作：readFd-与-readv-的绝妙配合\" class=\"headerlink\" title=\"高效的 Socket 读操作：readFd 与 readv 的绝妙配合\"></a><strong>高效的 Socket 读操作：readFd 与 readv 的绝妙配合</strong></h2><p>muduo 通常工作在 LT (电平触发) 模式下，为了避免因数据未读完而导致的事件重复触发，需要一次性将 socket 缓冲区的数据尽可能读完。Buffer::readFd 正是为此设计的，它通过 readv (分散读) 系统调用和栈上临时缓冲区 extrabuf，巧妙地解决了这个问题，同时优化了性能。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">ssize_t</span> <span class=\"title\">Buffer::readFd</span><span class=\"params\">(<span class=\"type\">int</span> fd, <span class=\"type\">int</span>* savedErrno)</span>  </span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;  </span><br><span class=\"line\"><span class=\"type\">char</span> extrabuf[<span class=\"number\">65536</span>]; <span class=\"comment\">// 在栈上分配一个较大的临时缓冲区 (64KB)  </span></span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">iovec</span> vec[<span class=\"number\">2</span>];  </span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">size_t</span> writable = <span class=\"built_in\">writableBytes</span>(); <span class=\"comment\">// Buffer 内部当前可写空间</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 第一块 iovec 指向 Buffer 内部的可写空间  </span></span><br><span class=\"line\">vec[<span class=\"number\">0</span>].iov_base = <span class=\"built_in\">begin</span>() + writerIndex_;  </span><br><span class=\"line\">vec[<span class=\"number\">0</span>].iov_len = writable;  </span><br><span class=\"line\"><span class=\"comment\">// 第二块 iovec 指向栈上的 extrabuf  </span></span><br><span class=\"line\">vec[<span class=\"number\">1</span>].iov_base = extrabuf;  </span><br><span class=\"line\">vec[<span class=\"number\">1</span>].iov_len = <span class=\"keyword\">sizeof</span> extrabuf;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 如果 Buffer 内部可写空间较小，则同时使用两块 iovec 进行读操作  </span></span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> iovcnt = (writable &lt; <span class=\"keyword\">sizeof</span> extrabuf) ? <span class=\"number\">2</span> : <span class=\"number\">1</span>;  </span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">ssize_t</span> n = sockets::<span class=\"built_in\">readv</span>(fd, vec, iovcnt); <span class=\"comment\">// 一次系统调用，最多读取 writable + 64KB 数据</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> (n &lt; <span class=\"number\">0</span>)  </span><br><span class=\"line\">&#123;  </span><br><span class=\"line\">*savedErrno = errno;  </span><br><span class=\"line\">&#125;  </span><br><span class=\"line\"><span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"built_in\">implicit_cast</span>&lt;<span class=\"type\">size_t</span>&gt;(n) &lt;= writable) <span class=\"comment\">// 读取的数据全部放入了 Buffer 的可写区  </span></span><br><span class=\"line\">&#123;  </span><br><span class=\"line\">writerIndex_ += n;  </span><br><span class=\"line\">&#125;  </span><br><span class=\"line\"><span class=\"keyword\">else</span> <span class=\"comment\">// 读取的数据量大于 Buffer 内部可写空间，说明 extrabuf 被用到了  </span></span><br><span class=\"line\">&#123;  </span><br><span class=\"line\">writerIndex_ = buffer_.<span class=\"built_in\">size</span>(); <span class=\"comment\">// Buffer 内部可写空间已写满  </span></span><br><span class=\"line\"><span class=\"built_in\">append</span>(extrabuf, n - writable); <span class=\"comment\">// 将 extrabuf 中多余的数据追加到 Buffer (此时会触发 makeSpace 扩容)  </span></span><br><span class=\"line\">&#125;  </span><br><span class=\"line\"><span class=\"keyword\">return</span> n;  </span><br><span class=\"line\">&#125;  </span><br></pre></td></tr></table></figure>\n\n<p><code>readFd</code> 的设计有几个显著优点：  </p>\n<ol>\n<li><strong>减少系统调用：</strong> 通过 <code>readv</code> 和 <code>extrabuf</code>，即使 <code>Buffer</code> 内部当前可写空间不大，也能尝试一次性从内核读取更多数据，避免了多次 <code>read</code> 系统调用。  </li>\n<li><strong>避免内存浪费：</strong> 解决了文章开头提出的“为每个连接分配大的缓冲区导致内存浪费”的问题。<code>Buffer</code> 可以以较小的初始大小启动，<code>readFd</code> 利用栈上临时空间来处理突发的大量数据，只有在确认需要时才真正扩容 <code>Buffer</code>。  </li>\n<li><strong>避免 <code>ioctl(FIONREAD)</code>：</strong> 它没有先查询有多少数据可读，而是直接尝试读取，更加高效。  </li>\n<li><strong>栈上缓冲区：</strong> <code>extrabuf</code> 分配在栈上，避免了额外的堆内存分配开销。</li>\n</ol>\n<h2 id=\"其他实用特性\"><a href=\"#其他实用特性\" class=\"headerlink\" title=\"其他实用特性\"></a><strong>其他实用特性</strong></h2><ul>\n<li><strong>网络字节序处理：</strong> <code>Buffer</code> 提供了一系列 <code>appendIntXX</code>、<code>readIntXX</code>、<code>peekIntXX</code> 方法，方便地处理网络字节序（Big Endian）的整型数据。  </li>\n<li><strong>头部预置 (<code>prepend</code>)：</strong> 利用 <code>prependableBytes_</code> 空间，在可读数据前高效地添加数据，非常适合用于封装协议头。  </li>\n<li><strong>查找与收缩：</strong> <code>findCRLF()</code> &#x2F; <code>findEOL()</code> 辅助解析文本协议；<code>shrink()</code> 用于在 <code>Buffer</code> 容量远大于实际数据时回收内存。</li>\n</ul>\n<h2 id=\"总结与设计启示\"><a href=\"#总结与设计启示\" class=\"headerlink\" title=\"总结与设计启示\"></a><strong>总结与设计启示</strong></h2><p><code>muduo::net::Buffer</code> 通过其精巧的三段式内存布局、灵活的读写指针以及高效的空间管理和 I&#x2F;O 策略，完美地回答了文章开头提出的所有关于网络编程中缓冲区设计的难题。 它为 <code>muduo</code> 网络库提供了坚实的数据缓冲基础。</p>\n<p>其核心设计启示包括：</p>\n<ol>\n<li><strong>空间复用优于频繁分配：</strong> <code>kCheapPrepend</code> 的设计和 <code>makeSpace</code> 中优先移动数据的策略，体现了对内存分配和数据拷贝的优化。  </li>\n<li><strong>减少系统调用是关键：</strong> <code>readFd</code> 中使用 <code>readv</code> 和栈上大缓冲区，是典型的用少量计算换取大量 I&#x2F;O 系统调用开销的性能优化范例。  </li>\n<li><strong>设计要贴合场景：</strong> <code>Buffer</code> 的所有设计都紧密围绕 TCP 网络编程的特点和痛点，如协议头添加、避免阻塞等。  </li>\n<li><strong>接口的完备性与易用性：</strong> 提供了丰富的辅助函数，使得上层业务处理数据和解析协议变得更加简单和安全。</li>\n</ol>\n<p>理解了 <code>Buffer</code> 的设计，我们就能更好地理解 <code>muduo</code> 中数据是如何在网络连接中高效流转的。至此，我们对 <code>muduo</code> 核心的并发模型、事件处理、时间管理以及数据缓冲都有了深入的认识。</p>\n","excerpt":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a><strong>前言</strong></h2><p>在本系列之前的源码剖析中，我们已经分析了 muduo “一个线程一个EventLoop”的实现方式、网络连接事件的处理（三个半事件）、以及 TimerQueue 如何将定时器纳入事件循环框架。<br>至此，我们对 muduo 的事件驱动逻辑和核心调度机制已经有了深入的理解。</p>\n<p>在正式进入 Buffer 的剖析前，让我们先重新考虑下一下陈硕大佬在《Linux高性能网络编程》一书的 6.4.1 小节中提出的关于为什么要使用微应用层缓冲区的问题：</p>\n<ol>\n<li>假设应用程序需要发送 40kB 数据，但是操作系统的 TCP 发送缓冲区只有 25kB 剩余空间，那么剩下的 15kB 数据怎么办？如果等待 OS 缓冲区可用，会阻塞当前线程…</li>\n<li>如果应用程序随后又要发送 50kB 数据，而此时应用层发送缓冲区中尚有未发送的数据…那么网络库应该将这 50kB 数据追加到发送缓冲区的末尾，而不能立刻尝试 write()，因为这样有可能打乱数据的顺序。</li>\n<li>在非阻塞网络编程中，为什么要使用应用层接收缓冲区？假如一次读到的数据不够一个完整的数据包，那么这些已经读到的数据是不是应该先暂存在某个地方…？</li>\n<li>在非阻塞网络编程中，如何设计并使用缓冲区？一方面我们希望减少系统调用，一次读的数据越多越划算…另一方面，我们希望减少内存占用…muduo 用 readv(2) 结合栈上空间巧妙地解决了这个问题。</li>\n</ol>\n<p>这些问题实际上在说一个事情：<strong>如何在非阻塞 I&#x2F;O 模型下，高效、安全地处理数据的收发和内存管理。</strong> </p>\n<p>在计算机界有一个经典的论断：<code>程序 = 数据结构 + 算法 </code>,muduo::net::Buffer就是陈硕大佬解决此问题的数据结构，也是他此问题的答案。</p>\n<p>本文，我们将深入剖析 muduo::net::Buffer 的设计与实现，理解其如何通过精巧的内部结构和操作，实现高效的内存管理和数据处理，从而为 muduo 的高性能网络 I&#x2F;O 提供坚实基础。</p>","more":"<h2 id=\"muduo-Buffer-概览与设计目标\"><a href=\"#muduo-Buffer-概览与设计目标\" class=\"headerlink\" title=\"muduo::Buffer 概览与设计目标\"></a><strong>muduo::Buffer 概览与设计目标</strong></h2><p>muduo::net::Buffer 的核心目标是提供一个可动态增长的缓冲区，用于暂存网络套接字读写的数据。其设计深受 Netty ChannelBuffer 的启发，采用了经典的三段式内存布局：</p>\n<p>+——————-+——————+——————+<br>| prependable bytes |  readable bytes  |  writable bytes  |<br>|                   |     (CONTENT)    |                  |<br>+——————-+——————+——————+<br>|                   |                  |                  |<br>0      &lt;&#x3D;      readerIndex   &lt;&#x3D;   writerIndex    &lt;&#x3D;     size</p>\n<ul>\n<li><strong>prependable bytes (可预置空间):</strong> 位于缓冲区的最前端。它的一个妙用是在已有数据前方便地添加协议头（如消息长度），而无需移动现有数据。muduo 默认预留了 kCheapPrepend &#x3D; 8 字节。</li>\n<li><strong>readable bytes (可读数据区):</strong> 存储了从网络接收到或准备发送的实际有效数据，从 readerIndex_ 开始，到 writerIndex_ 结束。</li>\n<li><strong>writable bytes (可写空间):</strong> 位于可读数据之后，用于追加新的数据，从 writerIndex_ 开始，到缓冲区末尾结束。</li>\n</ul>\n<p>这种设计使得 Buffer 在处理网络协议和进行数据读写时非常灵活和高效。</p>\n<h2 id=\"核心数据成员与内存布局\"><a href=\"#核心数据成员与内存布局\" class=\"headerlink\" title=\"核心数据成员与内存布局\"></a><strong>核心数据成员与内存布局</strong></h2><p>Buffer 类的核心主要由以下三个成员构成：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Buffer</span> : <span class=\"keyword\">public</span> muduo::copyable  </span><br><span class=\"line\">&#123;  </span><br><span class=\"line\"><span class=\"keyword\">public</span>:  </span><br><span class=\"line\"><span class=\"type\">static</span> <span class=\"type\">const</span> <span class=\"type\">size_t</span> kCheapPrepend = <span class=\"number\">8</span>;  </span><br><span class=\"line\"><span class=\"type\">static</span> <span class=\"type\">const</span> <span class=\"type\">size_t</span> kInitialSize = <span class=\"number\">1024</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">explicit</span> <span class=\"title\">Buffer</span><span class=\"params\">(<span class=\"type\">size_t</span> initialSize = kInitialSize)</span></span></span><br><span class=\"line\"><span class=\"function\">: buffer_(kCheapPrepend + initialSize), // 内部使用 std::vector&lt;char&gt; 存储数据  </span></span><br><span class=\"line\"><span class=\"function\">readerIndex_(kCheapPrepend),          // 读指针，初始指向预留空间之后  </span></span><br><span class=\"line\"><span class=\"function\">writerIndex_(kCheapPrepend)           // 写指针，初始与读指针相同  </span></span><br><span class=\"line\"><span class=\"function\">&#123;</span>  </span><br><span class=\"line\"><span class=\"built_in\">assert</span>(<span class=\"built_in\">readableBytes</span>() == <span class=\"number\">0</span>);  </span><br><span class=\"line\"><span class=\"built_in\">assert</span>(<span class=\"built_in\">writableBytes</span>() == initialSize);  </span><br><span class=\"line\"><span class=\"built_in\">assert</span>(<span class=\"built_in\">prependableBytes</span>() == kCheapPrepend);  </span><br><span class=\"line\">&#125;  </span><br><span class=\"line\"><span class=\"comment\">// ...  </span></span><br><span class=\"line\"><span class=\"keyword\">private</span>:  </span><br><span class=\"line\">std::vector&lt;<span class=\"type\">char</span>&gt; buffer_; <span class=\"comment\">// 底层存储  </span></span><br><span class=\"line\"><span class=\"type\">size_t</span> readerIndex_;       <span class=\"comment\">// 读指针索引  </span></span><br><span class=\"line\"><span class=\"type\">size_t</span> writerIndex_;       <span class=\"comment\">// 写指针索引  </span></span><br><span class=\"line\"><span class=\"comment\">// ...  </span></span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>buffer_: 一个 std::vector<char>，作为实际存储数据的底层容器。其初始大小为 kCheapPrepend + initialSize。</li>\n<li>readerIndex_: size_t 类型，标记可读数据的起始位置。</li>\n<li>writerIndex_: size_t 类型，标记可读数据的结束位置，同时也是可写空间的起始位置。</li>\n</ul>\n<p>通过这两个索引，我们可以方便地计算出三段空间的大小，并获取可读数据的指针：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">size_t</span> <span class=\"title\">readableBytes</span><span class=\"params\">()</span> <span class=\"type\">const</span>  </span></span><br><span class=\"line\"><span class=\"function\"></span>&#123; <span class=\"keyword\">return</span> writerIndex_ - readerIndex_; &#125; <span class=\"comment\">// 可读数据长度</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">size_t</span> <span class=\"title\">writableBytes</span><span class=\"params\">()</span> <span class=\"type\">const</span>  </span></span><br><span class=\"line\"><span class=\"function\"></span>&#123; <span class=\"keyword\">return</span> buffer_.<span class=\"built_in\">size</span>() - writerIndex_; &#125; <span class=\"comment\">// 可写空间长度</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">size_t</span> <span class=\"title\">prependableBytes</span><span class=\"params\">()</span> <span class=\"type\">const</span>  </span></span><br><span class=\"line\"><span class=\"function\"></span>&#123; <span class=\"keyword\">return</span> readerIndex_; &#125; <span class=\"comment\">// 可预置空间长度</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">const</span> <span class=\"type\">char</span>* <span class=\"title\">peek</span><span class=\"params\">()</span> <span class=\"type\">const</span>  </span></span><br><span class=\"line\"><span class=\"function\"></span>&#123; <span class=\"keyword\">return</span> <span class=\"built_in\">begin</span>() + readerIndex_; &#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"基本操作：数据读取-Retrieve-与追加-Append\"><a href=\"#基本操作：数据读取-Retrieve-与追加-Append\" class=\"headerlink\" title=\"基本操作：数据读取 (Retrieve) 与追加 (Append)\"></a><strong>基本操作：数据读取 (Retrieve) 与追加 (Append)</strong></h2><h3 id=\"1-数据读取-Retrieve-逻辑上的消耗\"><a href=\"#1-数据读取-Retrieve-逻辑上的消耗\" class=\"headerlink\" title=\"1. 数据读取 (Retrieve) - 逻辑上的消耗\"></a><strong>1. 数据读取 (Retrieve) - 逻辑上的消耗</strong></h3><p>当数据被应用程序消耗后，需要从 Buffer 中“取出”这部分数据。muduo::Buffer 并不立即删除内存，而是通过移动 readerIndex_ 来高效地完成这个操作：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">Buffer::retrieve</span><span class=\"params\">(<span class=\"type\">size_t</span> len)</span>  </span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;  </span><br><span class=\"line\"><span class=\"built_in\">assert</span>(len &lt;= <span class=\"built_in\">readableBytes</span>());  </span><br><span class=\"line\"><span class=\"keyword\">if</span> (len &lt; <span class=\"built_in\">readableBytes</span>())  </span><br><span class=\"line\">&#123;  </span><br><span class=\"line\">readerIndex_ += len; <span class=\"comment\">// 简单地将读指针后移  </span></span><br><span class=\"line\">&#125;  </span><br><span class=\"line\"><span class=\"keyword\">else</span> <span class=\"comment\">// 如果取出的长度等于或超过可读数据长度，则全部取出  </span></span><br><span class=\"line\">&#123;  </span><br><span class=\"line\"><span class=\"built_in\">retrieveAll</span>();  </span><br><span class=\"line\">&#125;  </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">Buffer::retrieveAll</span><span class=\"params\">()</span>  </span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;  </span><br><span class=\"line\"><span class=\"comment\">// 将读写指针都重置到预留空间之后，表示缓冲区已空。  </span></span><br><span class=\"line\"><span class=\"comment\">// 之前已读的数据空间（0 到 readerIndex_）被逻辑上回收，成为新的 prependable 空间。  </span></span><br><span class=\"line\">readerIndex_ = kCheapPrepend;  </span><br><span class=\"line\">writerIndex_ = kCheapPrepend;  </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">string <span class=\"title\">Buffer::retrieveAsString</span><span class=\"params\">(<span class=\"type\">size_t</span> len)</span>  </span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;  </span><br><span class=\"line\"><span class=\"built_in\">assert</span>(len &lt;= <span class=\"built_in\">readableBytes</span>());  </span><br><span class=\"line\"><span class=\"function\">string <span class=\"title\">result</span><span class=\"params\">(peek(), len)</span></span>; <span class=\"comment\">// 从可读区构造字符串  </span></span><br><span class=\"line\"><span class=\"built_in\">retrieve</span>(len); <span class=\"comment\">// 更新读指针  </span></span><br><span class=\"line\"><span class=\"keyword\">return</span> result;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>核心思想是通过增加 readerIndex_ 来“丢弃”已处理的数据，这些数据在物理上并未立即从 buffer_ 中删除，只是逻辑上变为不可读。当 retrieveAll() 被调用时，读写指针会重置，为下一次写入腾出大量空间。</p>\n<h3 id=\"2-数据追加-Append-解决系统缓冲区满的问题\"><a href=\"#2-数据追加-Append-解决系统缓冲区满的问题\" class=\"headerlink\" title=\"2. 数据追加 (Append) - 解决系统缓冲区满的问题\"></a><strong>2. 数据追加 (Append) - 解决系统缓冲区满的问题</strong></h3><p>向 Buffer 中写入新数据是通过 append 系列方法实现的，这会移动 writerIndex_。这正是解决文章开头提出的“系统发送缓冲区满，数据怎么办”问题的答案——先将数据追加到应用层的 Buffer 中。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">Buffer::append</span><span class=\"params\">(<span class=\"type\">const</span> <span class=\"type\">char</span>* <span class=\"comment\">/*restrict*/</span> data, <span class=\"type\">size_t</span> len)</span>  </span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;  </span><br><span class=\"line\"><span class=\"built_in\">ensureWritableBytes</span>(len); <span class=\"comment\">// 确保有足够的可写空间  </span></span><br><span class=\"line\">std::<span class=\"built_in\">copy</span>(data, data+len, <span class=\"built_in\">beginWrite</span>()); <span class=\"comment\">// 拷贝数据到可写区  </span></span><br><span class=\"line\"><span class=\"built_in\">hasWritten</span>(len); <span class=\"comment\">// 更新写指针  </span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">Buffer::hasWritten</span><span class=\"params\">(<span class=\"type\">size_t</span> len)</span> <span class=\"comment\">// 更新写指针  </span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;  </span><br><span class=\"line\"><span class=\"built_in\">assert</span>(len &lt;= <span class=\"built_in\">writableBytes</span>());  </span><br><span class=\"line\">writerIndex_ += len;  </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>在追加数据前，会调用 ensureWritableBytes(len) 来确保有足够的空间。如果空间不足，则会触发 makeSpace(len) 逻辑。</p>\n<h2 id=\"空间管理与扩容：makeSpace-的智慧\"><a href=\"#空间管理与扩容：makeSpace-的智慧\" class=\"headerlink\" title=\"空间管理与扩容：makeSpace 的智慧\"></a><strong>空间管理与扩容：makeSpace 的智慧</strong></h2><p>makeSpace 是 Buffer 内存管理的核心，它智能地采取两种策略来获取更多可写空间：</p>\n<ol>\n<li><strong>内部腾挪 (空间复用)：</strong> 如果 writableBytes() + prependableBytes()（即总的空闲空间）足够大，它会选择将当前可读数据 (readerIndex_ 到 writerIndex_ 之间的内容) <strong>向前移动</strong>到 kCheapPrepend 位置，从而将 prependableBytes 的已读空间转化为新的 writableBytes。这种方式<strong>避免了 std::vector 的重新分配和数据拷贝</strong>（如果 resize 导致了重新分配），效率极高。</li>\n<li><strong>外部扩容 (内存增长)：</strong> 如果总空闲空间也不够用，说明缓冲区确实需要增长。此时，只能通过 buffer_.resize(writerIndex_ + len) 来扩展底层 std::vector 的大小。</li>\n</ol>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">Buffer::makeSpace</span><span class=\"params\">(<span class=\"type\">size_t</span> len)</span>  </span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;  </span><br><span class=\"line\"><span class=\"comment\">// 条件：总空闲空间不足以容纳 len 和 kCheapPrepend  </span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"built_in\">writableBytes</span>() + <span class=\"built_in\">prependableBytes</span>() &lt; len + kCheapPrepend)  </span><br><span class=\"line\">&#123;  </span><br><span class=\"line\"><span class=\"comment\">// 只能扩容 vector  </span></span><br><span class=\"line\">buffer_.<span class=\"built_in\">resize</span>(writerIndex_ + len);  </span><br><span class=\"line\">&#125;  </span><br><span class=\"line\"><span class=\"keyword\">else</span> <span class=\"comment\">// 总空闲空间足够，通过移动数据来腾出可写空间  </span></span><br><span class=\"line\">&#123;  </span><br><span class=\"line\"><span class=\"built_in\">assert</span>(kCheapPrepend &lt; readerIndex_); <span class=\"comment\">// 确保 prependableBytes 区域确实有已读空间  </span></span><br><span class=\"line\"><span class=\"type\">size_t</span> readable = <span class=\"built_in\">readableBytes</span>();  </span><br><span class=\"line\"><span class=\"comment\">// 将 [readerIndex_, writerIndex_) 的数据拷贝到 [kCheapPrepend, kCheapPrepend + readable)  </span></span><br><span class=\"line\">std::<span class=\"built_in\">copy</span>(<span class=\"built_in\">begin</span>() + readerIndex_,  </span><br><span class=\"line\"><span class=\"built_in\">begin</span>() + writerIndex_,  </span><br><span class=\"line\"><span class=\"built_in\">begin</span>() + kCheapPrepend);  </span><br><span class=\"line\">readerIndex_ = kCheapPrepend; <span class=\"comment\">// 更新读指针  </span></span><br><span class=\"line\">writerIndex_ = readerIndex_ + readable; <span class=\"comment\">// 更新写指针  </span></span><br><span class=\"line\"><span class=\"built_in\">assert</span>(readable == <span class=\"built_in\">readableBytes</span>());  </span><br><span class=\"line\">&#125;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这种“优先内部腾挪，实在不行再扩容”的策略，完美兼顾了效率和空间利用率。</p>\n<h2 id=\"高效的-Socket-读操作：readFd-与-readv-的绝妙配合\"><a href=\"#高效的-Socket-读操作：readFd-与-readv-的绝妙配合\" class=\"headerlink\" title=\"高效的 Socket 读操作：readFd 与 readv 的绝妙配合\"></a><strong>高效的 Socket 读操作：readFd 与 readv 的绝妙配合</strong></h2><p>muduo 通常工作在 LT (电平触发) 模式下，为了避免因数据未读完而导致的事件重复触发，需要一次性将 socket 缓冲区的数据尽可能读完。Buffer::readFd 正是为此设计的，它通过 readv (分散读) 系统调用和栈上临时缓冲区 extrabuf，巧妙地解决了这个问题，同时优化了性能。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">ssize_t</span> <span class=\"title\">Buffer::readFd</span><span class=\"params\">(<span class=\"type\">int</span> fd, <span class=\"type\">int</span>* savedErrno)</span>  </span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;  </span><br><span class=\"line\"><span class=\"type\">char</span> extrabuf[<span class=\"number\">65536</span>]; <span class=\"comment\">// 在栈上分配一个较大的临时缓冲区 (64KB)  </span></span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">iovec</span> vec[<span class=\"number\">2</span>];  </span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">size_t</span> writable = <span class=\"built_in\">writableBytes</span>(); <span class=\"comment\">// Buffer 内部当前可写空间</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 第一块 iovec 指向 Buffer 内部的可写空间  </span></span><br><span class=\"line\">vec[<span class=\"number\">0</span>].iov_base = <span class=\"built_in\">begin</span>() + writerIndex_;  </span><br><span class=\"line\">vec[<span class=\"number\">0</span>].iov_len = writable;  </span><br><span class=\"line\"><span class=\"comment\">// 第二块 iovec 指向栈上的 extrabuf  </span></span><br><span class=\"line\">vec[<span class=\"number\">1</span>].iov_base = extrabuf;  </span><br><span class=\"line\">vec[<span class=\"number\">1</span>].iov_len = <span class=\"keyword\">sizeof</span> extrabuf;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 如果 Buffer 内部可写空间较小，则同时使用两块 iovec 进行读操作  </span></span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> iovcnt = (writable &lt; <span class=\"keyword\">sizeof</span> extrabuf) ? <span class=\"number\">2</span> : <span class=\"number\">1</span>;  </span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">ssize_t</span> n = sockets::<span class=\"built_in\">readv</span>(fd, vec, iovcnt); <span class=\"comment\">// 一次系统调用，最多读取 writable + 64KB 数据</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> (n &lt; <span class=\"number\">0</span>)  </span><br><span class=\"line\">&#123;  </span><br><span class=\"line\">*savedErrno = errno;  </span><br><span class=\"line\">&#125;  </span><br><span class=\"line\"><span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"built_in\">implicit_cast</span>&lt;<span class=\"type\">size_t</span>&gt;(n) &lt;= writable) <span class=\"comment\">// 读取的数据全部放入了 Buffer 的可写区  </span></span><br><span class=\"line\">&#123;  </span><br><span class=\"line\">writerIndex_ += n;  </span><br><span class=\"line\">&#125;  </span><br><span class=\"line\"><span class=\"keyword\">else</span> <span class=\"comment\">// 读取的数据量大于 Buffer 内部可写空间，说明 extrabuf 被用到了  </span></span><br><span class=\"line\">&#123;  </span><br><span class=\"line\">writerIndex_ = buffer_.<span class=\"built_in\">size</span>(); <span class=\"comment\">// Buffer 内部可写空间已写满  </span></span><br><span class=\"line\"><span class=\"built_in\">append</span>(extrabuf, n - writable); <span class=\"comment\">// 将 extrabuf 中多余的数据追加到 Buffer (此时会触发 makeSpace 扩容)  </span></span><br><span class=\"line\">&#125;  </span><br><span class=\"line\"><span class=\"keyword\">return</span> n;  </span><br><span class=\"line\">&#125;  </span><br></pre></td></tr></table></figure>\n\n<p><code>readFd</code> 的设计有几个显著优点：  </p>\n<ol>\n<li><strong>减少系统调用：</strong> 通过 <code>readv</code> 和 <code>extrabuf</code>，即使 <code>Buffer</code> 内部当前可写空间不大，也能尝试一次性从内核读取更多数据，避免了多次 <code>read</code> 系统调用。  </li>\n<li><strong>避免内存浪费：</strong> 解决了文章开头提出的“为每个连接分配大的缓冲区导致内存浪费”的问题。<code>Buffer</code> 可以以较小的初始大小启动，<code>readFd</code> 利用栈上临时空间来处理突发的大量数据，只有在确认需要时才真正扩容 <code>Buffer</code>。  </li>\n<li><strong>避免 <code>ioctl(FIONREAD)</code>：</strong> 它没有先查询有多少数据可读，而是直接尝试读取，更加高效。  </li>\n<li><strong>栈上缓冲区：</strong> <code>extrabuf</code> 分配在栈上，避免了额外的堆内存分配开销。</li>\n</ol>\n<h2 id=\"其他实用特性\"><a href=\"#其他实用特性\" class=\"headerlink\" title=\"其他实用特性\"></a><strong>其他实用特性</strong></h2><ul>\n<li><strong>网络字节序处理：</strong> <code>Buffer</code> 提供了一系列 <code>appendIntXX</code>、<code>readIntXX</code>、<code>peekIntXX</code> 方法，方便地处理网络字节序（Big Endian）的整型数据。  </li>\n<li><strong>头部预置 (<code>prepend</code>)：</strong> 利用 <code>prependableBytes_</code> 空间，在可读数据前高效地添加数据，非常适合用于封装协议头。  </li>\n<li><strong>查找与收缩：</strong> <code>findCRLF()</code> &#x2F; <code>findEOL()</code> 辅助解析文本协议；<code>shrink()</code> 用于在 <code>Buffer</code> 容量远大于实际数据时回收内存。</li>\n</ul>\n<h2 id=\"总结与设计启示\"><a href=\"#总结与设计启示\" class=\"headerlink\" title=\"总结与设计启示\"></a><strong>总结与设计启示</strong></h2><p><code>muduo::net::Buffer</code> 通过其精巧的三段式内存布局、灵活的读写指针以及高效的空间管理和 I&#x2F;O 策略，完美地回答了文章开头提出的所有关于网络编程中缓冲区设计的难题。 它为 <code>muduo</code> 网络库提供了坚实的数据缓冲基础。</p>\n<p>其核心设计启示包括：</p>\n<ol>\n<li><strong>空间复用优于频繁分配：</strong> <code>kCheapPrepend</code> 的设计和 <code>makeSpace</code> 中优先移动数据的策略，体现了对内存分配和数据拷贝的优化。  </li>\n<li><strong>减少系统调用是关键：</strong> <code>readFd</code> 中使用 <code>readv</code> 和栈上大缓冲区，是典型的用少量计算换取大量 I&#x2F;O 系统调用开销的性能优化范例。  </li>\n<li><strong>设计要贴合场景：</strong> <code>Buffer</code> 的所有设计都紧密围绕 TCP 网络编程的特点和痛点，如协议头添加、避免阻塞等。  </li>\n<li><strong>接口的完备性与易用性：</strong> 提供了丰富的辅助函数，使得上层业务处理数据和解析协议变得更加简单和安全。</li>\n</ol>\n<p>理解了 <code>Buffer</code> 的设计，我们就能更好地理解 <code>muduo</code> 中数据是如何在网络连接中高效流转的。至此，我们对 <code>muduo</code> 核心的并发模型、事件处理、时间管理以及数据缓冲都有了深入的认识。</p>"},{"title":"muduo源码剖析:03.定时器的实现","date":"2025-08-26T16:00:00.000Z","_content":"## **前言**\n\n在muduo源码剖析的前两篇文章中，我们深入探讨了 muduo 的核心并发模型——\"One Loop Per Thread\" 的实现，以及 TCP\n连接从建立、数据收发到关闭的完整生命周期管理。\n\n这些内容实际上已经对陈硕大佬在网络库上的设计设计思想体现的很清晰了。但是仅有这些还是不够的， 除了处理网络 I/O\n事件，一个完备的网络库还需要处理时间相关的事件。\n例如，在固定的时间点执行某个任务（runAt）、在一段延迟之后执行任务（runAfter），或者以固定的时间间隔重复执行任务（runEvery）。这些都离不开一个高效且精准的定时器机制。\n\n正如陈硕大佬在《Linux多线程服务端编程》一书中所强调的，muduo 的一个重要设计选择是**利用 timerfd_create 这个 Linux\n系统调用，将时间事件也转化为文件描述符事件**，从而能够被 EventLoop 的 Poller (通常是 epoll) 统一管理和调度。\n\n本文，我们将聚焦于 muduo::net::TimerQueue 类，深入剖析其如何巧妙地利用 timerfd 实现了一个高效、线程安全的定时器队列，并与\nEventLoop 的事件驱动模型完美融合。\n<!-- more -->\n## **从 Printer 示例看 TimerQueue 的应用**\n\n在深入源码之前，我们先来看一个 muduo 提供的简单示例，它展示了如何使用 EventLoop 提供的定时器接口：\n\n```c++\n#include <muduo/net/EventLoop.h>  \n#include <muduo/base/Timestamp.h> // 虽然示例中没直接用，但 runAfter 内部会用  \n#include <muduo/base/Logging.h>   // 虽然示例中没直接用，但 TimerQueue 内部会用  \n#include <iostream>  \n#include <functional>\n\nclass Printer : muduo::noncopyable  \n{  \npublic:  \nPrinter(muduo::net::EventLoop* loop)  \n: loop_(loop),  \ncount_(0)  \n{  \n// 注意：对于这种周期性任务，loop->runEvery() 是更好的选择。  \n// 这里使用 runAfter 来演示其基本用法和递归调用自身实现重复。  \nloop_->runAfter(1.0, std::bind(&Printer::print, this)); // 1秒后执行 print  \n}\n\n~Printer()  \n{  \nstd::cout << \"Final count is \" << count_ << \"n\";  \n}\n\nvoid print()  \n{  \nif (count_ < 5)  \n{  \nstd::cout << count_ << \"n\";  \n++count_;\n// 再次调度自己，1秒后执行  \nloop_->runAfter(1.0, std::bind(&Printer::print, this));  \n}  \nelse  \n{  \n    loop_->quit(); // 打印5次后退出 EventLoop  \n}  \n}\n\nprivate:  \nmuduo::net::EventLoop* loop_;  \nint count_;  \n};\n\n//int main() { ... EventLoop loop; Printer printer(&loop); loop.loop(); ... }\n```\n\n这个 Printer 类通过 EventLoop::runAfter 接口，实现了每隔 1 秒打印一次计数，共打印 5 次后退出 EventLoop 的功能。\nEventLoop 提供的 runAt, runAfter, runEvery 以及 cancel 定时器接口，其底层实现都委托给了 TimerQueue 对象。\n\n## **TimerQueue 的核心职责与设计概览**\n\nTimerQueue 的核心职责是管理一系列的定时器 (Timer 对象)，并在它们到期时执行其回调函数。其整体设计思路如下：\n\n1. **timerfd 作为时间事件的统一入口：**\n    * 在 TimerQueue 构造时，会通过 timerfd_create(CLOCK_MONOTONIC, TFD_NONBLOCK | TFD_CLOEXEC) 创建一个\n      timerfd。CLOCK_MONOTONIC 保证了时间是单调递增的，不受系统时间修改的影响。\n    * 这个 timerfd 被封装成一个 Channel 对象 (timerfdChannel_)，并注册到其所属的 EventLoop 中，监听其可读事件。\n2. **按到期时间排序的定时器列表：**\n    * TimerQueue 内部使用 std::set<std::pair<Timestamp, Timer*>> (即 TimerList timers_) 来存储所有活动的定时器。std::set\n      会自动根据 Timestamp (到期时间) 和 Timer* (指针地址，用于时间相同时保证唯一性) 进行排序，使得 timers_.begin()\n      始终指向最早到期的那个定时器。\n3. **动态设置 timerfd 的超时：**\n    * 每当添加新的定时器或有定时器到期后，TimerQueue 会检查 timers_ 列表中最早到期的定时器的时间戳。\n    * 然后，它会调用 timerfd_settime 系统调用，将 timerfd_ 的下一次超时时间设置为这个最早到期时间点。\n4. **事件驱动的定时器处理：**\n    * 当 timerfd_ 因设置的超时时间到达而变为可读时，EventLoop 的 Poller 会检测到这个事件，并通过 timerfdChannel_\n      调用其注册的读回调函数，即 TimerQueue::handleRead。\n    * TimerQueue::handleRead 负责：\n        * 读取 timerfd_ 以清除事件通知。\n        * 从 timers_ 中找出所有已经到期的定时器。\n        * 执行这些到期定时器的回调函数。\n        * 对于需要重复执行的定时器，重新计算其下一次到期时间并将其插回 timers_。\n        * 根据 timers_ 中新的最早到期时间，重新设置 timerfd_。\n\n## **关键数据结构与成员**\n\nTimerQueue 内部使用了几个关键的数据结构来管理定时器：\n\n```c++\nclass TimerQueue : noncopyable  \n{  \npublic:  \n// ... (构造与析构) ...  \nprivate:  \n// Entry 定义为一个 pair，包含到期时间戳和 Timer 指针  \ntypedef std::pair<Timestamp, Timer*> Entry;  \n// TimerList 使用 std::set 存储 Entry，利用 set 的自动排序特性  \ntypedef std::set<Entry> TimerList;\n\n// ActiveTimer 用于在取消时快速查找 Timer，通过 Timer* 和其序列号唯一标识  \ntypedef std::pair<Timer*, int64_t> ActiveTimer;  \ntypedef std::set<ActiveTimer> ActiveTimerSet;\n\nEventLoop* loop_;          // 所属的 EventLoop  \nconst int timerfd_;        // timerfd_create() 返回的文件描述符  \nChannel timerfdChannel_;   // 用于将 timerfd_ 纳入 EventLoop 管理的 Channel  \nTimerList timers_;         // 按到期时间排序的定时器列表\n\n// for cancel()  \nActiveTimerSet activeTimers_;      // 存储所有活跃的 Timer，用于高效取消  \nbool callingExpiredTimers_;      // 标记是否正在调用已到期定时器的回调  \nActiveTimerSet cancelingTimers_; // 存储在调用已到期定时器回调期间，请求取消的定时器  \n};\n```\n\n* loop_: 指向所属的 EventLoop 对象。\n* timerfd_: 通过 detail::createTimerfd() 创建的文件描述符。\n* timerfdChannel_: 将 timerfd_ 封装成一个 Channel，其读回调设置为 TimerQueue::handleRead。\n* timers_ (TimerList): 一个 std::set<std::pair<Timestamp, Timer*>>，按到期时间升序存储定时器。timers_.begin()\n  始终指向最早到期的定时器。\n* activeTimers_ (ActiveTimerSet): 一个 std::set<std::pair<Timer*, int64_t>>，用于通过 Timer*\n  和其序列号快速取消定时器。timers_ 和 activeTimers_ 中的 Timer* 应该是一一对应的，它们的 size() 应该始终相等。\n* callingExpiredTimers_: 布尔标记，指示当前是否正在执行已到期定时器的回调。\n* cancelingTimers_ (ActiveTimerSet): 用于处理在执行回调期间发生的取消请求。\n\n## **TimerQueue 的初始化**\n\nTimerQueue 在构造时，会创建 timerfd_，并初始化 timerfdChannel_，将其注册到 EventLoop 中。\n\n```c++\n// TimerQueue.cc\nTimerQueue::TimerQueue(EventLoop* loop)\n: loop_(loop),  \ntimerfd_(detail::createTimerfd()), // 调用辅助函数创建 timerfd  \ntimerfdChannel_(loop, timerfd_),   // 创建 Channel，并与 loop_ 关联  \ntimers_(),  \ncallingExpiredTimers_(false)  \n{  \ntimerfdChannel_.setReadCallback(  \nstd::bind(&TimerQueue::handleRead, this)); // 设置读回调  \n// 即使没有定时器，也使能读事件。  \n// timerfd 的实际超时是通过 timerfd_settime 设置的。  \n// 如果没有活动的定时器，timerfd_settime 会将其超时设为一个不会触发的状态  \n// (例如，it_value 设为0，表示 disarm) 或一个极大的未来时间。  \n// muduo 的做法是，如果 nextExpire 无效，则不调用 resetTimerfd。  \ntimerfdChannel_.enableReading();  \n}\n\n// muduo/net/TimerQueue.cc (detail 命名空间内)  \nint createTimerfd()  \n{  \nint timerfd = ::timerfd_create(CLOCK_MONOTONIC,  \nTFD_NONBLOCK | TFD_CLOEXEC);  \nif (timerfd < 0)  \n{  \nLOG_SYSFATAL << \"Failed in timerfd_create\";  \n}  \nreturn timerfd;  \n}\n```\n\n## **添加定时器：EventLoop 接口与 TimerQueue 实现**\n\n用户通常通过 EventLoop 提供的接口（runAt, runAfter, runEvery）来添加定时器。这些接口最终都会调用到 TimerQueue::addTimer。\n\n```c++\n// EventLoop.cc  \nTimerId EventLoop::runAt(Timestamp time, TimerCallback cb)  \n{  \nreturn timerQueue_->addTimer(std::move(cb), time, 0.0); // interval 为 0 表示非重复  \n}\n\nTimerId EventLoop::runAfter(double delay, TimerCallback cb)  \n{  \nTimestamp time(addTime(Timestamp::now(), delay)); // 计算绝对到期时间  \nreturn runAt(time, std::move(cb));  \n}\n\nTimerId EventLoop::runEvery(double interval, TimerCallback cb)  \n{  \nTimestamp time(addTime(Timestamp::now(), interval)); // 首次到期时间  \nreturn timerQueue_->addTimer(std::move(cb), time, interval); // interval > 0 表示重复  \n}  \n```\n\n`TimerQueue::addTimer` 方法由于可能被其他线程调用，它会将实际的添加操作 `addTimerInLoop` 通过 `loop_->runInLoop()` 提交到\n`TimerQueue` 所属的 `EventLoop` 线程中执行，以保证线程安全。\n\n```c++  \n// TimerQueue.cc  \nTimerId TimerQueue::addTimer(TimerCallback cb,  \nTimestamp when,  \ndouble interval)  \n{  \nTimer* timer = new Timer(std::move(cb), when, interval); // 创建 Timer 对象  \nloop_->runInLoop( // 保证在 loop_ 线程中执行  \nstd::bind(&TimerQueue::addTimerInLoop, this, timer));  \nreturn TimerId(timer, timer->sequence()); // 返回 TimerId 用于取消  \n}\n\nvoid TimerQueue::addTimerInLoop(Timer* timer)  \n{  \nloop_->assertInLoopThread(); // 确保在正确的线程  \nbool earliestChanged = insert(timer); // 将 Timer 插入内部列表\n\nif (earliestChanged) // 如果新插入的定时器成为了最早到期的  \n{  \n// 重置 timerfd 的超时时间为这个新定时器的到期时间  \ndetail::resetTimerfd(timerfd_, timer->expiration());  \n}  \n}  \n```\n\n`insert(Timer* timer)` 方法负责将 `Timer` 对象同时插入到 `timers_` (按时间排序) 和 `activeTimers_` (用于取消) 两个\n`std::set` 中，并返回新插入的定时器是否改变了“最早到期时间”。\n\n```c++  \n// TimerQueue.cc  \nbool TimerQueue::insert(Timer* timer)  \n{  \nloop_->assertInLoopThread();  \nassert(timers_.size() == activeTimers_.size());  \nbool earliestChanged = false;  \nTimestamp when = timer->expiration();  \nTimerList::iterator it = timers_.begin();  \n// 如果 timers_ 为空，或者新定时器的到期时间早于当前最早的定时器  \nif (it == timers_.end() || when < it->first)  \n{  \nearliestChanged = true;  \n}\n\ntimers_.insert(Entry(when, timer));  \nactiveTimers_.insert(ActiveTimer(timer, timer->sequence()));\n\nassert(timers_.size() == activeTimers_.size());  \nreturn earliestChanged;  \n}\n\n```\n\n如果 earliestChanged 为 true，则需要调用 detail::resetTimerfd 来更新 timerfd_ 的超时设置。detail::resetTimerfd 内部调用\ntimerfd_settime，并将 newValue.it_value 设置为从当前时间到目标到期时间的相对时间。\n\n```c++\n// muduo/net/TimerQueue.cc (detail 命名空间内)  \nvoid resetTimerfd(int timerfd, Timestamp expiration)  \n{  \nstruct itimerspec newValue;  \nmemZero(&newValue, sizeof newValue);  \nnewValue.it_value = howMuchTimeFromNow(expiration); // 计算相对超时时间  \nint ret = ::timerfd_settime(timerfd, 0, &newValue, NULL); // 0 表示相对时间，不关心 oldValue  \nif (ret)  \n{  \nLOG_SYSERR << \"timerfd_settime()\";  \n}  \n}\n\nstruct timespec howMuchTimeFromNow(Timestamp when)  \n{  \nint64_t microseconds = when.microSecondsSinceEpoch()  \n- Timestamp::now().microSecondsSinceEpoch();  \nif (microseconds < 100) // 最小超时设为 100 微秒，避免过于频繁或立即触发  \n{  \nmicroseconds = 100;  \n}  \nstruct timespec ts;  \nts.tv_sec = static_cast<time_t>(  \nmicroseconds / Timestamp::kMicroSecondsPerSecond);  \nts.tv_nsec = static_long_cast( // 使用 muduo 的类型安全转换  \n(microseconds % Timestamp::kMicroSecondsPerSecond) * 1000);  \nreturn ts;  \n}\n```\n\n## **处理定时器到期：TimerQueue::handleRead**\n\n当 timerfd_ 因设置的超时时间到达而变为可读时，EventLoop 会调用 timerfdChannel_ 的读回调，即 TimerQueue::handleRead。\n\n```c++\n// TimerQueue.cc  \nvoid TimerQueue::handleRead()  \n{  \nloop_->assertInLoopThread();  \nTimestamp now(Timestamp::now());  \ndetail::readTimerfd(timerfd_, now); // 1. 读取 timerfd，清空事件，避免重复触发\n\n// 2. 获取所有在 'now' 时刻之前或同时到期的定时器  \nstd::vector<Entry> expired = getExpired(now);\n\ncallingExpiredTimers_ = true; // 标记正在调用回调  \ncancelingTimers_.clear();    // 清空上次调用期间的取消列表\n\n// 3. 遍历所有到期的定时器并执行其回调  \nfor (const Entry& it : expired)  \n{  \nit.second->run(); // Timer::run() 会调用用户设置的 TimerCallback  \n}  \ncallingExpiredTimers_ = false; // 标记回调调用结束\n\n// 4. 重置重复的定时器，并设置 timerfd 的下一次超时时间  \nreset(expired, now);  \n}\n\n```\n\ndetail::readTimerfd 简单地读取 timerfd 中的 uint64_t 值（表示自上次成功读取以来发生的超时次数），主要是为了清除 timerfd\n的可读状态。\n\ngetExpired(Timestamp now) 方法负责从 timers_ 和 activeTimers_ 中找出并**移除**所有在 now 时刻之前（包括 now）到期的定时器。\n\n```c++\n// TimerQueue.cc  \nstd::vector<TimerQueue::Entry> TimerQueue::getExpired(Timestamp now)  \n{  \nassert(timers_.size() == activeTimers_.size());  \nstd::vector<Entry> expired;  \n// 构造一个哨兵 Entry，其时间戳为 now，Timer* 为一个不可能的地址 (UINTPTR_MAX)  \n// std::set::lower_bound 会找到第一个不小于 sentry 的元素  \n// 由于 pair 的比较是先比较 first 再比较 second，  \n// UINTPTR_MAX 确保了在时间戳相同时，sentry 比任何有效的 Timer* 都大。  \n// 因此，end 将指向第一个到期时间严格大于 now 的定时器，或者 timers_.end()。  \nEntry sentry(now, reinterpret_cast<Timer*>(UINTPTR_MAX));  \nTimerList::iterator end = timers_.lower_bound(sentry);  \nassert(end == timers_.end() || now < end->first);\n\n// 将 [timers_.begin(), end) 范围内的元素（即所有已到期的）拷贝到 expired 向量  \nstd::copy(timers_.begin(), end, std::back_inserter(expired));  \n// 从 timers_ 中移除这些已到期的元素  \ntimers_.erase(timers_.begin(), end);\n\n// 同时从 activeTimers_ 中移除这些已到期的元素  \nfor (const Entry& it : expired)  \n{  \nActiveTimer timer(it.second, it.second->sequence());  \nsize_t n = activeTimers_.erase(timer);  \nassert(n == 1); (void)n;  \n}\n\nassert(timers_.size() == activeTimers_.size());  \nreturn expired;  \n}\n```\n\n下面是定时器到期处理的时序图,展示了 timerfd 触发后，TimerQueue 如何处理到期定时器的完整流程：\n\n![定时器到期处理](/images/定时器到期处理.png)\n\n## **重置与重新调度：TimerQueue::reset**\n\n在处理完一批到期的定时器后，reset 方法负责：\n\n1. 对于那些是重复执行 (it.second->repeat()) 且在回调执行期间未被 cancelingTimers_ 标记为取消的定时器，调用 Timer::\n   restart(now) 更新其下一次到期时间，并将其重新调用 insert() 方法插入到 timers_ 和 activeTimers_ 中。\n2. 对于非重复的或已被取消的定时器，则 delete it.second 释放 Timer 对象内存。\n3. 根据 timers_ 中新的最早到期时间（如果列表不为空），调用 detail::resetTimerfd 重新设置 timerfd_ 的下一次超时。\n\n```c++\n// TimerQueue.cc  \nvoid TimerQueue::reset(const std::vector<Entry>& expired, Timestamp now)  \n{  \nTimestamp nextExpire;\n\nfor (const Entry& it : expired)  \n{  \nActiveTimer timer(it.second, it.second->sequence());  \n// 如果是重复定时器，并且在回调执行期间没有被加入到 cancelingTimers_ 列表  \nif (it.second->repeat()  \n&& cancelingTimers_.find(timer) == cancelingTimers_.end())  \n{  \nit.second->restart(now); // 更新下次到期时间  \ninsert(it.second);       // 重新插入队列 (insert 会处理 earliestChanged)  \n}  \nelse // 非重复或已被取消  \n{  \n// 作者在此处留下了 // FIXME: no delete please 的注释，  \n// 暗示未来可能考虑使用对象池 (free list) 来复用 Timer 对象，  \n// 以减少频繁 new 和 delete 带来的开销和内存碎片。  \ndelete it.second;   \n}  \n}\nif (!timers_.empty()) // 如果还有未到期的定时器  \n{  \nnextExpire = timers_.begin()->second->expiration(); // 获取下一个最早到期时间  \n}\n\nif (nextExpire.valid()) // 如果存在下一个有效到期时间  \n{  \nresetTimerfd(timerfd_, nextExpire); // 重置 timerfd  \n}  \n}\n```\n\n## **取消定时器：TimerQueue::cancel 与 cancelInLoop**\n\n用户通过 EventLoop::cancel(TimerId) 来取消定时器，该方法最终调用 TimerQueue::cancel。与 addTimer 类似，cancel 也会将实际的取消操作\ncancelInLoop 提交到 loop_ 线程执行。\n\n```c++\n// EventLoop.cc  \nvoid EventLoop::cancel(TimerId timerId)  \n{  \nreturn timerQueue_->cancel(timerId);  \n}\n\n// TimerQueue.cc  \nvoid TimerQueue::cancel(TimerId timerId)  \n{  \nloop_->runInLoop(  \nstd::bind(&TimerQueue::cancelInLoop, this, timerId));  \n}\n\nvoid TimerQueue::cancelInLoop(TimerId timerId)  \n{  \nloop_->assertInLoopThread();  \nassert(timers_.size() == activeTimers_.size());\n\n// 使用 TimerId 中的 Timer* 和 sequence_ 构造 ActiveTimer 用于查找  \nActiveTimer timer(timerId.timer_, timerId.sequence_);  \nActiveTimerSet::iterator it = activeTimers_.find(timer);\n\nif (it != activeTimers_.end()) // 如果在 activeTimers_ 中找到了该定时器  \n{  \n// 从 timers_ 中移除对应的 Entry  \n// 注意：timers_ 的 key 是 pair<Timestamp, Timer*>，需要用其到期时间和指针来构造  \nsize_t n = timers_.erase(Entry(it->first->expiration(), it->first));  \nassert(n == 1); (void)n; // 应该能精确找到并删除一个  \ndelete it->first; // 释放 Timer 对象内存  \nactiveTimers_.erase(it); // 从 activeTimers_ 中移除  \n}  \nelse if (callingExpiredTimers_) // 如果没找到，且当前正在执行回调  \n{  \n// 这意味着要取消的定时器可能是一个刚刚到期并在被处理的重复定时器。  \n// 将其加入 cancelingTimers_ 集合。  \n// reset() 方法在重新插入重复定时器前会检查这个 cancelingTimers_ 集合，  \n// 如果在其中，则不会重新插入，从而达到取消的目的。  \ncancelingTimers_.insert(timer);  \n}  \nassert(timers_.size() == activeTimers_.size());  \n}\n```\n\n这种处理方式确保了即使在定时器回调执行期间尝试取消该（重复的）定时器，也能正确处理。\n\n下面是取消操作的时序图,展示了通过 EventLoop::cancel 取消定时器的流程，包括线程安全处理和回调期间的取消逻辑:\n\n![取消操作](/images/取消操作.png)\n\n## **Timer类与重复执行**\n\nTimer 类封装了定时器的基本信息：回调函数、到期时间、重复间隔、是否重复以及一个唯一的序列号。\n\n```c++\n// Timer.h (部分)  \nclass Timer : noncopyable  \n{  \npublic:  \nTimer(TimerCallback cb, Timestamp when, double interval)  \n: callback_(std::move(cb)),  \nexpiration_(when),  \ninterval_(interval),  \nrepeat_(interval > 0.0), // interval > 0.0 表示是重复定时器  \nsequence_(s_numCreated_.incrementAndGet()) // 原子生成的唯一序列号  \n{ }\n\nvoid run() const // 执行回调  \n{  \ncallback_();  \n}\n\nTimestamp expiration() const  { return expiration_; }  \nbool repeat() const { return repeat_; }  \nint64_t sequence() const { return sequence_; }\n\nvoid restart(Timestamp now) // 重新计算下次到期时间 (用于重复定时器)  \n{  \nassert(repeat_);  \nexpiration_ = addTime(now, interval_);  \n}\n\n// ...  \nprivate:  \nconst TimerCallback callback_;  \nTimestamp expiration_;  \nconst double interval_;  \nconst bool repeat_;  \nconst int64_t sequence_; // 用于唯一标识 Timer 实例，配合 Timer* 使用\n\nstatic AtomicInt64 s_numCreated_; // 用于生成 sequence_  \n};\n```\n\nrunEvery 接口在添加定时器时，会将 interval 参数设置为大于 0 的值，从而 Timer 对象的 repeat_ 成员为 true。在 TimerQueue::\nreset 方法中，如果一个定时器的 repeat() 为 true 且未被取消，就会调用 restart() 更新其 expiration_ 并重新插入队列。\n\n下面是添加重复执行任务的时序图,包括 Timer 对象的创建和 timerfd 的超时设置:\n\n![重复任务](/images/重复任务.png)\n\n## **总结**\n\nmuduo::net::TimerQueue 通过精巧的设计，实现了高效且与 EventLoop事件驱动模型完美集成的定时器管理机制：\n\n1. **timerfd 的妙用：** 将时间事件转化为文件描述符事件，统一由 Poller 处理，使得定时器事件的处理与网络\n   I/O 事件的处理路径一致。\n2. **std::set 管理定时器：** 利用 std::set<std::pair<Timestamp, Timer*>>\n   自动按到期时间排序的特性，使得获取最早到期定时器 (timers_.begin()) 和查找指定范围的到期定时器 (lower_bound) 非常高效。\n3. **双集合管理 (timers_ 和 activeTimers_)：** timers_ 用于按时间排序和获取到期任务，activeTimers_ (以 Timer*\n   和序列号为键) 用于高效地取消定时器。通过断言 timers_.size() == activeTimers_.size() 保证两者的一致性。\n4. **线程安全：** 所有对 TimerQueue 内部状态的修改都通过 loop_->runInLoop() 保证在其所属的 EventLoop 线程中执行，确保了线程安全。\n5. **处理回调期间的取消：** 通过 callingExpiredTimers_ 标志和 cancelingTimers_\n   集合，优雅地处理了在执行定时器回调期间，这些定时器（特别是重复定时器）又被用户请求取消的复杂情况。\n6. **资源管理：** Timer 对象通过 new 创建，并在不再需要时（非重复到期、或被取消、或 TimerQueue 析构时）通过 delete\n   释放。\n\n","source":"_posts/muduo/muduo源码剖析:03.定时器的实现.md","raw":"\n---\ntitle: \"muduo源码剖析:03.定时器的实现\"\ndate: 2025-08-27\ncategories: \n  - 源码分析\n  - muduo\ntags:\n  - C++\n  - muduo\n  - 网络库\n---\n## **前言**\n\n在muduo源码剖析的前两篇文章中，我们深入探讨了 muduo 的核心并发模型——\"One Loop Per Thread\" 的实现，以及 TCP\n连接从建立、数据收发到关闭的完整生命周期管理。\n\n这些内容实际上已经对陈硕大佬在网络库上的设计设计思想体现的很清晰了。但是仅有这些还是不够的， 除了处理网络 I/O\n事件，一个完备的网络库还需要处理时间相关的事件。\n例如，在固定的时间点执行某个任务（runAt）、在一段延迟之后执行任务（runAfter），或者以固定的时间间隔重复执行任务（runEvery）。这些都离不开一个高效且精准的定时器机制。\n\n正如陈硕大佬在《Linux多线程服务端编程》一书中所强调的，muduo 的一个重要设计选择是**利用 timerfd_create 这个 Linux\n系统调用，将时间事件也转化为文件描述符事件**，从而能够被 EventLoop 的 Poller (通常是 epoll) 统一管理和调度。\n\n本文，我们将聚焦于 muduo::net::TimerQueue 类，深入剖析其如何巧妙地利用 timerfd 实现了一个高效、线程安全的定时器队列，并与\nEventLoop 的事件驱动模型完美融合。\n<!-- more -->\n## **从 Printer 示例看 TimerQueue 的应用**\n\n在深入源码之前，我们先来看一个 muduo 提供的简单示例，它展示了如何使用 EventLoop 提供的定时器接口：\n\n```c++\n#include <muduo/net/EventLoop.h>  \n#include <muduo/base/Timestamp.h> // 虽然示例中没直接用，但 runAfter 内部会用  \n#include <muduo/base/Logging.h>   // 虽然示例中没直接用，但 TimerQueue 内部会用  \n#include <iostream>  \n#include <functional>\n\nclass Printer : muduo::noncopyable  \n{  \npublic:  \nPrinter(muduo::net::EventLoop* loop)  \n: loop_(loop),  \ncount_(0)  \n{  \n// 注意：对于这种周期性任务，loop->runEvery() 是更好的选择。  \n// 这里使用 runAfter 来演示其基本用法和递归调用自身实现重复。  \nloop_->runAfter(1.0, std::bind(&Printer::print, this)); // 1秒后执行 print  \n}\n\n~Printer()  \n{  \nstd::cout << \"Final count is \" << count_ << \"n\";  \n}\n\nvoid print()  \n{  \nif (count_ < 5)  \n{  \nstd::cout << count_ << \"n\";  \n++count_;\n// 再次调度自己，1秒后执行  \nloop_->runAfter(1.0, std::bind(&Printer::print, this));  \n}  \nelse  \n{  \n    loop_->quit(); // 打印5次后退出 EventLoop  \n}  \n}\n\nprivate:  \nmuduo::net::EventLoop* loop_;  \nint count_;  \n};\n\n//int main() { ... EventLoop loop; Printer printer(&loop); loop.loop(); ... }\n```\n\n这个 Printer 类通过 EventLoop::runAfter 接口，实现了每隔 1 秒打印一次计数，共打印 5 次后退出 EventLoop 的功能。\nEventLoop 提供的 runAt, runAfter, runEvery 以及 cancel 定时器接口，其底层实现都委托给了 TimerQueue 对象。\n\n## **TimerQueue 的核心职责与设计概览**\n\nTimerQueue 的核心职责是管理一系列的定时器 (Timer 对象)，并在它们到期时执行其回调函数。其整体设计思路如下：\n\n1. **timerfd 作为时间事件的统一入口：**\n    * 在 TimerQueue 构造时，会通过 timerfd_create(CLOCK_MONOTONIC, TFD_NONBLOCK | TFD_CLOEXEC) 创建一个\n      timerfd。CLOCK_MONOTONIC 保证了时间是单调递增的，不受系统时间修改的影响。\n    * 这个 timerfd 被封装成一个 Channel 对象 (timerfdChannel_)，并注册到其所属的 EventLoop 中，监听其可读事件。\n2. **按到期时间排序的定时器列表：**\n    * TimerQueue 内部使用 std::set<std::pair<Timestamp, Timer*>> (即 TimerList timers_) 来存储所有活动的定时器。std::set\n      会自动根据 Timestamp (到期时间) 和 Timer* (指针地址，用于时间相同时保证唯一性) 进行排序，使得 timers_.begin()\n      始终指向最早到期的那个定时器。\n3. **动态设置 timerfd 的超时：**\n    * 每当添加新的定时器或有定时器到期后，TimerQueue 会检查 timers_ 列表中最早到期的定时器的时间戳。\n    * 然后，它会调用 timerfd_settime 系统调用，将 timerfd_ 的下一次超时时间设置为这个最早到期时间点。\n4. **事件驱动的定时器处理：**\n    * 当 timerfd_ 因设置的超时时间到达而变为可读时，EventLoop 的 Poller 会检测到这个事件，并通过 timerfdChannel_\n      调用其注册的读回调函数，即 TimerQueue::handleRead。\n    * TimerQueue::handleRead 负责：\n        * 读取 timerfd_ 以清除事件通知。\n        * 从 timers_ 中找出所有已经到期的定时器。\n        * 执行这些到期定时器的回调函数。\n        * 对于需要重复执行的定时器，重新计算其下一次到期时间并将其插回 timers_。\n        * 根据 timers_ 中新的最早到期时间，重新设置 timerfd_。\n\n## **关键数据结构与成员**\n\nTimerQueue 内部使用了几个关键的数据结构来管理定时器：\n\n```c++\nclass TimerQueue : noncopyable  \n{  \npublic:  \n// ... (构造与析构) ...  \nprivate:  \n// Entry 定义为一个 pair，包含到期时间戳和 Timer 指针  \ntypedef std::pair<Timestamp, Timer*> Entry;  \n// TimerList 使用 std::set 存储 Entry，利用 set 的自动排序特性  \ntypedef std::set<Entry> TimerList;\n\n// ActiveTimer 用于在取消时快速查找 Timer，通过 Timer* 和其序列号唯一标识  \ntypedef std::pair<Timer*, int64_t> ActiveTimer;  \ntypedef std::set<ActiveTimer> ActiveTimerSet;\n\nEventLoop* loop_;          // 所属的 EventLoop  \nconst int timerfd_;        // timerfd_create() 返回的文件描述符  \nChannel timerfdChannel_;   // 用于将 timerfd_ 纳入 EventLoop 管理的 Channel  \nTimerList timers_;         // 按到期时间排序的定时器列表\n\n// for cancel()  \nActiveTimerSet activeTimers_;      // 存储所有活跃的 Timer，用于高效取消  \nbool callingExpiredTimers_;      // 标记是否正在调用已到期定时器的回调  \nActiveTimerSet cancelingTimers_; // 存储在调用已到期定时器回调期间，请求取消的定时器  \n};\n```\n\n* loop_: 指向所属的 EventLoop 对象。\n* timerfd_: 通过 detail::createTimerfd() 创建的文件描述符。\n* timerfdChannel_: 将 timerfd_ 封装成一个 Channel，其读回调设置为 TimerQueue::handleRead。\n* timers_ (TimerList): 一个 std::set<std::pair<Timestamp, Timer*>>，按到期时间升序存储定时器。timers_.begin()\n  始终指向最早到期的定时器。\n* activeTimers_ (ActiveTimerSet): 一个 std::set<std::pair<Timer*, int64_t>>，用于通过 Timer*\n  和其序列号快速取消定时器。timers_ 和 activeTimers_ 中的 Timer* 应该是一一对应的，它们的 size() 应该始终相等。\n* callingExpiredTimers_: 布尔标记，指示当前是否正在执行已到期定时器的回调。\n* cancelingTimers_ (ActiveTimerSet): 用于处理在执行回调期间发生的取消请求。\n\n## **TimerQueue 的初始化**\n\nTimerQueue 在构造时，会创建 timerfd_，并初始化 timerfdChannel_，将其注册到 EventLoop 中。\n\n```c++\n// TimerQueue.cc\nTimerQueue::TimerQueue(EventLoop* loop)\n: loop_(loop),  \ntimerfd_(detail::createTimerfd()), // 调用辅助函数创建 timerfd  \ntimerfdChannel_(loop, timerfd_),   // 创建 Channel，并与 loop_ 关联  \ntimers_(),  \ncallingExpiredTimers_(false)  \n{  \ntimerfdChannel_.setReadCallback(  \nstd::bind(&TimerQueue::handleRead, this)); // 设置读回调  \n// 即使没有定时器，也使能读事件。  \n// timerfd 的实际超时是通过 timerfd_settime 设置的。  \n// 如果没有活动的定时器，timerfd_settime 会将其超时设为一个不会触发的状态  \n// (例如，it_value 设为0，表示 disarm) 或一个极大的未来时间。  \n// muduo 的做法是，如果 nextExpire 无效，则不调用 resetTimerfd。  \ntimerfdChannel_.enableReading();  \n}\n\n// muduo/net/TimerQueue.cc (detail 命名空间内)  \nint createTimerfd()  \n{  \nint timerfd = ::timerfd_create(CLOCK_MONOTONIC,  \nTFD_NONBLOCK | TFD_CLOEXEC);  \nif (timerfd < 0)  \n{  \nLOG_SYSFATAL << \"Failed in timerfd_create\";  \n}  \nreturn timerfd;  \n}\n```\n\n## **添加定时器：EventLoop 接口与 TimerQueue 实现**\n\n用户通常通过 EventLoop 提供的接口（runAt, runAfter, runEvery）来添加定时器。这些接口最终都会调用到 TimerQueue::addTimer。\n\n```c++\n// EventLoop.cc  \nTimerId EventLoop::runAt(Timestamp time, TimerCallback cb)  \n{  \nreturn timerQueue_->addTimer(std::move(cb), time, 0.0); // interval 为 0 表示非重复  \n}\n\nTimerId EventLoop::runAfter(double delay, TimerCallback cb)  \n{  \nTimestamp time(addTime(Timestamp::now(), delay)); // 计算绝对到期时间  \nreturn runAt(time, std::move(cb));  \n}\n\nTimerId EventLoop::runEvery(double interval, TimerCallback cb)  \n{  \nTimestamp time(addTime(Timestamp::now(), interval)); // 首次到期时间  \nreturn timerQueue_->addTimer(std::move(cb), time, interval); // interval > 0 表示重复  \n}  \n```\n\n`TimerQueue::addTimer` 方法由于可能被其他线程调用，它会将实际的添加操作 `addTimerInLoop` 通过 `loop_->runInLoop()` 提交到\n`TimerQueue` 所属的 `EventLoop` 线程中执行，以保证线程安全。\n\n```c++  \n// TimerQueue.cc  \nTimerId TimerQueue::addTimer(TimerCallback cb,  \nTimestamp when,  \ndouble interval)  \n{  \nTimer* timer = new Timer(std::move(cb), when, interval); // 创建 Timer 对象  \nloop_->runInLoop( // 保证在 loop_ 线程中执行  \nstd::bind(&TimerQueue::addTimerInLoop, this, timer));  \nreturn TimerId(timer, timer->sequence()); // 返回 TimerId 用于取消  \n}\n\nvoid TimerQueue::addTimerInLoop(Timer* timer)  \n{  \nloop_->assertInLoopThread(); // 确保在正确的线程  \nbool earliestChanged = insert(timer); // 将 Timer 插入内部列表\n\nif (earliestChanged) // 如果新插入的定时器成为了最早到期的  \n{  \n// 重置 timerfd 的超时时间为这个新定时器的到期时间  \ndetail::resetTimerfd(timerfd_, timer->expiration());  \n}  \n}  \n```\n\n`insert(Timer* timer)` 方法负责将 `Timer` 对象同时插入到 `timers_` (按时间排序) 和 `activeTimers_` (用于取消) 两个\n`std::set` 中，并返回新插入的定时器是否改变了“最早到期时间”。\n\n```c++  \n// TimerQueue.cc  \nbool TimerQueue::insert(Timer* timer)  \n{  \nloop_->assertInLoopThread();  \nassert(timers_.size() == activeTimers_.size());  \nbool earliestChanged = false;  \nTimestamp when = timer->expiration();  \nTimerList::iterator it = timers_.begin();  \n// 如果 timers_ 为空，或者新定时器的到期时间早于当前最早的定时器  \nif (it == timers_.end() || when < it->first)  \n{  \nearliestChanged = true;  \n}\n\ntimers_.insert(Entry(when, timer));  \nactiveTimers_.insert(ActiveTimer(timer, timer->sequence()));\n\nassert(timers_.size() == activeTimers_.size());  \nreturn earliestChanged;  \n}\n\n```\n\n如果 earliestChanged 为 true，则需要调用 detail::resetTimerfd 来更新 timerfd_ 的超时设置。detail::resetTimerfd 内部调用\ntimerfd_settime，并将 newValue.it_value 设置为从当前时间到目标到期时间的相对时间。\n\n```c++\n// muduo/net/TimerQueue.cc (detail 命名空间内)  \nvoid resetTimerfd(int timerfd, Timestamp expiration)  \n{  \nstruct itimerspec newValue;  \nmemZero(&newValue, sizeof newValue);  \nnewValue.it_value = howMuchTimeFromNow(expiration); // 计算相对超时时间  \nint ret = ::timerfd_settime(timerfd, 0, &newValue, NULL); // 0 表示相对时间，不关心 oldValue  \nif (ret)  \n{  \nLOG_SYSERR << \"timerfd_settime()\";  \n}  \n}\n\nstruct timespec howMuchTimeFromNow(Timestamp when)  \n{  \nint64_t microseconds = when.microSecondsSinceEpoch()  \n- Timestamp::now().microSecondsSinceEpoch();  \nif (microseconds < 100) // 最小超时设为 100 微秒，避免过于频繁或立即触发  \n{  \nmicroseconds = 100;  \n}  \nstruct timespec ts;  \nts.tv_sec = static_cast<time_t>(  \nmicroseconds / Timestamp::kMicroSecondsPerSecond);  \nts.tv_nsec = static_long_cast( // 使用 muduo 的类型安全转换  \n(microseconds % Timestamp::kMicroSecondsPerSecond) * 1000);  \nreturn ts;  \n}\n```\n\n## **处理定时器到期：TimerQueue::handleRead**\n\n当 timerfd_ 因设置的超时时间到达而变为可读时，EventLoop 会调用 timerfdChannel_ 的读回调，即 TimerQueue::handleRead。\n\n```c++\n// TimerQueue.cc  \nvoid TimerQueue::handleRead()  \n{  \nloop_->assertInLoopThread();  \nTimestamp now(Timestamp::now());  \ndetail::readTimerfd(timerfd_, now); // 1. 读取 timerfd，清空事件，避免重复触发\n\n// 2. 获取所有在 'now' 时刻之前或同时到期的定时器  \nstd::vector<Entry> expired = getExpired(now);\n\ncallingExpiredTimers_ = true; // 标记正在调用回调  \ncancelingTimers_.clear();    // 清空上次调用期间的取消列表\n\n// 3. 遍历所有到期的定时器并执行其回调  \nfor (const Entry& it : expired)  \n{  \nit.second->run(); // Timer::run() 会调用用户设置的 TimerCallback  \n}  \ncallingExpiredTimers_ = false; // 标记回调调用结束\n\n// 4. 重置重复的定时器，并设置 timerfd 的下一次超时时间  \nreset(expired, now);  \n}\n\n```\n\ndetail::readTimerfd 简单地读取 timerfd 中的 uint64_t 值（表示自上次成功读取以来发生的超时次数），主要是为了清除 timerfd\n的可读状态。\n\ngetExpired(Timestamp now) 方法负责从 timers_ 和 activeTimers_ 中找出并**移除**所有在 now 时刻之前（包括 now）到期的定时器。\n\n```c++\n// TimerQueue.cc  \nstd::vector<TimerQueue::Entry> TimerQueue::getExpired(Timestamp now)  \n{  \nassert(timers_.size() == activeTimers_.size());  \nstd::vector<Entry> expired;  \n// 构造一个哨兵 Entry，其时间戳为 now，Timer* 为一个不可能的地址 (UINTPTR_MAX)  \n// std::set::lower_bound 会找到第一个不小于 sentry 的元素  \n// 由于 pair 的比较是先比较 first 再比较 second，  \n// UINTPTR_MAX 确保了在时间戳相同时，sentry 比任何有效的 Timer* 都大。  \n// 因此，end 将指向第一个到期时间严格大于 now 的定时器，或者 timers_.end()。  \nEntry sentry(now, reinterpret_cast<Timer*>(UINTPTR_MAX));  \nTimerList::iterator end = timers_.lower_bound(sentry);  \nassert(end == timers_.end() || now < end->first);\n\n// 将 [timers_.begin(), end) 范围内的元素（即所有已到期的）拷贝到 expired 向量  \nstd::copy(timers_.begin(), end, std::back_inserter(expired));  \n// 从 timers_ 中移除这些已到期的元素  \ntimers_.erase(timers_.begin(), end);\n\n// 同时从 activeTimers_ 中移除这些已到期的元素  \nfor (const Entry& it : expired)  \n{  \nActiveTimer timer(it.second, it.second->sequence());  \nsize_t n = activeTimers_.erase(timer);  \nassert(n == 1); (void)n;  \n}\n\nassert(timers_.size() == activeTimers_.size());  \nreturn expired;  \n}\n```\n\n下面是定时器到期处理的时序图,展示了 timerfd 触发后，TimerQueue 如何处理到期定时器的完整流程：\n\n![定时器到期处理](/images/定时器到期处理.png)\n\n## **重置与重新调度：TimerQueue::reset**\n\n在处理完一批到期的定时器后，reset 方法负责：\n\n1. 对于那些是重复执行 (it.second->repeat()) 且在回调执行期间未被 cancelingTimers_ 标记为取消的定时器，调用 Timer::\n   restart(now) 更新其下一次到期时间，并将其重新调用 insert() 方法插入到 timers_ 和 activeTimers_ 中。\n2. 对于非重复的或已被取消的定时器，则 delete it.second 释放 Timer 对象内存。\n3. 根据 timers_ 中新的最早到期时间（如果列表不为空），调用 detail::resetTimerfd 重新设置 timerfd_ 的下一次超时。\n\n```c++\n// TimerQueue.cc  \nvoid TimerQueue::reset(const std::vector<Entry>& expired, Timestamp now)  \n{  \nTimestamp nextExpire;\n\nfor (const Entry& it : expired)  \n{  \nActiveTimer timer(it.second, it.second->sequence());  \n// 如果是重复定时器，并且在回调执行期间没有被加入到 cancelingTimers_ 列表  \nif (it.second->repeat()  \n&& cancelingTimers_.find(timer) == cancelingTimers_.end())  \n{  \nit.second->restart(now); // 更新下次到期时间  \ninsert(it.second);       // 重新插入队列 (insert 会处理 earliestChanged)  \n}  \nelse // 非重复或已被取消  \n{  \n// 作者在此处留下了 // FIXME: no delete please 的注释，  \n// 暗示未来可能考虑使用对象池 (free list) 来复用 Timer 对象，  \n// 以减少频繁 new 和 delete 带来的开销和内存碎片。  \ndelete it.second;   \n}  \n}\nif (!timers_.empty()) // 如果还有未到期的定时器  \n{  \nnextExpire = timers_.begin()->second->expiration(); // 获取下一个最早到期时间  \n}\n\nif (nextExpire.valid()) // 如果存在下一个有效到期时间  \n{  \nresetTimerfd(timerfd_, nextExpire); // 重置 timerfd  \n}  \n}\n```\n\n## **取消定时器：TimerQueue::cancel 与 cancelInLoop**\n\n用户通过 EventLoop::cancel(TimerId) 来取消定时器，该方法最终调用 TimerQueue::cancel。与 addTimer 类似，cancel 也会将实际的取消操作\ncancelInLoop 提交到 loop_ 线程执行。\n\n```c++\n// EventLoop.cc  \nvoid EventLoop::cancel(TimerId timerId)  \n{  \nreturn timerQueue_->cancel(timerId);  \n}\n\n// TimerQueue.cc  \nvoid TimerQueue::cancel(TimerId timerId)  \n{  \nloop_->runInLoop(  \nstd::bind(&TimerQueue::cancelInLoop, this, timerId));  \n}\n\nvoid TimerQueue::cancelInLoop(TimerId timerId)  \n{  \nloop_->assertInLoopThread();  \nassert(timers_.size() == activeTimers_.size());\n\n// 使用 TimerId 中的 Timer* 和 sequence_ 构造 ActiveTimer 用于查找  \nActiveTimer timer(timerId.timer_, timerId.sequence_);  \nActiveTimerSet::iterator it = activeTimers_.find(timer);\n\nif (it != activeTimers_.end()) // 如果在 activeTimers_ 中找到了该定时器  \n{  \n// 从 timers_ 中移除对应的 Entry  \n// 注意：timers_ 的 key 是 pair<Timestamp, Timer*>，需要用其到期时间和指针来构造  \nsize_t n = timers_.erase(Entry(it->first->expiration(), it->first));  \nassert(n == 1); (void)n; // 应该能精确找到并删除一个  \ndelete it->first; // 释放 Timer 对象内存  \nactiveTimers_.erase(it); // 从 activeTimers_ 中移除  \n}  \nelse if (callingExpiredTimers_) // 如果没找到，且当前正在执行回调  \n{  \n// 这意味着要取消的定时器可能是一个刚刚到期并在被处理的重复定时器。  \n// 将其加入 cancelingTimers_ 集合。  \n// reset() 方法在重新插入重复定时器前会检查这个 cancelingTimers_ 集合，  \n// 如果在其中，则不会重新插入，从而达到取消的目的。  \ncancelingTimers_.insert(timer);  \n}  \nassert(timers_.size() == activeTimers_.size());  \n}\n```\n\n这种处理方式确保了即使在定时器回调执行期间尝试取消该（重复的）定时器，也能正确处理。\n\n下面是取消操作的时序图,展示了通过 EventLoop::cancel 取消定时器的流程，包括线程安全处理和回调期间的取消逻辑:\n\n![取消操作](/images/取消操作.png)\n\n## **Timer类与重复执行**\n\nTimer 类封装了定时器的基本信息：回调函数、到期时间、重复间隔、是否重复以及一个唯一的序列号。\n\n```c++\n// Timer.h (部分)  \nclass Timer : noncopyable  \n{  \npublic:  \nTimer(TimerCallback cb, Timestamp when, double interval)  \n: callback_(std::move(cb)),  \nexpiration_(when),  \ninterval_(interval),  \nrepeat_(interval > 0.0), // interval > 0.0 表示是重复定时器  \nsequence_(s_numCreated_.incrementAndGet()) // 原子生成的唯一序列号  \n{ }\n\nvoid run() const // 执行回调  \n{  \ncallback_();  \n}\n\nTimestamp expiration() const  { return expiration_; }  \nbool repeat() const { return repeat_; }  \nint64_t sequence() const { return sequence_; }\n\nvoid restart(Timestamp now) // 重新计算下次到期时间 (用于重复定时器)  \n{  \nassert(repeat_);  \nexpiration_ = addTime(now, interval_);  \n}\n\n// ...  \nprivate:  \nconst TimerCallback callback_;  \nTimestamp expiration_;  \nconst double interval_;  \nconst bool repeat_;  \nconst int64_t sequence_; // 用于唯一标识 Timer 实例，配合 Timer* 使用\n\nstatic AtomicInt64 s_numCreated_; // 用于生成 sequence_  \n};\n```\n\nrunEvery 接口在添加定时器时，会将 interval 参数设置为大于 0 的值，从而 Timer 对象的 repeat_ 成员为 true。在 TimerQueue::\nreset 方法中，如果一个定时器的 repeat() 为 true 且未被取消，就会调用 restart() 更新其 expiration_ 并重新插入队列。\n\n下面是添加重复执行任务的时序图,包括 Timer 对象的创建和 timerfd 的超时设置:\n\n![重复任务](/images/重复任务.png)\n\n## **总结**\n\nmuduo::net::TimerQueue 通过精巧的设计，实现了高效且与 EventLoop事件驱动模型完美集成的定时器管理机制：\n\n1. **timerfd 的妙用：** 将时间事件转化为文件描述符事件，统一由 Poller 处理，使得定时器事件的处理与网络\n   I/O 事件的处理路径一致。\n2. **std::set 管理定时器：** 利用 std::set<std::pair<Timestamp, Timer*>>\n   自动按到期时间排序的特性，使得获取最早到期定时器 (timers_.begin()) 和查找指定范围的到期定时器 (lower_bound) 非常高效。\n3. **双集合管理 (timers_ 和 activeTimers_)：** timers_ 用于按时间排序和获取到期任务，activeTimers_ (以 Timer*\n   和序列号为键) 用于高效地取消定时器。通过断言 timers_.size() == activeTimers_.size() 保证两者的一致性。\n4. **线程安全：** 所有对 TimerQueue 内部状态的修改都通过 loop_->runInLoop() 保证在其所属的 EventLoop 线程中执行，确保了线程安全。\n5. **处理回调期间的取消：** 通过 callingExpiredTimers_ 标志和 cancelingTimers_\n   集合，优雅地处理了在执行定时器回调期间，这些定时器（特别是重复定时器）又被用户请求取消的复杂情况。\n6. **资源管理：** Timer 对象通过 new 创建，并在不再需要时（非重复到期、或被取消、或 TimerQueue 析构时）通过 delete\n   释放。\n\n","slug":"muduo/muduo源码剖析:03.定时器的实现","published":1,"updated":"2025-08-28T12:44:06.575Z","comments":1,"layout":"post","photos":[],"_id":"cmevecvsh001uhfro62pi85n5","content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a><strong>前言</strong></h2><p>在muduo源码剖析的前两篇文章中，我们深入探讨了 muduo 的核心并发模型——“One Loop Per Thread” 的实现，以及 TCP<br>连接从建立、数据收发到关闭的完整生命周期管理。</p>\n<p>这些内容实际上已经对陈硕大佬在网络库上的设计设计思想体现的很清晰了。但是仅有这些还是不够的， 除了处理网络 I&#x2F;O<br>事件，一个完备的网络库还需要处理时间相关的事件。<br>例如，在固定的时间点执行某个任务（runAt）、在一段延迟之后执行任务（runAfter），或者以固定的时间间隔重复执行任务（runEvery）。这些都离不开一个高效且精准的定时器机制。</p>\n<p>正如陈硕大佬在《Linux多线程服务端编程》一书中所强调的，muduo 的一个重要设计选择是<strong>利用 timerfd_create 这个 Linux<br>系统调用，将时间事件也转化为文件描述符事件</strong>，从而能够被 EventLoop 的 Poller (通常是 epoll) 统一管理和调度。</p>\n<p>本文，我们将聚焦于 muduo::net::TimerQueue 类，深入剖析其如何巧妙地利用 timerfd 实现了一个高效、线程安全的定时器队列，并与<br>EventLoop 的事件驱动模型完美融合。</p>\n<span id=\"more\"></span>\n<h2 id=\"从-Printer-示例看-TimerQueue-的应用\"><a href=\"#从-Printer-示例看-TimerQueue-的应用\" class=\"headerlink\" title=\"从 Printer 示例看 TimerQueue 的应用\"></a><strong>从 Printer 示例看 TimerQueue 的应用</strong></h2><p>在深入源码之前，我们先来看一个 muduo 提供的简单示例，它展示了如何使用 EventLoop 提供的定时器接口：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;muduo/net/EventLoop.h&gt;</span>  </span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;muduo/base/Timestamp.h&gt;</span> <span class=\"comment\">// 虽然示例中没直接用，但 runAfter 内部会用  </span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;muduo/base/Logging.h&gt;</span>   <span class=\"comment\">// 虽然示例中没直接用，但 TimerQueue 内部会用  </span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span>  </span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;functional&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Printer</span> : muduo::noncopyable  </span><br><span class=\"line\">&#123;  </span><br><span class=\"line\"><span class=\"keyword\">public</span>:  </span><br><span class=\"line\"><span class=\"built_in\">Printer</span>(muduo::net::EventLoop* loop)  </span><br><span class=\"line\">: <span class=\"built_in\">loop_</span>(loop),  </span><br><span class=\"line\"><span class=\"built_in\">count_</span>(<span class=\"number\">0</span>)  </span><br><span class=\"line\">&#123;  </span><br><span class=\"line\"><span class=\"comment\">// 注意：对于这种周期性任务，loop-&gt;runEvery() 是更好的选择。  </span></span><br><span class=\"line\"><span class=\"comment\">// 这里使用 runAfter 来演示其基本用法和递归调用自身实现重复。  </span></span><br><span class=\"line\">loop_-&gt;<span class=\"built_in\">runAfter</span>(<span class=\"number\">1.0</span>, std::<span class=\"built_in\">bind</span>(&amp;Printer::print, <span class=\"keyword\">this</span>)); <span class=\"comment\">// 1秒后执行 print  </span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">~<span class=\"built_in\">Printer</span>()  </span><br><span class=\"line\">&#123;  </span><br><span class=\"line\">std::cout &lt;&lt; <span class=\"string\">&quot;Final count is &quot;</span> &lt;&lt; count_ &lt;&lt; <span class=\"string\">&quot;n&quot;</span>;  </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">print</span><span class=\"params\">()</span>  </span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;  </span><br><span class=\"line\"><span class=\"keyword\">if</span> (count_ &lt; <span class=\"number\">5</span>)  </span><br><span class=\"line\">&#123;  </span><br><span class=\"line\">std::cout &lt;&lt; count_ &lt;&lt; <span class=\"string\">&quot;n&quot;</span>;  </span><br><span class=\"line\">++count_;</span><br><span class=\"line\"><span class=\"comment\">// 再次调度自己，1秒后执行  </span></span><br><span class=\"line\">loop_-&gt;<span class=\"built_in\">runAfter</span>(<span class=\"number\">1.0</span>, std::<span class=\"built_in\">bind</span>(&amp;Printer::print, <span class=\"keyword\">this</span>));  </span><br><span class=\"line\">&#125;  </span><br><span class=\"line\"><span class=\"keyword\">else</span>  </span><br><span class=\"line\">&#123;  </span><br><span class=\"line\">    loop_-&gt;<span class=\"built_in\">quit</span>(); <span class=\"comment\">// 打印5次后退出 EventLoop  </span></span><br><span class=\"line\">&#125;  </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">private</span>:  </span><br><span class=\"line\">muduo::net::EventLoop* loop_;  </span><br><span class=\"line\"><span class=\"type\">int</span> count_;  </span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//int main() &#123; ... EventLoop loop; Printer printer(&amp;loop); loop.loop(); ... &#125;</span></span><br></pre></td></tr></table></figure>\n\n<p>这个 Printer 类通过 EventLoop::runAfter 接口，实现了每隔 1 秒打印一次计数，共打印 5 次后退出 EventLoop 的功能。<br>EventLoop 提供的 runAt, runAfter, runEvery 以及 cancel 定时器接口，其底层实现都委托给了 TimerQueue 对象。</p>\n<h2 id=\"TimerQueue-的核心职责与设计概览\"><a href=\"#TimerQueue-的核心职责与设计概览\" class=\"headerlink\" title=\"TimerQueue 的核心职责与设计概览\"></a><strong>TimerQueue 的核心职责与设计概览</strong></h2><p>TimerQueue 的核心职责是管理一系列的定时器 (Timer 对象)，并在它们到期时执行其回调函数。其整体设计思路如下：</p>\n<ol>\n<li><strong>timerfd 作为时间事件的统一入口：</strong><ul>\n<li>在 TimerQueue 构造时，会通过 timerfd_create(CLOCK_MONOTONIC, TFD_NONBLOCK | TFD_CLOEXEC) 创建一个<br>timerfd。CLOCK_MONOTONIC 保证了时间是单调递增的，不受系统时间修改的影响。</li>\n<li>这个 timerfd 被封装成一个 Channel 对象 (timerfdChannel_)，并注册到其所属的 EventLoop 中，监听其可读事件。</li>\n</ul>\n</li>\n<li><strong>按到期时间排序的定时器列表：</strong><ul>\n<li>TimerQueue 内部使用 std::set&lt;std::pair&lt;Timestamp, Timer*&gt;&gt; (即 TimerList timers_) 来存储所有活动的定时器。std::set<br>会自动根据 Timestamp (到期时间) 和 Timer* (指针地址，用于时间相同时保证唯一性) 进行排序，使得 timers_.begin()<br>始终指向最早到期的那个定时器。</li>\n</ul>\n</li>\n<li><strong>动态设置 timerfd 的超时：</strong><ul>\n<li>每当添加新的定时器或有定时器到期后，TimerQueue 会检查 timers_ 列表中最早到期的定时器的时间戳。</li>\n<li>然后，它会调用 timerfd_settime 系统调用，将 timerfd_ 的下一次超时时间设置为这个最早到期时间点。</li>\n</ul>\n</li>\n<li><strong>事件驱动的定时器处理：</strong><ul>\n<li>当 timerfd_ 因设置的超时时间到达而变为可读时，EventLoop 的 Poller 会检测到这个事件，并通过 timerfdChannel_<br>调用其注册的读回调函数，即 TimerQueue::handleRead。</li>\n<li>TimerQueue::handleRead 负责：<ul>\n<li>读取 timerfd_ 以清除事件通知。</li>\n<li>从 timers_ 中找出所有已经到期的定时器。</li>\n<li>执行这些到期定时器的回调函数。</li>\n<li>对于需要重复执行的定时器，重新计算其下一次到期时间并将其插回 timers_。</li>\n<li>根据 timers_ 中新的最早到期时间，重新设置 timerfd_。</li>\n</ul>\n</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"关键数据结构与成员\"><a href=\"#关键数据结构与成员\" class=\"headerlink\" title=\"关键数据结构与成员\"></a><strong>关键数据结构与成员</strong></h2><p>TimerQueue 内部使用了几个关键的数据结构来管理定时器：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">TimerQueue</span> : noncopyable  </span><br><span class=\"line\">&#123;  </span><br><span class=\"line\"><span class=\"keyword\">public</span>:  </span><br><span class=\"line\"><span class=\"comment\">// ... (构造与析构) ...  </span></span><br><span class=\"line\"><span class=\"keyword\">private</span>:  </span><br><span class=\"line\"><span class=\"comment\">// Entry 定义为一个 pair，包含到期时间戳和 Timer 指针  </span></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> std::pair&lt;Timestamp, Timer*&gt; Entry;  </span><br><span class=\"line\"><span class=\"comment\">// TimerList 使用 std::set 存储 Entry，利用 set 的自动排序特性  </span></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> std::set&lt;Entry&gt; TimerList;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// ActiveTimer 用于在取消时快速查找 Timer，通过 Timer* 和其序列号唯一标识  </span></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> std::pair&lt;Timer*, <span class=\"type\">int64_t</span>&gt; ActiveTimer;  </span><br><span class=\"line\"><span class=\"keyword\">typedef</span> std::set&lt;ActiveTimer&gt; ActiveTimerSet;</span><br><span class=\"line\"></span><br><span class=\"line\">EventLoop* loop_;          <span class=\"comment\">// 所属的 EventLoop  </span></span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> timerfd_;        <span class=\"comment\">// timerfd_create() 返回的文件描述符  </span></span><br><span class=\"line\">Channel timerfdChannel_;   <span class=\"comment\">// 用于将 timerfd_ 纳入 EventLoop 管理的 Channel  </span></span><br><span class=\"line\">TimerList timers_;         <span class=\"comment\">// 按到期时间排序的定时器列表</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// for cancel()  </span></span><br><span class=\"line\">ActiveTimerSet activeTimers_;      <span class=\"comment\">// 存储所有活跃的 Timer，用于高效取消  </span></span><br><span class=\"line\"><span class=\"type\">bool</span> callingExpiredTimers_;      <span class=\"comment\">// 标记是否正在调用已到期定时器的回调  </span></span><br><span class=\"line\">ActiveTimerSet cancelingTimers_; <span class=\"comment\">// 存储在调用已到期定时器回调期间，请求取消的定时器  </span></span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>loop_: 指向所属的 EventLoop 对象。</li>\n<li>timerfd_: 通过 detail::createTimerfd() 创建的文件描述符。</li>\n<li>timerfdChannel_: 将 timerfd_ 封装成一个 Channel，其读回调设置为 TimerQueue::handleRead。</li>\n<li>timers_ (TimerList): 一个 std::set&lt;std::pair&lt;Timestamp, Timer*&gt;&gt;，按到期时间升序存储定时器。timers_.begin()<br>始终指向最早到期的定时器。</li>\n<li>activeTimers_ (ActiveTimerSet): 一个 std::set&lt;std::pair&lt;Timer*, int64_t&gt;&gt;，用于通过 Timer*<br>和其序列号快速取消定时器。timers_ 和 activeTimers_ 中的 Timer* 应该是一一对应的，它们的 size() 应该始终相等。</li>\n<li>callingExpiredTimers_: 布尔标记，指示当前是否正在执行已到期定时器的回调。</li>\n<li>cancelingTimers_ (ActiveTimerSet): 用于处理在执行回调期间发生的取消请求。</li>\n</ul>\n<h2 id=\"TimerQueue-的初始化\"><a href=\"#TimerQueue-的初始化\" class=\"headerlink\" title=\"TimerQueue 的初始化\"></a><strong>TimerQueue 的初始化</strong></h2><p>TimerQueue 在构造时，会创建 timerfd_，并初始化 timerfdChannel_，将其注册到 EventLoop 中。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// TimerQueue.cc</span></span><br><span class=\"line\">TimerQueue::<span class=\"built_in\">TimerQueue</span>(EventLoop* loop)</span><br><span class=\"line\">: <span class=\"built_in\">loop_</span>(loop),  </span><br><span class=\"line\"><span class=\"built_in\">timerfd_</span>(detail::<span class=\"built_in\">createTimerfd</span>()), <span class=\"comment\">// 调用辅助函数创建 timerfd  </span></span><br><span class=\"line\"><span class=\"built_in\">timerfdChannel_</span>(loop, timerfd_),   <span class=\"comment\">// 创建 Channel，并与 loop_ 关联  </span></span><br><span class=\"line\"><span class=\"built_in\">timers_</span>(),  </span><br><span class=\"line\"><span class=\"built_in\">callingExpiredTimers_</span>(<span class=\"literal\">false</span>)  </span><br><span class=\"line\">&#123;  </span><br><span class=\"line\">timerfdChannel_.<span class=\"built_in\">setReadCallback</span>(  </span><br><span class=\"line\">std::<span class=\"built_in\">bind</span>(&amp;TimerQueue::handleRead, <span class=\"keyword\">this</span>)); <span class=\"comment\">// 设置读回调  </span></span><br><span class=\"line\"><span class=\"comment\">// 即使没有定时器，也使能读事件。  </span></span><br><span class=\"line\"><span class=\"comment\">// timerfd 的实际超时是通过 timerfd_settime 设置的。  </span></span><br><span class=\"line\"><span class=\"comment\">// 如果没有活动的定时器，timerfd_settime 会将其超时设为一个不会触发的状态  </span></span><br><span class=\"line\"><span class=\"comment\">// (例如，it_value 设为0，表示 disarm) 或一个极大的未来时间。  </span></span><br><span class=\"line\"><span class=\"comment\">// muduo 的做法是，如果 nextExpire 无效，则不调用 resetTimerfd。  </span></span><br><span class=\"line\">timerfdChannel_.<span class=\"built_in\">enableReading</span>();  </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// muduo/net/TimerQueue.cc (detail 命名空间内)  </span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">createTimerfd</span><span class=\"params\">()</span>  </span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;  </span><br><span class=\"line\"><span class=\"type\">int</span> timerfd = ::<span class=\"built_in\">timerfd_create</span>(CLOCK_MONOTONIC,  </span><br><span class=\"line\">TFD_NONBLOCK | TFD_CLOEXEC);  </span><br><span class=\"line\"><span class=\"keyword\">if</span> (timerfd &lt; <span class=\"number\">0</span>)  </span><br><span class=\"line\">&#123;  </span><br><span class=\"line\">LOG_SYSFATAL &lt;&lt; <span class=\"string\">&quot;Failed in timerfd_create&quot;</span>;  </span><br><span class=\"line\">&#125;  </span><br><span class=\"line\"><span class=\"keyword\">return</span> timerfd;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"添加定时器：EventLoop-接口与-TimerQueue-实现\"><a href=\"#添加定时器：EventLoop-接口与-TimerQueue-实现\" class=\"headerlink\" title=\"添加定时器：EventLoop 接口与 TimerQueue 实现\"></a><strong>添加定时器：EventLoop 接口与 TimerQueue 实现</strong></h2><p>用户通常通过 EventLoop 提供的接口（runAt, runAfter, runEvery）来添加定时器。这些接口最终都会调用到 TimerQueue::addTimer。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// EventLoop.cc  </span></span><br><span class=\"line\"><span class=\"function\">TimerId <span class=\"title\">EventLoop::runAt</span><span class=\"params\">(Timestamp time, TimerCallback cb)</span>  </span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;  </span><br><span class=\"line\"><span class=\"keyword\">return</span> timerQueue_-&gt;<span class=\"built_in\">addTimer</span>(std::<span class=\"built_in\">move</span>(cb), time, <span class=\"number\">0.0</span>); <span class=\"comment\">// interval 为 0 表示非重复  </span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">TimerId <span class=\"title\">EventLoop::runAfter</span><span class=\"params\">(<span class=\"type\">double</span> delay, TimerCallback cb)</span>  </span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;  </span><br><span class=\"line\"><span class=\"function\">Timestamp <span class=\"title\">time</span><span class=\"params\">(addTime(Timestamp::now(), delay))</span></span>; <span class=\"comment\">// 计算绝对到期时间  </span></span><br><span class=\"line\"><span class=\"keyword\">return</span> <span class=\"built_in\">runAt</span>(time, std::<span class=\"built_in\">move</span>(cb));  </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">TimerId <span class=\"title\">EventLoop::runEvery</span><span class=\"params\">(<span class=\"type\">double</span> interval, TimerCallback cb)</span>  </span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;  </span><br><span class=\"line\"><span class=\"function\">Timestamp <span class=\"title\">time</span><span class=\"params\">(addTime(Timestamp::now(), interval))</span></span>; <span class=\"comment\">// 首次到期时间  </span></span><br><span class=\"line\"><span class=\"keyword\">return</span> timerQueue_-&gt;<span class=\"built_in\">addTimer</span>(std::<span class=\"built_in\">move</span>(cb), time, interval); <span class=\"comment\">// interval &gt; 0 表示重复  </span></span><br><span class=\"line\">&#125;  </span><br></pre></td></tr></table></figure>\n\n<p><code>TimerQueue::addTimer</code> 方法由于可能被其他线程调用，它会将实际的添加操作 <code>addTimerInLoop</code> 通过 <code>loop_-&gt;runInLoop()</code> 提交到<br><code>TimerQueue</code> 所属的 <code>EventLoop</code> 线程中执行，以保证线程安全。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// TimerQueue.cc  </span></span><br><span class=\"line\"><span class=\"function\">TimerId <span class=\"title\">TimerQueue::addTimer</span><span class=\"params\">(TimerCallback cb,  </span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">Timestamp when,  </span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\"><span class=\"type\">double</span> interval)</span>  </span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;  </span><br><span class=\"line\">Timer* timer = <span class=\"keyword\">new</span> <span class=\"built_in\">Timer</span>(std::<span class=\"built_in\">move</span>(cb), when, interval); <span class=\"comment\">// 创建 Timer 对象  </span></span><br><span class=\"line\">loop_-&gt;<span class=\"built_in\">runInLoop</span>( <span class=\"comment\">// 保证在 loop_ 线程中执行  </span></span><br><span class=\"line\">std::<span class=\"built_in\">bind</span>(&amp;TimerQueue::addTimerInLoop, <span class=\"keyword\">this</span>, timer));  </span><br><span class=\"line\"><span class=\"keyword\">return</span> <span class=\"built_in\">TimerId</span>(timer, timer-&gt;<span class=\"built_in\">sequence</span>()); <span class=\"comment\">// 返回 TimerId 用于取消  </span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">TimerQueue::addTimerInLoop</span><span class=\"params\">(Timer* timer)</span>  </span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;  </span><br><span class=\"line\">loop_-&gt;<span class=\"built_in\">assertInLoopThread</span>(); <span class=\"comment\">// 确保在正确的线程  </span></span><br><span class=\"line\"><span class=\"type\">bool</span> earliestChanged = <span class=\"built_in\">insert</span>(timer); <span class=\"comment\">// 将 Timer 插入内部列表</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> (earliestChanged) <span class=\"comment\">// 如果新插入的定时器成为了最早到期的  </span></span><br><span class=\"line\">&#123;  </span><br><span class=\"line\"><span class=\"comment\">// 重置 timerfd 的超时时间为这个新定时器的到期时间  </span></span><br><span class=\"line\">detail::<span class=\"built_in\">resetTimerfd</span>(timerfd_, timer-&gt;<span class=\"built_in\">expiration</span>());  </span><br><span class=\"line\">&#125;  </span><br><span class=\"line\">&#125;  </span><br></pre></td></tr></table></figure>\n\n<p><code>insert(Timer* timer)</code> 方法负责将 <code>Timer</code> 对象同时插入到 <code>timers_</code> (按时间排序) 和 <code>activeTimers_</code> (用于取消) 两个<br><code>std::set</code> 中，并返回新插入的定时器是否改变了“最早到期时间”。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// TimerQueue.cc  </span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">TimerQueue::insert</span><span class=\"params\">(Timer* timer)</span>  </span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;  </span><br><span class=\"line\">loop_-&gt;<span class=\"built_in\">assertInLoopThread</span>();  </span><br><span class=\"line\"><span class=\"built_in\">assert</span>(timers_.<span class=\"built_in\">size</span>() == activeTimers_.<span class=\"built_in\">size</span>());  </span><br><span class=\"line\"><span class=\"type\">bool</span> earliestChanged = <span class=\"literal\">false</span>;  </span><br><span class=\"line\">Timestamp when = timer-&gt;<span class=\"built_in\">expiration</span>();  </span><br><span class=\"line\">TimerList::iterator it = timers_.<span class=\"built_in\">begin</span>();  </span><br><span class=\"line\"><span class=\"comment\">// 如果 timers_ 为空，或者新定时器的到期时间早于当前最早的定时器  </span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (it == timers_.<span class=\"built_in\">end</span>() || when &lt; it-&gt;first)  </span><br><span class=\"line\">&#123;  </span><br><span class=\"line\">earliestChanged = <span class=\"literal\">true</span>;  </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">timers_.<span class=\"built_in\">insert</span>(<span class=\"built_in\">Entry</span>(when, timer));  </span><br><span class=\"line\">activeTimers_.<span class=\"built_in\">insert</span>(<span class=\"built_in\">ActiveTimer</span>(timer, timer-&gt;<span class=\"built_in\">sequence</span>()));</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">assert</span>(timers_.<span class=\"built_in\">size</span>() == activeTimers_.<span class=\"built_in\">size</span>());  </span><br><span class=\"line\"><span class=\"keyword\">return</span> earliestChanged;  </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>如果 earliestChanged 为 true，则需要调用 detail::resetTimerfd 来更新 timerfd_ 的超时设置。detail::resetTimerfd 内部调用<br>timerfd_settime，并将 newValue.it_value 设置为从当前时间到目标到期时间的相对时间。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// muduo/net/TimerQueue.cc (detail 命名空间内)  </span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">resetTimerfd</span><span class=\"params\">(<span class=\"type\">int</span> timerfd, Timestamp expiration)</span>  </span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;  </span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">itimerspec</span> newValue;  </span><br><span class=\"line\"><span class=\"built_in\">memZero</span>(&amp;newValue, <span class=\"keyword\">sizeof</span> newValue);  </span><br><span class=\"line\">newValue.it_value = <span class=\"built_in\">howMuchTimeFromNow</span>(expiration); <span class=\"comment\">// 计算相对超时时间  </span></span><br><span class=\"line\"><span class=\"type\">int</span> ret = ::<span class=\"built_in\">timerfd_settime</span>(timerfd, <span class=\"number\">0</span>, &amp;newValue, <span class=\"literal\">NULL</span>); <span class=\"comment\">// 0 表示相对时间，不关心 oldValue  </span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (ret)  </span><br><span class=\"line\">&#123;  </span><br><span class=\"line\">LOG_SYSERR &lt;&lt; <span class=\"string\">&quot;timerfd_settime()&quot;</span>;  </span><br><span class=\"line\">&#125;  </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">timespec</span> <span class=\"built_in\">howMuchTimeFromNow</span>(Timestamp when)  </span><br><span class=\"line\">&#123;  </span><br><span class=\"line\"><span class=\"type\">int64_t</span> microseconds = when.<span class=\"built_in\">microSecondsSinceEpoch</span>()  </span><br><span class=\"line\">- Timestamp::<span class=\"built_in\">now</span>().<span class=\"built_in\">microSecondsSinceEpoch</span>();  </span><br><span class=\"line\"><span class=\"keyword\">if</span> (microseconds &lt; <span class=\"number\">100</span>) <span class=\"comment\">// 最小超时设为 100 微秒，避免过于频繁或立即触发  </span></span><br><span class=\"line\">&#123;  </span><br><span class=\"line\">microseconds = <span class=\"number\">100</span>;  </span><br><span class=\"line\">&#125;  </span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">timespec</span> ts;  </span><br><span class=\"line\">ts.tv_sec = <span class=\"built_in\">static_cast</span>&lt;<span class=\"type\">time_t</span>&gt;(  </span><br><span class=\"line\">microseconds / Timestamp::kMicroSecondsPerSecond);  </span><br><span class=\"line\">ts.tv_nsec = <span class=\"built_in\">static_long_cast</span>( <span class=\"comment\">// 使用 muduo 的类型安全转换  </span></span><br><span class=\"line\">(microseconds % Timestamp::kMicroSecondsPerSecond) * <span class=\"number\">1000</span>);  </span><br><span class=\"line\"><span class=\"keyword\">return</span> ts;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"处理定时器到期：TimerQueue-handleRead\"><a href=\"#处理定时器到期：TimerQueue-handleRead\" class=\"headerlink\" title=\"处理定时器到期：TimerQueue::handleRead\"></a><strong>处理定时器到期：TimerQueue::handleRead</strong></h2><p>当 timerfd_ 因设置的超时时间到达而变为可读时，EventLoop 会调用 timerfdChannel_ 的读回调，即 TimerQueue::handleRead。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// TimerQueue.cc  </span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">TimerQueue::handleRead</span><span class=\"params\">()</span>  </span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;  </span><br><span class=\"line\">loop_-&gt;<span class=\"built_in\">assertInLoopThread</span>();  </span><br><span class=\"line\"><span class=\"function\">Timestamp <span class=\"title\">now</span><span class=\"params\">(Timestamp::now())</span></span>;  </span><br><span class=\"line\">detail::<span class=\"built_in\">readTimerfd</span>(timerfd_, now); <span class=\"comment\">// 1. 读取 timerfd，清空事件，避免重复触发</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 2. 获取所有在 &#x27;now&#x27; 时刻之前或同时到期的定时器  </span></span><br><span class=\"line\">std::vector&lt;Entry&gt; expired = <span class=\"built_in\">getExpired</span>(now);</span><br><span class=\"line\"></span><br><span class=\"line\">callingExpiredTimers_ = <span class=\"literal\">true</span>; <span class=\"comment\">// 标记正在调用回调  </span></span><br><span class=\"line\">cancelingTimers_.<span class=\"built_in\">clear</span>();    <span class=\"comment\">// 清空上次调用期间的取消列表</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 3. 遍历所有到期的定时器并执行其回调  </span></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"type\">const</span> Entry&amp; it : expired)  </span><br><span class=\"line\">&#123;  </span><br><span class=\"line\">it.second-&gt;<span class=\"built_in\">run</span>(); <span class=\"comment\">// Timer::run() 会调用用户设置的 TimerCallback  </span></span><br><span class=\"line\">&#125;  </span><br><span class=\"line\">callingExpiredTimers_ = <span class=\"literal\">false</span>; <span class=\"comment\">// 标记回调调用结束</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 4. 重置重复的定时器，并设置 timerfd 的下一次超时时间  </span></span><br><span class=\"line\"><span class=\"built_in\">reset</span>(expired, now);  </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>detail::readTimerfd 简单地读取 timerfd 中的 uint64_t 值（表示自上次成功读取以来发生的超时次数），主要是为了清除 timerfd<br>的可读状态。</p>\n<p>getExpired(Timestamp now) 方法负责从 timers_ 和 activeTimers_ 中找出并<strong>移除</strong>所有在 now 时刻之前（包括 now）到期的定时器。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// TimerQueue.cc  </span></span><br><span class=\"line\"><span class=\"function\">std::vector&lt;TimerQueue::Entry&gt; <span class=\"title\">TimerQueue::getExpired</span><span class=\"params\">(Timestamp now)</span>  </span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;  </span><br><span class=\"line\"><span class=\"built_in\">assert</span>(timers_.<span class=\"built_in\">size</span>() == activeTimers_.<span class=\"built_in\">size</span>());  </span><br><span class=\"line\">std::vector&lt;Entry&gt; expired;  </span><br><span class=\"line\"><span class=\"comment\">// 构造一个哨兵 Entry，其时间戳为 now，Timer* 为一个不可能的地址 (UINTPTR_MAX)  </span></span><br><span class=\"line\"><span class=\"comment\">// std::set::lower_bound 会找到第一个不小于 sentry 的元素  </span></span><br><span class=\"line\"><span class=\"comment\">// 由于 pair 的比较是先比较 first 再比较 second，  </span></span><br><span class=\"line\"><span class=\"comment\">// UINTPTR_MAX 确保了在时间戳相同时，sentry 比任何有效的 Timer* 都大。  </span></span><br><span class=\"line\"><span class=\"comment\">// 因此，end 将指向第一个到期时间严格大于 now 的定时器，或者 timers_.end()。  </span></span><br><span class=\"line\"><span class=\"function\">Entry <span class=\"title\">sentry</span><span class=\"params\">(now, <span class=\"keyword\">reinterpret_cast</span>&lt;Timer*&gt;(UINTPTR_MAX))</span></span>;  </span><br><span class=\"line\">TimerList::iterator end = timers_.<span class=\"built_in\">lower_bound</span>(sentry);  </span><br><span class=\"line\"><span class=\"built_in\">assert</span>(end == timers_.<span class=\"built_in\">end</span>() || now &lt; end-&gt;first);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 将 [timers_.begin(), end) 范围内的元素（即所有已到期的）拷贝到 expired 向量  </span></span><br><span class=\"line\">std::<span class=\"built_in\">copy</span>(timers_.<span class=\"built_in\">begin</span>(), end, std::<span class=\"built_in\">back_inserter</span>(expired));  </span><br><span class=\"line\"><span class=\"comment\">// 从 timers_ 中移除这些已到期的元素  </span></span><br><span class=\"line\">timers_.<span class=\"built_in\">erase</span>(timers_.<span class=\"built_in\">begin</span>(), end);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 同时从 activeTimers_ 中移除这些已到期的元素  </span></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"type\">const</span> Entry&amp; it : expired)  </span><br><span class=\"line\">&#123;  </span><br><span class=\"line\"><span class=\"function\">ActiveTimer <span class=\"title\">timer</span><span class=\"params\">(it.second, it.second-&gt;sequence())</span></span>;  </span><br><span class=\"line\"><span class=\"type\">size_t</span> n = activeTimers_.<span class=\"built_in\">erase</span>(timer);  </span><br><span class=\"line\"><span class=\"built_in\">assert</span>(n == <span class=\"number\">1</span>); (<span class=\"type\">void</span>)n;  </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">assert</span>(timers_.<span class=\"built_in\">size</span>() == activeTimers_.<span class=\"built_in\">size</span>());  </span><br><span class=\"line\"><span class=\"keyword\">return</span> expired;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>下面是定时器到期处理的时序图,展示了 timerfd 触发后，TimerQueue 如何处理到期定时器的完整流程：</p>\n<p><img src=\"/images/%E5%AE%9A%E6%97%B6%E5%99%A8%E5%88%B0%E6%9C%9F%E5%A4%84%E7%90%86.png\" alt=\"定时器到期处理\"></p>\n<h2 id=\"重置与重新调度：TimerQueue-reset\"><a href=\"#重置与重新调度：TimerQueue-reset\" class=\"headerlink\" title=\"重置与重新调度：TimerQueue::reset\"></a><strong>重置与重新调度：TimerQueue::reset</strong></h2><p>在处理完一批到期的定时器后，reset 方法负责：</p>\n<ol>\n<li>对于那些是重复执行 (it.second-&gt;repeat()) 且在回调执行期间未被 cancelingTimers_ 标记为取消的定时器，调用 Timer::<br>restart(now) 更新其下一次到期时间，并将其重新调用 insert() 方法插入到 timers_ 和 activeTimers_ 中。</li>\n<li>对于非重复的或已被取消的定时器，则 delete it.second 释放 Timer 对象内存。</li>\n<li>根据 timers_ 中新的最早到期时间（如果列表不为空），调用 detail::resetTimerfd 重新设置 timerfd_ 的下一次超时。</li>\n</ol>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// TimerQueue.cc  </span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">TimerQueue::reset</span><span class=\"params\">(<span class=\"type\">const</span> std::vector&lt;Entry&gt;&amp; expired, Timestamp now)</span>  </span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;  </span><br><span class=\"line\">Timestamp nextExpire;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"type\">const</span> Entry&amp; it : expired)  </span><br><span class=\"line\">&#123;  </span><br><span class=\"line\"><span class=\"function\">ActiveTimer <span class=\"title\">timer</span><span class=\"params\">(it.second, it.second-&gt;sequence())</span></span>;  </span><br><span class=\"line\"><span class=\"comment\">// 如果是重复定时器，并且在回调执行期间没有被加入到 cancelingTimers_ 列表  </span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (it.second-&gt;<span class=\"built_in\">repeat</span>()  </span><br><span class=\"line\">&amp;&amp; cancelingTimers_.<span class=\"built_in\">find</span>(timer) == cancelingTimers_.<span class=\"built_in\">end</span>())  </span><br><span class=\"line\">&#123;  </span><br><span class=\"line\">it.second-&gt;<span class=\"built_in\">restart</span>(now); <span class=\"comment\">// 更新下次到期时间  </span></span><br><span class=\"line\"><span class=\"built_in\">insert</span>(it.second);       <span class=\"comment\">// 重新插入队列 (insert 会处理 earliestChanged)  </span></span><br><span class=\"line\">&#125;  </span><br><span class=\"line\"><span class=\"keyword\">else</span> <span class=\"comment\">// 非重复或已被取消  </span></span><br><span class=\"line\">&#123;  </span><br><span class=\"line\"><span class=\"comment\">// 作者在此处留下了 // <span class=\"doctag\">FIXME:</span> no delete please 的注释，  </span></span><br><span class=\"line\"><span class=\"comment\">// 暗示未来可能考虑使用对象池 (free list) 来复用 Timer 对象，  </span></span><br><span class=\"line\"><span class=\"comment\">// 以减少频繁 new 和 delete 带来的开销和内存碎片。  </span></span><br><span class=\"line\"><span class=\"keyword\">delete</span> it.second;   </span><br><span class=\"line\">&#125;  </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">if</span> (!timers_.<span class=\"built_in\">empty</span>()) <span class=\"comment\">// 如果还有未到期的定时器  </span></span><br><span class=\"line\">&#123;  </span><br><span class=\"line\">nextExpire = timers_.<span class=\"built_in\">begin</span>()-&gt;second-&gt;<span class=\"built_in\">expiration</span>(); <span class=\"comment\">// 获取下一个最早到期时间  </span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> (nextExpire.<span class=\"built_in\">valid</span>()) <span class=\"comment\">// 如果存在下一个有效到期时间  </span></span><br><span class=\"line\">&#123;  </span><br><span class=\"line\"><span class=\"built_in\">resetTimerfd</span>(timerfd_, nextExpire); <span class=\"comment\">// 重置 timerfd  </span></span><br><span class=\"line\">&#125;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"取消定时器：TimerQueue-cancel-与-cancelInLoop\"><a href=\"#取消定时器：TimerQueue-cancel-与-cancelInLoop\" class=\"headerlink\" title=\"取消定时器：TimerQueue::cancel 与 cancelInLoop\"></a><strong>取消定时器：TimerQueue::cancel 与 cancelInLoop</strong></h2><p>用户通过 EventLoop::cancel(TimerId) 来取消定时器，该方法最终调用 TimerQueue::cancel。与 addTimer 类似，cancel 也会将实际的取消操作<br>cancelInLoop 提交到 loop_ 线程执行。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// EventLoop.cc  </span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">EventLoop::cancel</span><span class=\"params\">(TimerId timerId)</span>  </span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;  </span><br><span class=\"line\"><span class=\"keyword\">return</span> timerQueue_-&gt;<span class=\"built_in\">cancel</span>(timerId);  </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// TimerQueue.cc  </span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">TimerQueue::cancel</span><span class=\"params\">(TimerId timerId)</span>  </span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;  </span><br><span class=\"line\">loop_-&gt;<span class=\"built_in\">runInLoop</span>(  </span><br><span class=\"line\">std::<span class=\"built_in\">bind</span>(&amp;TimerQueue::cancelInLoop, <span class=\"keyword\">this</span>, timerId));  </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">TimerQueue::cancelInLoop</span><span class=\"params\">(TimerId timerId)</span>  </span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;  </span><br><span class=\"line\">loop_-&gt;<span class=\"built_in\">assertInLoopThread</span>();  </span><br><span class=\"line\"><span class=\"built_in\">assert</span>(timers_.<span class=\"built_in\">size</span>() == activeTimers_.<span class=\"built_in\">size</span>());</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 使用 TimerId 中的 Timer* 和 sequence_ 构造 ActiveTimer 用于查找  </span></span><br><span class=\"line\"><span class=\"function\">ActiveTimer <span class=\"title\">timer</span><span class=\"params\">(timerId.timer_, timerId.sequence_)</span></span>;  </span><br><span class=\"line\">ActiveTimerSet::iterator it = activeTimers_.<span class=\"built_in\">find</span>(timer);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> (it != activeTimers_.<span class=\"built_in\">end</span>()) <span class=\"comment\">// 如果在 activeTimers_ 中找到了该定时器  </span></span><br><span class=\"line\">&#123;  </span><br><span class=\"line\"><span class=\"comment\">// 从 timers_ 中移除对应的 Entry  </span></span><br><span class=\"line\"><span class=\"comment\">// 注意：timers_ 的 key 是 pair&lt;Timestamp, Timer*&gt;，需要用其到期时间和指针来构造  </span></span><br><span class=\"line\"><span class=\"type\">size_t</span> n = timers_.<span class=\"built_in\">erase</span>(<span class=\"built_in\">Entry</span>(it-&gt;first-&gt;<span class=\"built_in\">expiration</span>(), it-&gt;first));  </span><br><span class=\"line\"><span class=\"built_in\">assert</span>(n == <span class=\"number\">1</span>); (<span class=\"type\">void</span>)n; <span class=\"comment\">// 应该能精确找到并删除一个  </span></span><br><span class=\"line\"><span class=\"keyword\">delete</span> it-&gt;first; <span class=\"comment\">// 释放 Timer 对象内存  </span></span><br><span class=\"line\">activeTimers_.<span class=\"built_in\">erase</span>(it); <span class=\"comment\">// 从 activeTimers_ 中移除  </span></span><br><span class=\"line\">&#125;  </span><br><span class=\"line\"><span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (callingExpiredTimers_) <span class=\"comment\">// 如果没找到，且当前正在执行回调  </span></span><br><span class=\"line\">&#123;  </span><br><span class=\"line\"><span class=\"comment\">// 这意味着要取消的定时器可能是一个刚刚到期并在被处理的重复定时器。  </span></span><br><span class=\"line\"><span class=\"comment\">// 将其加入 cancelingTimers_ 集合。  </span></span><br><span class=\"line\"><span class=\"comment\">// reset() 方法在重新插入重复定时器前会检查这个 cancelingTimers_ 集合，  </span></span><br><span class=\"line\"><span class=\"comment\">// 如果在其中，则不会重新插入，从而达到取消的目的。  </span></span><br><span class=\"line\">cancelingTimers_.<span class=\"built_in\">insert</span>(timer);  </span><br><span class=\"line\">&#125;  </span><br><span class=\"line\"><span class=\"built_in\">assert</span>(timers_.<span class=\"built_in\">size</span>() == activeTimers_.<span class=\"built_in\">size</span>());  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这种处理方式确保了即使在定时器回调执行期间尝试取消该（重复的）定时器，也能正确处理。</p>\n<p>下面是取消操作的时序图,展示了通过 EventLoop::cancel 取消定时器的流程，包括线程安全处理和回调期间的取消逻辑:</p>\n<p><img src=\"/images/%E5%8F%96%E6%B6%88%E6%93%8D%E4%BD%9C.png\" alt=\"取消操作\"></p>\n<h2 id=\"Timer类与重复执行\"><a href=\"#Timer类与重复执行\" class=\"headerlink\" title=\"Timer类与重复执行\"></a><strong>Timer类与重复执行</strong></h2><p>Timer 类封装了定时器的基本信息：回调函数、到期时间、重复间隔、是否重复以及一个唯一的序列号。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Timer.h (部分)  </span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Timer</span> : noncopyable  </span><br><span class=\"line\">&#123;  </span><br><span class=\"line\"><span class=\"keyword\">public</span>:  </span><br><span class=\"line\"><span class=\"built_in\">Timer</span>(TimerCallback cb, Timestamp when, <span class=\"type\">double</span> interval)  </span><br><span class=\"line\">: <span class=\"built_in\">callback_</span>(std::<span class=\"built_in\">move</span>(cb)),  </span><br><span class=\"line\"><span class=\"built_in\">expiration_</span>(when),  </span><br><span class=\"line\"><span class=\"built_in\">interval_</span>(interval),  </span><br><span class=\"line\"><span class=\"built_in\">repeat_</span>(interval &gt; <span class=\"number\">0.0</span>), <span class=\"comment\">// interval &gt; 0.0 表示是重复定时器  </span></span><br><span class=\"line\"><span class=\"built_in\">sequence_</span>(s_numCreated_.<span class=\"built_in\">incrementAndGet</span>()) <span class=\"comment\">// 原子生成的唯一序列号  </span></span><br><span class=\"line\">&#123; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> <span class=\"type\">const</span> <span class=\"comment\">// 执行回调  </span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;  </span><br><span class=\"line\"><span class=\"built_in\">callback_</span>();  </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">Timestamp <span class=\"title\">expiration</span><span class=\"params\">()</span> <span class=\"type\">const</span>  </span>&#123; <span class=\"keyword\">return</span> expiration_; &#125;  </span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">repeat</span><span class=\"params\">()</span> <span class=\"type\">const</span> </span>&#123; <span class=\"keyword\">return</span> repeat_; &#125;  </span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int64_t</span> <span class=\"title\">sequence</span><span class=\"params\">()</span> <span class=\"type\">const</span> </span>&#123; <span class=\"keyword\">return</span> sequence_; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">restart</span><span class=\"params\">(Timestamp now)</span> <span class=\"comment\">// 重新计算下次到期时间 (用于重复定时器)  </span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;  </span><br><span class=\"line\"><span class=\"built_in\">assert</span>(repeat_);  </span><br><span class=\"line\">expiration_ = <span class=\"built_in\">addTime</span>(now, interval_);  </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// ...  </span></span><br><span class=\"line\"><span class=\"keyword\">private</span>:  </span><br><span class=\"line\"><span class=\"type\">const</span> TimerCallback callback_;  </span><br><span class=\"line\">Timestamp expiration_;  </span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">double</span> interval_;  </span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">bool</span> repeat_;  </span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int64_t</span> sequence_; <span class=\"comment\">// 用于唯一标识 Timer 实例，配合 Timer* 使用</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">static</span> AtomicInt64 s_numCreated_; <span class=\"comment\">// 用于生成 sequence_  </span></span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>runEvery 接口在添加定时器时，会将 interval 参数设置为大于 0 的值，从而 Timer 对象的 repeat_ 成员为 true。在 TimerQueue::<br>reset 方法中，如果一个定时器的 repeat() 为 true 且未被取消，就会调用 restart() 更新其 expiration_ 并重新插入队列。</p>\n<p>下面是添加重复执行任务的时序图,包括 Timer 对象的创建和 timerfd 的超时设置:</p>\n<p><img src=\"/images/%E9%87%8D%E5%A4%8D%E4%BB%BB%E5%8A%A1.png\" alt=\"重复任务\"></p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a><strong>总结</strong></h2><p>muduo::net::TimerQueue 通过精巧的设计，实现了高效且与 EventLoop事件驱动模型完美集成的定时器管理机制：</p>\n<ol>\n<li><strong>timerfd 的妙用：</strong> 将时间事件转化为文件描述符事件，统一由 Poller 处理，使得定时器事件的处理与网络<br>I&#x2F;O 事件的处理路径一致。</li>\n<li><strong>std::set 管理定时器：</strong> 利用 std::set&lt;std::pair&lt;Timestamp, Timer*&gt;&gt;<br>自动按到期时间排序的特性，使得获取最早到期定时器 (timers_.begin()) 和查找指定范围的到期定时器 (lower_bound) 非常高效。</li>\n<li><strong>双集合管理 (timers_ 和 activeTimers_)：</strong> timers_ 用于按时间排序和获取到期任务，activeTimers_ (以 Timer*<br>和序列号为键) 用于高效地取消定时器。通过断言 timers_.size() &#x3D;&#x3D; activeTimers_.size() 保证两者的一致性。</li>\n<li><strong>线程安全：</strong> 所有对 TimerQueue 内部状态的修改都通过 loop_-&gt;runInLoop() 保证在其所属的 EventLoop 线程中执行，确保了线程安全。</li>\n<li><strong>处理回调期间的取消：</strong> 通过 callingExpiredTimers_ 标志和 cancelingTimers_<br>集合，优雅地处理了在执行定时器回调期间，这些定时器（特别是重复定时器）又被用户请求取消的复杂情况。</li>\n<li><strong>资源管理：</strong> Timer 对象通过 new 创建，并在不再需要时（非重复到期、或被取消、或 TimerQueue 析构时）通过 delete<br>释放。</li>\n</ol>\n","excerpt":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a><strong>前言</strong></h2><p>在muduo源码剖析的前两篇文章中，我们深入探讨了 muduo 的核心并发模型——“One Loop Per Thread” 的实现，以及 TCP<br>连接从建立、数据收发到关闭的完整生命周期管理。</p>\n<p>这些内容实际上已经对陈硕大佬在网络库上的设计设计思想体现的很清晰了。但是仅有这些还是不够的， 除了处理网络 I&#x2F;O<br>事件，一个完备的网络库还需要处理时间相关的事件。<br>例如，在固定的时间点执行某个任务（runAt）、在一段延迟之后执行任务（runAfter），或者以固定的时间间隔重复执行任务（runEvery）。这些都离不开一个高效且精准的定时器机制。</p>\n<p>正如陈硕大佬在《Linux多线程服务端编程》一书中所强调的，muduo 的一个重要设计选择是<strong>利用 timerfd_create 这个 Linux<br>系统调用，将时间事件也转化为文件描述符事件</strong>，从而能够被 EventLoop 的 Poller (通常是 epoll) 统一管理和调度。</p>\n<p>本文，我们将聚焦于 muduo::net::TimerQueue 类，深入剖析其如何巧妙地利用 timerfd 实现了一个高效、线程安全的定时器队列，并与<br>EventLoop 的事件驱动模型完美融合。</p>","more":"<h2 id=\"从-Printer-示例看-TimerQueue-的应用\"><a href=\"#从-Printer-示例看-TimerQueue-的应用\" class=\"headerlink\" title=\"从 Printer 示例看 TimerQueue 的应用\"></a><strong>从 Printer 示例看 TimerQueue 的应用</strong></h2><p>在深入源码之前，我们先来看一个 muduo 提供的简单示例，它展示了如何使用 EventLoop 提供的定时器接口：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;muduo/net/EventLoop.h&gt;</span>  </span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;muduo/base/Timestamp.h&gt;</span> <span class=\"comment\">// 虽然示例中没直接用，但 runAfter 内部会用  </span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;muduo/base/Logging.h&gt;</span>   <span class=\"comment\">// 虽然示例中没直接用，但 TimerQueue 内部会用  </span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span>  </span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;functional&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Printer</span> : muduo::noncopyable  </span><br><span class=\"line\">&#123;  </span><br><span class=\"line\"><span class=\"keyword\">public</span>:  </span><br><span class=\"line\"><span class=\"built_in\">Printer</span>(muduo::net::EventLoop* loop)  </span><br><span class=\"line\">: <span class=\"built_in\">loop_</span>(loop),  </span><br><span class=\"line\"><span class=\"built_in\">count_</span>(<span class=\"number\">0</span>)  </span><br><span class=\"line\">&#123;  </span><br><span class=\"line\"><span class=\"comment\">// 注意：对于这种周期性任务，loop-&gt;runEvery() 是更好的选择。  </span></span><br><span class=\"line\"><span class=\"comment\">// 这里使用 runAfter 来演示其基本用法和递归调用自身实现重复。  </span></span><br><span class=\"line\">loop_-&gt;<span class=\"built_in\">runAfter</span>(<span class=\"number\">1.0</span>, std::<span class=\"built_in\">bind</span>(&amp;Printer::print, <span class=\"keyword\">this</span>)); <span class=\"comment\">// 1秒后执行 print  </span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">~<span class=\"built_in\">Printer</span>()  </span><br><span class=\"line\">&#123;  </span><br><span class=\"line\">std::cout &lt;&lt; <span class=\"string\">&quot;Final count is &quot;</span> &lt;&lt; count_ &lt;&lt; <span class=\"string\">&quot;n&quot;</span>;  </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">print</span><span class=\"params\">()</span>  </span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;  </span><br><span class=\"line\"><span class=\"keyword\">if</span> (count_ &lt; <span class=\"number\">5</span>)  </span><br><span class=\"line\">&#123;  </span><br><span class=\"line\">std::cout &lt;&lt; count_ &lt;&lt; <span class=\"string\">&quot;n&quot;</span>;  </span><br><span class=\"line\">++count_;</span><br><span class=\"line\"><span class=\"comment\">// 再次调度自己，1秒后执行  </span></span><br><span class=\"line\">loop_-&gt;<span class=\"built_in\">runAfter</span>(<span class=\"number\">1.0</span>, std::<span class=\"built_in\">bind</span>(&amp;Printer::print, <span class=\"keyword\">this</span>));  </span><br><span class=\"line\">&#125;  </span><br><span class=\"line\"><span class=\"keyword\">else</span>  </span><br><span class=\"line\">&#123;  </span><br><span class=\"line\">    loop_-&gt;<span class=\"built_in\">quit</span>(); <span class=\"comment\">// 打印5次后退出 EventLoop  </span></span><br><span class=\"line\">&#125;  </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">private</span>:  </span><br><span class=\"line\">muduo::net::EventLoop* loop_;  </span><br><span class=\"line\"><span class=\"type\">int</span> count_;  </span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//int main() &#123; ... EventLoop loop; Printer printer(&amp;loop); loop.loop(); ... &#125;</span></span><br></pre></td></tr></table></figure>\n\n<p>这个 Printer 类通过 EventLoop::runAfter 接口，实现了每隔 1 秒打印一次计数，共打印 5 次后退出 EventLoop 的功能。<br>EventLoop 提供的 runAt, runAfter, runEvery 以及 cancel 定时器接口，其底层实现都委托给了 TimerQueue 对象。</p>\n<h2 id=\"TimerQueue-的核心职责与设计概览\"><a href=\"#TimerQueue-的核心职责与设计概览\" class=\"headerlink\" title=\"TimerQueue 的核心职责与设计概览\"></a><strong>TimerQueue 的核心职责与设计概览</strong></h2><p>TimerQueue 的核心职责是管理一系列的定时器 (Timer 对象)，并在它们到期时执行其回调函数。其整体设计思路如下：</p>\n<ol>\n<li><strong>timerfd 作为时间事件的统一入口：</strong><ul>\n<li>在 TimerQueue 构造时，会通过 timerfd_create(CLOCK_MONOTONIC, TFD_NONBLOCK | TFD_CLOEXEC) 创建一个<br>timerfd。CLOCK_MONOTONIC 保证了时间是单调递增的，不受系统时间修改的影响。</li>\n<li>这个 timerfd 被封装成一个 Channel 对象 (timerfdChannel_)，并注册到其所属的 EventLoop 中，监听其可读事件。</li>\n</ul>\n</li>\n<li><strong>按到期时间排序的定时器列表：</strong><ul>\n<li>TimerQueue 内部使用 std::set&lt;std::pair&lt;Timestamp, Timer*&gt;&gt; (即 TimerList timers_) 来存储所有活动的定时器。std::set<br>会自动根据 Timestamp (到期时间) 和 Timer* (指针地址，用于时间相同时保证唯一性) 进行排序，使得 timers_.begin()<br>始终指向最早到期的那个定时器。</li>\n</ul>\n</li>\n<li><strong>动态设置 timerfd 的超时：</strong><ul>\n<li>每当添加新的定时器或有定时器到期后，TimerQueue 会检查 timers_ 列表中最早到期的定时器的时间戳。</li>\n<li>然后，它会调用 timerfd_settime 系统调用，将 timerfd_ 的下一次超时时间设置为这个最早到期时间点。</li>\n</ul>\n</li>\n<li><strong>事件驱动的定时器处理：</strong><ul>\n<li>当 timerfd_ 因设置的超时时间到达而变为可读时，EventLoop 的 Poller 会检测到这个事件，并通过 timerfdChannel_<br>调用其注册的读回调函数，即 TimerQueue::handleRead。</li>\n<li>TimerQueue::handleRead 负责：<ul>\n<li>读取 timerfd_ 以清除事件通知。</li>\n<li>从 timers_ 中找出所有已经到期的定时器。</li>\n<li>执行这些到期定时器的回调函数。</li>\n<li>对于需要重复执行的定时器，重新计算其下一次到期时间并将其插回 timers_。</li>\n<li>根据 timers_ 中新的最早到期时间，重新设置 timerfd_。</li>\n</ul>\n</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"关键数据结构与成员\"><a href=\"#关键数据结构与成员\" class=\"headerlink\" title=\"关键数据结构与成员\"></a><strong>关键数据结构与成员</strong></h2><p>TimerQueue 内部使用了几个关键的数据结构来管理定时器：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">TimerQueue</span> : noncopyable  </span><br><span class=\"line\">&#123;  </span><br><span class=\"line\"><span class=\"keyword\">public</span>:  </span><br><span class=\"line\"><span class=\"comment\">// ... (构造与析构) ...  </span></span><br><span class=\"line\"><span class=\"keyword\">private</span>:  </span><br><span class=\"line\"><span class=\"comment\">// Entry 定义为一个 pair，包含到期时间戳和 Timer 指针  </span></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> std::pair&lt;Timestamp, Timer*&gt; Entry;  </span><br><span class=\"line\"><span class=\"comment\">// TimerList 使用 std::set 存储 Entry，利用 set 的自动排序特性  </span></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> std::set&lt;Entry&gt; TimerList;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// ActiveTimer 用于在取消时快速查找 Timer，通过 Timer* 和其序列号唯一标识  </span></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> std::pair&lt;Timer*, <span class=\"type\">int64_t</span>&gt; ActiveTimer;  </span><br><span class=\"line\"><span class=\"keyword\">typedef</span> std::set&lt;ActiveTimer&gt; ActiveTimerSet;</span><br><span class=\"line\"></span><br><span class=\"line\">EventLoop* loop_;          <span class=\"comment\">// 所属的 EventLoop  </span></span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> timerfd_;        <span class=\"comment\">// timerfd_create() 返回的文件描述符  </span></span><br><span class=\"line\">Channel timerfdChannel_;   <span class=\"comment\">// 用于将 timerfd_ 纳入 EventLoop 管理的 Channel  </span></span><br><span class=\"line\">TimerList timers_;         <span class=\"comment\">// 按到期时间排序的定时器列表</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// for cancel()  </span></span><br><span class=\"line\">ActiveTimerSet activeTimers_;      <span class=\"comment\">// 存储所有活跃的 Timer，用于高效取消  </span></span><br><span class=\"line\"><span class=\"type\">bool</span> callingExpiredTimers_;      <span class=\"comment\">// 标记是否正在调用已到期定时器的回调  </span></span><br><span class=\"line\">ActiveTimerSet cancelingTimers_; <span class=\"comment\">// 存储在调用已到期定时器回调期间，请求取消的定时器  </span></span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>loop_: 指向所属的 EventLoop 对象。</li>\n<li>timerfd_: 通过 detail::createTimerfd() 创建的文件描述符。</li>\n<li>timerfdChannel_: 将 timerfd_ 封装成一个 Channel，其读回调设置为 TimerQueue::handleRead。</li>\n<li>timers_ (TimerList): 一个 std::set&lt;std::pair&lt;Timestamp, Timer*&gt;&gt;，按到期时间升序存储定时器。timers_.begin()<br>始终指向最早到期的定时器。</li>\n<li>activeTimers_ (ActiveTimerSet): 一个 std::set&lt;std::pair&lt;Timer*, int64_t&gt;&gt;，用于通过 Timer*<br>和其序列号快速取消定时器。timers_ 和 activeTimers_ 中的 Timer* 应该是一一对应的，它们的 size() 应该始终相等。</li>\n<li>callingExpiredTimers_: 布尔标记，指示当前是否正在执行已到期定时器的回调。</li>\n<li>cancelingTimers_ (ActiveTimerSet): 用于处理在执行回调期间发生的取消请求。</li>\n</ul>\n<h2 id=\"TimerQueue-的初始化\"><a href=\"#TimerQueue-的初始化\" class=\"headerlink\" title=\"TimerQueue 的初始化\"></a><strong>TimerQueue 的初始化</strong></h2><p>TimerQueue 在构造时，会创建 timerfd_，并初始化 timerfdChannel_，将其注册到 EventLoop 中。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// TimerQueue.cc</span></span><br><span class=\"line\">TimerQueue::<span class=\"built_in\">TimerQueue</span>(EventLoop* loop)</span><br><span class=\"line\">: <span class=\"built_in\">loop_</span>(loop),  </span><br><span class=\"line\"><span class=\"built_in\">timerfd_</span>(detail::<span class=\"built_in\">createTimerfd</span>()), <span class=\"comment\">// 调用辅助函数创建 timerfd  </span></span><br><span class=\"line\"><span class=\"built_in\">timerfdChannel_</span>(loop, timerfd_),   <span class=\"comment\">// 创建 Channel，并与 loop_ 关联  </span></span><br><span class=\"line\"><span class=\"built_in\">timers_</span>(),  </span><br><span class=\"line\"><span class=\"built_in\">callingExpiredTimers_</span>(<span class=\"literal\">false</span>)  </span><br><span class=\"line\">&#123;  </span><br><span class=\"line\">timerfdChannel_.<span class=\"built_in\">setReadCallback</span>(  </span><br><span class=\"line\">std::<span class=\"built_in\">bind</span>(&amp;TimerQueue::handleRead, <span class=\"keyword\">this</span>)); <span class=\"comment\">// 设置读回调  </span></span><br><span class=\"line\"><span class=\"comment\">// 即使没有定时器，也使能读事件。  </span></span><br><span class=\"line\"><span class=\"comment\">// timerfd 的实际超时是通过 timerfd_settime 设置的。  </span></span><br><span class=\"line\"><span class=\"comment\">// 如果没有活动的定时器，timerfd_settime 会将其超时设为一个不会触发的状态  </span></span><br><span class=\"line\"><span class=\"comment\">// (例如，it_value 设为0，表示 disarm) 或一个极大的未来时间。  </span></span><br><span class=\"line\"><span class=\"comment\">// muduo 的做法是，如果 nextExpire 无效，则不调用 resetTimerfd。  </span></span><br><span class=\"line\">timerfdChannel_.<span class=\"built_in\">enableReading</span>();  </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// muduo/net/TimerQueue.cc (detail 命名空间内)  </span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">createTimerfd</span><span class=\"params\">()</span>  </span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;  </span><br><span class=\"line\"><span class=\"type\">int</span> timerfd = ::<span class=\"built_in\">timerfd_create</span>(CLOCK_MONOTONIC,  </span><br><span class=\"line\">TFD_NONBLOCK | TFD_CLOEXEC);  </span><br><span class=\"line\"><span class=\"keyword\">if</span> (timerfd &lt; <span class=\"number\">0</span>)  </span><br><span class=\"line\">&#123;  </span><br><span class=\"line\">LOG_SYSFATAL &lt;&lt; <span class=\"string\">&quot;Failed in timerfd_create&quot;</span>;  </span><br><span class=\"line\">&#125;  </span><br><span class=\"line\"><span class=\"keyword\">return</span> timerfd;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"添加定时器：EventLoop-接口与-TimerQueue-实现\"><a href=\"#添加定时器：EventLoop-接口与-TimerQueue-实现\" class=\"headerlink\" title=\"添加定时器：EventLoop 接口与 TimerQueue 实现\"></a><strong>添加定时器：EventLoop 接口与 TimerQueue 实现</strong></h2><p>用户通常通过 EventLoop 提供的接口（runAt, runAfter, runEvery）来添加定时器。这些接口最终都会调用到 TimerQueue::addTimer。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// EventLoop.cc  </span></span><br><span class=\"line\"><span class=\"function\">TimerId <span class=\"title\">EventLoop::runAt</span><span class=\"params\">(Timestamp time, TimerCallback cb)</span>  </span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;  </span><br><span class=\"line\"><span class=\"keyword\">return</span> timerQueue_-&gt;<span class=\"built_in\">addTimer</span>(std::<span class=\"built_in\">move</span>(cb), time, <span class=\"number\">0.0</span>); <span class=\"comment\">// interval 为 0 表示非重复  </span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">TimerId <span class=\"title\">EventLoop::runAfter</span><span class=\"params\">(<span class=\"type\">double</span> delay, TimerCallback cb)</span>  </span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;  </span><br><span class=\"line\"><span class=\"function\">Timestamp <span class=\"title\">time</span><span class=\"params\">(addTime(Timestamp::now(), delay))</span></span>; <span class=\"comment\">// 计算绝对到期时间  </span></span><br><span class=\"line\"><span class=\"keyword\">return</span> <span class=\"built_in\">runAt</span>(time, std::<span class=\"built_in\">move</span>(cb));  </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">TimerId <span class=\"title\">EventLoop::runEvery</span><span class=\"params\">(<span class=\"type\">double</span> interval, TimerCallback cb)</span>  </span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;  </span><br><span class=\"line\"><span class=\"function\">Timestamp <span class=\"title\">time</span><span class=\"params\">(addTime(Timestamp::now(), interval))</span></span>; <span class=\"comment\">// 首次到期时间  </span></span><br><span class=\"line\"><span class=\"keyword\">return</span> timerQueue_-&gt;<span class=\"built_in\">addTimer</span>(std::<span class=\"built_in\">move</span>(cb), time, interval); <span class=\"comment\">// interval &gt; 0 表示重复  </span></span><br><span class=\"line\">&#125;  </span><br></pre></td></tr></table></figure>\n\n<p><code>TimerQueue::addTimer</code> 方法由于可能被其他线程调用，它会将实际的添加操作 <code>addTimerInLoop</code> 通过 <code>loop_-&gt;runInLoop()</code> 提交到<br><code>TimerQueue</code> 所属的 <code>EventLoop</code> 线程中执行，以保证线程安全。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// TimerQueue.cc  </span></span><br><span class=\"line\"><span class=\"function\">TimerId <span class=\"title\">TimerQueue::addTimer</span><span class=\"params\">(TimerCallback cb,  </span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">Timestamp when,  </span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\"><span class=\"type\">double</span> interval)</span>  </span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;  </span><br><span class=\"line\">Timer* timer = <span class=\"keyword\">new</span> <span class=\"built_in\">Timer</span>(std::<span class=\"built_in\">move</span>(cb), when, interval); <span class=\"comment\">// 创建 Timer 对象  </span></span><br><span class=\"line\">loop_-&gt;<span class=\"built_in\">runInLoop</span>( <span class=\"comment\">// 保证在 loop_ 线程中执行  </span></span><br><span class=\"line\">std::<span class=\"built_in\">bind</span>(&amp;TimerQueue::addTimerInLoop, <span class=\"keyword\">this</span>, timer));  </span><br><span class=\"line\"><span class=\"keyword\">return</span> <span class=\"built_in\">TimerId</span>(timer, timer-&gt;<span class=\"built_in\">sequence</span>()); <span class=\"comment\">// 返回 TimerId 用于取消  </span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">TimerQueue::addTimerInLoop</span><span class=\"params\">(Timer* timer)</span>  </span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;  </span><br><span class=\"line\">loop_-&gt;<span class=\"built_in\">assertInLoopThread</span>(); <span class=\"comment\">// 确保在正确的线程  </span></span><br><span class=\"line\"><span class=\"type\">bool</span> earliestChanged = <span class=\"built_in\">insert</span>(timer); <span class=\"comment\">// 将 Timer 插入内部列表</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> (earliestChanged) <span class=\"comment\">// 如果新插入的定时器成为了最早到期的  </span></span><br><span class=\"line\">&#123;  </span><br><span class=\"line\"><span class=\"comment\">// 重置 timerfd 的超时时间为这个新定时器的到期时间  </span></span><br><span class=\"line\">detail::<span class=\"built_in\">resetTimerfd</span>(timerfd_, timer-&gt;<span class=\"built_in\">expiration</span>());  </span><br><span class=\"line\">&#125;  </span><br><span class=\"line\">&#125;  </span><br></pre></td></tr></table></figure>\n\n<p><code>insert(Timer* timer)</code> 方法负责将 <code>Timer</code> 对象同时插入到 <code>timers_</code> (按时间排序) 和 <code>activeTimers_</code> (用于取消) 两个<br><code>std::set</code> 中，并返回新插入的定时器是否改变了“最早到期时间”。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// TimerQueue.cc  </span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">TimerQueue::insert</span><span class=\"params\">(Timer* timer)</span>  </span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;  </span><br><span class=\"line\">loop_-&gt;<span class=\"built_in\">assertInLoopThread</span>();  </span><br><span class=\"line\"><span class=\"built_in\">assert</span>(timers_.<span class=\"built_in\">size</span>() == activeTimers_.<span class=\"built_in\">size</span>());  </span><br><span class=\"line\"><span class=\"type\">bool</span> earliestChanged = <span class=\"literal\">false</span>;  </span><br><span class=\"line\">Timestamp when = timer-&gt;<span class=\"built_in\">expiration</span>();  </span><br><span class=\"line\">TimerList::iterator it = timers_.<span class=\"built_in\">begin</span>();  </span><br><span class=\"line\"><span class=\"comment\">// 如果 timers_ 为空，或者新定时器的到期时间早于当前最早的定时器  </span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (it == timers_.<span class=\"built_in\">end</span>() || when &lt; it-&gt;first)  </span><br><span class=\"line\">&#123;  </span><br><span class=\"line\">earliestChanged = <span class=\"literal\">true</span>;  </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">timers_.<span class=\"built_in\">insert</span>(<span class=\"built_in\">Entry</span>(when, timer));  </span><br><span class=\"line\">activeTimers_.<span class=\"built_in\">insert</span>(<span class=\"built_in\">ActiveTimer</span>(timer, timer-&gt;<span class=\"built_in\">sequence</span>()));</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">assert</span>(timers_.<span class=\"built_in\">size</span>() == activeTimers_.<span class=\"built_in\">size</span>());  </span><br><span class=\"line\"><span class=\"keyword\">return</span> earliestChanged;  </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>如果 earliestChanged 为 true，则需要调用 detail::resetTimerfd 来更新 timerfd_ 的超时设置。detail::resetTimerfd 内部调用<br>timerfd_settime，并将 newValue.it_value 设置为从当前时间到目标到期时间的相对时间。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// muduo/net/TimerQueue.cc (detail 命名空间内)  </span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">resetTimerfd</span><span class=\"params\">(<span class=\"type\">int</span> timerfd, Timestamp expiration)</span>  </span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;  </span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">itimerspec</span> newValue;  </span><br><span class=\"line\"><span class=\"built_in\">memZero</span>(&amp;newValue, <span class=\"keyword\">sizeof</span> newValue);  </span><br><span class=\"line\">newValue.it_value = <span class=\"built_in\">howMuchTimeFromNow</span>(expiration); <span class=\"comment\">// 计算相对超时时间  </span></span><br><span class=\"line\"><span class=\"type\">int</span> ret = ::<span class=\"built_in\">timerfd_settime</span>(timerfd, <span class=\"number\">0</span>, &amp;newValue, <span class=\"literal\">NULL</span>); <span class=\"comment\">// 0 表示相对时间，不关心 oldValue  </span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (ret)  </span><br><span class=\"line\">&#123;  </span><br><span class=\"line\">LOG_SYSERR &lt;&lt; <span class=\"string\">&quot;timerfd_settime()&quot;</span>;  </span><br><span class=\"line\">&#125;  </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">timespec</span> <span class=\"built_in\">howMuchTimeFromNow</span>(Timestamp when)  </span><br><span class=\"line\">&#123;  </span><br><span class=\"line\"><span class=\"type\">int64_t</span> microseconds = when.<span class=\"built_in\">microSecondsSinceEpoch</span>()  </span><br><span class=\"line\">- Timestamp::<span class=\"built_in\">now</span>().<span class=\"built_in\">microSecondsSinceEpoch</span>();  </span><br><span class=\"line\"><span class=\"keyword\">if</span> (microseconds &lt; <span class=\"number\">100</span>) <span class=\"comment\">// 最小超时设为 100 微秒，避免过于频繁或立即触发  </span></span><br><span class=\"line\">&#123;  </span><br><span class=\"line\">microseconds = <span class=\"number\">100</span>;  </span><br><span class=\"line\">&#125;  </span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">timespec</span> ts;  </span><br><span class=\"line\">ts.tv_sec = <span class=\"built_in\">static_cast</span>&lt;<span class=\"type\">time_t</span>&gt;(  </span><br><span class=\"line\">microseconds / Timestamp::kMicroSecondsPerSecond);  </span><br><span class=\"line\">ts.tv_nsec = <span class=\"built_in\">static_long_cast</span>( <span class=\"comment\">// 使用 muduo 的类型安全转换  </span></span><br><span class=\"line\">(microseconds % Timestamp::kMicroSecondsPerSecond) * <span class=\"number\">1000</span>);  </span><br><span class=\"line\"><span class=\"keyword\">return</span> ts;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"处理定时器到期：TimerQueue-handleRead\"><a href=\"#处理定时器到期：TimerQueue-handleRead\" class=\"headerlink\" title=\"处理定时器到期：TimerQueue::handleRead\"></a><strong>处理定时器到期：TimerQueue::handleRead</strong></h2><p>当 timerfd_ 因设置的超时时间到达而变为可读时，EventLoop 会调用 timerfdChannel_ 的读回调，即 TimerQueue::handleRead。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// TimerQueue.cc  </span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">TimerQueue::handleRead</span><span class=\"params\">()</span>  </span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;  </span><br><span class=\"line\">loop_-&gt;<span class=\"built_in\">assertInLoopThread</span>();  </span><br><span class=\"line\"><span class=\"function\">Timestamp <span class=\"title\">now</span><span class=\"params\">(Timestamp::now())</span></span>;  </span><br><span class=\"line\">detail::<span class=\"built_in\">readTimerfd</span>(timerfd_, now); <span class=\"comment\">// 1. 读取 timerfd，清空事件，避免重复触发</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 2. 获取所有在 &#x27;now&#x27; 时刻之前或同时到期的定时器  </span></span><br><span class=\"line\">std::vector&lt;Entry&gt; expired = <span class=\"built_in\">getExpired</span>(now);</span><br><span class=\"line\"></span><br><span class=\"line\">callingExpiredTimers_ = <span class=\"literal\">true</span>; <span class=\"comment\">// 标记正在调用回调  </span></span><br><span class=\"line\">cancelingTimers_.<span class=\"built_in\">clear</span>();    <span class=\"comment\">// 清空上次调用期间的取消列表</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 3. 遍历所有到期的定时器并执行其回调  </span></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"type\">const</span> Entry&amp; it : expired)  </span><br><span class=\"line\">&#123;  </span><br><span class=\"line\">it.second-&gt;<span class=\"built_in\">run</span>(); <span class=\"comment\">// Timer::run() 会调用用户设置的 TimerCallback  </span></span><br><span class=\"line\">&#125;  </span><br><span class=\"line\">callingExpiredTimers_ = <span class=\"literal\">false</span>; <span class=\"comment\">// 标记回调调用结束</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 4. 重置重复的定时器，并设置 timerfd 的下一次超时时间  </span></span><br><span class=\"line\"><span class=\"built_in\">reset</span>(expired, now);  </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>detail::readTimerfd 简单地读取 timerfd 中的 uint64_t 值（表示自上次成功读取以来发生的超时次数），主要是为了清除 timerfd<br>的可读状态。</p>\n<p>getExpired(Timestamp now) 方法负责从 timers_ 和 activeTimers_ 中找出并<strong>移除</strong>所有在 now 时刻之前（包括 now）到期的定时器。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// TimerQueue.cc  </span></span><br><span class=\"line\"><span class=\"function\">std::vector&lt;TimerQueue::Entry&gt; <span class=\"title\">TimerQueue::getExpired</span><span class=\"params\">(Timestamp now)</span>  </span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;  </span><br><span class=\"line\"><span class=\"built_in\">assert</span>(timers_.<span class=\"built_in\">size</span>() == activeTimers_.<span class=\"built_in\">size</span>());  </span><br><span class=\"line\">std::vector&lt;Entry&gt; expired;  </span><br><span class=\"line\"><span class=\"comment\">// 构造一个哨兵 Entry，其时间戳为 now，Timer* 为一个不可能的地址 (UINTPTR_MAX)  </span></span><br><span class=\"line\"><span class=\"comment\">// std::set::lower_bound 会找到第一个不小于 sentry 的元素  </span></span><br><span class=\"line\"><span class=\"comment\">// 由于 pair 的比较是先比较 first 再比较 second，  </span></span><br><span class=\"line\"><span class=\"comment\">// UINTPTR_MAX 确保了在时间戳相同时，sentry 比任何有效的 Timer* 都大。  </span></span><br><span class=\"line\"><span class=\"comment\">// 因此，end 将指向第一个到期时间严格大于 now 的定时器，或者 timers_.end()。  </span></span><br><span class=\"line\"><span class=\"function\">Entry <span class=\"title\">sentry</span><span class=\"params\">(now, <span class=\"keyword\">reinterpret_cast</span>&lt;Timer*&gt;(UINTPTR_MAX))</span></span>;  </span><br><span class=\"line\">TimerList::iterator end = timers_.<span class=\"built_in\">lower_bound</span>(sentry);  </span><br><span class=\"line\"><span class=\"built_in\">assert</span>(end == timers_.<span class=\"built_in\">end</span>() || now &lt; end-&gt;first);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 将 [timers_.begin(), end) 范围内的元素（即所有已到期的）拷贝到 expired 向量  </span></span><br><span class=\"line\">std::<span class=\"built_in\">copy</span>(timers_.<span class=\"built_in\">begin</span>(), end, std::<span class=\"built_in\">back_inserter</span>(expired));  </span><br><span class=\"line\"><span class=\"comment\">// 从 timers_ 中移除这些已到期的元素  </span></span><br><span class=\"line\">timers_.<span class=\"built_in\">erase</span>(timers_.<span class=\"built_in\">begin</span>(), end);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 同时从 activeTimers_ 中移除这些已到期的元素  </span></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"type\">const</span> Entry&amp; it : expired)  </span><br><span class=\"line\">&#123;  </span><br><span class=\"line\"><span class=\"function\">ActiveTimer <span class=\"title\">timer</span><span class=\"params\">(it.second, it.second-&gt;sequence())</span></span>;  </span><br><span class=\"line\"><span class=\"type\">size_t</span> n = activeTimers_.<span class=\"built_in\">erase</span>(timer);  </span><br><span class=\"line\"><span class=\"built_in\">assert</span>(n == <span class=\"number\">1</span>); (<span class=\"type\">void</span>)n;  </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">assert</span>(timers_.<span class=\"built_in\">size</span>() == activeTimers_.<span class=\"built_in\">size</span>());  </span><br><span class=\"line\"><span class=\"keyword\">return</span> expired;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>下面是定时器到期处理的时序图,展示了 timerfd 触发后，TimerQueue 如何处理到期定时器的完整流程：</p>\n<p><img src=\"/images/%E5%AE%9A%E6%97%B6%E5%99%A8%E5%88%B0%E6%9C%9F%E5%A4%84%E7%90%86.png\" alt=\"定时器到期处理\"></p>\n<h2 id=\"重置与重新调度：TimerQueue-reset\"><a href=\"#重置与重新调度：TimerQueue-reset\" class=\"headerlink\" title=\"重置与重新调度：TimerQueue::reset\"></a><strong>重置与重新调度：TimerQueue::reset</strong></h2><p>在处理完一批到期的定时器后，reset 方法负责：</p>\n<ol>\n<li>对于那些是重复执行 (it.second-&gt;repeat()) 且在回调执行期间未被 cancelingTimers_ 标记为取消的定时器，调用 Timer::<br>restart(now) 更新其下一次到期时间，并将其重新调用 insert() 方法插入到 timers_ 和 activeTimers_ 中。</li>\n<li>对于非重复的或已被取消的定时器，则 delete it.second 释放 Timer 对象内存。</li>\n<li>根据 timers_ 中新的最早到期时间（如果列表不为空），调用 detail::resetTimerfd 重新设置 timerfd_ 的下一次超时。</li>\n</ol>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// TimerQueue.cc  </span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">TimerQueue::reset</span><span class=\"params\">(<span class=\"type\">const</span> std::vector&lt;Entry&gt;&amp; expired, Timestamp now)</span>  </span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;  </span><br><span class=\"line\">Timestamp nextExpire;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"type\">const</span> Entry&amp; it : expired)  </span><br><span class=\"line\">&#123;  </span><br><span class=\"line\"><span class=\"function\">ActiveTimer <span class=\"title\">timer</span><span class=\"params\">(it.second, it.second-&gt;sequence())</span></span>;  </span><br><span class=\"line\"><span class=\"comment\">// 如果是重复定时器，并且在回调执行期间没有被加入到 cancelingTimers_ 列表  </span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (it.second-&gt;<span class=\"built_in\">repeat</span>()  </span><br><span class=\"line\">&amp;&amp; cancelingTimers_.<span class=\"built_in\">find</span>(timer) == cancelingTimers_.<span class=\"built_in\">end</span>())  </span><br><span class=\"line\">&#123;  </span><br><span class=\"line\">it.second-&gt;<span class=\"built_in\">restart</span>(now); <span class=\"comment\">// 更新下次到期时间  </span></span><br><span class=\"line\"><span class=\"built_in\">insert</span>(it.second);       <span class=\"comment\">// 重新插入队列 (insert 会处理 earliestChanged)  </span></span><br><span class=\"line\">&#125;  </span><br><span class=\"line\"><span class=\"keyword\">else</span> <span class=\"comment\">// 非重复或已被取消  </span></span><br><span class=\"line\">&#123;  </span><br><span class=\"line\"><span class=\"comment\">// 作者在此处留下了 // <span class=\"doctag\">FIXME:</span> no delete please 的注释，  </span></span><br><span class=\"line\"><span class=\"comment\">// 暗示未来可能考虑使用对象池 (free list) 来复用 Timer 对象，  </span></span><br><span class=\"line\"><span class=\"comment\">// 以减少频繁 new 和 delete 带来的开销和内存碎片。  </span></span><br><span class=\"line\"><span class=\"keyword\">delete</span> it.second;   </span><br><span class=\"line\">&#125;  </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">if</span> (!timers_.<span class=\"built_in\">empty</span>()) <span class=\"comment\">// 如果还有未到期的定时器  </span></span><br><span class=\"line\">&#123;  </span><br><span class=\"line\">nextExpire = timers_.<span class=\"built_in\">begin</span>()-&gt;second-&gt;<span class=\"built_in\">expiration</span>(); <span class=\"comment\">// 获取下一个最早到期时间  </span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> (nextExpire.<span class=\"built_in\">valid</span>()) <span class=\"comment\">// 如果存在下一个有效到期时间  </span></span><br><span class=\"line\">&#123;  </span><br><span class=\"line\"><span class=\"built_in\">resetTimerfd</span>(timerfd_, nextExpire); <span class=\"comment\">// 重置 timerfd  </span></span><br><span class=\"line\">&#125;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"取消定时器：TimerQueue-cancel-与-cancelInLoop\"><a href=\"#取消定时器：TimerQueue-cancel-与-cancelInLoop\" class=\"headerlink\" title=\"取消定时器：TimerQueue::cancel 与 cancelInLoop\"></a><strong>取消定时器：TimerQueue::cancel 与 cancelInLoop</strong></h2><p>用户通过 EventLoop::cancel(TimerId) 来取消定时器，该方法最终调用 TimerQueue::cancel。与 addTimer 类似，cancel 也会将实际的取消操作<br>cancelInLoop 提交到 loop_ 线程执行。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// EventLoop.cc  </span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">EventLoop::cancel</span><span class=\"params\">(TimerId timerId)</span>  </span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;  </span><br><span class=\"line\"><span class=\"keyword\">return</span> timerQueue_-&gt;<span class=\"built_in\">cancel</span>(timerId);  </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// TimerQueue.cc  </span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">TimerQueue::cancel</span><span class=\"params\">(TimerId timerId)</span>  </span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;  </span><br><span class=\"line\">loop_-&gt;<span class=\"built_in\">runInLoop</span>(  </span><br><span class=\"line\">std::<span class=\"built_in\">bind</span>(&amp;TimerQueue::cancelInLoop, <span class=\"keyword\">this</span>, timerId));  </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">TimerQueue::cancelInLoop</span><span class=\"params\">(TimerId timerId)</span>  </span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;  </span><br><span class=\"line\">loop_-&gt;<span class=\"built_in\">assertInLoopThread</span>();  </span><br><span class=\"line\"><span class=\"built_in\">assert</span>(timers_.<span class=\"built_in\">size</span>() == activeTimers_.<span class=\"built_in\">size</span>());</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 使用 TimerId 中的 Timer* 和 sequence_ 构造 ActiveTimer 用于查找  </span></span><br><span class=\"line\"><span class=\"function\">ActiveTimer <span class=\"title\">timer</span><span class=\"params\">(timerId.timer_, timerId.sequence_)</span></span>;  </span><br><span class=\"line\">ActiveTimerSet::iterator it = activeTimers_.<span class=\"built_in\">find</span>(timer);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> (it != activeTimers_.<span class=\"built_in\">end</span>()) <span class=\"comment\">// 如果在 activeTimers_ 中找到了该定时器  </span></span><br><span class=\"line\">&#123;  </span><br><span class=\"line\"><span class=\"comment\">// 从 timers_ 中移除对应的 Entry  </span></span><br><span class=\"line\"><span class=\"comment\">// 注意：timers_ 的 key 是 pair&lt;Timestamp, Timer*&gt;，需要用其到期时间和指针来构造  </span></span><br><span class=\"line\"><span class=\"type\">size_t</span> n = timers_.<span class=\"built_in\">erase</span>(<span class=\"built_in\">Entry</span>(it-&gt;first-&gt;<span class=\"built_in\">expiration</span>(), it-&gt;first));  </span><br><span class=\"line\"><span class=\"built_in\">assert</span>(n == <span class=\"number\">1</span>); (<span class=\"type\">void</span>)n; <span class=\"comment\">// 应该能精确找到并删除一个  </span></span><br><span class=\"line\"><span class=\"keyword\">delete</span> it-&gt;first; <span class=\"comment\">// 释放 Timer 对象内存  </span></span><br><span class=\"line\">activeTimers_.<span class=\"built_in\">erase</span>(it); <span class=\"comment\">// 从 activeTimers_ 中移除  </span></span><br><span class=\"line\">&#125;  </span><br><span class=\"line\"><span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (callingExpiredTimers_) <span class=\"comment\">// 如果没找到，且当前正在执行回调  </span></span><br><span class=\"line\">&#123;  </span><br><span class=\"line\"><span class=\"comment\">// 这意味着要取消的定时器可能是一个刚刚到期并在被处理的重复定时器。  </span></span><br><span class=\"line\"><span class=\"comment\">// 将其加入 cancelingTimers_ 集合。  </span></span><br><span class=\"line\"><span class=\"comment\">// reset() 方法在重新插入重复定时器前会检查这个 cancelingTimers_ 集合，  </span></span><br><span class=\"line\"><span class=\"comment\">// 如果在其中，则不会重新插入，从而达到取消的目的。  </span></span><br><span class=\"line\">cancelingTimers_.<span class=\"built_in\">insert</span>(timer);  </span><br><span class=\"line\">&#125;  </span><br><span class=\"line\"><span class=\"built_in\">assert</span>(timers_.<span class=\"built_in\">size</span>() == activeTimers_.<span class=\"built_in\">size</span>());  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这种处理方式确保了即使在定时器回调执行期间尝试取消该（重复的）定时器，也能正确处理。</p>\n<p>下面是取消操作的时序图,展示了通过 EventLoop::cancel 取消定时器的流程，包括线程安全处理和回调期间的取消逻辑:</p>\n<p><img src=\"/images/%E5%8F%96%E6%B6%88%E6%93%8D%E4%BD%9C.png\" alt=\"取消操作\"></p>\n<h2 id=\"Timer类与重复执行\"><a href=\"#Timer类与重复执行\" class=\"headerlink\" title=\"Timer类与重复执行\"></a><strong>Timer类与重复执行</strong></h2><p>Timer 类封装了定时器的基本信息：回调函数、到期时间、重复间隔、是否重复以及一个唯一的序列号。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Timer.h (部分)  </span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Timer</span> : noncopyable  </span><br><span class=\"line\">&#123;  </span><br><span class=\"line\"><span class=\"keyword\">public</span>:  </span><br><span class=\"line\"><span class=\"built_in\">Timer</span>(TimerCallback cb, Timestamp when, <span class=\"type\">double</span> interval)  </span><br><span class=\"line\">: <span class=\"built_in\">callback_</span>(std::<span class=\"built_in\">move</span>(cb)),  </span><br><span class=\"line\"><span class=\"built_in\">expiration_</span>(when),  </span><br><span class=\"line\"><span class=\"built_in\">interval_</span>(interval),  </span><br><span class=\"line\"><span class=\"built_in\">repeat_</span>(interval &gt; <span class=\"number\">0.0</span>), <span class=\"comment\">// interval &gt; 0.0 表示是重复定时器  </span></span><br><span class=\"line\"><span class=\"built_in\">sequence_</span>(s_numCreated_.<span class=\"built_in\">incrementAndGet</span>()) <span class=\"comment\">// 原子生成的唯一序列号  </span></span><br><span class=\"line\">&#123; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> <span class=\"type\">const</span> <span class=\"comment\">// 执行回调  </span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;  </span><br><span class=\"line\"><span class=\"built_in\">callback_</span>();  </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">Timestamp <span class=\"title\">expiration</span><span class=\"params\">()</span> <span class=\"type\">const</span>  </span>&#123; <span class=\"keyword\">return</span> expiration_; &#125;  </span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">repeat</span><span class=\"params\">()</span> <span class=\"type\">const</span> </span>&#123; <span class=\"keyword\">return</span> repeat_; &#125;  </span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int64_t</span> <span class=\"title\">sequence</span><span class=\"params\">()</span> <span class=\"type\">const</span> </span>&#123; <span class=\"keyword\">return</span> sequence_; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">restart</span><span class=\"params\">(Timestamp now)</span> <span class=\"comment\">// 重新计算下次到期时间 (用于重复定时器)  </span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;  </span><br><span class=\"line\"><span class=\"built_in\">assert</span>(repeat_);  </span><br><span class=\"line\">expiration_ = <span class=\"built_in\">addTime</span>(now, interval_);  </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// ...  </span></span><br><span class=\"line\"><span class=\"keyword\">private</span>:  </span><br><span class=\"line\"><span class=\"type\">const</span> TimerCallback callback_;  </span><br><span class=\"line\">Timestamp expiration_;  </span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">double</span> interval_;  </span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">bool</span> repeat_;  </span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int64_t</span> sequence_; <span class=\"comment\">// 用于唯一标识 Timer 实例，配合 Timer* 使用</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">static</span> AtomicInt64 s_numCreated_; <span class=\"comment\">// 用于生成 sequence_  </span></span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>runEvery 接口在添加定时器时，会将 interval 参数设置为大于 0 的值，从而 Timer 对象的 repeat_ 成员为 true。在 TimerQueue::<br>reset 方法中，如果一个定时器的 repeat() 为 true 且未被取消，就会调用 restart() 更新其 expiration_ 并重新插入队列。</p>\n<p>下面是添加重复执行任务的时序图,包括 Timer 对象的创建和 timerfd 的超时设置:</p>\n<p><img src=\"/images/%E9%87%8D%E5%A4%8D%E4%BB%BB%E5%8A%A1.png\" alt=\"重复任务\"></p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a><strong>总结</strong></h2><p>muduo::net::TimerQueue 通过精巧的设计，实现了高效且与 EventLoop事件驱动模型完美集成的定时器管理机制：</p>\n<ol>\n<li><strong>timerfd 的妙用：</strong> 将时间事件转化为文件描述符事件，统一由 Poller 处理，使得定时器事件的处理与网络<br>I&#x2F;O 事件的处理路径一致。</li>\n<li><strong>std::set 管理定时器：</strong> 利用 std::set&lt;std::pair&lt;Timestamp, Timer*&gt;&gt;<br>自动按到期时间排序的特性，使得获取最早到期定时器 (timers_.begin()) 和查找指定范围的到期定时器 (lower_bound) 非常高效。</li>\n<li><strong>双集合管理 (timers_ 和 activeTimers_)：</strong> timers_ 用于按时间排序和获取到期任务，activeTimers_ (以 Timer*<br>和序列号为键) 用于高效地取消定时器。通过断言 timers_.size() &#x3D;&#x3D; activeTimers_.size() 保证两者的一致性。</li>\n<li><strong>线程安全：</strong> 所有对 TimerQueue 内部状态的修改都通过 loop_-&gt;runInLoop() 保证在其所属的 EventLoop 线程中执行，确保了线程安全。</li>\n<li><strong>处理回调期间的取消：</strong> 通过 callingExpiredTimers_ 标志和 cancelingTimers_<br>集合，优雅地处理了在执行定时器回调期间，这些定时器（特别是重复定时器）又被用户请求取消的复杂情况。</li>\n<li><strong>资源管理：</strong> Timer 对象通过 new 创建，并在不再需要时（非重复到期、或被取消、或 TimerQueue 析构时）通过 delete<br>释放。</li>\n</ol>"},{"title":"muduo源码剖析:05.基于对象与面向对象的设计","date":"2025-08-26T16:00:00.000Z","_content":"## 前言：\n\n在前几篇文章中，我们依次剖析了：\n\n* `EventLoop` 的单线程事件循环模型（One Loop Per Thread）\n* `TcpConnection` 的连接生命周期与“三个半事件”机制\n* `TimerQueue` 在事件驱动框架下的使用\n* `Buffer` 模块在高性能数据处理中的角色\n\n至此，我们已经基本掌握了陈硕大佬在《Linux 多线程服务端编程》中提出的网络编程核心思想及其在 muduo 中的具象实现。\n\n在这篇文章中，我们不再分析具体功能的实现细节，而是谈一谈陈硕大佬对 C++ 进行开发的一个理念：**muduo 并未采用传统的“面向对象”编程风格，而是秉持“基于对象”的理念进行系统设计。**\n\n我们要具体分析这两者在使用上，功能实现上的区别。\n<!-- more -->\n---\n\n## 使用场景对比：基于对象 vs 面向对象\n\n我们首先回顾 muduo 中的一个经典的 `EchoServer` 示例：\n\n```cpp\nclass EchoServer {\npublic:\n  EchoServer(muduo::net::EventLoop* loop, const muduo::net::InetAddress& listenAddr)\n    : server_(loop, listenAddr, \"EchoServer\") {\n    server_.setConnectionCallback(\n      std::bind(&EchoServer::onConnection, this, std::placeholders::_1));\n    server_.setMessageCallback(\n      std::bind(&EchoServer::onMessage, this, std::placeholders::_1, std::placeholders::_2, std::placeholders::_3));\n  }\n\n  void start() { server_.start(); }\n\nprivate:\n  void onConnection(const muduo::net::TcpConnectionPtr& conn);\n  void onMessage(const muduo::net::TcpConnectionPtr& conn, muduo::net::Buffer* buf, muduo::Timestamp time);\n  muduo::net::TcpServer server_;\n};\n```\n\n陈硕大佬并未提供一个 `TcpConnectionListener` 的抽象接口让用户去继承实现 `onConnect` / `onMessage`，而是允许用户**通过组合对象、注册回调函数**的方式，将自己的逻辑注入库中。\n\n### 对比：常见的面向对象的网络库实现\n\n如果有 C# 和 Java 的开发经验，可能非常熟悉下面的模式：\n\n```cpp\nclass SocketEventListener {\npublic:\n  virtual void handleRead() = 0;\n  virtual void handleClose() = 0;\n};\n\nclass MyConnection : public SocketEventListener {\npublic:\n  void handleRead() override {\n    // handle logic\n  }\n\n  void handleClose() override {\n    // clean up\n  }\n};\n```\n\n这种做法的本意是具体约束行为，让使用者去处理一个网络连接的完整生命周期，但也带来以下问题：\n\n* 实现门槛高：即便只是写个简单 demo，也需实现多个空函数\n* 接口变更代价大：增加一个虚函数会影响所有子类\n* 无法真正约束开发者的设计质量: 很多使用者只是简单的打下日志\n\n---\n\n## 基于对象的设计：以 Channel 为例\n\n在 muduo 中，`Channel` 是绑定文件描述符与事件处理器的核心组件。其应用遍布各个模块：\n\n### 服务端监听\n\n```cpp\nclass Acceptor : noncopyable {\n  EventLoop* loop_;\n  Socket acceptSocket_;\n  Channel acceptChannel_;\n  NewConnectionCallback newConnectionCallback_;\n  bool listenning_;\n  int idleFd_;\n};\n```\n\n### 客户端连接处理\n\n```cpp\nclass TcpConnection : noncopyable, public std::enable_shared_from_this<TcpConnection> {\n  std::unique_ptr<Socket> socket_;\n  std::unique_ptr<Channel> channel_;\n  const InetAddress localAddr_;\n  const InetAddress peerAddr_;\n  ConnectionCallback connectionCallback_;\n  MessageCallback messageCallback_;\n  WriteCompleteCallback writeCompleteCallback_;\n  HighWaterMarkCallback highWaterMarkCallback_;\n  CloseCallback closeCallback_;\n  size_t highWaterMark_;\n  Buffer inputBuffer_;\n  Buffer outputBuffer_;\n  std::any context_;\n};\n```\n\n### 唤醒机制\n\n```cpp\nclass EventLoop : noncopyable {\n  int wakeupFd_;\n  std::unique_ptr<Channel> wakeupChannel_;\n  std::any context_;\n  ChannelList activeChannels_;\n  Channel* currentActiveChannel_;\n  mutable MutexLock mutex_;\n  std::vector<Functor> pendingFunctors_;\n};\n```\n\n### 定时器\n\n```cpp\nclass TimerQueue : noncopyable {\n  const int timerfd_;\n  Channel timerfdChannel_;\n  TimerList timers_;\n  ActiveTimerSet activeTimers_;\n  bool callingExpiredTimers_; \n  ActiveTimerSet cancelingTimers_;\n};\n```\n\n### Channel 的统一处理方式\n\n```cpp\nchannel->setReadCallback(std::bind(&TcpConnection::handleRead, this));\nchannel->setWriteCallback(std::bind(&TcpConnection::handleWrite, this));\n```\n\n这就是“基于对象”的关键点：**不搞子类体系，而用统一类 + 函数注入来处理多样行为。**\n\n---\n\n## 回调机制的优越性：组合优于继承\n\nmuduo 的核心组件几乎都是：**具体类 + 回调注入**\n\n* `TcpServer` 组合 `Acceptor`、`EventLoopThreadPool`、用户回调\n* `TcpConnection` 内部注册回调响应事件\n* `Channel` 统一管理事件分发\n\n**类图示意：**\n\n![TcpServer](/images/TcpServer.png)\n\n**组合优于继承，行为通过注入，而非继承重写。**\n\n```cpp\nTcpConnection::TcpConnection(...) {\n  channel_->setReadCallback(std::bind(&TcpConnection::handleRead, this));\n}\n```\n\n对比传统 OOP：\n\n```cpp\nclass BaseHandler {\n  virtual void onRead() = 0;\n};\n\nclass MyHandler : public BaseHandler {\n  void onRead() override { ... }\n};\n```\n\nmuduo 的方式降低抽象复杂度，提升扩展灵活性。\n\n---\n\n## 生命周期管理：RAII + 智能指针 + tie()\n\n陈硕大佬强调：C++ 的最大优势是**确定性析构**。muduo 的生命周期管理机制如下：\n\n* 所有 socket 封装于 RAII 类\n* `TcpConnection` 使用 `shared_ptr` + `enable_shared_from_this`\n* `Channel::tie()` 实现弱引用锁定，防止悬垂指针\n\n```cpp\nvoid TcpConnection::connectEstablished() {\n  channel_->tie(shared_from_this());\n}\n```\n\n事件处理过程：\n\n```cpp\nvoid Channel::handleEvent(...) {\n  std::shared_ptr<void> guard;\n  if (tied_) {\n    guard = tie_.lock();\n    if (guard) handleEventWithGuard(...);\n  } else {\n    handleEventWithGuard(...);\n  }\n}\n```\n\n**时序图：**\n\n![RAII](/images/raii.png)\n\n保障了：\n\n* 对象析构后无悬垂调用\n* 生命周期由 `shared_ptr` 统一管理，清晰可控\n\n---\n\n## 尾声：从 muduo 中我们应该学些什么？对面向对象的一点思考\n\n关于面向对象的争议其实一直很大，批评也很多，但是面向对象这种思想既然可以存在，并且依然得到哪么多人的拥护，肯定有可取之处。\n\n咱们先关心从muduo源码中我们应该学点什么知识。\n\nmuduo 告诉我们：\n\n* RAII + 智能指针是 C++ 的精髓\n* 无虚函数，回调更灵活\n* 强调组合，提升模块化与可维护性\n\n我对使用面向对象想法是：\n\n> “让行业大佬设计接口，让普通开发者以简单朴实的方式逐步演进。”\n\n普通开发者：\n\n* 从组合和回调入手，快速实现业务逻辑\n* 在需求稳定后，再抽象出通用接口\n* 通过测试保证软件质量\n\n这种自顶向下的设计方式，其实很适合那些具有非常丰富行业经验的人去设计出一套接口来。\n因为他们实际上知道了，这套接口就是足够好的抽象。\n像普通的开发人员，就做到简单，朴实就好了。\n\n最后：\n**设计应服务于目标，而非固守范式。**\n\n作为程序员，应该具备多种设计手法，并在适当时刻选择最合适的方式。\n\n","source":"_posts/muduo/muduo源码剖析:05.基于对象与面向对象的设计.md","raw":"\n---\ntitle: \"muduo源码剖析:05.基于对象与面向对象的设计\"\ndate: 2025-08-27\ncategories: \n  - 源码分析\n  - muduo\ntags:\n  - C++\n  - muduo\n  - 网络库\n---\n## 前言：\n\n在前几篇文章中，我们依次剖析了：\n\n* `EventLoop` 的单线程事件循环模型（One Loop Per Thread）\n* `TcpConnection` 的连接生命周期与“三个半事件”机制\n* `TimerQueue` 在事件驱动框架下的使用\n* `Buffer` 模块在高性能数据处理中的角色\n\n至此，我们已经基本掌握了陈硕大佬在《Linux 多线程服务端编程》中提出的网络编程核心思想及其在 muduo 中的具象实现。\n\n在这篇文章中，我们不再分析具体功能的实现细节，而是谈一谈陈硕大佬对 C++ 进行开发的一个理念：**muduo 并未采用传统的“面向对象”编程风格，而是秉持“基于对象”的理念进行系统设计。**\n\n我们要具体分析这两者在使用上，功能实现上的区别。\n<!-- more -->\n---\n\n## 使用场景对比：基于对象 vs 面向对象\n\n我们首先回顾 muduo 中的一个经典的 `EchoServer` 示例：\n\n```cpp\nclass EchoServer {\npublic:\n  EchoServer(muduo::net::EventLoop* loop, const muduo::net::InetAddress& listenAddr)\n    : server_(loop, listenAddr, \"EchoServer\") {\n    server_.setConnectionCallback(\n      std::bind(&EchoServer::onConnection, this, std::placeholders::_1));\n    server_.setMessageCallback(\n      std::bind(&EchoServer::onMessage, this, std::placeholders::_1, std::placeholders::_2, std::placeholders::_3));\n  }\n\n  void start() { server_.start(); }\n\nprivate:\n  void onConnection(const muduo::net::TcpConnectionPtr& conn);\n  void onMessage(const muduo::net::TcpConnectionPtr& conn, muduo::net::Buffer* buf, muduo::Timestamp time);\n  muduo::net::TcpServer server_;\n};\n```\n\n陈硕大佬并未提供一个 `TcpConnectionListener` 的抽象接口让用户去继承实现 `onConnect` / `onMessage`，而是允许用户**通过组合对象、注册回调函数**的方式，将自己的逻辑注入库中。\n\n### 对比：常见的面向对象的网络库实现\n\n如果有 C# 和 Java 的开发经验，可能非常熟悉下面的模式：\n\n```cpp\nclass SocketEventListener {\npublic:\n  virtual void handleRead() = 0;\n  virtual void handleClose() = 0;\n};\n\nclass MyConnection : public SocketEventListener {\npublic:\n  void handleRead() override {\n    // handle logic\n  }\n\n  void handleClose() override {\n    // clean up\n  }\n};\n```\n\n这种做法的本意是具体约束行为，让使用者去处理一个网络连接的完整生命周期，但也带来以下问题：\n\n* 实现门槛高：即便只是写个简单 demo，也需实现多个空函数\n* 接口变更代价大：增加一个虚函数会影响所有子类\n* 无法真正约束开发者的设计质量: 很多使用者只是简单的打下日志\n\n---\n\n## 基于对象的设计：以 Channel 为例\n\n在 muduo 中，`Channel` 是绑定文件描述符与事件处理器的核心组件。其应用遍布各个模块：\n\n### 服务端监听\n\n```cpp\nclass Acceptor : noncopyable {\n  EventLoop* loop_;\n  Socket acceptSocket_;\n  Channel acceptChannel_;\n  NewConnectionCallback newConnectionCallback_;\n  bool listenning_;\n  int idleFd_;\n};\n```\n\n### 客户端连接处理\n\n```cpp\nclass TcpConnection : noncopyable, public std::enable_shared_from_this<TcpConnection> {\n  std::unique_ptr<Socket> socket_;\n  std::unique_ptr<Channel> channel_;\n  const InetAddress localAddr_;\n  const InetAddress peerAddr_;\n  ConnectionCallback connectionCallback_;\n  MessageCallback messageCallback_;\n  WriteCompleteCallback writeCompleteCallback_;\n  HighWaterMarkCallback highWaterMarkCallback_;\n  CloseCallback closeCallback_;\n  size_t highWaterMark_;\n  Buffer inputBuffer_;\n  Buffer outputBuffer_;\n  std::any context_;\n};\n```\n\n### 唤醒机制\n\n```cpp\nclass EventLoop : noncopyable {\n  int wakeupFd_;\n  std::unique_ptr<Channel> wakeupChannel_;\n  std::any context_;\n  ChannelList activeChannels_;\n  Channel* currentActiveChannel_;\n  mutable MutexLock mutex_;\n  std::vector<Functor> pendingFunctors_;\n};\n```\n\n### 定时器\n\n```cpp\nclass TimerQueue : noncopyable {\n  const int timerfd_;\n  Channel timerfdChannel_;\n  TimerList timers_;\n  ActiveTimerSet activeTimers_;\n  bool callingExpiredTimers_; \n  ActiveTimerSet cancelingTimers_;\n};\n```\n\n### Channel 的统一处理方式\n\n```cpp\nchannel->setReadCallback(std::bind(&TcpConnection::handleRead, this));\nchannel->setWriteCallback(std::bind(&TcpConnection::handleWrite, this));\n```\n\n这就是“基于对象”的关键点：**不搞子类体系，而用统一类 + 函数注入来处理多样行为。**\n\n---\n\n## 回调机制的优越性：组合优于继承\n\nmuduo 的核心组件几乎都是：**具体类 + 回调注入**\n\n* `TcpServer` 组合 `Acceptor`、`EventLoopThreadPool`、用户回调\n* `TcpConnection` 内部注册回调响应事件\n* `Channel` 统一管理事件分发\n\n**类图示意：**\n\n![TcpServer](/images/TcpServer.png)\n\n**组合优于继承，行为通过注入，而非继承重写。**\n\n```cpp\nTcpConnection::TcpConnection(...) {\n  channel_->setReadCallback(std::bind(&TcpConnection::handleRead, this));\n}\n```\n\n对比传统 OOP：\n\n```cpp\nclass BaseHandler {\n  virtual void onRead() = 0;\n};\n\nclass MyHandler : public BaseHandler {\n  void onRead() override { ... }\n};\n```\n\nmuduo 的方式降低抽象复杂度，提升扩展灵活性。\n\n---\n\n## 生命周期管理：RAII + 智能指针 + tie()\n\n陈硕大佬强调：C++ 的最大优势是**确定性析构**。muduo 的生命周期管理机制如下：\n\n* 所有 socket 封装于 RAII 类\n* `TcpConnection` 使用 `shared_ptr` + `enable_shared_from_this`\n* `Channel::tie()` 实现弱引用锁定，防止悬垂指针\n\n```cpp\nvoid TcpConnection::connectEstablished() {\n  channel_->tie(shared_from_this());\n}\n```\n\n事件处理过程：\n\n```cpp\nvoid Channel::handleEvent(...) {\n  std::shared_ptr<void> guard;\n  if (tied_) {\n    guard = tie_.lock();\n    if (guard) handleEventWithGuard(...);\n  } else {\n    handleEventWithGuard(...);\n  }\n}\n```\n\n**时序图：**\n\n![RAII](/images/raii.png)\n\n保障了：\n\n* 对象析构后无悬垂调用\n* 生命周期由 `shared_ptr` 统一管理，清晰可控\n\n---\n\n## 尾声：从 muduo 中我们应该学些什么？对面向对象的一点思考\n\n关于面向对象的争议其实一直很大，批评也很多，但是面向对象这种思想既然可以存在，并且依然得到哪么多人的拥护，肯定有可取之处。\n\n咱们先关心从muduo源码中我们应该学点什么知识。\n\nmuduo 告诉我们：\n\n* RAII + 智能指针是 C++ 的精髓\n* 无虚函数，回调更灵活\n* 强调组合，提升模块化与可维护性\n\n我对使用面向对象想法是：\n\n> “让行业大佬设计接口，让普通开发者以简单朴实的方式逐步演进。”\n\n普通开发者：\n\n* 从组合和回调入手，快速实现业务逻辑\n* 在需求稳定后，再抽象出通用接口\n* 通过测试保证软件质量\n\n这种自顶向下的设计方式，其实很适合那些具有非常丰富行业经验的人去设计出一套接口来。\n因为他们实际上知道了，这套接口就是足够好的抽象。\n像普通的开发人员，就做到简单，朴实就好了。\n\n最后：\n**设计应服务于目标，而非固守范式。**\n\n作为程序员，应该具备多种设计手法，并在适当时刻选择最合适的方式。\n\n","slug":"muduo/muduo源码剖析:05.基于对象与面向对象的设计","published":1,"updated":"2025-08-28T12:44:21.513Z","comments":1,"layout":"post","photos":[],"_id":"cmevecvsh001vhfro8ewz0g7h","content":"<h2 id=\"前言：\"><a href=\"#前言：\" class=\"headerlink\" title=\"前言：\"></a>前言：</h2><p>在前几篇文章中，我们依次剖析了：</p>\n<ul>\n<li><code>EventLoop</code> 的单线程事件循环模型（One Loop Per Thread）</li>\n<li><code>TcpConnection</code> 的连接生命周期与“三个半事件”机制</li>\n<li><code>TimerQueue</code> 在事件驱动框架下的使用</li>\n<li><code>Buffer</code> 模块在高性能数据处理中的角色</li>\n</ul>\n<p>至此，我们已经基本掌握了陈硕大佬在《Linux 多线程服务端编程》中提出的网络编程核心思想及其在 muduo 中的具象实现。</p>\n<p>在这篇文章中，我们不再分析具体功能的实现细节，而是谈一谈陈硕大佬对 C++ 进行开发的一个理念：<strong>muduo 并未采用传统的“面向对象”编程风格，而是秉持“基于对象”的理念进行系统设计。</strong></p>\n<h2 id=\"我们要具体分析这两者在使用上，功能实现上的区别。\"><a href=\"#我们要具体分析这两者在使用上，功能实现上的区别。\" class=\"headerlink\" title=\"我们要具体分析这两者在使用上，功能实现上的区别。\"></a>我们要具体分析这两者在使用上，功能实现上的区别。<br><span id=\"more\"></span></h2><h2 id=\"使用场景对比：基于对象-vs-面向对象\"><a href=\"#使用场景对比：基于对象-vs-面向对象\" class=\"headerlink\" title=\"使用场景对比：基于对象 vs 面向对象\"></a>使用场景对比：基于对象 vs 面向对象</h2><p>我们首先回顾 muduo 中的一个经典的 <code>EchoServer</code> 示例：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">EchoServer</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">  <span class=\"built_in\">EchoServer</span>(muduo::net::EventLoop* loop, <span class=\"type\">const</span> muduo::net::InetAddress&amp; listenAddr)</span><br><span class=\"line\">    : <span class=\"built_in\">server_</span>(loop, listenAddr, <span class=\"string\">&quot;EchoServer&quot;</span>) &#123;</span><br><span class=\"line\">    server_.<span class=\"built_in\">setConnectionCallback</span>(</span><br><span class=\"line\">      std::<span class=\"built_in\">bind</span>(&amp;EchoServer::onConnection, <span class=\"keyword\">this</span>, std::placeholders::_1));</span><br><span class=\"line\">    server_.<span class=\"built_in\">setMessageCallback</span>(</span><br><span class=\"line\">      std::<span class=\"built_in\">bind</span>(&amp;EchoServer::onMessage, <span class=\"keyword\">this</span>, std::placeholders::_1, std::placeholders::_2, std::placeholders::_3));</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">start</span><span class=\"params\">()</span> </span>&#123; server_.<span class=\"built_in\">start</span>(); &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">  <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">onConnection</span><span class=\"params\">(<span class=\"type\">const</span> muduo::net::TcpConnectionPtr&amp; conn)</span></span>;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">onMessage</span><span class=\"params\">(<span class=\"type\">const</span> muduo::net::TcpConnectionPtr&amp; conn, muduo::net::Buffer* buf, muduo::Timestamp time)</span></span>;</span><br><span class=\"line\">  muduo::net::TcpServer server_;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>陈硕大佬并未提供一个 <code>TcpConnectionListener</code> 的抽象接口让用户去继承实现 <code>onConnect</code> &#x2F; <code>onMessage</code>，而是允许用户<strong>通过组合对象、注册回调函数</strong>的方式，将自己的逻辑注入库中。</p>\n<h3 id=\"对比：常见的面向对象的网络库实现\"><a href=\"#对比：常见的面向对象的网络库实现\" class=\"headerlink\" title=\"对比：常见的面向对象的网络库实现\"></a>对比：常见的面向对象的网络库实现</h3><p>如果有 C# 和 Java 的开发经验，可能非常熟悉下面的模式：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">SocketEventListener</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">virtual</span> <span class=\"type\">void</span> <span class=\"title\">handleRead</span><span class=\"params\">()</span> </span>= <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">virtual</span> <span class=\"type\">void</span> <span class=\"title\">handleClose</span><span class=\"params\">()</span> </span>= <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">MyConnection</span> : <span class=\"keyword\">public</span> SocketEventListener &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">  <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">handleRead</span><span class=\"params\">()</span> <span class=\"keyword\">override</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// handle logic</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">handleClose</span><span class=\"params\">()</span> <span class=\"keyword\">override</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// clean up</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>这种做法的本意是具体约束行为，让使用者去处理一个网络连接的完整生命周期，但也带来以下问题：</p>\n<ul>\n<li>实现门槛高：即便只是写个简单 demo，也需实现多个空函数</li>\n<li>接口变更代价大：增加一个虚函数会影响所有子类</li>\n<li>无法真正约束开发者的设计质量: 很多使用者只是简单的打下日志</li>\n</ul>\n<hr>\n<h2 id=\"基于对象的设计：以-Channel-为例\"><a href=\"#基于对象的设计：以-Channel-为例\" class=\"headerlink\" title=\"基于对象的设计：以 Channel 为例\"></a>基于对象的设计：以 Channel 为例</h2><p>在 muduo 中，<code>Channel</code> 是绑定文件描述符与事件处理器的核心组件。其应用遍布各个模块：</p>\n<h3 id=\"服务端监听\"><a href=\"#服务端监听\" class=\"headerlink\" title=\"服务端监听\"></a>服务端监听</h3><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Acceptor</span> : noncopyable &#123;</span><br><span class=\"line\">  EventLoop* loop_;</span><br><span class=\"line\">  Socket acceptSocket_;</span><br><span class=\"line\">  Channel acceptChannel_;</span><br><span class=\"line\">  NewConnectionCallback newConnectionCallback_;</span><br><span class=\"line\">  <span class=\"type\">bool</span> listenning_;</span><br><span class=\"line\">  <span class=\"type\">int</span> idleFd_;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"客户端连接处理\"><a href=\"#客户端连接处理\" class=\"headerlink\" title=\"客户端连接处理\"></a>客户端连接处理</h3><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">TcpConnection</span> : noncopyable, <span class=\"keyword\">public</span> std::enable_shared_from_this&lt;TcpConnection&gt; &#123;</span><br><span class=\"line\">  std::unique_ptr&lt;Socket&gt; socket_;</span><br><span class=\"line\">  std::unique_ptr&lt;Channel&gt; channel_;</span><br><span class=\"line\">  <span class=\"type\">const</span> InetAddress localAddr_;</span><br><span class=\"line\">  <span class=\"type\">const</span> InetAddress peerAddr_;</span><br><span class=\"line\">  ConnectionCallback connectionCallback_;</span><br><span class=\"line\">  MessageCallback messageCallback_;</span><br><span class=\"line\">  WriteCompleteCallback writeCompleteCallback_;</span><br><span class=\"line\">  HighWaterMarkCallback highWaterMarkCallback_;</span><br><span class=\"line\">  CloseCallback closeCallback_;</span><br><span class=\"line\">  <span class=\"type\">size_t</span> highWaterMark_;</span><br><span class=\"line\">  Buffer inputBuffer_;</span><br><span class=\"line\">  Buffer outputBuffer_;</span><br><span class=\"line\">  std::any context_;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"唤醒机制\"><a href=\"#唤醒机制\" class=\"headerlink\" title=\"唤醒机制\"></a>唤醒机制</h3><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">EventLoop</span> : noncopyable &#123;</span><br><span class=\"line\">  <span class=\"type\">int</span> wakeupFd_;</span><br><span class=\"line\">  std::unique_ptr&lt;Channel&gt; wakeupChannel_;</span><br><span class=\"line\">  std::any context_;</span><br><span class=\"line\">  ChannelList activeChannels_;</span><br><span class=\"line\">  Channel* currentActiveChannel_;</span><br><span class=\"line\">  <span class=\"keyword\">mutable</span> MutexLock mutex_;</span><br><span class=\"line\">  std::vector&lt;Functor&gt; pendingFunctors_;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"定时器\"><a href=\"#定时器\" class=\"headerlink\" title=\"定时器\"></a>定时器</h3><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">TimerQueue</span> : noncopyable &#123;</span><br><span class=\"line\">  <span class=\"type\">const</span> <span class=\"type\">int</span> timerfd_;</span><br><span class=\"line\">  Channel timerfdChannel_;</span><br><span class=\"line\">  TimerList timers_;</span><br><span class=\"line\">  ActiveTimerSet activeTimers_;</span><br><span class=\"line\">  <span class=\"type\">bool</span> callingExpiredTimers_; </span><br><span class=\"line\">  ActiveTimerSet cancelingTimers_;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Channel-的统一处理方式\"><a href=\"#Channel-的统一处理方式\" class=\"headerlink\" title=\"Channel 的统一处理方式\"></a>Channel 的统一处理方式</h3><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">channel-&gt;<span class=\"built_in\">setReadCallback</span>(std::<span class=\"built_in\">bind</span>(&amp;TcpConnection::handleRead, <span class=\"keyword\">this</span>));</span><br><span class=\"line\">channel-&gt;<span class=\"built_in\">setWriteCallback</span>(std::<span class=\"built_in\">bind</span>(&amp;TcpConnection::handleWrite, <span class=\"keyword\">this</span>));</span><br></pre></td></tr></table></figure>\n\n<p>这就是“基于对象”的关键点：<strong>不搞子类体系，而用统一类 + 函数注入来处理多样行为。</strong></p>\n<hr>\n<h2 id=\"回调机制的优越性：组合优于继承\"><a href=\"#回调机制的优越性：组合优于继承\" class=\"headerlink\" title=\"回调机制的优越性：组合优于继承\"></a>回调机制的优越性：组合优于继承</h2><p>muduo 的核心组件几乎都是：<strong>具体类 + 回调注入</strong></p>\n<ul>\n<li><code>TcpServer</code> 组合 <code>Acceptor</code>、<code>EventLoopThreadPool</code>、用户回调</li>\n<li><code>TcpConnection</code> 内部注册回调响应事件</li>\n<li><code>Channel</code> 统一管理事件分发</li>\n</ul>\n<p><strong>类图示意：</strong></p>\n<p><img src=\"/images/TcpServer.png\" alt=\"TcpServer\"></p>\n<p><strong>组合优于继承，行为通过注入，而非继承重写。</strong></p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">TcpConnection::<span class=\"built_in\">TcpConnection</span>(...) &#123;</span><br><span class=\"line\">  channel_-&gt;<span class=\"built_in\">setReadCallback</span>(std::<span class=\"built_in\">bind</span>(&amp;TcpConnection::handleRead, <span class=\"keyword\">this</span>));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>对比传统 OOP：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">BaseHandler</span> &#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">virtual</span> <span class=\"type\">void</span> <span class=\"title\">onRead</span><span class=\"params\">()</span> </span>= <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">MyHandler</span> : <span class=\"keyword\">public</span> BaseHandler &#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">onRead</span><span class=\"params\">()</span> <span class=\"keyword\">override</span> </span>&#123; ... &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>muduo 的方式降低抽象复杂度，提升扩展灵活性。</p>\n<hr>\n<h2 id=\"生命周期管理：RAII-智能指针-tie\"><a href=\"#生命周期管理：RAII-智能指针-tie\" class=\"headerlink\" title=\"生命周期管理：RAII + 智能指针 + tie()\"></a>生命周期管理：RAII + 智能指针 + tie()</h2><p>陈硕大佬强调：C++ 的最大优势是<strong>确定性析构</strong>。muduo 的生命周期管理机制如下：</p>\n<ul>\n<li>所有 socket 封装于 RAII 类</li>\n<li><code>TcpConnection</code> 使用 <code>shared_ptr</code> + <code>enable_shared_from_this</code></li>\n<li><code>Channel::tie()</code> 实现弱引用锁定，防止悬垂指针</li>\n</ul>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">TcpConnection::connectEstablished</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">  channel_-&gt;<span class=\"built_in\">tie</span>(<span class=\"built_in\">shared_from_this</span>());</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>事件处理过程：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">Channel::handleEvent</span><span class=\"params\">(...)</span> </span>&#123;</span><br><span class=\"line\">  std::shared_ptr&lt;<span class=\"type\">void</span>&gt; guard;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (tied_) &#123;</span><br><span class=\"line\">    guard = tie_.<span class=\"built_in\">lock</span>();</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (guard) <span class=\"built_in\">handleEventWithGuard</span>(...);</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">handleEventWithGuard</span>(...);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>时序图：</strong></p>\n<p><img src=\"/images/raii.png\" alt=\"RAII\"></p>\n<p>保障了：</p>\n<ul>\n<li>对象析构后无悬垂调用</li>\n<li>生命周期由 <code>shared_ptr</code> 统一管理，清晰可控</li>\n</ul>\n<hr>\n<h2 id=\"尾声：从-muduo-中我们应该学些什么？对面向对象的一点思考\"><a href=\"#尾声：从-muduo-中我们应该学些什么？对面向对象的一点思考\" class=\"headerlink\" title=\"尾声：从 muduo 中我们应该学些什么？对面向对象的一点思考\"></a>尾声：从 muduo 中我们应该学些什么？对面向对象的一点思考</h2><p>关于面向对象的争议其实一直很大，批评也很多，但是面向对象这种思想既然可以存在，并且依然得到哪么多人的拥护，肯定有可取之处。</p>\n<p>咱们先关心从muduo源码中我们应该学点什么知识。</p>\n<p>muduo 告诉我们：</p>\n<ul>\n<li>RAII + 智能指针是 C++ 的精髓</li>\n<li>无虚函数，回调更灵活</li>\n<li>强调组合，提升模块化与可维护性</li>\n</ul>\n<p>我对使用面向对象想法是：</p>\n<blockquote>\n<p>“让行业大佬设计接口，让普通开发者以简单朴实的方式逐步演进。”</p>\n</blockquote>\n<p>普通开发者：</p>\n<ul>\n<li>从组合和回调入手，快速实现业务逻辑</li>\n<li>在需求稳定后，再抽象出通用接口</li>\n<li>通过测试保证软件质量</li>\n</ul>\n<p>这种自顶向下的设计方式，其实很适合那些具有非常丰富行业经验的人去设计出一套接口来。<br>因为他们实际上知道了，这套接口就是足够好的抽象。<br>像普通的开发人员，就做到简单，朴实就好了。</p>\n<p>最后：<br><strong>设计应服务于目标，而非固守范式。</strong></p>\n<p>作为程序员，应该具备多种设计手法，并在适当时刻选择最合适的方式。</p>\n","excerpt":"<h2 id=\"前言：\"><a href=\"#前言：\" class=\"headerlink\" title=\"前言：\"></a>前言：</h2><p>在前几篇文章中，我们依次剖析了：</p>\n<ul>\n<li><code>EventLoop</code> 的单线程事件循环模型（One Loop Per Thread）</li>\n<li><code>TcpConnection</code> 的连接生命周期与“三个半事件”机制</li>\n<li><code>TimerQueue</code> 在事件驱动框架下的使用</li>\n<li><code>Buffer</code> 模块在高性能数据处理中的角色</li>\n</ul>\n<p>至此，我们已经基本掌握了陈硕大佬在《Linux 多线程服务端编程》中提出的网络编程核心思想及其在 muduo 中的具象实现。</p>\n<p>在这篇文章中，我们不再分析具体功能的实现细节，而是谈一谈陈硕大佬对 C++ 进行开发的一个理念：<strong>muduo 并未采用传统的“面向对象”编程风格，而是秉持“基于对象”的理念进行系统设计。</strong></p>\n<h2 id=\"我们要具体分析这两者在使用上，功能实现上的区别。\"><a href=\"#我们要具体分析这两者在使用上，功能实现上的区别。\" class=\"headerlink\" title=\"我们要具体分析这两者在使用上，功能实现上的区别。\"></a>我们要具体分析这两者在使用上，功能实现上的区别。<br>","more":"</h2><h2 id=\"使用场景对比：基于对象-vs-面向对象\"><a href=\"#使用场景对比：基于对象-vs-面向对象\" class=\"headerlink\" title=\"使用场景对比：基于对象 vs 面向对象\"></a>使用场景对比：基于对象 vs 面向对象</h2><p>我们首先回顾 muduo 中的一个经典的 <code>EchoServer</code> 示例：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">EchoServer</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">  <span class=\"built_in\">EchoServer</span>(muduo::net::EventLoop* loop, <span class=\"type\">const</span> muduo::net::InetAddress&amp; listenAddr)</span><br><span class=\"line\">    : <span class=\"built_in\">server_</span>(loop, listenAddr, <span class=\"string\">&quot;EchoServer&quot;</span>) &#123;</span><br><span class=\"line\">    server_.<span class=\"built_in\">setConnectionCallback</span>(</span><br><span class=\"line\">      std::<span class=\"built_in\">bind</span>(&amp;EchoServer::onConnection, <span class=\"keyword\">this</span>, std::placeholders::_1));</span><br><span class=\"line\">    server_.<span class=\"built_in\">setMessageCallback</span>(</span><br><span class=\"line\">      std::<span class=\"built_in\">bind</span>(&amp;EchoServer::onMessage, <span class=\"keyword\">this</span>, std::placeholders::_1, std::placeholders::_2, std::placeholders::_3));</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">start</span><span class=\"params\">()</span> </span>&#123; server_.<span class=\"built_in\">start</span>(); &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">  <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">onConnection</span><span class=\"params\">(<span class=\"type\">const</span> muduo::net::TcpConnectionPtr&amp; conn)</span></span>;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">onMessage</span><span class=\"params\">(<span class=\"type\">const</span> muduo::net::TcpConnectionPtr&amp; conn, muduo::net::Buffer* buf, muduo::Timestamp time)</span></span>;</span><br><span class=\"line\">  muduo::net::TcpServer server_;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>陈硕大佬并未提供一个 <code>TcpConnectionListener</code> 的抽象接口让用户去继承实现 <code>onConnect</code> &#x2F; <code>onMessage</code>，而是允许用户<strong>通过组合对象、注册回调函数</strong>的方式，将自己的逻辑注入库中。</p>\n<h3 id=\"对比：常见的面向对象的网络库实现\"><a href=\"#对比：常见的面向对象的网络库实现\" class=\"headerlink\" title=\"对比：常见的面向对象的网络库实现\"></a>对比：常见的面向对象的网络库实现</h3><p>如果有 C# 和 Java 的开发经验，可能非常熟悉下面的模式：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">SocketEventListener</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">virtual</span> <span class=\"type\">void</span> <span class=\"title\">handleRead</span><span class=\"params\">()</span> </span>= <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">virtual</span> <span class=\"type\">void</span> <span class=\"title\">handleClose</span><span class=\"params\">()</span> </span>= <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">MyConnection</span> : <span class=\"keyword\">public</span> SocketEventListener &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">  <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">handleRead</span><span class=\"params\">()</span> <span class=\"keyword\">override</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// handle logic</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">handleClose</span><span class=\"params\">()</span> <span class=\"keyword\">override</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// clean up</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>这种做法的本意是具体约束行为，让使用者去处理一个网络连接的完整生命周期，但也带来以下问题：</p>\n<ul>\n<li>实现门槛高：即便只是写个简单 demo，也需实现多个空函数</li>\n<li>接口变更代价大：增加一个虚函数会影响所有子类</li>\n<li>无法真正约束开发者的设计质量: 很多使用者只是简单的打下日志</li>\n</ul>\n<hr>\n<h2 id=\"基于对象的设计：以-Channel-为例\"><a href=\"#基于对象的设计：以-Channel-为例\" class=\"headerlink\" title=\"基于对象的设计：以 Channel 为例\"></a>基于对象的设计：以 Channel 为例</h2><p>在 muduo 中，<code>Channel</code> 是绑定文件描述符与事件处理器的核心组件。其应用遍布各个模块：</p>\n<h3 id=\"服务端监听\"><a href=\"#服务端监听\" class=\"headerlink\" title=\"服务端监听\"></a>服务端监听</h3><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Acceptor</span> : noncopyable &#123;</span><br><span class=\"line\">  EventLoop* loop_;</span><br><span class=\"line\">  Socket acceptSocket_;</span><br><span class=\"line\">  Channel acceptChannel_;</span><br><span class=\"line\">  NewConnectionCallback newConnectionCallback_;</span><br><span class=\"line\">  <span class=\"type\">bool</span> listenning_;</span><br><span class=\"line\">  <span class=\"type\">int</span> idleFd_;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"客户端连接处理\"><a href=\"#客户端连接处理\" class=\"headerlink\" title=\"客户端连接处理\"></a>客户端连接处理</h3><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">TcpConnection</span> : noncopyable, <span class=\"keyword\">public</span> std::enable_shared_from_this&lt;TcpConnection&gt; &#123;</span><br><span class=\"line\">  std::unique_ptr&lt;Socket&gt; socket_;</span><br><span class=\"line\">  std::unique_ptr&lt;Channel&gt; channel_;</span><br><span class=\"line\">  <span class=\"type\">const</span> InetAddress localAddr_;</span><br><span class=\"line\">  <span class=\"type\">const</span> InetAddress peerAddr_;</span><br><span class=\"line\">  ConnectionCallback connectionCallback_;</span><br><span class=\"line\">  MessageCallback messageCallback_;</span><br><span class=\"line\">  WriteCompleteCallback writeCompleteCallback_;</span><br><span class=\"line\">  HighWaterMarkCallback highWaterMarkCallback_;</span><br><span class=\"line\">  CloseCallback closeCallback_;</span><br><span class=\"line\">  <span class=\"type\">size_t</span> highWaterMark_;</span><br><span class=\"line\">  Buffer inputBuffer_;</span><br><span class=\"line\">  Buffer outputBuffer_;</span><br><span class=\"line\">  std::any context_;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"唤醒机制\"><a href=\"#唤醒机制\" class=\"headerlink\" title=\"唤醒机制\"></a>唤醒机制</h3><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">EventLoop</span> : noncopyable &#123;</span><br><span class=\"line\">  <span class=\"type\">int</span> wakeupFd_;</span><br><span class=\"line\">  std::unique_ptr&lt;Channel&gt; wakeupChannel_;</span><br><span class=\"line\">  std::any context_;</span><br><span class=\"line\">  ChannelList activeChannels_;</span><br><span class=\"line\">  Channel* currentActiveChannel_;</span><br><span class=\"line\">  <span class=\"keyword\">mutable</span> MutexLock mutex_;</span><br><span class=\"line\">  std::vector&lt;Functor&gt; pendingFunctors_;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"定时器\"><a href=\"#定时器\" class=\"headerlink\" title=\"定时器\"></a>定时器</h3><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">TimerQueue</span> : noncopyable &#123;</span><br><span class=\"line\">  <span class=\"type\">const</span> <span class=\"type\">int</span> timerfd_;</span><br><span class=\"line\">  Channel timerfdChannel_;</span><br><span class=\"line\">  TimerList timers_;</span><br><span class=\"line\">  ActiveTimerSet activeTimers_;</span><br><span class=\"line\">  <span class=\"type\">bool</span> callingExpiredTimers_; </span><br><span class=\"line\">  ActiveTimerSet cancelingTimers_;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Channel-的统一处理方式\"><a href=\"#Channel-的统一处理方式\" class=\"headerlink\" title=\"Channel 的统一处理方式\"></a>Channel 的统一处理方式</h3><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">channel-&gt;<span class=\"built_in\">setReadCallback</span>(std::<span class=\"built_in\">bind</span>(&amp;TcpConnection::handleRead, <span class=\"keyword\">this</span>));</span><br><span class=\"line\">channel-&gt;<span class=\"built_in\">setWriteCallback</span>(std::<span class=\"built_in\">bind</span>(&amp;TcpConnection::handleWrite, <span class=\"keyword\">this</span>));</span><br></pre></td></tr></table></figure>\n\n<p>这就是“基于对象”的关键点：<strong>不搞子类体系，而用统一类 + 函数注入来处理多样行为。</strong></p>\n<hr>\n<h2 id=\"回调机制的优越性：组合优于继承\"><a href=\"#回调机制的优越性：组合优于继承\" class=\"headerlink\" title=\"回调机制的优越性：组合优于继承\"></a>回调机制的优越性：组合优于继承</h2><p>muduo 的核心组件几乎都是：<strong>具体类 + 回调注入</strong></p>\n<ul>\n<li><code>TcpServer</code> 组合 <code>Acceptor</code>、<code>EventLoopThreadPool</code>、用户回调</li>\n<li><code>TcpConnection</code> 内部注册回调响应事件</li>\n<li><code>Channel</code> 统一管理事件分发</li>\n</ul>\n<p><strong>类图示意：</strong></p>\n<p><img src=\"/images/TcpServer.png\" alt=\"TcpServer\"></p>\n<p><strong>组合优于继承，行为通过注入，而非继承重写。</strong></p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">TcpConnection::<span class=\"built_in\">TcpConnection</span>(...) &#123;</span><br><span class=\"line\">  channel_-&gt;<span class=\"built_in\">setReadCallback</span>(std::<span class=\"built_in\">bind</span>(&amp;TcpConnection::handleRead, <span class=\"keyword\">this</span>));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>对比传统 OOP：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">BaseHandler</span> &#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">virtual</span> <span class=\"type\">void</span> <span class=\"title\">onRead</span><span class=\"params\">()</span> </span>= <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">MyHandler</span> : <span class=\"keyword\">public</span> BaseHandler &#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">onRead</span><span class=\"params\">()</span> <span class=\"keyword\">override</span> </span>&#123; ... &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>muduo 的方式降低抽象复杂度，提升扩展灵活性。</p>\n<hr>\n<h2 id=\"生命周期管理：RAII-智能指针-tie\"><a href=\"#生命周期管理：RAII-智能指针-tie\" class=\"headerlink\" title=\"生命周期管理：RAII + 智能指针 + tie()\"></a>生命周期管理：RAII + 智能指针 + tie()</h2><p>陈硕大佬强调：C++ 的最大优势是<strong>确定性析构</strong>。muduo 的生命周期管理机制如下：</p>\n<ul>\n<li>所有 socket 封装于 RAII 类</li>\n<li><code>TcpConnection</code> 使用 <code>shared_ptr</code> + <code>enable_shared_from_this</code></li>\n<li><code>Channel::tie()</code> 实现弱引用锁定，防止悬垂指针</li>\n</ul>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">TcpConnection::connectEstablished</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">  channel_-&gt;<span class=\"built_in\">tie</span>(<span class=\"built_in\">shared_from_this</span>());</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>事件处理过程：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">Channel::handleEvent</span><span class=\"params\">(...)</span> </span>&#123;</span><br><span class=\"line\">  std::shared_ptr&lt;<span class=\"type\">void</span>&gt; guard;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (tied_) &#123;</span><br><span class=\"line\">    guard = tie_.<span class=\"built_in\">lock</span>();</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (guard) <span class=\"built_in\">handleEventWithGuard</span>(...);</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">handleEventWithGuard</span>(...);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>时序图：</strong></p>\n<p><img src=\"/images/raii.png\" alt=\"RAII\"></p>\n<p>保障了：</p>\n<ul>\n<li>对象析构后无悬垂调用</li>\n<li>生命周期由 <code>shared_ptr</code> 统一管理，清晰可控</li>\n</ul>\n<hr>\n<h2 id=\"尾声：从-muduo-中我们应该学些什么？对面向对象的一点思考\"><a href=\"#尾声：从-muduo-中我们应该学些什么？对面向对象的一点思考\" class=\"headerlink\" title=\"尾声：从 muduo 中我们应该学些什么？对面向对象的一点思考\"></a>尾声：从 muduo 中我们应该学些什么？对面向对象的一点思考</h2><p>关于面向对象的争议其实一直很大，批评也很多，但是面向对象这种思想既然可以存在，并且依然得到哪么多人的拥护，肯定有可取之处。</p>\n<p>咱们先关心从muduo源码中我们应该学点什么知识。</p>\n<p>muduo 告诉我们：</p>\n<ul>\n<li>RAII + 智能指针是 C++ 的精髓</li>\n<li>无虚函数，回调更灵活</li>\n<li>强调组合，提升模块化与可维护性</li>\n</ul>\n<p>我对使用面向对象想法是：</p>\n<blockquote>\n<p>“让行业大佬设计接口，让普通开发者以简单朴实的方式逐步演进。”</p>\n</blockquote>\n<p>普通开发者：</p>\n<ul>\n<li>从组合和回调入手，快速实现业务逻辑</li>\n<li>在需求稳定后，再抽象出通用接口</li>\n<li>通过测试保证软件质量</li>\n</ul>\n<p>这种自顶向下的设计方式，其实很适合那些具有非常丰富行业经验的人去设计出一套接口来。<br>因为他们实际上知道了，这套接口就是足够好的抽象。<br>像普通的开发人员，就做到简单，朴实就好了。</p>\n<p>最后：<br><strong>设计应服务于目标，而非固守范式。</strong></p>\n<p>作为程序员，应该具备多种设计手法，并在适当时刻选择最合适的方式。</p>"},{"title":"spdlog源码阅读:01.异步机制解析","date":"2025-08-25T16:00:00.000Z","_content":"\n# 引言\n在之前的工作中使用spdlog这个开源库封装了一个异步的日志模块供上层应用使用，并借着这个机会学习阅读了spdlog的源码，在使用和阅读的过程中有一些心得，也踩了一些坑，最近终于稍微闲暇下来，准备将自己阅读源码和分析源码过程记录下来，方便日后自己的学习和复盘。\n<!-- more -->\n## spdlog的优势\n\n**便于集成**：提供了头文件模式，可以直接在源码中集成\n\n**跨平台**： 支持windows,linux,android等多个平台\n\n**功能丰富**： 提供了同步，异步日志等多种日志模式，并且提供了丰富的格式化选择和日志输出选择 \n\n## 阅读导航\n在阅读spdlog源码，分析spdlog是怎么使用同一套接口支持同步和异步日志，以及丰富的日志类型的机制的时候，当时是从spdlog提供的异步日志的demo出发，分析日志消息是怎么在各个类之间流转，从用户输入到日志打印都经历了那些类和函数。以下是我的阅读过程：\n1. **从demo出发**：追踪日志消息的产生，处理和输出路径\n2. **梳理类和函数的调用链**：通过调试和阅读源码，理清日志消息流转中设计的主要类和函数调用关系\n3. **分析协作机制**：理解这个类是怎么通过消息传递和多态机制协作，完成日志功能\n4. **可视化设计**：梳理出关键类之后，绘制出类图，进一步明确设计思路和拓展方式\n\n以上内容是我阅读源码的思路，也是这篇文章的主要脉络，读者可以通过这个思路更好的理解这篇文章，也可以通过这个方式去自己了解想要理解spdlog源码中的其他部分\n\n**注：本文分析的源码为spdlog的v1.15.1版本**\n# spdlog异步机制解析\n## 异步测试demo\nspdlog官方提供了异步日志的使用demo,包括单文件和多文件的异步日志demo\n\n```c++\n#include \"spdlog/async.h\"\n#include \"spdlog/sinks/basic_file_sink.h\"\nvoid async_example()\n{\n    auto async_file = spdlog::basic_logger_mt<spdlog::async_factory>(\"async_file_logger\", \"logs/async_log.txt\");\n\n}\n```\n```c++\n#include \"spdlog/async.h\"\n#include \"spdlog/sinks/stdout_color_sinks.h\"\n#include \"spdlog/sinks/rotating_file_sink.h\"\nvoid multi_sink_example2()\n{\n    spdlog::init_thread_pool(8192, 1);\n    auto stdout_sink = std::make_shared<spdlog::sinks::stdout_color_sink_mt >();\n    auto rotating_sink = std::make_shared<spdlog::sinks::rotating_file_sink_mt>(\"mylog.txt\", 1024*1024*10, 3);\n    std::vector<spdlog::sink_ptr> sinks {stdout_sink, rotating_sink};\n    auto logger = std::make_shared<spdlog::async_logger>(\"loggername\", sinks.begin(), sinks.end(), spdlog::thread_pool(), spdlog::async_overflow_policy::block);\n    spdlog::register_logger(logger);\n}\n```\n我们从最简答的单文件的异步日志demo入手，使用这个单文件的异步日志进行静态的字符串打印\n```c++\n#include \"spdlog/async.h\"\n#include \"spdlog/sinks/basic_file_sink.h\"\nvoid async_example()\n{\n    auto async_file = spdlog::basic_logger_mt<spdlog::async_factory>(\"async_file_logger\", \"logs/async_log.txt\");\n    async_file->info(\"message\");\n}\n```\n## 日志消息流转\n以info(\"message\")这个过程为例进行测试，整个日志消息的流转过程如下：\n### 日志生产\n1. logger对象指针通过info这个模板函数根据参数类型进行匹配，调用log这个模板方法\n```c++\ntemplate <typename T>\nvoid info(const T &msg) {\n     log(level::info, msg);\n}\n```\n2. log这个模板方法根据参数类型进行匹配，调用log_it_这个函数\n```c++\nvoid log(source_loc loc, level::level_enum lvl, string_view_t msg) {\n    bool log_enabled = should_log(lvl);\n    bool traceback_enabled = tracer_.enabled();\n    if (!log_enabled && !traceback_enabled) {\n        return;\n    }\n\n    details::log_msg log_msg(loc, name_, lvl, msg);\n    log_it_(log_msg, log_enabled, traceback_enabled);\n}\n```\n3. 在log_it_这个方法里，会调用logger这个类的虚函数sink_it_\n```c++\nvoid logger::log_it_(const spdlog::details::log_msg &log_msg,\n                                   bool log_enabled,\n                                   bool traceback_enabled) {\n    if (log_enabled) {\n        sink_it_(log_msg);//实际调用的async_logger这个类的sink_it_方法\n    }\n    if (traceback_enabled) {\n        tracer_.push_back(log_msg);\n    }\n}\n```\n4. 在async_logger的sink_it_函数中，日志消息最终被封装成async_msg，并加入mpmc_queue这个队列中\n```c++\nvoid spdlog::async_logger::sink_it_(const details::log_msg &msg) {\n    if (auto pool_ptr = thread_pool_.lock()) {\n        pool_ptr->post_log(shared_from_this(), msg, overflow_policy_);\n    } else {\n        throw_spdlog_ex(\"async log: thread pool doesn't exist anymore\");\n    }\n}\n//构造一个async_msg，包含日志消息和async_logger的弱指针（shared_from_this()），然后调用post_async_msg_\nvoid thread_pool::post_log(async_logger_ptr &&worker_ptr, const details::log_msg &msg, async_overflow_policy overflow_policy) {\n    async_msg async_m(std::move(worker_ptr), async_msg_type::log, msg);\n    post_async_msg_(std::move(async_m), overflow_policy);\n}\n\n//将async_msg入队到多生产者单消费者队列（mpsc_que）中，支持不同的溢出策略（如阻塞、丢弃新消息或覆盖旧消息）\nvoid thread_pool::post_async_msg_(async_msg &&new_msg, async_overflow_policy overflow_policy) {\n    if (overflow_policy == async_overflow_policy::block) {\n        q_.enqueue(std::move(new_msg));\n    } else if (overflow_policy == async_overflow_policy::overrun_oldest) {\n        q_.enqueue_nowait(std::move(new_msg));\n    } else {\n        q_.enqueue_if_have_room(std::move(new_msg));\n    }\n}\n```\n### 日志消费\n1. 线程池的工作线程将不断从队列中取出async_msg消息，并根据异步日志的类型不同的处理\n```c++\nvoid thread_pool::worker_loop_() {\n    while (process_next_msg_()) {}\n}\n\n//process_next_msg_从队列中取出async_msg，根据消息类型执行操作。\nbool  thread_pool::process_next_msg_() {\n    async_msg incoming_async_msg;\n    q_.dequeue(incoming_async_msg);\n    switch (incoming_async_msg.msg_type) {\n        //对于log类型，调用async_logger::backend_sink_it\n        case async_msg_type::log: {\n            incoming_async_msg.worker_ptr->backend_sink_it_(incoming_async_msg);\n            return true;\n        }\n        //对于flush类型，调用async_logger::backend_sink_it\n        case async_msg_type::flush: {\n            incoming_async_msg.worker_ptr->backend_flush_();\n            return true;\n        }\n        \n        //对于terminate类型，结束工作线程\n        case async_msg_type::terminate: {\n            return false;\n        }\n\n        default: {\n            assert(false);\n        }\n    }\n    return true;\n}\n```\n2. 在async_logger::backend_sink_it_中，async_logger遍历其持有的所有sinks_，调用每个sink的log方法\n```c++\nvoid async_logger::backend_sink_it_(const details::log_msg &msg) {\n    for (auto &sink : sinks_) {\n        if (sink->should_log(msg.level)) {\n            sink->log(msg);\n        }\n    }\n    \n    //强制日志进行输出\n    if (should_flush_(msg)) {\n        backend_flush_();\n    }\n}\n```\n3. spdlog中的sink类都是继承自base_sink这个类，在base_sink的log方法中，调用了sink_it_这个虚方法，进行了具体的打印操作\n```c++\ntemplate <typename Mutex>\nvoid base_sink<Mutex>::log(const details::log_msg &msg) {\n    std::lock_guard<Mutex> lock(mutex_);\n    sink_it_(msg);\n}\n```\n4. 以basic_file_sink这个类为例，在这个方法中，使用格式化器格式化了日志，并且将日志消息写入文件\n```c++\ntemplate <typename Mutex>\nvoid basic_file_sink<Mutex>::sink_it_(const details::log_msg &msg) {\n    memory_buf_t formatted;\n    base_sink<Mutex>::formatter_->format(msg, formatted);\n    file_helper_.write(formatted);\n}\n```\n上述过程就是，就是整个异步过程中日志消息的整个流程，通过这个流程我们可以发现，spdlog的异步模式就是经典的生产者，消费者模式，前端通过logger的打印日志的log方法将日志消息写入队列，线程池中的后端线程不断从队列中取出异步消息，根据异步消息调用async_logger本身的方法进行处理，这样就实现了异步的日志写入。\n\n可以参考下图更加直观的感受这个过程(图片来源: https://www.cnblogs.com/shuqin/p/12214439.html)\n![spdlog_seq.png](/images/spdlog_seq.png)\n\n### 强制刷新与结束线程\n在上面线程中的工作中提到了三种异步日志消息，`log`，`flush`,`terminate`。log类型的消息是用户写日志的时候产生的，那么另外两种消息是什么时候产生的呢？\n\nspdlog支持手动强制日志输出，用户调用logger->flush()时，spdlog强制刷新日志:\n```c++\n//async_logger::flush_生成一个flush类型的async_msg，投递到线程池\nvoid async_logger::flush_() {\n    if (auto pool_ptr = thread_pool_.lock()) {\n        pool_ptr->post_flush(shared_from_this(), overflow_policy_);\n    }\n}\n\nvoid thread_pool::post_flush(async_logger_ptr &&worker_ptr,\n                                           async_overflow_policy overflow_policy) {\n    post_async_msg_(async_msg(std::move(worker_ptr), async_msg_type::flush), overflow_policy);\n}\n```\n线程池处理flush消息，调用async_logger::backend_flush_，最终触发每个sink的flush操作。\n\nspdlog的线程池在调用析构函数的时候，会产生`terminate`消息，优雅的结束这个工作线程\n```c++\nthread_pool::~thread_pool() {\n    for (size_t i = 0; i < threads_.size(); i++) {\n        post_async_msg_(async_msg(async_msg_type::terminate), async_overflow_policy::block);\n    }\n    for (auto &t : threads_) {\n        t.join();\n    }\n}\n```\n\n## 主要类\n### 类层次结构\n通过上面分析日志消息流转的过程中可以发现，实现异步日志功能的主要类包括，logger，async_logger,sink,base_sink，thread_pool和mpmc_blocking_queue这几个类。\n他们的类关系图如下所示：\n![spdlog_class.png](/images/spdlog.png)\n**logger**：用户打印日志的接口基类\n\n**formatter**：格式化日志消息的基类\n\n**sink**: 日志输出的基类\n\nspdlog通过让logger组合sink，sink组合formatter，并通过合理的职责划分和接口定义，实现了良好的可拓展性，用户只需要继承sink接口，实现sink_it_和flush方法就可以实现自定义sink的实现，实现formatter类的format函数就能实现自定义格式化器\n\n### mpmc_blocking_queue分析\n\nmpmc_blocking_queue是存储异步日志消息的关键类，使用互斥锁和条件变量保证线程安全，内部使用环形队列(circular_q.h)存储数据\n```c++\ntemplate <typename T>\nclass mpmc_blocking_queue \n{\npublic:\n    using item_type = T;\n   \n    //阻塞模式下调用\n    void enqueue(T &&item) {\n        {\n            std::unique_lock<std::mutex> lock(queue_mutex_);\n            pop_cv_.wait(lock, [this] { return !this->q_.full(); });\n            q_.push_back(std::move(item));\n        }\n        push_cv_.notify_one();\n    }\n\n    //overrun_oldest 覆盖旧日志模式下使用\n    void enqueue_nowait(T &&item) \n    {\n        {\n            std::unique_lock<std::mutex> lock(queue_mutex_);\n            q_.push_back(std::move(item));\n        }\n        push_cv_.notify_one();\n    }\n\n    //覆盖新日志模式下使用\n    void enqueue_if_have_room(T &&item) \n    {\n        bool pushed = false;\n        {\n            std::unique_lock<std::mutex> lock(queue_mutex_);\n            if (!q_.full()) {\n                q_.push_back(std::move(item));\n                pushed = true;\n            }\n        }\n\n        if (pushed) {\n            push_cv_.notify_one();\n        } else {\n            ++discard_counter_;\n        }\n    }\n    void dequeue(T &popped_item)\n    {\n        {\n            std::unique_lock<std::mutex> lock(queue_mutex_);\n            push_cv_.wait(lock, [this] { return !this->q_.empty(); });\n            popped_item = std::move(q_.front());\n            q_.pop_front();\n        }\n        pop_cv_.notify_one();\n    }\n\nprivate:\n    std::mutex queue_mutex_; //全局锁，保护线程安全\n    std::condition_variable push_cv_; //针对消费者的条件变量，等待非空，通知可读\n    std::condition_variable pop_cv_; //针对生产者的条件变量，等待不满，通知可写\n    spdlog::details::circular_q<T> q_;\n    std::atomic<size_t> discard_counter_{0};\n};\n```\n通过相关的源代码可以看出来，只有在阻塞模式下，生产者线程才会等待队列进入可写状态，其他时候均当队列满的时候都会覆盖消息；但是无论在什么模式下，所有的生产者和消费者都会去争夺互斥锁，保证线程安全；\n# 一些建议\n在使用的时候，虽然spdlog支持多消费模式，但是理论上写日志这个操作是IO密集型的操作，性能的瓶颈不在cpu上，多线程读取是没必要的，还会增加锁的损耗，所以多线程的消费者是没必要。\n并且多个消费者无法保证日志的输出顺序，在实际的测试中也发现，单个消费者的吞吐量是比多个消费者更高，所以建议将线程池的线程数设置为1\n\n\n\n\n\n\n\n","source":"_posts/spdlog/spdlog源码阅读:01.异步机制解析.md","raw":"---\ntitle: \"spdlog源码阅读:01.异步机制解析\"\ndate: 2025-08-26\ncategories: \n  - 源码分析\n  - spdlog\ntags:\n  - C++\n  - spdlog\n  - 日志系统\n---\n\n# 引言\n在之前的工作中使用spdlog这个开源库封装了一个异步的日志模块供上层应用使用，并借着这个机会学习阅读了spdlog的源码，在使用和阅读的过程中有一些心得，也踩了一些坑，最近终于稍微闲暇下来，准备将自己阅读源码和分析源码过程记录下来，方便日后自己的学习和复盘。\n<!-- more -->\n## spdlog的优势\n\n**便于集成**：提供了头文件模式，可以直接在源码中集成\n\n**跨平台**： 支持windows,linux,android等多个平台\n\n**功能丰富**： 提供了同步，异步日志等多种日志模式，并且提供了丰富的格式化选择和日志输出选择 \n\n## 阅读导航\n在阅读spdlog源码，分析spdlog是怎么使用同一套接口支持同步和异步日志，以及丰富的日志类型的机制的时候，当时是从spdlog提供的异步日志的demo出发，分析日志消息是怎么在各个类之间流转，从用户输入到日志打印都经历了那些类和函数。以下是我的阅读过程：\n1. **从demo出发**：追踪日志消息的产生，处理和输出路径\n2. **梳理类和函数的调用链**：通过调试和阅读源码，理清日志消息流转中设计的主要类和函数调用关系\n3. **分析协作机制**：理解这个类是怎么通过消息传递和多态机制协作，完成日志功能\n4. **可视化设计**：梳理出关键类之后，绘制出类图，进一步明确设计思路和拓展方式\n\n以上内容是我阅读源码的思路，也是这篇文章的主要脉络，读者可以通过这个思路更好的理解这篇文章，也可以通过这个方式去自己了解想要理解spdlog源码中的其他部分\n\n**注：本文分析的源码为spdlog的v1.15.1版本**\n# spdlog异步机制解析\n## 异步测试demo\nspdlog官方提供了异步日志的使用demo,包括单文件和多文件的异步日志demo\n\n```c++\n#include \"spdlog/async.h\"\n#include \"spdlog/sinks/basic_file_sink.h\"\nvoid async_example()\n{\n    auto async_file = spdlog::basic_logger_mt<spdlog::async_factory>(\"async_file_logger\", \"logs/async_log.txt\");\n\n}\n```\n```c++\n#include \"spdlog/async.h\"\n#include \"spdlog/sinks/stdout_color_sinks.h\"\n#include \"spdlog/sinks/rotating_file_sink.h\"\nvoid multi_sink_example2()\n{\n    spdlog::init_thread_pool(8192, 1);\n    auto stdout_sink = std::make_shared<spdlog::sinks::stdout_color_sink_mt >();\n    auto rotating_sink = std::make_shared<spdlog::sinks::rotating_file_sink_mt>(\"mylog.txt\", 1024*1024*10, 3);\n    std::vector<spdlog::sink_ptr> sinks {stdout_sink, rotating_sink};\n    auto logger = std::make_shared<spdlog::async_logger>(\"loggername\", sinks.begin(), sinks.end(), spdlog::thread_pool(), spdlog::async_overflow_policy::block);\n    spdlog::register_logger(logger);\n}\n```\n我们从最简答的单文件的异步日志demo入手，使用这个单文件的异步日志进行静态的字符串打印\n```c++\n#include \"spdlog/async.h\"\n#include \"spdlog/sinks/basic_file_sink.h\"\nvoid async_example()\n{\n    auto async_file = spdlog::basic_logger_mt<spdlog::async_factory>(\"async_file_logger\", \"logs/async_log.txt\");\n    async_file->info(\"message\");\n}\n```\n## 日志消息流转\n以info(\"message\")这个过程为例进行测试，整个日志消息的流转过程如下：\n### 日志生产\n1. logger对象指针通过info这个模板函数根据参数类型进行匹配，调用log这个模板方法\n```c++\ntemplate <typename T>\nvoid info(const T &msg) {\n     log(level::info, msg);\n}\n```\n2. log这个模板方法根据参数类型进行匹配，调用log_it_这个函数\n```c++\nvoid log(source_loc loc, level::level_enum lvl, string_view_t msg) {\n    bool log_enabled = should_log(lvl);\n    bool traceback_enabled = tracer_.enabled();\n    if (!log_enabled && !traceback_enabled) {\n        return;\n    }\n\n    details::log_msg log_msg(loc, name_, lvl, msg);\n    log_it_(log_msg, log_enabled, traceback_enabled);\n}\n```\n3. 在log_it_这个方法里，会调用logger这个类的虚函数sink_it_\n```c++\nvoid logger::log_it_(const spdlog::details::log_msg &log_msg,\n                                   bool log_enabled,\n                                   bool traceback_enabled) {\n    if (log_enabled) {\n        sink_it_(log_msg);//实际调用的async_logger这个类的sink_it_方法\n    }\n    if (traceback_enabled) {\n        tracer_.push_back(log_msg);\n    }\n}\n```\n4. 在async_logger的sink_it_函数中，日志消息最终被封装成async_msg，并加入mpmc_queue这个队列中\n```c++\nvoid spdlog::async_logger::sink_it_(const details::log_msg &msg) {\n    if (auto pool_ptr = thread_pool_.lock()) {\n        pool_ptr->post_log(shared_from_this(), msg, overflow_policy_);\n    } else {\n        throw_spdlog_ex(\"async log: thread pool doesn't exist anymore\");\n    }\n}\n//构造一个async_msg，包含日志消息和async_logger的弱指针（shared_from_this()），然后调用post_async_msg_\nvoid thread_pool::post_log(async_logger_ptr &&worker_ptr, const details::log_msg &msg, async_overflow_policy overflow_policy) {\n    async_msg async_m(std::move(worker_ptr), async_msg_type::log, msg);\n    post_async_msg_(std::move(async_m), overflow_policy);\n}\n\n//将async_msg入队到多生产者单消费者队列（mpsc_que）中，支持不同的溢出策略（如阻塞、丢弃新消息或覆盖旧消息）\nvoid thread_pool::post_async_msg_(async_msg &&new_msg, async_overflow_policy overflow_policy) {\n    if (overflow_policy == async_overflow_policy::block) {\n        q_.enqueue(std::move(new_msg));\n    } else if (overflow_policy == async_overflow_policy::overrun_oldest) {\n        q_.enqueue_nowait(std::move(new_msg));\n    } else {\n        q_.enqueue_if_have_room(std::move(new_msg));\n    }\n}\n```\n### 日志消费\n1. 线程池的工作线程将不断从队列中取出async_msg消息，并根据异步日志的类型不同的处理\n```c++\nvoid thread_pool::worker_loop_() {\n    while (process_next_msg_()) {}\n}\n\n//process_next_msg_从队列中取出async_msg，根据消息类型执行操作。\nbool  thread_pool::process_next_msg_() {\n    async_msg incoming_async_msg;\n    q_.dequeue(incoming_async_msg);\n    switch (incoming_async_msg.msg_type) {\n        //对于log类型，调用async_logger::backend_sink_it\n        case async_msg_type::log: {\n            incoming_async_msg.worker_ptr->backend_sink_it_(incoming_async_msg);\n            return true;\n        }\n        //对于flush类型，调用async_logger::backend_sink_it\n        case async_msg_type::flush: {\n            incoming_async_msg.worker_ptr->backend_flush_();\n            return true;\n        }\n        \n        //对于terminate类型，结束工作线程\n        case async_msg_type::terminate: {\n            return false;\n        }\n\n        default: {\n            assert(false);\n        }\n    }\n    return true;\n}\n```\n2. 在async_logger::backend_sink_it_中，async_logger遍历其持有的所有sinks_，调用每个sink的log方法\n```c++\nvoid async_logger::backend_sink_it_(const details::log_msg &msg) {\n    for (auto &sink : sinks_) {\n        if (sink->should_log(msg.level)) {\n            sink->log(msg);\n        }\n    }\n    \n    //强制日志进行输出\n    if (should_flush_(msg)) {\n        backend_flush_();\n    }\n}\n```\n3. spdlog中的sink类都是继承自base_sink这个类，在base_sink的log方法中，调用了sink_it_这个虚方法，进行了具体的打印操作\n```c++\ntemplate <typename Mutex>\nvoid base_sink<Mutex>::log(const details::log_msg &msg) {\n    std::lock_guard<Mutex> lock(mutex_);\n    sink_it_(msg);\n}\n```\n4. 以basic_file_sink这个类为例，在这个方法中，使用格式化器格式化了日志，并且将日志消息写入文件\n```c++\ntemplate <typename Mutex>\nvoid basic_file_sink<Mutex>::sink_it_(const details::log_msg &msg) {\n    memory_buf_t formatted;\n    base_sink<Mutex>::formatter_->format(msg, formatted);\n    file_helper_.write(formatted);\n}\n```\n上述过程就是，就是整个异步过程中日志消息的整个流程，通过这个流程我们可以发现，spdlog的异步模式就是经典的生产者，消费者模式，前端通过logger的打印日志的log方法将日志消息写入队列，线程池中的后端线程不断从队列中取出异步消息，根据异步消息调用async_logger本身的方法进行处理，这样就实现了异步的日志写入。\n\n可以参考下图更加直观的感受这个过程(图片来源: https://www.cnblogs.com/shuqin/p/12214439.html)\n![spdlog_seq.png](/images/spdlog_seq.png)\n\n### 强制刷新与结束线程\n在上面线程中的工作中提到了三种异步日志消息，`log`，`flush`,`terminate`。log类型的消息是用户写日志的时候产生的，那么另外两种消息是什么时候产生的呢？\n\nspdlog支持手动强制日志输出，用户调用logger->flush()时，spdlog强制刷新日志:\n```c++\n//async_logger::flush_生成一个flush类型的async_msg，投递到线程池\nvoid async_logger::flush_() {\n    if (auto pool_ptr = thread_pool_.lock()) {\n        pool_ptr->post_flush(shared_from_this(), overflow_policy_);\n    }\n}\n\nvoid thread_pool::post_flush(async_logger_ptr &&worker_ptr,\n                                           async_overflow_policy overflow_policy) {\n    post_async_msg_(async_msg(std::move(worker_ptr), async_msg_type::flush), overflow_policy);\n}\n```\n线程池处理flush消息，调用async_logger::backend_flush_，最终触发每个sink的flush操作。\n\nspdlog的线程池在调用析构函数的时候，会产生`terminate`消息，优雅的结束这个工作线程\n```c++\nthread_pool::~thread_pool() {\n    for (size_t i = 0; i < threads_.size(); i++) {\n        post_async_msg_(async_msg(async_msg_type::terminate), async_overflow_policy::block);\n    }\n    for (auto &t : threads_) {\n        t.join();\n    }\n}\n```\n\n## 主要类\n### 类层次结构\n通过上面分析日志消息流转的过程中可以发现，实现异步日志功能的主要类包括，logger，async_logger,sink,base_sink，thread_pool和mpmc_blocking_queue这几个类。\n他们的类关系图如下所示：\n![spdlog_class.png](/images/spdlog.png)\n**logger**：用户打印日志的接口基类\n\n**formatter**：格式化日志消息的基类\n\n**sink**: 日志输出的基类\n\nspdlog通过让logger组合sink，sink组合formatter，并通过合理的职责划分和接口定义，实现了良好的可拓展性，用户只需要继承sink接口，实现sink_it_和flush方法就可以实现自定义sink的实现，实现formatter类的format函数就能实现自定义格式化器\n\n### mpmc_blocking_queue分析\n\nmpmc_blocking_queue是存储异步日志消息的关键类，使用互斥锁和条件变量保证线程安全，内部使用环形队列(circular_q.h)存储数据\n```c++\ntemplate <typename T>\nclass mpmc_blocking_queue \n{\npublic:\n    using item_type = T;\n   \n    //阻塞模式下调用\n    void enqueue(T &&item) {\n        {\n            std::unique_lock<std::mutex> lock(queue_mutex_);\n            pop_cv_.wait(lock, [this] { return !this->q_.full(); });\n            q_.push_back(std::move(item));\n        }\n        push_cv_.notify_one();\n    }\n\n    //overrun_oldest 覆盖旧日志模式下使用\n    void enqueue_nowait(T &&item) \n    {\n        {\n            std::unique_lock<std::mutex> lock(queue_mutex_);\n            q_.push_back(std::move(item));\n        }\n        push_cv_.notify_one();\n    }\n\n    //覆盖新日志模式下使用\n    void enqueue_if_have_room(T &&item) \n    {\n        bool pushed = false;\n        {\n            std::unique_lock<std::mutex> lock(queue_mutex_);\n            if (!q_.full()) {\n                q_.push_back(std::move(item));\n                pushed = true;\n            }\n        }\n\n        if (pushed) {\n            push_cv_.notify_one();\n        } else {\n            ++discard_counter_;\n        }\n    }\n    void dequeue(T &popped_item)\n    {\n        {\n            std::unique_lock<std::mutex> lock(queue_mutex_);\n            push_cv_.wait(lock, [this] { return !this->q_.empty(); });\n            popped_item = std::move(q_.front());\n            q_.pop_front();\n        }\n        pop_cv_.notify_one();\n    }\n\nprivate:\n    std::mutex queue_mutex_; //全局锁，保护线程安全\n    std::condition_variable push_cv_; //针对消费者的条件变量，等待非空，通知可读\n    std::condition_variable pop_cv_; //针对生产者的条件变量，等待不满，通知可写\n    spdlog::details::circular_q<T> q_;\n    std::atomic<size_t> discard_counter_{0};\n};\n```\n通过相关的源代码可以看出来，只有在阻塞模式下，生产者线程才会等待队列进入可写状态，其他时候均当队列满的时候都会覆盖消息；但是无论在什么模式下，所有的生产者和消费者都会去争夺互斥锁，保证线程安全；\n# 一些建议\n在使用的时候，虽然spdlog支持多消费模式，但是理论上写日志这个操作是IO密集型的操作，性能的瓶颈不在cpu上，多线程读取是没必要的，还会增加锁的损耗，所以多线程的消费者是没必要。\n并且多个消费者无法保证日志的输出顺序，在实际的测试中也发现，单个消费者的吞吐量是比多个消费者更高，所以建议将线程池的线程数设置为1\n\n\n\n\n\n\n\n","slug":"spdlog/spdlog源码阅读:01.异步机制解析","published":1,"updated":"2025-08-28T12:44:51.608Z","comments":1,"layout":"post","photos":[],"_id":"cmevecvsi001yhfrohang8fma","content":"<h1 id=\"引言\"><a href=\"#引言\" class=\"headerlink\" title=\"引言\"></a>引言</h1><p>在之前的工作中使用spdlog这个开源库封装了一个异步的日志模块供上层应用使用，并借着这个机会学习阅读了spdlog的源码，在使用和阅读的过程中有一些心得，也踩了一些坑，最近终于稍微闲暇下来，准备将自己阅读源码和分析源码过程记录下来，方便日后自己的学习和复盘。</p>\n<span id=\"more\"></span>\n<h2 id=\"spdlog的优势\"><a href=\"#spdlog的优势\" class=\"headerlink\" title=\"spdlog的优势\"></a>spdlog的优势</h2><p><strong>便于集成</strong>：提供了头文件模式，可以直接在源码中集成</p>\n<p><strong>跨平台</strong>： 支持windows,linux,android等多个平台</p>\n<p><strong>功能丰富</strong>： 提供了同步，异步日志等多种日志模式，并且提供了丰富的格式化选择和日志输出选择 </p>\n<h2 id=\"阅读导航\"><a href=\"#阅读导航\" class=\"headerlink\" title=\"阅读导航\"></a>阅读导航</h2><p>在阅读spdlog源码，分析spdlog是怎么使用同一套接口支持同步和异步日志，以及丰富的日志类型的机制的时候，当时是从spdlog提供的异步日志的demo出发，分析日志消息是怎么在各个类之间流转，从用户输入到日志打印都经历了那些类和函数。以下是我的阅读过程：</p>\n<ol>\n<li><strong>从demo出发</strong>：追踪日志消息的产生，处理和输出路径</li>\n<li><strong>梳理类和函数的调用链</strong>：通过调试和阅读源码，理清日志消息流转中设计的主要类和函数调用关系</li>\n<li><strong>分析协作机制</strong>：理解这个类是怎么通过消息传递和多态机制协作，完成日志功能</li>\n<li><strong>可视化设计</strong>：梳理出关键类之后，绘制出类图，进一步明确设计思路和拓展方式</li>\n</ol>\n<p>以上内容是我阅读源码的思路，也是这篇文章的主要脉络，读者可以通过这个思路更好的理解这篇文章，也可以通过这个方式去自己了解想要理解spdlog源码中的其他部分</p>\n<p><strong>注：本文分析的源码为spdlog的v1.15.1版本</strong></p>\n<h1 id=\"spdlog异步机制解析\"><a href=\"#spdlog异步机制解析\" class=\"headerlink\" title=\"spdlog异步机制解析\"></a>spdlog异步机制解析</h1><h2 id=\"异步测试demo\"><a href=\"#异步测试demo\" class=\"headerlink\" title=\"异步测试demo\"></a>异步测试demo</h2><p>spdlog官方提供了异步日志的使用demo,包括单文件和多文件的异步日志demo</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;spdlog/async.h&quot;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;spdlog/sinks/basic_file_sink.h&quot;</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">async_example</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">auto</span> async_file = spdlog::<span class=\"built_in\">basic_logger_mt</span>&lt;spdlog::async_factory&gt;(<span class=\"string\">&quot;async_file_logger&quot;</span>, <span class=\"string\">&quot;logs/async_log.txt&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;spdlog/async.h&quot;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;spdlog/sinks/stdout_color_sinks.h&quot;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;spdlog/sinks/rotating_file_sink.h&quot;</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">multi_sink_example2</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    spdlog::<span class=\"built_in\">init_thread_pool</span>(<span class=\"number\">8192</span>, <span class=\"number\">1</span>);</span><br><span class=\"line\">    <span class=\"keyword\">auto</span> stdout_sink = std::<span class=\"built_in\">make_shared</span>&lt;spdlog::sinks::stdout_color_sink_mt &gt;();</span><br><span class=\"line\">    <span class=\"keyword\">auto</span> rotating_sink = std::<span class=\"built_in\">make_shared</span>&lt;spdlog::sinks::rotating_file_sink_mt&gt;(<span class=\"string\">&quot;mylog.txt&quot;</span>, <span class=\"number\">1024</span>*<span class=\"number\">1024</span>*<span class=\"number\">10</span>, <span class=\"number\">3</span>);</span><br><span class=\"line\">    std::vector&lt;spdlog::sink_ptr&gt; sinks &#123;stdout_sink, rotating_sink&#125;;</span><br><span class=\"line\">    <span class=\"keyword\">auto</span> logger = std::<span class=\"built_in\">make_shared</span>&lt;spdlog::async_logger&gt;(<span class=\"string\">&quot;loggername&quot;</span>, sinks.<span class=\"built_in\">begin</span>(), sinks.<span class=\"built_in\">end</span>(), spdlog::<span class=\"built_in\">thread_pool</span>(), spdlog::async_overflow_policy::block);</span><br><span class=\"line\">    spdlog::<span class=\"built_in\">register_logger</span>(logger);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>我们从最简答的单文件的异步日志demo入手，使用这个单文件的异步日志进行静态的字符串打印</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;spdlog/async.h&quot;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;spdlog/sinks/basic_file_sink.h&quot;</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">async_example</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">auto</span> async_file = spdlog::<span class=\"built_in\">basic_logger_mt</span>&lt;spdlog::async_factory&gt;(<span class=\"string\">&quot;async_file_logger&quot;</span>, <span class=\"string\">&quot;logs/async_log.txt&quot;</span>);</span><br><span class=\"line\">    async_file-&gt;<span class=\"built_in\">info</span>(<span class=\"string\">&quot;message&quot;</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"日志消息流转\"><a href=\"#日志消息流转\" class=\"headerlink\" title=\"日志消息流转\"></a>日志消息流转</h2><p>以info(“message”)这个过程为例进行测试，整个日志消息的流转过程如下：</p>\n<h3 id=\"日志生产\"><a href=\"#日志生产\" class=\"headerlink\" title=\"日志生产\"></a>日志生产</h3><ol>\n<li>logger对象指针通过info这个模板函数根据参数类型进行匹配，调用log这个模板方法<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"keyword\">typename</span> T&gt;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">info</span><span class=\"params\">(<span class=\"type\">const</span> T &amp;msg)</span> </span>&#123;</span><br><span class=\"line\">     <span class=\"built_in\">log</span>(level::info, msg);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li>log这个模板方法根据参数类型进行匹配，调用log_it_这个函数<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">log</span><span class=\"params\">(source_loc loc, level::level_enum lvl, <span class=\"type\">string_view_t</span> msg)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"type\">bool</span> log_enabled = <span class=\"built_in\">should_log</span>(lvl);</span><br><span class=\"line\">    <span class=\"type\">bool</span> traceback_enabled = tracer_.<span class=\"built_in\">enabled</span>();</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!log_enabled &amp;&amp; !traceback_enabled) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\">details::log_msg <span class=\"title\">log_msg</span><span class=\"params\">(loc, name_, lvl, msg)</span></span>;</span><br><span class=\"line\">    <span class=\"built_in\">log_it_</span>(log_msg, log_enabled, traceback_enabled);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li>在log_it_这个方法里，会调用logger这个类的虚函数sink_it_<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">logger::log_it_</span><span class=\"params\">(<span class=\"type\">const</span> spdlog::details::log_msg &amp;log_msg,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">                                   <span class=\"type\">bool</span> log_enabled,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">                                   <span class=\"type\">bool</span> traceback_enabled)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (log_enabled) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">sink_it_</span>(log_msg);<span class=\"comment\">//实际调用的async_logger这个类的sink_it_方法</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (traceback_enabled) &#123;</span><br><span class=\"line\">        tracer_.<span class=\"built_in\">push_back</span>(log_msg);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li>在async_logger的sink_it_函数中，日志消息最终被封装成async_msg，并加入mpmc_queue这个队列中<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">void</span> spdlog::async_logger::<span class=\"built_in\">sink_it_</span>(<span class=\"type\">const</span> details::log_msg &amp;msg) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">auto</span> pool_ptr = thread_pool_.<span class=\"built_in\">lock</span>()) &#123;</span><br><span class=\"line\">        pool_ptr-&gt;<span class=\"built_in\">post_log</span>(<span class=\"built_in\">shared_from_this</span>(), msg, overflow_policy_);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">throw_spdlog_ex</span>(<span class=\"string\">&quot;async log: thread pool doesn&#x27;t exist anymore&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//构造一个async_msg，包含日志消息和async_logger的弱指针（shared_from_this()），然后调用post_async_msg_</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">thread_pool::post_log</span><span class=\"params\">(async_logger_ptr &amp;&amp;worker_ptr, <span class=\"type\">const</span> details::log_msg &amp;msg, async_overflow_policy overflow_policy)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\">async_msg <span class=\"title\">async_m</span><span class=\"params\">(std::move(worker_ptr), async_msg_type::log, msg)</span></span>;</span><br><span class=\"line\">    <span class=\"built_in\">post_async_msg_</span>(std::<span class=\"built_in\">move</span>(async_m), overflow_policy);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//将async_msg入队到多生产者单消费者队列（mpsc_que）中，支持不同的溢出策略（如阻塞、丢弃新消息或覆盖旧消息）</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">thread_pool::post_async_msg_</span><span class=\"params\">(async_msg &amp;&amp;new_msg, async_overflow_policy overflow_policy)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (overflow_policy == async_overflow_policy::block) &#123;</span><br><span class=\"line\">        q_.<span class=\"built_in\">enqueue</span>(std::<span class=\"built_in\">move</span>(new_msg));</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (overflow_policy == async_overflow_policy::overrun_oldest) &#123;</span><br><span class=\"line\">        q_.<span class=\"built_in\">enqueue_nowait</span>(std::<span class=\"built_in\">move</span>(new_msg));</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        q_.<span class=\"built_in\">enqueue_if_have_room</span>(std::<span class=\"built_in\">move</span>(new_msg));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ol>\n<h3 id=\"日志消费\"><a href=\"#日志消费\" class=\"headerlink\" title=\"日志消费\"></a>日志消费</h3><ol>\n<li>线程池的工作线程将不断从队列中取出async_msg消息，并根据异步日志的类型不同的处理<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">thread_pool::worker_loop_</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (<span class=\"built_in\">process_next_msg_</span>()) &#123;&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//process_next_msg_从队列中取出async_msg，根据消息类型执行操作。</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">bool</span>  <span class=\"title\">thread_pool::process_next_msg_</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    async_msg incoming_async_msg;</span><br><span class=\"line\">    q_.<span class=\"built_in\">dequeue</span>(incoming_async_msg);</span><br><span class=\"line\">    <span class=\"keyword\">switch</span> (incoming_async_msg.msg_type) &#123;</span><br><span class=\"line\">        <span class=\"comment\">//对于log类型，调用async_logger::backend_sink_it</span></span><br><span class=\"line\">        <span class=\"keyword\">case</span> async_msg_type::log: &#123;</span><br><span class=\"line\">            incoming_async_msg.worker_ptr-&gt;<span class=\"built_in\">backend_sink_it_</span>(incoming_async_msg);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//对于flush类型，调用async_logger::backend_sink_it</span></span><br><span class=\"line\">        <span class=\"keyword\">case</span> async_msg_type::flush: &#123;</span><br><span class=\"line\">            incoming_async_msg.worker_ptr-&gt;<span class=\"built_in\">backend_flush_</span>();</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\">//对于terminate类型，结束工作线程</span></span><br><span class=\"line\">        <span class=\"keyword\">case</span> async_msg_type::terminate: &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">default</span>: &#123;</span><br><span class=\"line\">            <span class=\"built_in\">assert</span>(<span class=\"literal\">false</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li>在async_logger::backend_sink_it_中，async_logger遍历其持有的所有sinks_，调用每个sink的log方法<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">async_logger::backend_sink_it_</span><span class=\"params\">(<span class=\"type\">const</span> details::log_msg &amp;msg)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">auto</span> &amp;sink : sinks_) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (sink-&gt;<span class=\"built_in\">should_log</span>(msg.level)) &#123;</span><br><span class=\"line\">            sink-&gt;<span class=\"built_in\">log</span>(msg);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">//强制日志进行输出</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"built_in\">should_flush_</span>(msg)) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">backend_flush_</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li>spdlog中的sink类都是继承自base_sink这个类，在base_sink的log方法中，调用了sink_it_这个虚方法，进行了具体的打印操作<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"keyword\">typename</span> Mutex&gt;</span><br><span class=\"line\"><span class=\"type\">void</span> base_sink&lt;Mutex&gt;::<span class=\"built_in\">log</span>(<span class=\"type\">const</span> details::log_msg &amp;msg) &#123;</span><br><span class=\"line\">    <span class=\"function\">std::lock_guard&lt;Mutex&gt; <span class=\"title\">lock</span><span class=\"params\">(mutex_)</span></span>;</span><br><span class=\"line\">    <span class=\"built_in\">sink_it_</span>(msg);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li>以basic_file_sink这个类为例，在这个方法中，使用格式化器格式化了日志，并且将日志消息写入文件<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"keyword\">typename</span> Mutex&gt;</span><br><span class=\"line\"><span class=\"type\">void</span> basic_file_sink&lt;Mutex&gt;::<span class=\"built_in\">sink_it_</span>(<span class=\"type\">const</span> details::log_msg &amp;msg) &#123;</span><br><span class=\"line\">    <span class=\"type\">memory_buf_t</span> formatted;</span><br><span class=\"line\">    base_sink&lt;Mutex&gt;::formatter_-&gt;format(msg, formatted);</span><br><span class=\"line\">    file_helper_.<span class=\"built_in\">write</span>(formatted);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n上述过程就是，就是整个异步过程中日志消息的整个流程，通过这个流程我们可以发现，spdlog的异步模式就是经典的生产者，消费者模式，前端通过logger的打印日志的log方法将日志消息写入队列，线程池中的后端线程不断从队列中取出异步消息，根据异步消息调用async_logger本身的方法进行处理，这样就实现了异步的日志写入。</li>\n</ol>\n<p>可以参考下图更加直观的感受这个过程(图片来源: <a href=\"https://www.cnblogs.com/shuqin/p/12214439.html\">https://www.cnblogs.com/shuqin/p/12214439.html</a>)<br><img src=\"/images/spdlog_seq.png\" alt=\"spdlog_seq.png\"></p>\n<h3 id=\"强制刷新与结束线程\"><a href=\"#强制刷新与结束线程\" class=\"headerlink\" title=\"强制刷新与结束线程\"></a>强制刷新与结束线程</h3><p>在上面线程中的工作中提到了三种异步日志消息，<code>log</code>，<code>flush</code>,<code>terminate</code>。log类型的消息是用户写日志的时候产生的，那么另外两种消息是什么时候产生的呢？</p>\n<p>spdlog支持手动强制日志输出，用户调用logger-&gt;flush()时，spdlog强制刷新日志:</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//async_logger::flush_生成一个flush类型的async_msg，投递到线程池</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">async_logger::flush_</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">auto</span> pool_ptr = thread_pool_.<span class=\"built_in\">lock</span>()) &#123;</span><br><span class=\"line\">        pool_ptr-&gt;<span class=\"built_in\">post_flush</span>(<span class=\"built_in\">shared_from_this</span>(), overflow_policy_);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">thread_pool::post_flush</span><span class=\"params\">(async_logger_ptr &amp;&amp;worker_ptr,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">                                           async_overflow_policy overflow_policy)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">post_async_msg_</span>(<span class=\"built_in\">async_msg</span>(std::<span class=\"built_in\">move</span>(worker_ptr), async_msg_type::flush), overflow_policy);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>线程池处理flush消息，调用async_logger::backend_flush_，最终触发每个sink的flush操作。</p>\n<p>spdlog的线程池在调用析构函数的时候，会产生<code>terminate</code>消息，优雅的结束这个工作线程</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">thread_pool::~<span class=\"built_in\">thread_pool</span>() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">size_t</span> i = <span class=\"number\">0</span>; i &lt; threads_.<span class=\"built_in\">size</span>(); i++) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">post_async_msg_</span>(<span class=\"built_in\">async_msg</span>(async_msg_type::terminate), async_overflow_policy::block);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">auto</span> &amp;t : threads_) &#123;</span><br><span class=\"line\">        t.<span class=\"built_in\">join</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"主要类\"><a href=\"#主要类\" class=\"headerlink\" title=\"主要类\"></a>主要类</h2><h3 id=\"类层次结构\"><a href=\"#类层次结构\" class=\"headerlink\" title=\"类层次结构\"></a>类层次结构</h3><p>通过上面分析日志消息流转的过程中可以发现，实现异步日志功能的主要类包括，logger，async_logger,sink,base_sink，thread_pool和mpmc_blocking_queue这几个类。<br>他们的类关系图如下所示：<br><img src=\"/images/spdlog.png\" alt=\"spdlog_class.png\"><br><strong>logger</strong>：用户打印日志的接口基类</p>\n<p><strong>formatter</strong>：格式化日志消息的基类</p>\n<p><strong>sink</strong>: 日志输出的基类</p>\n<p>spdlog通过让logger组合sink，sink组合formatter，并通过合理的职责划分和接口定义，实现了良好的可拓展性，用户只需要继承sink接口，实现sink_it_和flush方法就可以实现自定义sink的实现，实现formatter类的format函数就能实现自定义格式化器</p>\n<h3 id=\"mpmc-blocking-queue分析\"><a href=\"#mpmc-blocking-queue分析\" class=\"headerlink\" title=\"mpmc_blocking_queue分析\"></a>mpmc_blocking_queue分析</h3><p>mpmc_blocking_queue是存储异步日志消息的关键类，使用互斥锁和条件变量保证线程安全，内部使用环形队列(circular_q.h)存储数据</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"keyword\">typename</span> T&gt;</span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">mpmc_blocking_queue</span> </span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"keyword\">using</span> item_type = T;</span><br><span class=\"line\">   </span><br><span class=\"line\">    <span class=\"comment\">//阻塞模式下调用</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">enqueue</span><span class=\"params\">(T &amp;&amp;item)</span> </span>&#123;</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"function\">std::unique_lock&lt;std::mutex&gt; <span class=\"title\">lock</span><span class=\"params\">(queue_mutex_)</span></span>;</span><br><span class=\"line\">            pop_cv_.<span class=\"built_in\">wait</span>(lock, [<span class=\"keyword\">this</span>] &#123; <span class=\"keyword\">return</span> !<span class=\"keyword\">this</span>-&gt;q_.<span class=\"built_in\">full</span>(); &#125;);</span><br><span class=\"line\">            q_.<span class=\"built_in\">push_back</span>(std::<span class=\"built_in\">move</span>(item));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        push_cv_.<span class=\"built_in\">notify_one</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//overrun_oldest 覆盖旧日志模式下使用</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">enqueue_nowait</span><span class=\"params\">(T &amp;&amp;item)</span> </span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"function\">std::unique_lock&lt;std::mutex&gt; <span class=\"title\">lock</span><span class=\"params\">(queue_mutex_)</span></span>;</span><br><span class=\"line\">            q_.<span class=\"built_in\">push_back</span>(std::<span class=\"built_in\">move</span>(item));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        push_cv_.<span class=\"built_in\">notify_one</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//覆盖新日志模式下使用</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">enqueue_if_have_room</span><span class=\"params\">(T &amp;&amp;item)</span> </span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"type\">bool</span> pushed = <span class=\"literal\">false</span>;</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"function\">std::unique_lock&lt;std::mutex&gt; <span class=\"title\">lock</span><span class=\"params\">(queue_mutex_)</span></span>;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (!q_.<span class=\"built_in\">full</span>()) &#123;</span><br><span class=\"line\">                q_.<span class=\"built_in\">push_back</span>(std::<span class=\"built_in\">move</span>(item));</span><br><span class=\"line\">                pushed = <span class=\"literal\">true</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (pushed) &#123;</span><br><span class=\"line\">            push_cv_.<span class=\"built_in\">notify_one</span>();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            ++discard_counter_;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">dequeue</span><span class=\"params\">(T &amp;popped_item)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"function\">std::unique_lock&lt;std::mutex&gt; <span class=\"title\">lock</span><span class=\"params\">(queue_mutex_)</span></span>;</span><br><span class=\"line\">            push_cv_.<span class=\"built_in\">wait</span>(lock, [<span class=\"keyword\">this</span>] &#123; <span class=\"keyword\">return</span> !<span class=\"keyword\">this</span>-&gt;q_.<span class=\"built_in\">empty</span>(); &#125;);</span><br><span class=\"line\">            popped_item = std::<span class=\"built_in\">move</span>(q_.<span class=\"built_in\">front</span>());</span><br><span class=\"line\">            q_.<span class=\"built_in\">pop_front</span>();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        pop_cv_.<span class=\"built_in\">notify_one</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">    std::mutex queue_mutex_; <span class=\"comment\">//全局锁，保护线程安全</span></span><br><span class=\"line\">    std::condition_variable push_cv_; <span class=\"comment\">//针对消费者的条件变量，等待非空，通知可读</span></span><br><span class=\"line\">    std::condition_variable pop_cv_; <span class=\"comment\">//针对生产者的条件变量，等待不满，通知可写</span></span><br><span class=\"line\">    spdlog::details::circular_q&lt;T&gt; q_;</span><br><span class=\"line\">    std::atomic&lt;<span class=\"type\">size_t</span>&gt; discard_counter_&#123;<span class=\"number\">0</span>&#125;;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>通过相关的源代码可以看出来，只有在阻塞模式下，生产者线程才会等待队列进入可写状态，其他时候均当队列满的时候都会覆盖消息；但是无论在什么模式下，所有的生产者和消费者都会去争夺互斥锁，保证线程安全；</p>\n<h1 id=\"一些建议\"><a href=\"#一些建议\" class=\"headerlink\" title=\"一些建议\"></a>一些建议</h1><p>在使用的时候，虽然spdlog支持多消费模式，但是理论上写日志这个操作是IO密集型的操作，性能的瓶颈不在cpu上，多线程读取是没必要的，还会增加锁的损耗，所以多线程的消费者是没必要。<br>并且多个消费者无法保证日志的输出顺序，在实际的测试中也发现，单个消费者的吞吐量是比多个消费者更高，所以建议将线程池的线程数设置为1</p>\n","excerpt":"<h1 id=\"引言\"><a href=\"#引言\" class=\"headerlink\" title=\"引言\"></a>引言</h1><p>在之前的工作中使用spdlog这个开源库封装了一个异步的日志模块供上层应用使用，并借着这个机会学习阅读了spdlog的源码，在使用和阅读的过程中有一些心得，也踩了一些坑，最近终于稍微闲暇下来，准备将自己阅读源码和分析源码过程记录下来，方便日后自己的学习和复盘。</p>","more":"<h2 id=\"spdlog的优势\"><a href=\"#spdlog的优势\" class=\"headerlink\" title=\"spdlog的优势\"></a>spdlog的优势</h2><p><strong>便于集成</strong>：提供了头文件模式，可以直接在源码中集成</p>\n<p><strong>跨平台</strong>： 支持windows,linux,android等多个平台</p>\n<p><strong>功能丰富</strong>： 提供了同步，异步日志等多种日志模式，并且提供了丰富的格式化选择和日志输出选择 </p>\n<h2 id=\"阅读导航\"><a href=\"#阅读导航\" class=\"headerlink\" title=\"阅读导航\"></a>阅读导航</h2><p>在阅读spdlog源码，分析spdlog是怎么使用同一套接口支持同步和异步日志，以及丰富的日志类型的机制的时候，当时是从spdlog提供的异步日志的demo出发，分析日志消息是怎么在各个类之间流转，从用户输入到日志打印都经历了那些类和函数。以下是我的阅读过程：</p>\n<ol>\n<li><strong>从demo出发</strong>：追踪日志消息的产生，处理和输出路径</li>\n<li><strong>梳理类和函数的调用链</strong>：通过调试和阅读源码，理清日志消息流转中设计的主要类和函数调用关系</li>\n<li><strong>分析协作机制</strong>：理解这个类是怎么通过消息传递和多态机制协作，完成日志功能</li>\n<li><strong>可视化设计</strong>：梳理出关键类之后，绘制出类图，进一步明确设计思路和拓展方式</li>\n</ol>\n<p>以上内容是我阅读源码的思路，也是这篇文章的主要脉络，读者可以通过这个思路更好的理解这篇文章，也可以通过这个方式去自己了解想要理解spdlog源码中的其他部分</p>\n<p><strong>注：本文分析的源码为spdlog的v1.15.1版本</strong></p>\n<h1 id=\"spdlog异步机制解析\"><a href=\"#spdlog异步机制解析\" class=\"headerlink\" title=\"spdlog异步机制解析\"></a>spdlog异步机制解析</h1><h2 id=\"异步测试demo\"><a href=\"#异步测试demo\" class=\"headerlink\" title=\"异步测试demo\"></a>异步测试demo</h2><p>spdlog官方提供了异步日志的使用demo,包括单文件和多文件的异步日志demo</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;spdlog/async.h&quot;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;spdlog/sinks/basic_file_sink.h&quot;</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">async_example</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">auto</span> async_file = spdlog::<span class=\"built_in\">basic_logger_mt</span>&lt;spdlog::async_factory&gt;(<span class=\"string\">&quot;async_file_logger&quot;</span>, <span class=\"string\">&quot;logs/async_log.txt&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;spdlog/async.h&quot;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;spdlog/sinks/stdout_color_sinks.h&quot;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;spdlog/sinks/rotating_file_sink.h&quot;</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">multi_sink_example2</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    spdlog::<span class=\"built_in\">init_thread_pool</span>(<span class=\"number\">8192</span>, <span class=\"number\">1</span>);</span><br><span class=\"line\">    <span class=\"keyword\">auto</span> stdout_sink = std::<span class=\"built_in\">make_shared</span>&lt;spdlog::sinks::stdout_color_sink_mt &gt;();</span><br><span class=\"line\">    <span class=\"keyword\">auto</span> rotating_sink = std::<span class=\"built_in\">make_shared</span>&lt;spdlog::sinks::rotating_file_sink_mt&gt;(<span class=\"string\">&quot;mylog.txt&quot;</span>, <span class=\"number\">1024</span>*<span class=\"number\">1024</span>*<span class=\"number\">10</span>, <span class=\"number\">3</span>);</span><br><span class=\"line\">    std::vector&lt;spdlog::sink_ptr&gt; sinks &#123;stdout_sink, rotating_sink&#125;;</span><br><span class=\"line\">    <span class=\"keyword\">auto</span> logger = std::<span class=\"built_in\">make_shared</span>&lt;spdlog::async_logger&gt;(<span class=\"string\">&quot;loggername&quot;</span>, sinks.<span class=\"built_in\">begin</span>(), sinks.<span class=\"built_in\">end</span>(), spdlog::<span class=\"built_in\">thread_pool</span>(), spdlog::async_overflow_policy::block);</span><br><span class=\"line\">    spdlog::<span class=\"built_in\">register_logger</span>(logger);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>我们从最简答的单文件的异步日志demo入手，使用这个单文件的异步日志进行静态的字符串打印</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;spdlog/async.h&quot;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;spdlog/sinks/basic_file_sink.h&quot;</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">async_example</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">auto</span> async_file = spdlog::<span class=\"built_in\">basic_logger_mt</span>&lt;spdlog::async_factory&gt;(<span class=\"string\">&quot;async_file_logger&quot;</span>, <span class=\"string\">&quot;logs/async_log.txt&quot;</span>);</span><br><span class=\"line\">    async_file-&gt;<span class=\"built_in\">info</span>(<span class=\"string\">&quot;message&quot;</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"日志消息流转\"><a href=\"#日志消息流转\" class=\"headerlink\" title=\"日志消息流转\"></a>日志消息流转</h2><p>以info(“message”)这个过程为例进行测试，整个日志消息的流转过程如下：</p>\n<h3 id=\"日志生产\"><a href=\"#日志生产\" class=\"headerlink\" title=\"日志生产\"></a>日志生产</h3><ol>\n<li>logger对象指针通过info这个模板函数根据参数类型进行匹配，调用log这个模板方法<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"keyword\">typename</span> T&gt;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">info</span><span class=\"params\">(<span class=\"type\">const</span> T &amp;msg)</span> </span>&#123;</span><br><span class=\"line\">     <span class=\"built_in\">log</span>(level::info, msg);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li>log这个模板方法根据参数类型进行匹配，调用log_it_这个函数<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">log</span><span class=\"params\">(source_loc loc, level::level_enum lvl, <span class=\"type\">string_view_t</span> msg)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"type\">bool</span> log_enabled = <span class=\"built_in\">should_log</span>(lvl);</span><br><span class=\"line\">    <span class=\"type\">bool</span> traceback_enabled = tracer_.<span class=\"built_in\">enabled</span>();</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!log_enabled &amp;&amp; !traceback_enabled) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\">details::log_msg <span class=\"title\">log_msg</span><span class=\"params\">(loc, name_, lvl, msg)</span></span>;</span><br><span class=\"line\">    <span class=\"built_in\">log_it_</span>(log_msg, log_enabled, traceback_enabled);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li>在log_it_这个方法里，会调用logger这个类的虚函数sink_it_<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">logger::log_it_</span><span class=\"params\">(<span class=\"type\">const</span> spdlog::details::log_msg &amp;log_msg,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">                                   <span class=\"type\">bool</span> log_enabled,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">                                   <span class=\"type\">bool</span> traceback_enabled)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (log_enabled) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">sink_it_</span>(log_msg);<span class=\"comment\">//实际调用的async_logger这个类的sink_it_方法</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (traceback_enabled) &#123;</span><br><span class=\"line\">        tracer_.<span class=\"built_in\">push_back</span>(log_msg);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li>在async_logger的sink_it_函数中，日志消息最终被封装成async_msg，并加入mpmc_queue这个队列中<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">void</span> spdlog::async_logger::<span class=\"built_in\">sink_it_</span>(<span class=\"type\">const</span> details::log_msg &amp;msg) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">auto</span> pool_ptr = thread_pool_.<span class=\"built_in\">lock</span>()) &#123;</span><br><span class=\"line\">        pool_ptr-&gt;<span class=\"built_in\">post_log</span>(<span class=\"built_in\">shared_from_this</span>(), msg, overflow_policy_);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">throw_spdlog_ex</span>(<span class=\"string\">&quot;async log: thread pool doesn&#x27;t exist anymore&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//构造一个async_msg，包含日志消息和async_logger的弱指针（shared_from_this()），然后调用post_async_msg_</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">thread_pool::post_log</span><span class=\"params\">(async_logger_ptr &amp;&amp;worker_ptr, <span class=\"type\">const</span> details::log_msg &amp;msg, async_overflow_policy overflow_policy)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\">async_msg <span class=\"title\">async_m</span><span class=\"params\">(std::move(worker_ptr), async_msg_type::log, msg)</span></span>;</span><br><span class=\"line\">    <span class=\"built_in\">post_async_msg_</span>(std::<span class=\"built_in\">move</span>(async_m), overflow_policy);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//将async_msg入队到多生产者单消费者队列（mpsc_que）中，支持不同的溢出策略（如阻塞、丢弃新消息或覆盖旧消息）</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">thread_pool::post_async_msg_</span><span class=\"params\">(async_msg &amp;&amp;new_msg, async_overflow_policy overflow_policy)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (overflow_policy == async_overflow_policy::block) &#123;</span><br><span class=\"line\">        q_.<span class=\"built_in\">enqueue</span>(std::<span class=\"built_in\">move</span>(new_msg));</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (overflow_policy == async_overflow_policy::overrun_oldest) &#123;</span><br><span class=\"line\">        q_.<span class=\"built_in\">enqueue_nowait</span>(std::<span class=\"built_in\">move</span>(new_msg));</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        q_.<span class=\"built_in\">enqueue_if_have_room</span>(std::<span class=\"built_in\">move</span>(new_msg));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ol>\n<h3 id=\"日志消费\"><a href=\"#日志消费\" class=\"headerlink\" title=\"日志消费\"></a>日志消费</h3><ol>\n<li>线程池的工作线程将不断从队列中取出async_msg消息，并根据异步日志的类型不同的处理<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">thread_pool::worker_loop_</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (<span class=\"built_in\">process_next_msg_</span>()) &#123;&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//process_next_msg_从队列中取出async_msg，根据消息类型执行操作。</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">bool</span>  <span class=\"title\">thread_pool::process_next_msg_</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    async_msg incoming_async_msg;</span><br><span class=\"line\">    q_.<span class=\"built_in\">dequeue</span>(incoming_async_msg);</span><br><span class=\"line\">    <span class=\"keyword\">switch</span> (incoming_async_msg.msg_type) &#123;</span><br><span class=\"line\">        <span class=\"comment\">//对于log类型，调用async_logger::backend_sink_it</span></span><br><span class=\"line\">        <span class=\"keyword\">case</span> async_msg_type::log: &#123;</span><br><span class=\"line\">            incoming_async_msg.worker_ptr-&gt;<span class=\"built_in\">backend_sink_it_</span>(incoming_async_msg);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//对于flush类型，调用async_logger::backend_sink_it</span></span><br><span class=\"line\">        <span class=\"keyword\">case</span> async_msg_type::flush: &#123;</span><br><span class=\"line\">            incoming_async_msg.worker_ptr-&gt;<span class=\"built_in\">backend_flush_</span>();</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\">//对于terminate类型，结束工作线程</span></span><br><span class=\"line\">        <span class=\"keyword\">case</span> async_msg_type::terminate: &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">default</span>: &#123;</span><br><span class=\"line\">            <span class=\"built_in\">assert</span>(<span class=\"literal\">false</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li>在async_logger::backend_sink_it_中，async_logger遍历其持有的所有sinks_，调用每个sink的log方法<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">async_logger::backend_sink_it_</span><span class=\"params\">(<span class=\"type\">const</span> details::log_msg &amp;msg)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">auto</span> &amp;sink : sinks_) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (sink-&gt;<span class=\"built_in\">should_log</span>(msg.level)) &#123;</span><br><span class=\"line\">            sink-&gt;<span class=\"built_in\">log</span>(msg);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">//强制日志进行输出</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"built_in\">should_flush_</span>(msg)) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">backend_flush_</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li>spdlog中的sink类都是继承自base_sink这个类，在base_sink的log方法中，调用了sink_it_这个虚方法，进行了具体的打印操作<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"keyword\">typename</span> Mutex&gt;</span><br><span class=\"line\"><span class=\"type\">void</span> base_sink&lt;Mutex&gt;::<span class=\"built_in\">log</span>(<span class=\"type\">const</span> details::log_msg &amp;msg) &#123;</span><br><span class=\"line\">    <span class=\"function\">std::lock_guard&lt;Mutex&gt; <span class=\"title\">lock</span><span class=\"params\">(mutex_)</span></span>;</span><br><span class=\"line\">    <span class=\"built_in\">sink_it_</span>(msg);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li>以basic_file_sink这个类为例，在这个方法中，使用格式化器格式化了日志，并且将日志消息写入文件<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"keyword\">typename</span> Mutex&gt;</span><br><span class=\"line\"><span class=\"type\">void</span> basic_file_sink&lt;Mutex&gt;::<span class=\"built_in\">sink_it_</span>(<span class=\"type\">const</span> details::log_msg &amp;msg) &#123;</span><br><span class=\"line\">    <span class=\"type\">memory_buf_t</span> formatted;</span><br><span class=\"line\">    base_sink&lt;Mutex&gt;::formatter_-&gt;format(msg, formatted);</span><br><span class=\"line\">    file_helper_.<span class=\"built_in\">write</span>(formatted);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n上述过程就是，就是整个异步过程中日志消息的整个流程，通过这个流程我们可以发现，spdlog的异步模式就是经典的生产者，消费者模式，前端通过logger的打印日志的log方法将日志消息写入队列，线程池中的后端线程不断从队列中取出异步消息，根据异步消息调用async_logger本身的方法进行处理，这样就实现了异步的日志写入。</li>\n</ol>\n<p>可以参考下图更加直观的感受这个过程(图片来源: <a href=\"https://www.cnblogs.com/shuqin/p/12214439.html\">https://www.cnblogs.com/shuqin/p/12214439.html</a>)<br><img src=\"/images/spdlog_seq.png\" alt=\"spdlog_seq.png\"></p>\n<h3 id=\"强制刷新与结束线程\"><a href=\"#强制刷新与结束线程\" class=\"headerlink\" title=\"强制刷新与结束线程\"></a>强制刷新与结束线程</h3><p>在上面线程中的工作中提到了三种异步日志消息，<code>log</code>，<code>flush</code>,<code>terminate</code>。log类型的消息是用户写日志的时候产生的，那么另外两种消息是什么时候产生的呢？</p>\n<p>spdlog支持手动强制日志输出，用户调用logger-&gt;flush()时，spdlog强制刷新日志:</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//async_logger::flush_生成一个flush类型的async_msg，投递到线程池</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">async_logger::flush_</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">auto</span> pool_ptr = thread_pool_.<span class=\"built_in\">lock</span>()) &#123;</span><br><span class=\"line\">        pool_ptr-&gt;<span class=\"built_in\">post_flush</span>(<span class=\"built_in\">shared_from_this</span>(), overflow_policy_);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">thread_pool::post_flush</span><span class=\"params\">(async_logger_ptr &amp;&amp;worker_ptr,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">                                           async_overflow_policy overflow_policy)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">post_async_msg_</span>(<span class=\"built_in\">async_msg</span>(std::<span class=\"built_in\">move</span>(worker_ptr), async_msg_type::flush), overflow_policy);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>线程池处理flush消息，调用async_logger::backend_flush_，最终触发每个sink的flush操作。</p>\n<p>spdlog的线程池在调用析构函数的时候，会产生<code>terminate</code>消息，优雅的结束这个工作线程</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">thread_pool::~<span class=\"built_in\">thread_pool</span>() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">size_t</span> i = <span class=\"number\">0</span>; i &lt; threads_.<span class=\"built_in\">size</span>(); i++) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">post_async_msg_</span>(<span class=\"built_in\">async_msg</span>(async_msg_type::terminate), async_overflow_policy::block);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">auto</span> &amp;t : threads_) &#123;</span><br><span class=\"line\">        t.<span class=\"built_in\">join</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"主要类\"><a href=\"#主要类\" class=\"headerlink\" title=\"主要类\"></a>主要类</h2><h3 id=\"类层次结构\"><a href=\"#类层次结构\" class=\"headerlink\" title=\"类层次结构\"></a>类层次结构</h3><p>通过上面分析日志消息流转的过程中可以发现，实现异步日志功能的主要类包括，logger，async_logger,sink,base_sink，thread_pool和mpmc_blocking_queue这几个类。<br>他们的类关系图如下所示：<br><img src=\"/images/spdlog.png\" alt=\"spdlog_class.png\"><br><strong>logger</strong>：用户打印日志的接口基类</p>\n<p><strong>formatter</strong>：格式化日志消息的基类</p>\n<p><strong>sink</strong>: 日志输出的基类</p>\n<p>spdlog通过让logger组合sink，sink组合formatter，并通过合理的职责划分和接口定义，实现了良好的可拓展性，用户只需要继承sink接口，实现sink_it_和flush方法就可以实现自定义sink的实现，实现formatter类的format函数就能实现自定义格式化器</p>\n<h3 id=\"mpmc-blocking-queue分析\"><a href=\"#mpmc-blocking-queue分析\" class=\"headerlink\" title=\"mpmc_blocking_queue分析\"></a>mpmc_blocking_queue分析</h3><p>mpmc_blocking_queue是存储异步日志消息的关键类，使用互斥锁和条件变量保证线程安全，内部使用环形队列(circular_q.h)存储数据</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"keyword\">typename</span> T&gt;</span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">mpmc_blocking_queue</span> </span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"keyword\">using</span> item_type = T;</span><br><span class=\"line\">   </span><br><span class=\"line\">    <span class=\"comment\">//阻塞模式下调用</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">enqueue</span><span class=\"params\">(T &amp;&amp;item)</span> </span>&#123;</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"function\">std::unique_lock&lt;std::mutex&gt; <span class=\"title\">lock</span><span class=\"params\">(queue_mutex_)</span></span>;</span><br><span class=\"line\">            pop_cv_.<span class=\"built_in\">wait</span>(lock, [<span class=\"keyword\">this</span>] &#123; <span class=\"keyword\">return</span> !<span class=\"keyword\">this</span>-&gt;q_.<span class=\"built_in\">full</span>(); &#125;);</span><br><span class=\"line\">            q_.<span class=\"built_in\">push_back</span>(std::<span class=\"built_in\">move</span>(item));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        push_cv_.<span class=\"built_in\">notify_one</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//overrun_oldest 覆盖旧日志模式下使用</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">enqueue_nowait</span><span class=\"params\">(T &amp;&amp;item)</span> </span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"function\">std::unique_lock&lt;std::mutex&gt; <span class=\"title\">lock</span><span class=\"params\">(queue_mutex_)</span></span>;</span><br><span class=\"line\">            q_.<span class=\"built_in\">push_back</span>(std::<span class=\"built_in\">move</span>(item));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        push_cv_.<span class=\"built_in\">notify_one</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//覆盖新日志模式下使用</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">enqueue_if_have_room</span><span class=\"params\">(T &amp;&amp;item)</span> </span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"type\">bool</span> pushed = <span class=\"literal\">false</span>;</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"function\">std::unique_lock&lt;std::mutex&gt; <span class=\"title\">lock</span><span class=\"params\">(queue_mutex_)</span></span>;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (!q_.<span class=\"built_in\">full</span>()) &#123;</span><br><span class=\"line\">                q_.<span class=\"built_in\">push_back</span>(std::<span class=\"built_in\">move</span>(item));</span><br><span class=\"line\">                pushed = <span class=\"literal\">true</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (pushed) &#123;</span><br><span class=\"line\">            push_cv_.<span class=\"built_in\">notify_one</span>();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            ++discard_counter_;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">dequeue</span><span class=\"params\">(T &amp;popped_item)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"function\">std::unique_lock&lt;std::mutex&gt; <span class=\"title\">lock</span><span class=\"params\">(queue_mutex_)</span></span>;</span><br><span class=\"line\">            push_cv_.<span class=\"built_in\">wait</span>(lock, [<span class=\"keyword\">this</span>] &#123; <span class=\"keyword\">return</span> !<span class=\"keyword\">this</span>-&gt;q_.<span class=\"built_in\">empty</span>(); &#125;);</span><br><span class=\"line\">            popped_item = std::<span class=\"built_in\">move</span>(q_.<span class=\"built_in\">front</span>());</span><br><span class=\"line\">            q_.<span class=\"built_in\">pop_front</span>();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        pop_cv_.<span class=\"built_in\">notify_one</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">    std::mutex queue_mutex_; <span class=\"comment\">//全局锁，保护线程安全</span></span><br><span class=\"line\">    std::condition_variable push_cv_; <span class=\"comment\">//针对消费者的条件变量，等待非空，通知可读</span></span><br><span class=\"line\">    std::condition_variable pop_cv_; <span class=\"comment\">//针对生产者的条件变量，等待不满，通知可写</span></span><br><span class=\"line\">    spdlog::details::circular_q&lt;T&gt; q_;</span><br><span class=\"line\">    std::atomic&lt;<span class=\"type\">size_t</span>&gt; discard_counter_&#123;<span class=\"number\">0</span>&#125;;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>通过相关的源代码可以看出来，只有在阻塞模式下，生产者线程才会等待队列进入可写状态，其他时候均当队列满的时候都会覆盖消息；但是无论在什么模式下，所有的生产者和消费者都会去争夺互斥锁，保证线程安全；</p>\n<h1 id=\"一些建议\"><a href=\"#一些建议\" class=\"headerlink\" title=\"一些建议\"></a>一些建议</h1><p>在使用的时候，虽然spdlog支持多消费模式，但是理论上写日志这个操作是IO密集型的操作，性能的瓶颈不在cpu上，多线程读取是没必要的，还会增加锁的损耗，所以多线程的消费者是没必要。<br>并且多个消费者无法保证日志的输出顺序，在实际的测试中也发现，单个消费者的吞吐量是比多个消费者更高，所以建议将线程池的线程数设置为1</p>"},{"title":"spdlog源码阅读:02.sink分析","date":"2025-08-25T16:00:00.000Z","_content":"## 引言\n上一篇文章讲解了主要spdlog的异步模式及其实现方式，其中讲到了spdlog中负责将日志输出到具体的地方的类是sink。这篇文章就会具体的分析daily_file_sink和rotating_file_sink的部分源码，分析下spdlog是怎么实现按日分割和按尺寸分割日志的。\n<!-- more -->\n# daily_file_sink\n在每天特定的时间点创建新的日志文件\n## 基础配置\n在使用daily_file_sink的时候，有几个重要的构造函数的参数\n\n**rotation_hour**:分割的小时\n\n**rotation_minute**：分割的分钟\n\n**truncate**:是否截断文件\n\n**max_files**：最大的文件数目，设定为0的时候不限制文件个数，否则保留设置的max_files文件个数\n## 实现原理\ndaily_file_sink是通过被动触发日志文件的分割的，当用户写入日志的时候，daily_file_sink会通过日志消息的时间和计算的需要转轮的时间判断是否需要将日志输出到新的文件中，并通过一个环形队列管理这些日志文件，当文件数量超过设定数目的时候，删除旧的文件。\n### 计算分割时间点\n```c++\nlog_clock::time_point next_rotation_tp_() {\n        auto now = log_clock::now(); //获取当前时间\n        tm date = now_tm(now);\n        \n        //使用配置的时间作为轮转日志的时间\n        date.tm_hour = rotation_h_; \n        date.tm_min = rotation_m_;\n        date.tm_sec = 0;\n        auto rotation_time = log_clock::from_time_t(std::mktime(&date));\n        //当前时间还未到计算出的轮转时间\n        if (rotation_time > now) {\n            return rotation_time;\n        }\n        //当前时间超过了设定的轮转时间，直接换到下一点时间点作为轮转时间\n        return {rotation_time + std::chrono::hours(24)};\n    }\n```\n每次sink初始化或者发生日志轮转的时候，就会调用这个函数计算下一次轮转日志的时间点。这个函数会使用用户配置的rotation_h_和rotation_m_，如果这个时间点过去了，就会那么就是明天的同一时间轮转。\n比如，下午16点启动日志，但是设定是每天6点分割，那么下一次轮转的时间就是第二天的6点，本次不会分割。\n### 文件管理\ndaily_file_sink通过max_files参数限制保留的旧日志文件的个数,并且通过filenames_q_队列维护这些文件，在初始化阶段使用init_filenames_q_去填充这个队列\n\n```c++\nvoid init_filenames_q_() {\n        using details::os::path_exists;\n\n        //环形队列存储文件名\n        filenames_q_ = details::circular_q<filename_t>(static_cast<size_t>(max_files_));\n        std::vector<filename_t> filenames;\n        auto now = log_clock::now();\n        \n        //按照时间倒序查找现有的日志文件\n        while (filenames.size() < max_files_) {\n            //按照时间计算文件名\n            auto filename = FileNameCalc::calc_filename(base_filename_, now_tm(now));\n            \n            //当前文件不存在，立刻停止\n            if (!path_exists(filename)) {\n                break;\n            }\n            filenames.emplace_back(filename);\n            now -= std::chrono::hours(24);\n        }\n        // 将找到的文件名按反向顺序（最旧的在前）添加到队列中\n        // 这确保了当队列满时，最旧的文件名位于队列前端，准备被删除。\n        for (auto iter = filenames.rbegin(); iter != filenames.rend(); ++iter) {\n            filenames_q_.push_back(std::move(*iter));\n        }\n    }\n```\n这个初始化过程巧妙地查找了前几天的现有日志文件，并将它们添加到队列中，使得找到的最旧的文件位于队列的前面，以便在队列满时首先被移除。\n### 写入与转轮\n当写入的时候，会根据日志消息的时间判断是否需要轮转，并且根据时间生成新的文件名，生成新的日志文件，写入日志消息，并且清理旧文件\n```c++\n void sink_it_(const details::log_msg &msg) override {\n        //根据日志时间进行判断是否需要转轮\n        auto time = msg.time;\n        bool should_rotate = time >= rotation_tp_;\n        if (should_rotate) {\n            auto filename = FileNameCalc::calc_filename(base_filename_, now_tm(time));\n            \n            //打开新文件，重新计算轮转时间\n            file_helper_.open(filename, truncate_);\n            rotation_tp_ = next_rotation_tp_();\n        }\n        memory_buf_t formatted;\n        base_sink<Mutex>::formatter_->format(msg, formatted);\n        file_helper_.write(formatted);\n\n        // 轮转之后，并且max_files_>0，清理老文件\n        if (should_rotate && max_files_ > 0) {\n            delete_old_();\n        }\n    }\n```\n\n```c++\nvoid delete_old_() {\n        using details::os::filename_to_str;\n        using details::os::remove_if_exists;\n\n        filename_t current_file = file_helper_.filename();\n        //队列满了，进行操作，删除最老的的文件\n        if (filenames_q_.full()) {\n            auto old_filename = std::move(filenames_q_.front());\n            filenames_q_.pop_front(); //从队列中删除最老的\n            bool ok = remove_if_exists(old_filename) == 0; //从磁盘删除\n            if (!ok) {\n                filenames_q_.push_back(std::move(current_file));\n                throw_spdlog_ex(\"Failed removing daily file \" + filename_to_str(old_filename),\n                                errno);\n            }\n        }\n        //当前的最新文件加入队列\n        filenames_q_.push_back(std::move(current_file));\n    }\n```\n\n本质上，daily_file_sink 确保日志按天分隔，在指定时间启动新文件，并可选地清理超过设定天数的旧文件。\n# rotating_file_sink\n日志文档达到固定的大小后，输出生成新的日志文件\n## 基础配置\n**max_size**：文件最大的字节数\n\n**max_files**：最大的文件个数，0的时候，一直只有一个文件存在\n## 实现原理\n通过日志的写入被动触发日志文件的转轮，当原文件的大小和要写入的字节大小总和超过设定值的时候触发日志的轮转，生成新文件，并通过将日志文件重名维持文件个数\n### 初始化\n创建日志的时候，rotating_file_sink会打开基础的文件，它计算初始大小，并且如果 rotate_on_open 为 true 且文件不为空，可以选择立即执行一次轮转。\n```c++\ntemplate <typename Mutex>\nrotating_file_sink<Mutex>::rotating_file_sink(\n    filename_t base_filename,\n    std::size_t max_size,\n    std::size_t max_files,\n    bool rotate_on_open,\n    const file_event_handlers &event_handlers)\n    : base_filename_(std::move(base_filename)),\n      max_size_(max_size),\n      max_files_(max_files),\n      file_helper_{event_handlers} {\n      \n      //配置参数的检查\n    if (max_size == 0) {\n        throw_spdlog_ex(\"rotating sink constructor: max_size arg cannot be zero\");\n    }\n\n    if (max_files > 200000) {\n        throw_spdlog_ex(\"rotating sink constructor: max_files arg cannot exceed 200000\");\n    }\n    \n    //为0的时候是原名打开日志文件\n    file_helper_.open(calc_filename(base_filename_, 0));\n    current_size_ = file_helper_.size(); \n    \n    //打开的时候如果配置true并且文件大小不为0，开始轮转\n    if (rotate_on_open && current_size_ > 0) {\n        rotate_();\n        current_size_ = 0;\n    }\n}\n```\n### 文件重命名\n日志的轮转逻辑的核心在rotate_函数中，主要是处理重命名逻辑，根据max_files_参数维持备份文件\n比如是3,日志文件的原始名是log.txt，会存在log.txt日志文件和log.1.txt,log.2.txt,log.3.txt等备份文件\n```c++\n// 示例: base_filename=\"log.txt\", max_files=3\n// 轮转顺序:\n// 1. 删除 log.3.txt (如果存在) --> 实际是第2步重命名时覆盖，或者rename前删除\n// 2. 将 log.2.txt 重命名为 log.3.txt\n// 3. 将 log.1.txt 重命名为 log.2.txt\n// 4. 将 log.txt 重命名为 log.1.txt\n// 5. 重新打开 log.txt (截断) 以写入新日志\n\ntemplate <typename Mutex>\nvoid rotating_file_sink<Mutex>::rotate_() {\n    using details::os::filename_to_str;\n    using details::os::path_exists;\n\n    file_helper_.close(); // 首先关闭当前日志文件\n\n    // 从最旧的备份文件索引开始，向下迭代到当前文件 (索引 0)\n    for (auto i = max_files_; i > 0; --i) {\n        filename_t src = calc_filename(base_filename_, i - 1); // 例如 log.1.txt (当 i=2), log.txt (当 i=1)\n        if (!path_exists(src)) {\n            continue; // 如果源文件不存在，则跳过\n        }\n        filename_t target = calc_filename(base_filename_, i); // 例如 log.2.txt (当 i=2), log.1.txt (当 i=1)\n\n        // 将 src 重命名为 target。如果 target 已存在，会先删除它。\n        if (!rename_file_(src, target)) {\n            // 处理重命名失败 (重试逻辑并抛出异常)\n            // ... (错误处理如提供的代码所示) ...\n            file_helper_.reopen(true); // 即使重命名失败，也要截断日志文件以防超出限制！\n            current_size_ = 0;\n            throw_spdlog_ex(\"rotating_file_sink: failed renaming \" + filename_to_str(src) + \" to \" + filename_to_str(target), errno);\n        }\n    }\n    // 重新打开基础日志文件，并进行截断，以便重新开始写入\n    file_helper_.reopen(true);\n}\n```\n轮转是向后工作的：最旧的文件 (base_filename.max_files.ext) 被删除， 然后 base_filename.(max_files-1).ext 被重命名为 base_filename.max_files.ext，依此类推，直到当前的 base_filename.ext 被重命名为 base_filename.1.ext 。最后，base_filename.ext 被重新打开为一个空文件。\n### 写入与轮转\n当日志消息准备写入的时候，会首先格式化日志消息，然后计算新大小，检查是否应该进行轮转。需要轮转时flush文件然后轮转日志文件。完成之后写入日志消息。\n```c++\ntemplate <typename Mutex>\nvoid rotating_file_sink<Mutex>::sink_it_(const details::log_msg &msg) {\n    memory_buf_t formatted;\n    base_sink<Mutex>::formatter_->format(msg, formatted);\n    auto new_size = current_size_ + formatted.size();\n\n    if (new_size > max_size_) {\n        file_helper_.flush();\n        // 仅当文件非空时才轮转，避免对空文件的轮转\n        if (file_helper_.size() > 0) { \n            rotate_();\n            new_size = formatted.size(); // 新文件的大小就是这条消息的大小\n        }\n    }\n    file_helper_.write(formatted);\n    current_size_ = new_size;\n}\n```\n此 sink 确保单个日志文件不会超过特定大小，通过保留分布在多个文件中的最新日志数据的滚动窗口来管理磁盘空间。\n# 差异对比\n\n| 特性             | daily_file_sink                   |         rotating_file_sink         |\n|:-----------------|:---------------------------------:|:----------------------------------:|\n| **触发条件**      | 固定时间点（如每日 00:00）          |       文件大小达到 `max_size` 时触发        |\n| **文件名规则**    | 按时间生成（如 `app-2023-09-15.log`） |      基础名 + 序号（如 `app.log.1`）       |\n| **旧文件处理**    | 删除超过 `max_files` 天数的文件      |         重命名后循环覆盖（保留固定数量备份）         |\n| **时间关联性**    | 强（按时间归档）                   |             弱（按空间需求处理）             |\n| **核心功能**      | 时间驱动的日志归档                 |           磁盘空间控制            |\n\n","source":"_posts/spdlog/spdlog源码阅读:02.sink分析.md","raw":"---\ntitle: \"spdlog源码阅读:02.sink分析\"\ndate: 2025-08-26\ncategories: \n  - 源码分析\n  - spdlog\ntags:\n  - C++\n  - spdlog\n  - 日志系统\n---\n## 引言\n上一篇文章讲解了主要spdlog的异步模式及其实现方式，其中讲到了spdlog中负责将日志输出到具体的地方的类是sink。这篇文章就会具体的分析daily_file_sink和rotating_file_sink的部分源码，分析下spdlog是怎么实现按日分割和按尺寸分割日志的。\n<!-- more -->\n# daily_file_sink\n在每天特定的时间点创建新的日志文件\n## 基础配置\n在使用daily_file_sink的时候，有几个重要的构造函数的参数\n\n**rotation_hour**:分割的小时\n\n**rotation_minute**：分割的分钟\n\n**truncate**:是否截断文件\n\n**max_files**：最大的文件数目，设定为0的时候不限制文件个数，否则保留设置的max_files文件个数\n## 实现原理\ndaily_file_sink是通过被动触发日志文件的分割的，当用户写入日志的时候，daily_file_sink会通过日志消息的时间和计算的需要转轮的时间判断是否需要将日志输出到新的文件中，并通过一个环形队列管理这些日志文件，当文件数量超过设定数目的时候，删除旧的文件。\n### 计算分割时间点\n```c++\nlog_clock::time_point next_rotation_tp_() {\n        auto now = log_clock::now(); //获取当前时间\n        tm date = now_tm(now);\n        \n        //使用配置的时间作为轮转日志的时间\n        date.tm_hour = rotation_h_; \n        date.tm_min = rotation_m_;\n        date.tm_sec = 0;\n        auto rotation_time = log_clock::from_time_t(std::mktime(&date));\n        //当前时间还未到计算出的轮转时间\n        if (rotation_time > now) {\n            return rotation_time;\n        }\n        //当前时间超过了设定的轮转时间，直接换到下一点时间点作为轮转时间\n        return {rotation_time + std::chrono::hours(24)};\n    }\n```\n每次sink初始化或者发生日志轮转的时候，就会调用这个函数计算下一次轮转日志的时间点。这个函数会使用用户配置的rotation_h_和rotation_m_，如果这个时间点过去了，就会那么就是明天的同一时间轮转。\n比如，下午16点启动日志，但是设定是每天6点分割，那么下一次轮转的时间就是第二天的6点，本次不会分割。\n### 文件管理\ndaily_file_sink通过max_files参数限制保留的旧日志文件的个数,并且通过filenames_q_队列维护这些文件，在初始化阶段使用init_filenames_q_去填充这个队列\n\n```c++\nvoid init_filenames_q_() {\n        using details::os::path_exists;\n\n        //环形队列存储文件名\n        filenames_q_ = details::circular_q<filename_t>(static_cast<size_t>(max_files_));\n        std::vector<filename_t> filenames;\n        auto now = log_clock::now();\n        \n        //按照时间倒序查找现有的日志文件\n        while (filenames.size() < max_files_) {\n            //按照时间计算文件名\n            auto filename = FileNameCalc::calc_filename(base_filename_, now_tm(now));\n            \n            //当前文件不存在，立刻停止\n            if (!path_exists(filename)) {\n                break;\n            }\n            filenames.emplace_back(filename);\n            now -= std::chrono::hours(24);\n        }\n        // 将找到的文件名按反向顺序（最旧的在前）添加到队列中\n        // 这确保了当队列满时，最旧的文件名位于队列前端，准备被删除。\n        for (auto iter = filenames.rbegin(); iter != filenames.rend(); ++iter) {\n            filenames_q_.push_back(std::move(*iter));\n        }\n    }\n```\n这个初始化过程巧妙地查找了前几天的现有日志文件，并将它们添加到队列中，使得找到的最旧的文件位于队列的前面，以便在队列满时首先被移除。\n### 写入与转轮\n当写入的时候，会根据日志消息的时间判断是否需要轮转，并且根据时间生成新的文件名，生成新的日志文件，写入日志消息，并且清理旧文件\n```c++\n void sink_it_(const details::log_msg &msg) override {\n        //根据日志时间进行判断是否需要转轮\n        auto time = msg.time;\n        bool should_rotate = time >= rotation_tp_;\n        if (should_rotate) {\n            auto filename = FileNameCalc::calc_filename(base_filename_, now_tm(time));\n            \n            //打开新文件，重新计算轮转时间\n            file_helper_.open(filename, truncate_);\n            rotation_tp_ = next_rotation_tp_();\n        }\n        memory_buf_t formatted;\n        base_sink<Mutex>::formatter_->format(msg, formatted);\n        file_helper_.write(formatted);\n\n        // 轮转之后，并且max_files_>0，清理老文件\n        if (should_rotate && max_files_ > 0) {\n            delete_old_();\n        }\n    }\n```\n\n```c++\nvoid delete_old_() {\n        using details::os::filename_to_str;\n        using details::os::remove_if_exists;\n\n        filename_t current_file = file_helper_.filename();\n        //队列满了，进行操作，删除最老的的文件\n        if (filenames_q_.full()) {\n            auto old_filename = std::move(filenames_q_.front());\n            filenames_q_.pop_front(); //从队列中删除最老的\n            bool ok = remove_if_exists(old_filename) == 0; //从磁盘删除\n            if (!ok) {\n                filenames_q_.push_back(std::move(current_file));\n                throw_spdlog_ex(\"Failed removing daily file \" + filename_to_str(old_filename),\n                                errno);\n            }\n        }\n        //当前的最新文件加入队列\n        filenames_q_.push_back(std::move(current_file));\n    }\n```\n\n本质上，daily_file_sink 确保日志按天分隔，在指定时间启动新文件，并可选地清理超过设定天数的旧文件。\n# rotating_file_sink\n日志文档达到固定的大小后，输出生成新的日志文件\n## 基础配置\n**max_size**：文件最大的字节数\n\n**max_files**：最大的文件个数，0的时候，一直只有一个文件存在\n## 实现原理\n通过日志的写入被动触发日志文件的转轮，当原文件的大小和要写入的字节大小总和超过设定值的时候触发日志的轮转，生成新文件，并通过将日志文件重名维持文件个数\n### 初始化\n创建日志的时候，rotating_file_sink会打开基础的文件，它计算初始大小，并且如果 rotate_on_open 为 true 且文件不为空，可以选择立即执行一次轮转。\n```c++\ntemplate <typename Mutex>\nrotating_file_sink<Mutex>::rotating_file_sink(\n    filename_t base_filename,\n    std::size_t max_size,\n    std::size_t max_files,\n    bool rotate_on_open,\n    const file_event_handlers &event_handlers)\n    : base_filename_(std::move(base_filename)),\n      max_size_(max_size),\n      max_files_(max_files),\n      file_helper_{event_handlers} {\n      \n      //配置参数的检查\n    if (max_size == 0) {\n        throw_spdlog_ex(\"rotating sink constructor: max_size arg cannot be zero\");\n    }\n\n    if (max_files > 200000) {\n        throw_spdlog_ex(\"rotating sink constructor: max_files arg cannot exceed 200000\");\n    }\n    \n    //为0的时候是原名打开日志文件\n    file_helper_.open(calc_filename(base_filename_, 0));\n    current_size_ = file_helper_.size(); \n    \n    //打开的时候如果配置true并且文件大小不为0，开始轮转\n    if (rotate_on_open && current_size_ > 0) {\n        rotate_();\n        current_size_ = 0;\n    }\n}\n```\n### 文件重命名\n日志的轮转逻辑的核心在rotate_函数中，主要是处理重命名逻辑，根据max_files_参数维持备份文件\n比如是3,日志文件的原始名是log.txt，会存在log.txt日志文件和log.1.txt,log.2.txt,log.3.txt等备份文件\n```c++\n// 示例: base_filename=\"log.txt\", max_files=3\n// 轮转顺序:\n// 1. 删除 log.3.txt (如果存在) --> 实际是第2步重命名时覆盖，或者rename前删除\n// 2. 将 log.2.txt 重命名为 log.3.txt\n// 3. 将 log.1.txt 重命名为 log.2.txt\n// 4. 将 log.txt 重命名为 log.1.txt\n// 5. 重新打开 log.txt (截断) 以写入新日志\n\ntemplate <typename Mutex>\nvoid rotating_file_sink<Mutex>::rotate_() {\n    using details::os::filename_to_str;\n    using details::os::path_exists;\n\n    file_helper_.close(); // 首先关闭当前日志文件\n\n    // 从最旧的备份文件索引开始，向下迭代到当前文件 (索引 0)\n    for (auto i = max_files_; i > 0; --i) {\n        filename_t src = calc_filename(base_filename_, i - 1); // 例如 log.1.txt (当 i=2), log.txt (当 i=1)\n        if (!path_exists(src)) {\n            continue; // 如果源文件不存在，则跳过\n        }\n        filename_t target = calc_filename(base_filename_, i); // 例如 log.2.txt (当 i=2), log.1.txt (当 i=1)\n\n        // 将 src 重命名为 target。如果 target 已存在，会先删除它。\n        if (!rename_file_(src, target)) {\n            // 处理重命名失败 (重试逻辑并抛出异常)\n            // ... (错误处理如提供的代码所示) ...\n            file_helper_.reopen(true); // 即使重命名失败，也要截断日志文件以防超出限制！\n            current_size_ = 0;\n            throw_spdlog_ex(\"rotating_file_sink: failed renaming \" + filename_to_str(src) + \" to \" + filename_to_str(target), errno);\n        }\n    }\n    // 重新打开基础日志文件，并进行截断，以便重新开始写入\n    file_helper_.reopen(true);\n}\n```\n轮转是向后工作的：最旧的文件 (base_filename.max_files.ext) 被删除， 然后 base_filename.(max_files-1).ext 被重命名为 base_filename.max_files.ext，依此类推，直到当前的 base_filename.ext 被重命名为 base_filename.1.ext 。最后，base_filename.ext 被重新打开为一个空文件。\n### 写入与轮转\n当日志消息准备写入的时候，会首先格式化日志消息，然后计算新大小，检查是否应该进行轮转。需要轮转时flush文件然后轮转日志文件。完成之后写入日志消息。\n```c++\ntemplate <typename Mutex>\nvoid rotating_file_sink<Mutex>::sink_it_(const details::log_msg &msg) {\n    memory_buf_t formatted;\n    base_sink<Mutex>::formatter_->format(msg, formatted);\n    auto new_size = current_size_ + formatted.size();\n\n    if (new_size > max_size_) {\n        file_helper_.flush();\n        // 仅当文件非空时才轮转，避免对空文件的轮转\n        if (file_helper_.size() > 0) { \n            rotate_();\n            new_size = formatted.size(); // 新文件的大小就是这条消息的大小\n        }\n    }\n    file_helper_.write(formatted);\n    current_size_ = new_size;\n}\n```\n此 sink 确保单个日志文件不会超过特定大小，通过保留分布在多个文件中的最新日志数据的滚动窗口来管理磁盘空间。\n# 差异对比\n\n| 特性             | daily_file_sink                   |         rotating_file_sink         |\n|:-----------------|:---------------------------------:|:----------------------------------:|\n| **触发条件**      | 固定时间点（如每日 00:00）          |       文件大小达到 `max_size` 时触发        |\n| **文件名规则**    | 按时间生成（如 `app-2023-09-15.log`） |      基础名 + 序号（如 `app.log.1`）       |\n| **旧文件处理**    | 删除超过 `max_files` 天数的文件      |         重命名后循环覆盖（保留固定数量备份）         |\n| **时间关联性**    | 强（按时间归档）                   |             弱（按空间需求处理）             |\n| **核心功能**      | 时间驱动的日志归档                 |           磁盘空间控制            |\n\n","slug":"spdlog/spdlog源码阅读:02.sink分析","published":1,"updated":"2025-08-28T12:45:20.497Z","comments":1,"layout":"post","photos":[],"_id":"cmevecvsi001zhfro4livbpck","content":"<h2 id=\"引言\"><a href=\"#引言\" class=\"headerlink\" title=\"引言\"></a>引言</h2><p>上一篇文章讲解了主要spdlog的异步模式及其实现方式，其中讲到了spdlog中负责将日志输出到具体的地方的类是sink。这篇文章就会具体的分析daily_file_sink和rotating_file_sink的部分源码，分析下spdlog是怎么实现按日分割和按尺寸分割日志的。</p>\n<span id=\"more\"></span>\n<h1 id=\"daily-file-sink\"><a href=\"#daily-file-sink\" class=\"headerlink\" title=\"daily_file_sink\"></a>daily_file_sink</h1><p>在每天特定的时间点创建新的日志文件</p>\n<h2 id=\"基础配置\"><a href=\"#基础配置\" class=\"headerlink\" title=\"基础配置\"></a>基础配置</h2><p>在使用daily_file_sink的时候，有几个重要的构造函数的参数</p>\n<p><strong>rotation_hour</strong>:分割的小时</p>\n<p><strong>rotation_minute</strong>：分割的分钟</p>\n<p><strong>truncate</strong>:是否截断文件</p>\n<p><strong>max_files</strong>：最大的文件数目，设定为0的时候不限制文件个数，否则保留设置的max_files文件个数</p>\n<h2 id=\"实现原理\"><a href=\"#实现原理\" class=\"headerlink\" title=\"实现原理\"></a>实现原理</h2><p>daily_file_sink是通过被动触发日志文件的分割的，当用户写入日志的时候，daily_file_sink会通过日志消息的时间和计算的需要转轮的时间判断是否需要将日志输出到新的文件中，并通过一个环形队列管理这些日志文件，当文件数量超过设定数目的时候，删除旧的文件。</p>\n<h3 id=\"计算分割时间点\"><a href=\"#计算分割时间点\" class=\"headerlink\" title=\"计算分割时间点\"></a>计算分割时间点</h3><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">log_clock::time_point <span class=\"title\">next_rotation_tp_</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">auto</span> now = log_clock::<span class=\"built_in\">now</span>(); <span class=\"comment\">//获取当前时间</span></span><br><span class=\"line\">        tm date = <span class=\"built_in\">now_tm</span>(now);</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\">//使用配置的时间作为轮转日志的时间</span></span><br><span class=\"line\">        date.tm_hour = rotation_h_; </span><br><span class=\"line\">        date.tm_min = rotation_m_;</span><br><span class=\"line\">        date.tm_sec = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">auto</span> rotation_time = log_clock::<span class=\"built_in\">from_time_t</span>(std::<span class=\"built_in\">mktime</span>(&amp;date));</span><br><span class=\"line\">        <span class=\"comment\">//当前时间还未到计算出的轮转时间</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (rotation_time &gt; now) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> rotation_time;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//当前时间超过了设定的轮转时间，直接换到下一点时间点作为轮转时间</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> &#123;rotation_time + std::chrono::<span class=\"built_in\">hours</span>(<span class=\"number\">24</span>)&#125;;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<p>每次sink初始化或者发生日志轮转的时候，就会调用这个函数计算下一次轮转日志的时间点。这个函数会使用用户配置的rotation_h_和rotation_m_，如果这个时间点过去了，就会那么就是明天的同一时间轮转。<br>比如，下午16点启动日志，但是设定是每天6点分割，那么下一次轮转的时间就是第二天的6点，本次不会分割。</p>\n<h3 id=\"文件管理\"><a href=\"#文件管理\" class=\"headerlink\" title=\"文件管理\"></a>文件管理</h3><p>daily_file_sink通过max_files参数限制保留的旧日志文件的个数,并且通过filenames_q_队列维护这些文件，在初始化阶段使用init_filenames_q_去填充这个队列</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">init_filenames_q_</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">using</span> details::os::path_exists;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//环形队列存储文件名</span></span><br><span class=\"line\">        filenames_q_ = details::<span class=\"built_in\">circular_q</span>&lt;<span class=\"type\">filename_t</span>&gt;(<span class=\"built_in\">static_cast</span>&lt;<span class=\"type\">size_t</span>&gt;(max_files_));</span><br><span class=\"line\">        std::vector&lt;<span class=\"type\">filename_t</span>&gt; filenames;</span><br><span class=\"line\">        <span class=\"keyword\">auto</span> now = log_clock::<span class=\"built_in\">now</span>();</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\">//按照时间倒序查找现有的日志文件</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span> (filenames.<span class=\"built_in\">size</span>() &lt; max_files_) &#123;</span><br><span class=\"line\">            <span class=\"comment\">//按照时间计算文件名</span></span><br><span class=\"line\">            <span class=\"keyword\">auto</span> filename = FileNameCalc::<span class=\"built_in\">calc_filename</span>(base_filename_, <span class=\"built_in\">now_tm</span>(now));</span><br><span class=\"line\">            </span><br><span class=\"line\">            <span class=\"comment\">//当前文件不存在，立刻停止</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (!<span class=\"built_in\">path_exists</span>(filename)) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            filenames.<span class=\"built_in\">emplace_back</span>(filename);</span><br><span class=\"line\">            now -= std::chrono::<span class=\"built_in\">hours</span>(<span class=\"number\">24</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 将找到的文件名按反向顺序（最旧的在前）添加到队列中</span></span><br><span class=\"line\">        <span class=\"comment\">// 这确保了当队列满时，最旧的文件名位于队列前端，准备被删除。</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">auto</span> iter = filenames.<span class=\"built_in\">rbegin</span>(); iter != filenames.<span class=\"built_in\">rend</span>(); ++iter) &#123;</span><br><span class=\"line\">            filenames_q_.<span class=\"built_in\">push_back</span>(std::<span class=\"built_in\">move</span>(*iter));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<p>这个初始化过程巧妙地查找了前几天的现有日志文件，并将它们添加到队列中，使得找到的最旧的文件位于队列的前面，以便在队列满时首先被移除。</p>\n<h3 id=\"写入与转轮\"><a href=\"#写入与转轮\" class=\"headerlink\" title=\"写入与转轮\"></a>写入与转轮</h3><p>当写入的时候，会根据日志消息的时间判断是否需要轮转，并且根据时间生成新的文件名，生成新的日志文件，写入日志消息，并且清理旧文件</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">sink_it_</span><span class=\"params\">(<span class=\"type\">const</span> details::log_msg &amp;msg)</span> <span class=\"keyword\">override</span> </span>&#123;</span><br><span class=\"line\">       <span class=\"comment\">//根据日志时间进行判断是否需要转轮</span></span><br><span class=\"line\">       <span class=\"keyword\">auto</span> time = msg.time;</span><br><span class=\"line\">       <span class=\"type\">bool</span> should_rotate = time &gt;= rotation_tp_;</span><br><span class=\"line\">       <span class=\"keyword\">if</span> (should_rotate) &#123;</span><br><span class=\"line\">           <span class=\"keyword\">auto</span> filename = FileNameCalc::<span class=\"built_in\">calc_filename</span>(base_filename_, <span class=\"built_in\">now_tm</span>(time));</span><br><span class=\"line\">           </span><br><span class=\"line\">           <span class=\"comment\">//打开新文件，重新计算轮转时间</span></span><br><span class=\"line\">           file_helper_.<span class=\"built_in\">open</span>(filename, truncate_);</span><br><span class=\"line\">           rotation_tp_ = <span class=\"built_in\">next_rotation_tp_</span>();</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">       <span class=\"type\">memory_buf_t</span> formatted;</span><br><span class=\"line\">       base_sink&lt;Mutex&gt;::formatter_-&gt;format(msg, formatted);</span><br><span class=\"line\">       file_helper_.<span class=\"built_in\">write</span>(formatted);</span><br><span class=\"line\"></span><br><span class=\"line\">       <span class=\"comment\">// 轮转之后，并且max_files_&gt;0，清理老文件</span></span><br><span class=\"line\">       <span class=\"keyword\">if</span> (should_rotate &amp;&amp; max_files_ &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">           <span class=\"built_in\">delete_old_</span>();</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">delete_old_</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">using</span> details::os::filename_to_str;</span><br><span class=\"line\">        <span class=\"keyword\">using</span> details::os::remove_if_exists;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">filename_t</span> current_file = file_helper_.<span class=\"built_in\">filename</span>();</span><br><span class=\"line\">        <span class=\"comment\">//队列满了，进行操作，删除最老的的文件</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (filenames_q_.<span class=\"built_in\">full</span>()) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">auto</span> old_filename = std::<span class=\"built_in\">move</span>(filenames_q_.<span class=\"built_in\">front</span>());</span><br><span class=\"line\">            filenames_q_.<span class=\"built_in\">pop_front</span>(); <span class=\"comment\">//从队列中删除最老的</span></span><br><span class=\"line\">            <span class=\"type\">bool</span> ok = <span class=\"built_in\">remove_if_exists</span>(old_filename) == <span class=\"number\">0</span>; <span class=\"comment\">//从磁盘删除</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (!ok) &#123;</span><br><span class=\"line\">                filenames_q_.<span class=\"built_in\">push_back</span>(std::<span class=\"built_in\">move</span>(current_file));</span><br><span class=\"line\">                <span class=\"built_in\">throw_spdlog_ex</span>(<span class=\"string\">&quot;Failed removing daily file &quot;</span> + <span class=\"built_in\">filename_to_str</span>(old_filename),</span><br><span class=\"line\">                                errno);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//当前的最新文件加入队列</span></span><br><span class=\"line\">        filenames_q_.<span class=\"built_in\">push_back</span>(std::<span class=\"built_in\">move</span>(current_file));</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n<p>本质上，daily_file_sink 确保日志按天分隔，在指定时间启动新文件，并可选地清理超过设定天数的旧文件。</p>\n<h1 id=\"rotating-file-sink\"><a href=\"#rotating-file-sink\" class=\"headerlink\" title=\"rotating_file_sink\"></a>rotating_file_sink</h1><p>日志文档达到固定的大小后，输出生成新的日志文件</p>\n<h2 id=\"基础配置-1\"><a href=\"#基础配置-1\" class=\"headerlink\" title=\"基础配置\"></a>基础配置</h2><p><strong>max_size</strong>：文件最大的字节数</p>\n<p><strong>max_files</strong>：最大的文件个数，0的时候，一直只有一个文件存在</p>\n<h2 id=\"实现原理-1\"><a href=\"#实现原理-1\" class=\"headerlink\" title=\"实现原理\"></a>实现原理</h2><p>通过日志的写入被动触发日志文件的转轮，当原文件的大小和要写入的字节大小总和超过设定值的时候触发日志的轮转，生成新文件，并通过将日志文件重名维持文件个数</p>\n<h3 id=\"初始化\"><a href=\"#初始化\" class=\"headerlink\" title=\"初始化\"></a>初始化</h3><p>创建日志的时候，rotating_file_sink会打开基础的文件，它计算初始大小，并且如果 rotate_on_open 为 true 且文件不为空，可以选择立即执行一次轮转。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"keyword\">typename</span> Mutex&gt;</span><br><span class=\"line\">rotating_file_sink&lt;Mutex&gt;::<span class=\"built_in\">rotating_file_sink</span>(</span><br><span class=\"line\">    <span class=\"type\">filename_t</span> base_filename,</span><br><span class=\"line\">    std::<span class=\"type\">size_t</span> max_size,</span><br><span class=\"line\">    std::<span class=\"type\">size_t</span> max_files,</span><br><span class=\"line\">    <span class=\"type\">bool</span> rotate_on_open,</span><br><span class=\"line\">    <span class=\"type\">const</span> file_event_handlers &amp;event_handlers)</span><br><span class=\"line\">    : <span class=\"built_in\">base_filename_</span>(std::<span class=\"built_in\">move</span>(base_filename)),</span><br><span class=\"line\">      <span class=\"built_in\">max_size_</span>(max_size),</span><br><span class=\"line\">      <span class=\"built_in\">max_files_</span>(max_files),</span><br><span class=\"line\">      file_helper_&#123;event_handlers&#125; &#123;</span><br><span class=\"line\">      </span><br><span class=\"line\">      <span class=\"comment\">//配置参数的检查</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (max_size == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">throw_spdlog_ex</span>(<span class=\"string\">&quot;rotating sink constructor: max_size arg cannot be zero&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (max_files &gt; <span class=\"number\">200000</span>) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">throw_spdlog_ex</span>(<span class=\"string\">&quot;rotating sink constructor: max_files arg cannot exceed 200000&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">//为0的时候是原名打开日志文件</span></span><br><span class=\"line\">    file_helper_.<span class=\"built_in\">open</span>(<span class=\"built_in\">calc_filename</span>(base_filename_, <span class=\"number\">0</span>));</span><br><span class=\"line\">    current_size_ = file_helper_.<span class=\"built_in\">size</span>(); </span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">//打开的时候如果配置true并且文件大小不为0，开始轮转</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (rotate_on_open &amp;&amp; current_size_ &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">rotate_</span>();</span><br><span class=\"line\">        current_size_ = <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"文件重命名\"><a href=\"#文件重命名\" class=\"headerlink\" title=\"文件重命名\"></a>文件重命名</h3><p>日志的轮转逻辑的核心在rotate_函数中，主要是处理重命名逻辑，根据max_files_参数维持备份文件<br>比如是3,日志文件的原始名是log.txt，会存在log.txt日志文件和log.1.txt,log.2.txt,log.3.txt等备份文件</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 示例: base_filename=&quot;log.txt&quot;, max_files=3</span></span><br><span class=\"line\"><span class=\"comment\">// 轮转顺序:</span></span><br><span class=\"line\"><span class=\"comment\">// 1. 删除 log.3.txt (如果存在) --&gt; 实际是第2步重命名时覆盖，或者rename前删除</span></span><br><span class=\"line\"><span class=\"comment\">// 2. 将 log.2.txt 重命名为 log.3.txt</span></span><br><span class=\"line\"><span class=\"comment\">// 3. 将 log.1.txt 重命名为 log.2.txt</span></span><br><span class=\"line\"><span class=\"comment\">// 4. 将 log.txt 重命名为 log.1.txt</span></span><br><span class=\"line\"><span class=\"comment\">// 5. 重新打开 log.txt (截断) 以写入新日志</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"keyword\">typename</span> Mutex&gt;</span><br><span class=\"line\"><span class=\"type\">void</span> rotating_file_sink&lt;Mutex&gt;::<span class=\"built_in\">rotate_</span>() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">using</span> details::os::filename_to_str;</span><br><span class=\"line\">    <span class=\"keyword\">using</span> details::os::path_exists;</span><br><span class=\"line\"></span><br><span class=\"line\">    file_helper_.<span class=\"built_in\">close</span>(); <span class=\"comment\">// 首先关闭当前日志文件</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 从最旧的备份文件索引开始，向下迭代到当前文件 (索引 0)</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">auto</span> i = max_files_; i &gt; <span class=\"number\">0</span>; --i) &#123;</span><br><span class=\"line\">        <span class=\"type\">filename_t</span> src = <span class=\"built_in\">calc_filename</span>(base_filename_, i - <span class=\"number\">1</span>); <span class=\"comment\">// 例如 log.1.txt (当 i=2), log.txt (当 i=1)</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!<span class=\"built_in\">path_exists</span>(src)) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">continue</span>; <span class=\"comment\">// 如果源文件不存在，则跳过</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"type\">filename_t</span> target = <span class=\"built_in\">calc_filename</span>(base_filename_, i); <span class=\"comment\">// 例如 log.2.txt (当 i=2), log.1.txt (当 i=1)</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 将 src 重命名为 target。如果 target 已存在，会先删除它。</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!<span class=\"built_in\">rename_file_</span>(src, target)) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 处理重命名失败 (重试逻辑并抛出异常)</span></span><br><span class=\"line\">            <span class=\"comment\">// ... (错误处理如提供的代码所示) ...</span></span><br><span class=\"line\">            file_helper_.<span class=\"built_in\">reopen</span>(<span class=\"literal\">true</span>); <span class=\"comment\">// 即使重命名失败，也要截断日志文件以防超出限制！</span></span><br><span class=\"line\">            current_size_ = <span class=\"number\">0</span>;</span><br><span class=\"line\">            <span class=\"built_in\">throw_spdlog_ex</span>(<span class=\"string\">&quot;rotating_file_sink: failed renaming &quot;</span> + <span class=\"built_in\">filename_to_str</span>(src) + <span class=\"string\">&quot; to &quot;</span> + <span class=\"built_in\">filename_to_str</span>(target), errno);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 重新打开基础日志文件，并进行截断，以便重新开始写入</span></span><br><span class=\"line\">    file_helper_.<span class=\"built_in\">reopen</span>(<span class=\"literal\">true</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>轮转是向后工作的：最旧的文件 (base_filename.max_files.ext) 被删除， 然后 base_filename.(max_files-1).ext 被重命名为 base_filename.max_files.ext，依此类推，直到当前的 base_filename.ext 被重命名为 base_filename.1.ext 。最后，base_filename.ext 被重新打开为一个空文件。</p>\n<h3 id=\"写入与轮转\"><a href=\"#写入与轮转\" class=\"headerlink\" title=\"写入与轮转\"></a>写入与轮转</h3><p>当日志消息准备写入的时候，会首先格式化日志消息，然后计算新大小，检查是否应该进行轮转。需要轮转时flush文件然后轮转日志文件。完成之后写入日志消息。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"keyword\">typename</span> Mutex&gt;</span><br><span class=\"line\"><span class=\"type\">void</span> rotating_file_sink&lt;Mutex&gt;::<span class=\"built_in\">sink_it_</span>(<span class=\"type\">const</span> details::log_msg &amp;msg) &#123;</span><br><span class=\"line\">    <span class=\"type\">memory_buf_t</span> formatted;</span><br><span class=\"line\">    base_sink&lt;Mutex&gt;::formatter_-&gt;format(msg, formatted);</span><br><span class=\"line\">    <span class=\"keyword\">auto</span> new_size = current_size_ + formatted.<span class=\"built_in\">size</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (new_size &gt; max_size_) &#123;</span><br><span class=\"line\">        file_helper_.<span class=\"built_in\">flush</span>();</span><br><span class=\"line\">        <span class=\"comment\">// 仅当文件非空时才轮转，避免对空文件的轮转</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (file_helper_.<span class=\"built_in\">size</span>() &gt; <span class=\"number\">0</span>) &#123; </span><br><span class=\"line\">            <span class=\"built_in\">rotate_</span>();</span><br><span class=\"line\">            new_size = formatted.<span class=\"built_in\">size</span>(); <span class=\"comment\">// 新文件的大小就是这条消息的大小</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    file_helper_.<span class=\"built_in\">write</span>(formatted);</span><br><span class=\"line\">    current_size_ = new_size;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>此 sink 确保单个日志文件不会超过特定大小，通过保留分布在多个文件中的最新日志数据的滚动窗口来管理磁盘空间。</p>\n<h1 id=\"差异对比\"><a href=\"#差异对比\" class=\"headerlink\" title=\"差异对比\"></a>差异对比</h1><table>\n<thead>\n<tr>\n<th align=\"left\">特性</th>\n<th align=\"center\">daily_file_sink</th>\n<th align=\"center\">rotating_file_sink</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\"><strong>触发条件</strong></td>\n<td align=\"center\">固定时间点（如每日 00:00）</td>\n<td align=\"center\">文件大小达到 <code>max_size</code> 时触发</td>\n</tr>\n<tr>\n<td align=\"left\"><strong>文件名规则</strong></td>\n<td align=\"center\">按时间生成（如 <code>app-2023-09-15.log</code>）</td>\n<td align=\"center\">基础名 + 序号（如 <code>app.log.1</code>）</td>\n</tr>\n<tr>\n<td align=\"left\"><strong>旧文件处理</strong></td>\n<td align=\"center\">删除超过 <code>max_files</code> 天数的文件</td>\n<td align=\"center\">重命名后循环覆盖（保留固定数量备份）</td>\n</tr>\n<tr>\n<td align=\"left\"><strong>时间关联性</strong></td>\n<td align=\"center\">强（按时间归档）</td>\n<td align=\"center\">弱（按空间需求处理）</td>\n</tr>\n<tr>\n<td align=\"left\"><strong>核心功能</strong></td>\n<td align=\"center\">时间驱动的日志归档</td>\n<td align=\"center\">磁盘空间控制</td>\n</tr>\n</tbody></table>\n","excerpt":"<h2 id=\"引言\"><a href=\"#引言\" class=\"headerlink\" title=\"引言\"></a>引言</h2><p>上一篇文章讲解了主要spdlog的异步模式及其实现方式，其中讲到了spdlog中负责将日志输出到具体的地方的类是sink。这篇文章就会具体的分析daily_file_sink和rotating_file_sink的部分源码，分析下spdlog是怎么实现按日分割和按尺寸分割日志的。</p>","more":"<h1 id=\"daily-file-sink\"><a href=\"#daily-file-sink\" class=\"headerlink\" title=\"daily_file_sink\"></a>daily_file_sink</h1><p>在每天特定的时间点创建新的日志文件</p>\n<h2 id=\"基础配置\"><a href=\"#基础配置\" class=\"headerlink\" title=\"基础配置\"></a>基础配置</h2><p>在使用daily_file_sink的时候，有几个重要的构造函数的参数</p>\n<p><strong>rotation_hour</strong>:分割的小时</p>\n<p><strong>rotation_minute</strong>：分割的分钟</p>\n<p><strong>truncate</strong>:是否截断文件</p>\n<p><strong>max_files</strong>：最大的文件数目，设定为0的时候不限制文件个数，否则保留设置的max_files文件个数</p>\n<h2 id=\"实现原理\"><a href=\"#实现原理\" class=\"headerlink\" title=\"实现原理\"></a>实现原理</h2><p>daily_file_sink是通过被动触发日志文件的分割的，当用户写入日志的时候，daily_file_sink会通过日志消息的时间和计算的需要转轮的时间判断是否需要将日志输出到新的文件中，并通过一个环形队列管理这些日志文件，当文件数量超过设定数目的时候，删除旧的文件。</p>\n<h3 id=\"计算分割时间点\"><a href=\"#计算分割时间点\" class=\"headerlink\" title=\"计算分割时间点\"></a>计算分割时间点</h3><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">log_clock::time_point <span class=\"title\">next_rotation_tp_</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">auto</span> now = log_clock::<span class=\"built_in\">now</span>(); <span class=\"comment\">//获取当前时间</span></span><br><span class=\"line\">        tm date = <span class=\"built_in\">now_tm</span>(now);</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\">//使用配置的时间作为轮转日志的时间</span></span><br><span class=\"line\">        date.tm_hour = rotation_h_; </span><br><span class=\"line\">        date.tm_min = rotation_m_;</span><br><span class=\"line\">        date.tm_sec = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">auto</span> rotation_time = log_clock::<span class=\"built_in\">from_time_t</span>(std::<span class=\"built_in\">mktime</span>(&amp;date));</span><br><span class=\"line\">        <span class=\"comment\">//当前时间还未到计算出的轮转时间</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (rotation_time &gt; now) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> rotation_time;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//当前时间超过了设定的轮转时间，直接换到下一点时间点作为轮转时间</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> &#123;rotation_time + std::chrono::<span class=\"built_in\">hours</span>(<span class=\"number\">24</span>)&#125;;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<p>每次sink初始化或者发生日志轮转的时候，就会调用这个函数计算下一次轮转日志的时间点。这个函数会使用用户配置的rotation_h_和rotation_m_，如果这个时间点过去了，就会那么就是明天的同一时间轮转。<br>比如，下午16点启动日志，但是设定是每天6点分割，那么下一次轮转的时间就是第二天的6点，本次不会分割。</p>\n<h3 id=\"文件管理\"><a href=\"#文件管理\" class=\"headerlink\" title=\"文件管理\"></a>文件管理</h3><p>daily_file_sink通过max_files参数限制保留的旧日志文件的个数,并且通过filenames_q_队列维护这些文件，在初始化阶段使用init_filenames_q_去填充这个队列</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">init_filenames_q_</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">using</span> details::os::path_exists;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//环形队列存储文件名</span></span><br><span class=\"line\">        filenames_q_ = details::<span class=\"built_in\">circular_q</span>&lt;<span class=\"type\">filename_t</span>&gt;(<span class=\"built_in\">static_cast</span>&lt;<span class=\"type\">size_t</span>&gt;(max_files_));</span><br><span class=\"line\">        std::vector&lt;<span class=\"type\">filename_t</span>&gt; filenames;</span><br><span class=\"line\">        <span class=\"keyword\">auto</span> now = log_clock::<span class=\"built_in\">now</span>();</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\">//按照时间倒序查找现有的日志文件</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span> (filenames.<span class=\"built_in\">size</span>() &lt; max_files_) &#123;</span><br><span class=\"line\">            <span class=\"comment\">//按照时间计算文件名</span></span><br><span class=\"line\">            <span class=\"keyword\">auto</span> filename = FileNameCalc::<span class=\"built_in\">calc_filename</span>(base_filename_, <span class=\"built_in\">now_tm</span>(now));</span><br><span class=\"line\">            </span><br><span class=\"line\">            <span class=\"comment\">//当前文件不存在，立刻停止</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (!<span class=\"built_in\">path_exists</span>(filename)) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            filenames.<span class=\"built_in\">emplace_back</span>(filename);</span><br><span class=\"line\">            now -= std::chrono::<span class=\"built_in\">hours</span>(<span class=\"number\">24</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 将找到的文件名按反向顺序（最旧的在前）添加到队列中</span></span><br><span class=\"line\">        <span class=\"comment\">// 这确保了当队列满时，最旧的文件名位于队列前端，准备被删除。</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">auto</span> iter = filenames.<span class=\"built_in\">rbegin</span>(); iter != filenames.<span class=\"built_in\">rend</span>(); ++iter) &#123;</span><br><span class=\"line\">            filenames_q_.<span class=\"built_in\">push_back</span>(std::<span class=\"built_in\">move</span>(*iter));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<p>这个初始化过程巧妙地查找了前几天的现有日志文件，并将它们添加到队列中，使得找到的最旧的文件位于队列的前面，以便在队列满时首先被移除。</p>\n<h3 id=\"写入与转轮\"><a href=\"#写入与转轮\" class=\"headerlink\" title=\"写入与转轮\"></a>写入与转轮</h3><p>当写入的时候，会根据日志消息的时间判断是否需要轮转，并且根据时间生成新的文件名，生成新的日志文件，写入日志消息，并且清理旧文件</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">sink_it_</span><span class=\"params\">(<span class=\"type\">const</span> details::log_msg &amp;msg)</span> <span class=\"keyword\">override</span> </span>&#123;</span><br><span class=\"line\">       <span class=\"comment\">//根据日志时间进行判断是否需要转轮</span></span><br><span class=\"line\">       <span class=\"keyword\">auto</span> time = msg.time;</span><br><span class=\"line\">       <span class=\"type\">bool</span> should_rotate = time &gt;= rotation_tp_;</span><br><span class=\"line\">       <span class=\"keyword\">if</span> (should_rotate) &#123;</span><br><span class=\"line\">           <span class=\"keyword\">auto</span> filename = FileNameCalc::<span class=\"built_in\">calc_filename</span>(base_filename_, <span class=\"built_in\">now_tm</span>(time));</span><br><span class=\"line\">           </span><br><span class=\"line\">           <span class=\"comment\">//打开新文件，重新计算轮转时间</span></span><br><span class=\"line\">           file_helper_.<span class=\"built_in\">open</span>(filename, truncate_);</span><br><span class=\"line\">           rotation_tp_ = <span class=\"built_in\">next_rotation_tp_</span>();</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">       <span class=\"type\">memory_buf_t</span> formatted;</span><br><span class=\"line\">       base_sink&lt;Mutex&gt;::formatter_-&gt;format(msg, formatted);</span><br><span class=\"line\">       file_helper_.<span class=\"built_in\">write</span>(formatted);</span><br><span class=\"line\"></span><br><span class=\"line\">       <span class=\"comment\">// 轮转之后，并且max_files_&gt;0，清理老文件</span></span><br><span class=\"line\">       <span class=\"keyword\">if</span> (should_rotate &amp;&amp; max_files_ &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">           <span class=\"built_in\">delete_old_</span>();</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">delete_old_</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">using</span> details::os::filename_to_str;</span><br><span class=\"line\">        <span class=\"keyword\">using</span> details::os::remove_if_exists;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">filename_t</span> current_file = file_helper_.<span class=\"built_in\">filename</span>();</span><br><span class=\"line\">        <span class=\"comment\">//队列满了，进行操作，删除最老的的文件</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (filenames_q_.<span class=\"built_in\">full</span>()) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">auto</span> old_filename = std::<span class=\"built_in\">move</span>(filenames_q_.<span class=\"built_in\">front</span>());</span><br><span class=\"line\">            filenames_q_.<span class=\"built_in\">pop_front</span>(); <span class=\"comment\">//从队列中删除最老的</span></span><br><span class=\"line\">            <span class=\"type\">bool</span> ok = <span class=\"built_in\">remove_if_exists</span>(old_filename) == <span class=\"number\">0</span>; <span class=\"comment\">//从磁盘删除</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (!ok) &#123;</span><br><span class=\"line\">                filenames_q_.<span class=\"built_in\">push_back</span>(std::<span class=\"built_in\">move</span>(current_file));</span><br><span class=\"line\">                <span class=\"built_in\">throw_spdlog_ex</span>(<span class=\"string\">&quot;Failed removing daily file &quot;</span> + <span class=\"built_in\">filename_to_str</span>(old_filename),</span><br><span class=\"line\">                                errno);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//当前的最新文件加入队列</span></span><br><span class=\"line\">        filenames_q_.<span class=\"built_in\">push_back</span>(std::<span class=\"built_in\">move</span>(current_file));</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n<p>本质上，daily_file_sink 确保日志按天分隔，在指定时间启动新文件，并可选地清理超过设定天数的旧文件。</p>\n<h1 id=\"rotating-file-sink\"><a href=\"#rotating-file-sink\" class=\"headerlink\" title=\"rotating_file_sink\"></a>rotating_file_sink</h1><p>日志文档达到固定的大小后，输出生成新的日志文件</p>\n<h2 id=\"基础配置-1\"><a href=\"#基础配置-1\" class=\"headerlink\" title=\"基础配置\"></a>基础配置</h2><p><strong>max_size</strong>：文件最大的字节数</p>\n<p><strong>max_files</strong>：最大的文件个数，0的时候，一直只有一个文件存在</p>\n<h2 id=\"实现原理-1\"><a href=\"#实现原理-1\" class=\"headerlink\" title=\"实现原理\"></a>实现原理</h2><p>通过日志的写入被动触发日志文件的转轮，当原文件的大小和要写入的字节大小总和超过设定值的时候触发日志的轮转，生成新文件，并通过将日志文件重名维持文件个数</p>\n<h3 id=\"初始化\"><a href=\"#初始化\" class=\"headerlink\" title=\"初始化\"></a>初始化</h3><p>创建日志的时候，rotating_file_sink会打开基础的文件，它计算初始大小，并且如果 rotate_on_open 为 true 且文件不为空，可以选择立即执行一次轮转。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"keyword\">typename</span> Mutex&gt;</span><br><span class=\"line\">rotating_file_sink&lt;Mutex&gt;::<span class=\"built_in\">rotating_file_sink</span>(</span><br><span class=\"line\">    <span class=\"type\">filename_t</span> base_filename,</span><br><span class=\"line\">    std::<span class=\"type\">size_t</span> max_size,</span><br><span class=\"line\">    std::<span class=\"type\">size_t</span> max_files,</span><br><span class=\"line\">    <span class=\"type\">bool</span> rotate_on_open,</span><br><span class=\"line\">    <span class=\"type\">const</span> file_event_handlers &amp;event_handlers)</span><br><span class=\"line\">    : <span class=\"built_in\">base_filename_</span>(std::<span class=\"built_in\">move</span>(base_filename)),</span><br><span class=\"line\">      <span class=\"built_in\">max_size_</span>(max_size),</span><br><span class=\"line\">      <span class=\"built_in\">max_files_</span>(max_files),</span><br><span class=\"line\">      file_helper_&#123;event_handlers&#125; &#123;</span><br><span class=\"line\">      </span><br><span class=\"line\">      <span class=\"comment\">//配置参数的检查</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (max_size == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">throw_spdlog_ex</span>(<span class=\"string\">&quot;rotating sink constructor: max_size arg cannot be zero&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (max_files &gt; <span class=\"number\">200000</span>) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">throw_spdlog_ex</span>(<span class=\"string\">&quot;rotating sink constructor: max_files arg cannot exceed 200000&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">//为0的时候是原名打开日志文件</span></span><br><span class=\"line\">    file_helper_.<span class=\"built_in\">open</span>(<span class=\"built_in\">calc_filename</span>(base_filename_, <span class=\"number\">0</span>));</span><br><span class=\"line\">    current_size_ = file_helper_.<span class=\"built_in\">size</span>(); </span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">//打开的时候如果配置true并且文件大小不为0，开始轮转</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (rotate_on_open &amp;&amp; current_size_ &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">rotate_</span>();</span><br><span class=\"line\">        current_size_ = <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"文件重命名\"><a href=\"#文件重命名\" class=\"headerlink\" title=\"文件重命名\"></a>文件重命名</h3><p>日志的轮转逻辑的核心在rotate_函数中，主要是处理重命名逻辑，根据max_files_参数维持备份文件<br>比如是3,日志文件的原始名是log.txt，会存在log.txt日志文件和log.1.txt,log.2.txt,log.3.txt等备份文件</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 示例: base_filename=&quot;log.txt&quot;, max_files=3</span></span><br><span class=\"line\"><span class=\"comment\">// 轮转顺序:</span></span><br><span class=\"line\"><span class=\"comment\">// 1. 删除 log.3.txt (如果存在) --&gt; 实际是第2步重命名时覆盖，或者rename前删除</span></span><br><span class=\"line\"><span class=\"comment\">// 2. 将 log.2.txt 重命名为 log.3.txt</span></span><br><span class=\"line\"><span class=\"comment\">// 3. 将 log.1.txt 重命名为 log.2.txt</span></span><br><span class=\"line\"><span class=\"comment\">// 4. 将 log.txt 重命名为 log.1.txt</span></span><br><span class=\"line\"><span class=\"comment\">// 5. 重新打开 log.txt (截断) 以写入新日志</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"keyword\">typename</span> Mutex&gt;</span><br><span class=\"line\"><span class=\"type\">void</span> rotating_file_sink&lt;Mutex&gt;::<span class=\"built_in\">rotate_</span>() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">using</span> details::os::filename_to_str;</span><br><span class=\"line\">    <span class=\"keyword\">using</span> details::os::path_exists;</span><br><span class=\"line\"></span><br><span class=\"line\">    file_helper_.<span class=\"built_in\">close</span>(); <span class=\"comment\">// 首先关闭当前日志文件</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 从最旧的备份文件索引开始，向下迭代到当前文件 (索引 0)</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">auto</span> i = max_files_; i &gt; <span class=\"number\">0</span>; --i) &#123;</span><br><span class=\"line\">        <span class=\"type\">filename_t</span> src = <span class=\"built_in\">calc_filename</span>(base_filename_, i - <span class=\"number\">1</span>); <span class=\"comment\">// 例如 log.1.txt (当 i=2), log.txt (当 i=1)</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!<span class=\"built_in\">path_exists</span>(src)) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">continue</span>; <span class=\"comment\">// 如果源文件不存在，则跳过</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"type\">filename_t</span> target = <span class=\"built_in\">calc_filename</span>(base_filename_, i); <span class=\"comment\">// 例如 log.2.txt (当 i=2), log.1.txt (当 i=1)</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 将 src 重命名为 target。如果 target 已存在，会先删除它。</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!<span class=\"built_in\">rename_file_</span>(src, target)) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 处理重命名失败 (重试逻辑并抛出异常)</span></span><br><span class=\"line\">            <span class=\"comment\">// ... (错误处理如提供的代码所示) ...</span></span><br><span class=\"line\">            file_helper_.<span class=\"built_in\">reopen</span>(<span class=\"literal\">true</span>); <span class=\"comment\">// 即使重命名失败，也要截断日志文件以防超出限制！</span></span><br><span class=\"line\">            current_size_ = <span class=\"number\">0</span>;</span><br><span class=\"line\">            <span class=\"built_in\">throw_spdlog_ex</span>(<span class=\"string\">&quot;rotating_file_sink: failed renaming &quot;</span> + <span class=\"built_in\">filename_to_str</span>(src) + <span class=\"string\">&quot; to &quot;</span> + <span class=\"built_in\">filename_to_str</span>(target), errno);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 重新打开基础日志文件，并进行截断，以便重新开始写入</span></span><br><span class=\"line\">    file_helper_.<span class=\"built_in\">reopen</span>(<span class=\"literal\">true</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>轮转是向后工作的：最旧的文件 (base_filename.max_files.ext) 被删除， 然后 base_filename.(max_files-1).ext 被重命名为 base_filename.max_files.ext，依此类推，直到当前的 base_filename.ext 被重命名为 base_filename.1.ext 。最后，base_filename.ext 被重新打开为一个空文件。</p>\n<h3 id=\"写入与轮转\"><a href=\"#写入与轮转\" class=\"headerlink\" title=\"写入与轮转\"></a>写入与轮转</h3><p>当日志消息准备写入的时候，会首先格式化日志消息，然后计算新大小，检查是否应该进行轮转。需要轮转时flush文件然后轮转日志文件。完成之后写入日志消息。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"keyword\">typename</span> Mutex&gt;</span><br><span class=\"line\"><span class=\"type\">void</span> rotating_file_sink&lt;Mutex&gt;::<span class=\"built_in\">sink_it_</span>(<span class=\"type\">const</span> details::log_msg &amp;msg) &#123;</span><br><span class=\"line\">    <span class=\"type\">memory_buf_t</span> formatted;</span><br><span class=\"line\">    base_sink&lt;Mutex&gt;::formatter_-&gt;format(msg, formatted);</span><br><span class=\"line\">    <span class=\"keyword\">auto</span> new_size = current_size_ + formatted.<span class=\"built_in\">size</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (new_size &gt; max_size_) &#123;</span><br><span class=\"line\">        file_helper_.<span class=\"built_in\">flush</span>();</span><br><span class=\"line\">        <span class=\"comment\">// 仅当文件非空时才轮转，避免对空文件的轮转</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (file_helper_.<span class=\"built_in\">size</span>() &gt; <span class=\"number\">0</span>) &#123; </span><br><span class=\"line\">            <span class=\"built_in\">rotate_</span>();</span><br><span class=\"line\">            new_size = formatted.<span class=\"built_in\">size</span>(); <span class=\"comment\">// 新文件的大小就是这条消息的大小</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    file_helper_.<span class=\"built_in\">write</span>(formatted);</span><br><span class=\"line\">    current_size_ = new_size;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>此 sink 确保单个日志文件不会超过特定大小，通过保留分布在多个文件中的最新日志数据的滚动窗口来管理磁盘空间。</p>\n<h1 id=\"差异对比\"><a href=\"#差异对比\" class=\"headerlink\" title=\"差异对比\"></a>差异对比</h1><table>\n<thead>\n<tr>\n<th align=\"left\">特性</th>\n<th align=\"center\">daily_file_sink</th>\n<th align=\"center\">rotating_file_sink</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\"><strong>触发条件</strong></td>\n<td align=\"center\">固定时间点（如每日 00:00）</td>\n<td align=\"center\">文件大小达到 <code>max_size</code> 时触发</td>\n</tr>\n<tr>\n<td align=\"left\"><strong>文件名规则</strong></td>\n<td align=\"center\">按时间生成（如 <code>app-2023-09-15.log</code>）</td>\n<td align=\"center\">基础名 + 序号（如 <code>app.log.1</code>）</td>\n</tr>\n<tr>\n<td align=\"left\"><strong>旧文件处理</strong></td>\n<td align=\"center\">删除超过 <code>max_files</code> 天数的文件</td>\n<td align=\"center\">重命名后循环覆盖（保留固定数量备份）</td>\n</tr>\n<tr>\n<td align=\"left\"><strong>时间关联性</strong></td>\n<td align=\"center\">强（按时间归档）</td>\n<td align=\"center\">弱（按空间需求处理）</td>\n</tr>\n<tr>\n<td align=\"left\"><strong>核心功能</strong></td>\n<td align=\"center\">时间驱动的日志归档</td>\n<td align=\"center\">磁盘空间控制</td>\n</tr>\n</tbody></table>"},{"title":"spdlog源码阅读:04.format格式化引擎分析","date":"2025-08-25T16:00:00.000Z","_content":"## 引言\n\n在本系列的前三篇文章中，我们依次探讨了 spdlog 的核心异步日志机制、两种常用的内建文件 Sink（`daily_file_sink` 和 `rotating_file_sink`），以及如何通过实现自定义 Sink（以 `compressed_file_sink` 为例）来扩展其功能。至此，我们已经对日志消息的产生、处理、流转以及最终输出有了较为深入的理解。\n\n现在我们开始剖析spdlog日志中的最后一个组件 `formmatter`。\n\n`spdlog` 提供了强大的日志格式化功能，允许用户通过模式字符串 (pattern string) 精确控制日志输出的每一个细节，例如时间戳、日志级别、线程 ID、源代码位置以及日志消息本身。这一核心功能主要由 `pattern_formatter` 类负责。\n\n本文将聚焦于 `spdlog` 的**核心格式化引擎 `pattern_formatter`**，剖析其如何将用户定义的模式字符串解析、编译，并最终应用于日志消息，生成格式化的输出。通过本文，你将理解：\n\n* `pattern_formatter` 的两阶段工作机制：“编译”与“执行”。\n* 模式字符串是如何被解析成一系列格式化单元 (`flag_formatter`) 的。\n* `spdlog` 如何支持丰富的内置格式标志（如 `%Y`, `%m`, `%l`, `%v` 等）。\n* `spdlog` 格式化引擎的扩展性：如何实现并注册自定义的格式标志。\n\n**注：本文分析的源码基于 spdlog v1.15.1。**\n<!-- more -->\n## `pattern_formatter` 工作原理：**编译与执行**\n\n`pattern_formatter` 的核心思路是将格式化的过程分为两个阶段：\n\n1.  **编译阶段 (Compilation Phase):** 在创建 `pattern_formatter` 对象或设置新的模式字符串时执行。它会解析模式字符串，将其转换(或称“编译”)成一个内部的、由多个小型格式化单元 (`flag_formatter` 对象) 组成的序列。\n2.  **执行阶段 (Execution/Formatting Phase):** 在每次需要格式化一条具体的日志消息 (`log_msg`) 时执行。它会按顺序执行“编译”阶段生成好的格式化单元序列，每个单元负责输出模式字符串中的一部分内容，最终拼接成完整的格式化日志。\n\n下面我们详细分析这两个阶段。\n\n## 编译阶段：解析模式串\n\n编译阶段的目标是将用户提供的模式字符串（如 `\"%Y-%m-%d %H:%M:%S.%e [%l] %v\"`）转换成一个 `std::vector<std::unique_ptr<flag_formatter>>` 对象（即 `formatters_` 成员变量）。这个过程由 `pattern_formatter::compile_pattern_` 私有方法完成。\n\n其主要逻辑如下：\n\n1.  **遍历模式串:** 从头到尾逐个字符地扫描模式字符串。\n```c++\nvoid pattern_formatter::compile_pattern_(const std::string &pattern) {\n    auto end = pattern.end();\n    std::unique_ptr<details::aggregate_formatter> user_chars;\n    formatters_.clear();\n    //遍历整个模式字符串\n    for (auto it = pattern.begin(); it != end; ++it) {\n        ......\n    }\n    if (user_chars) \n    {\n        formatters_.push_back(std::move(user_chars));\n    }\n}\n```\n2.  **处理普通字符:** 如果当前字符不是 `%`，则将其视为普通文本。\n    * 创建一个 `details::aggregate_formatter` 实例（如果尚不存在）。\n    * 调用 `aggregate_formatter::add_ch()` 方法将该普通字符追加到其内部字符串 `str_` 中。\n    * 连续的普通字符会被追加到同一个 `aggregate_formatter` 实例。\n```c++\nvoid pattern_formatter::compile_pattern_(const std::string &pattern) {\n    ......\n    for (auto it = pattern.begin(); it != end; ++it) {\n        if (*it == '%') {\n           ......\n        } else  //处理普通字符\n        {\n            if (!user_chars) {\n                user_chars = details::make_unique<details::aggregate_formatter>();\n            }\n            user_chars->add_ch(*it);\n        }\n    }\n    if (user_chars)  \n    {\n        formatters_.push_back(std::move(user_chars));\n    }\n}\n```\n3.  **处理模式标志 (`%`):** 如果当前字符是 `%`：\n    * 首先，如果之前存在收集普通字符的 `aggregate_formatter` 实例，则将其添加到 `formatters_` 列表中。\n    * 然后，尝试解析 `%` 后面的填充与对齐说明（padding spec），由 `handle_padspec_` 完成。\n    * 接着，读取 `%` 后面的**标志字符** (flag character)，例如 `l`, `t`, `v`, `Y` 等。\n    * 调用 `handle_flag_` 方法处理这个标志字符和解析出的填充信息。\n```c++\nvoid pattern_formatter::compile_pattern_(const std::string &pattern) {\n    auto end = pattern.end();\n    std::unique_ptr<details::aggregate_formatter> user_chars;\n    formatters_.clear();\n    for (auto it = pattern.begin(); it != end; ++it) {\n        //处理模式字符\n        if (*it == '%') {\n            if (user_chars)  //先将之前的普通字符对象加入进去\n            {\n                formatters_.push_back(std::move(user_chars));\n            }\n\n            auto padding = handle_padspec_(++it, end);\n\n            if (it != end) {\n                if (padding.enabled()) {\n                    handle_flag_<details::scoped_padder>(*it, padding);\n                } else {\n                    handle_flag_<details::null_scoped_padder>(*it, padding);\n                }\n            } else {\n                break;\n            }\n        } else  \n           ......\n        }\n    }\n    if (user_chars)  \n    {\n        formatters_.push_back(std::move(user_chars));\n    }\n}\n```\n4.  **`handle_flag_` 的逻辑:**\n    * **检查自定义标志:** 首先在 `custom_handlers_` (一个存储用户自定义标志处理器的 map) 中查找该标志字符。\n        * 如果找到，说明用户注册了针对该字符的自定义格式化器。创建一个该自定义格式化器的克隆实例，设置好填充信息，并将其添加到 `formatters_` 列表中。**注意：用户自定义标志的优先级高于内置标志。**\n    * **处理内置标志:** 如果不是自定义标志，则进入一个巨大的 `switch` 语句，根据标志字符匹配对应的内置 `flag_formatter` 子类。\n        * 例如，`case 'l'` 会创建一个 `details::level_formatter` 实例；`case 'v'` 会创建一个 `details::v_formatter` 实例；各种时间相关的标志（`Y`, `m`, `d`, `H`, `M`, `S`, `e`, `f`, `F` 等）会创建对应的 `X_formatter` 实例。\n        * 根据是否需要填充，会选择性地使用 `details::scoped_padder` 或 `details::null_scoped_padder` 作为模板参数。\n        * 创建好对应的 formatter 实例后，将其添加到 `formatters_` 列表中。\n    * **处理未知标志:** 如果标志字符既不是自定义的，也不在内置 `switch` 语句中，`spdlog` 默认会将其视为普通文本（连同前面的 `%` 一起）添加到 `aggregate_formatter` 中。\n\n```c++\ntemplate <typename Padder>\nSPDLOG_INLINE void pattern_formatter::handle_flag_(char flag, details::padding_info padding) {\n    //处理自定义的模式字符，遇到直接退出，overrider原本定义的模式字符\n    auto it = custom_handlers_.find(flag);\n    if (it != custom_handlers_.end()) {\n        auto custom_handler = it->second->clone();\n        custom_handler->set_padding_info(padding);\n        formatters_.push_back(std::move(custom_handler));\n        return;\n    }\n\n    switch (flag) {\n        case ('+'):  \n            formatters_.push_back(details::make_unique<details::full_formatter>(padding));\n            need_localtime_ = true;\n            break;\n\n        case 'n':  \n            formatters_.push_back(details::make_unique<details::name_formatter<Padder>>(padding));\n            break;\n\n        case 'l':  \n            formatters_.push_back(details::make_unique<details::level_formatter<Padder>>(padding));\n            break;\n        ......\n        default:  \n            auto unknown_flag = details::make_unique<details::aggregate_formatter>();\n\n            if (!padding.truncate_) {\n                unknown_flag->add_ch('%');\n                unknown_flag->add_ch(flag);\n                formatters_.push_back((std::move(unknown_flag)));\n            }\n        \n            else {\n                padding.truncate_ = false;\n                formatters_.push_back(\n                    details::make_unique<details::source_funcname_formatter<Padder>>(padding));\n                unknown_flag->add_ch(flag);\n                formatters_.push_back((std::move(unknown_flag)));\n            }\n\n            break;\n    }\n}\n```\n5.  **结束处理:** 遍历完整个模式字符串后，如果最后还有未添加的 `aggregate_formatter` 实例（表示模式串以普通字符结尾），则将其添加到 `formatters_` 列表末尾。\n\n```c++\nvoid pattern_formatter::compile_pattern_(const std::string &pattern) {\n    ......\n    //末尾的普通字符要保持\n    if (user_chars)  \n    {\n        formatters_.push_back(std::move(user_chars));\n    }\n}\n```\n经过这个编译阶段，模式字符串就被有效地转换成了一个由 `flag_formatter` 对象组成的、有序的“格式化指令列表” `formatters_`。\n\n## 执行阶段：格式化日志消息\n\n当调用 `pattern_formatter::format(const details::log_msg &msg, memory_buf_t &dest)` 方法来格式化一条具体的日志消息时，执行阶段开始。\n\n这个过程相对简单：\n\n1.  **遍历 `formatters_` 列表:** 按顺序迭代编译阶段生成的 `formatters_` 向量中的每一个 `std::unique_ptr<flag_formatter>`。\n2.  **调用 `format` 方法:** 对每一个 `flag_formatter` 对象，调用其**虚函数 `format(const details::log_msg &msg, const std::tm &tm_time, memory_buf_t &dest)`**。\n    * `spdlog` 会预先计算好日志消息的时间戳对应的 `std::tm` 结构（如果模式中包含时间相关标志），并传递给 `format` 方法。\n    * 每个具体的 `flag_formatter` 子类会实现自己的 `format` 方法，根据其职责从 `msg` 或 `tm_time` 中提取所需信息（如日志级别、线程 ID、格式化的时间部分、日志消息文本等），进行必要的处理和填充，并使用 `fmt_helper` 中的函数将结果**追加 (append)** 到传入的目标缓冲区 `dest` 中。\n3.  **完成格式化:** 当 `formatters_` 列表中的所有对象都执行完其 `format` 方法后，`dest` 缓冲区中就包含了根据原始模式字符串生成的、完整的、格式化好的日志输出。\n\n```c++\nvoid pattern_formatter::format(const details::log_msg &msg, memory_buf_t &dest) {\n    ......\n    for (auto &f : formatters_) {\n        f->format(msg, cached_tm_, dest);\n    }\n    details::fmt_helper::append_string_view(eol_, dest);\n}\n```\n## 关键类与设计\n\n`pattern_formatter` 的设计体现了良好的面向对象思想：\n\n* **`flag_formatter` (基类):** 定义了所有格式化单元的统一接口（主要是 `format` 虚函数），是实现多态的基础。\n* **`aggregate_formatter` (子类):** 处理模式串中的普通文本部分。\n* **众多具体的 `X_formatter` (子类):** 如 `level_formatter`, `v_formatter`, `Y_formatter`, `H_formatter` 等，每个类负责处理一个特定的 `%` 格式标志，实现了单一职责原则。\n* **`pattern_formatter` (协调者):** 负责解析模式串（编译过程），管理 `flag_formatter` 对象列表，并在需要时按顺序调用它们（执行过程）。\n\n这种设计可以看作是**策略模式 (Strategy Pattern)** 的应用：每个 `%` 标志对应一种格式化策略，由一个具体的 `flag_formatter` 子类实现。`pattern_formatter` 在编译时根据模式串选择并组合这些策略，在执行时应用它们。同时，`formatters_` 列表也体现了**组合模式 (Composite Pattern)** 的思想，将简单的格式化单元组合成复杂的格式化逻辑。\n\n## 扩展性：自定义格式标志\n\n`spdlog` 的格式化引擎不仅功能丰富，还具有良好的扩展性，允许用户添加自己定义的格式标志。\n\n实现步骤如下：\n\n1.  **创建自定义 Formatter 类:** 创建一个新类，继承自 `spdlog::custom_flag_formatter`。\n2.  **实现 `format` 方法:** 在新类中重写 `format` 方法，实现自定义的格式化逻辑。你可以从 `log_msg` 对象获取信息，进行处理，并将结果追加到 `dest` 缓冲区。\n3.  **实现 `clone` 方法:** 实现一个 `clone` 方法，用于在编译阶段创建自定义 formatter 的实例。通常是返回 `std::make_unique<YourCustomFormatter>(*this)`。\n4.  **注册自定义标志:** 获取 `pattern_formatter` 对象（或者通过 `spdlog::set_formatter` 设置一个新的），调用其 `add_flag<YourCustomFormatter>(flag_char)` 方法，将你的自定义 formatter 类与一个未被使用的字符（作为新的标志字符）关联起来。\n\n**spdlog中的github上的示例**\n```c++\n#include \"spdlog/pattern_formatter.h\"\nclass my_formatter_flag : public spdlog::custom_flag_formatter\n{\npublic:\n    void format(const spdlog::details::log_msg &, const std::tm &, spdlog::memory_buf_t &dest) override\n    {\n        std::string some_txt = \"custom-flag\";\n        dest.append(some_txt.data(), some_txt.data() + some_txt.size());\n    }\n\n    std::unique_ptr<custom_flag_formatter> clone() const override\n    {\n        return spdlog::details::make_unique<my_formatter_flag>();\n    }\n};\n\nvoid custom_flags_example()\n{    \n    auto formatter = std::make_unique<spdlog::pattern_formatter>();\n    formatter->add_flag<my_formatter_flag>('*').set_pattern(\"[%n] [%*] [%^%l%$] %v\");\n    spdlog::set_formatter(std::move(formatter));\n}\n\n```\n\n完成注册后，`pattern_formatter` 在编译阶段遇到你指定的 `flag_char` 时，就会优先创建并使用你的 `YourCustomFormatter` 实例。如前所述，**自定义标志的优先级高于内置标志**，这意味着你可以用自定义实现覆盖掉 `spdlog` 的默认行为（但不建议覆盖常用标志，最好选择未使用或特殊的字符）。\n\n## 总结\n\n`spdlog` 的 `pattern_formatter` 通过巧妙的“编译-执行”两阶段机制，将用户定义的模式字符串高效地转换并应用于日志消息。其核心在于将模式串解析为一系列 `flag_formatter` 对象，每个对象负责处理模式的一部分。这种基于策略模式和组合模式的设计不仅实现了丰富的功能，还通过 `custom_flag_formatter` 提供了优秀的扩展性。\n\n至此，我们已经完成了对 `spdlog` 核心组件——异步机制、内建 sink、自定义 sink 扩展以及核心格式化引擎 `pattern_formatter` 的剖析。\n\n\n\n","source":"_posts/spdlog/spdlog源码阅读:04.format格式化引擎分析.md","raw":"---\ntitle: \"spdlog源码阅读:04.format格式化引擎分析\"\ndate: 2025-08-26\ncategories: \n  - 源码分析\n  - spdlog\ntags:\n  - C++\n  - spdlog\n  - 日志系统\n---\n## 引言\n\n在本系列的前三篇文章中，我们依次探讨了 spdlog 的核心异步日志机制、两种常用的内建文件 Sink（`daily_file_sink` 和 `rotating_file_sink`），以及如何通过实现自定义 Sink（以 `compressed_file_sink` 为例）来扩展其功能。至此，我们已经对日志消息的产生、处理、流转以及最终输出有了较为深入的理解。\n\n现在我们开始剖析spdlog日志中的最后一个组件 `formmatter`。\n\n`spdlog` 提供了强大的日志格式化功能，允许用户通过模式字符串 (pattern string) 精确控制日志输出的每一个细节，例如时间戳、日志级别、线程 ID、源代码位置以及日志消息本身。这一核心功能主要由 `pattern_formatter` 类负责。\n\n本文将聚焦于 `spdlog` 的**核心格式化引擎 `pattern_formatter`**，剖析其如何将用户定义的模式字符串解析、编译，并最终应用于日志消息，生成格式化的输出。通过本文，你将理解：\n\n* `pattern_formatter` 的两阶段工作机制：“编译”与“执行”。\n* 模式字符串是如何被解析成一系列格式化单元 (`flag_formatter`) 的。\n* `spdlog` 如何支持丰富的内置格式标志（如 `%Y`, `%m`, `%l`, `%v` 等）。\n* `spdlog` 格式化引擎的扩展性：如何实现并注册自定义的格式标志。\n\n**注：本文分析的源码基于 spdlog v1.15.1。**\n<!-- more -->\n## `pattern_formatter` 工作原理：**编译与执行**\n\n`pattern_formatter` 的核心思路是将格式化的过程分为两个阶段：\n\n1.  **编译阶段 (Compilation Phase):** 在创建 `pattern_formatter` 对象或设置新的模式字符串时执行。它会解析模式字符串，将其转换(或称“编译”)成一个内部的、由多个小型格式化单元 (`flag_formatter` 对象) 组成的序列。\n2.  **执行阶段 (Execution/Formatting Phase):** 在每次需要格式化一条具体的日志消息 (`log_msg`) 时执行。它会按顺序执行“编译”阶段生成好的格式化单元序列，每个单元负责输出模式字符串中的一部分内容，最终拼接成完整的格式化日志。\n\n下面我们详细分析这两个阶段。\n\n## 编译阶段：解析模式串\n\n编译阶段的目标是将用户提供的模式字符串（如 `\"%Y-%m-%d %H:%M:%S.%e [%l] %v\"`）转换成一个 `std::vector<std::unique_ptr<flag_formatter>>` 对象（即 `formatters_` 成员变量）。这个过程由 `pattern_formatter::compile_pattern_` 私有方法完成。\n\n其主要逻辑如下：\n\n1.  **遍历模式串:** 从头到尾逐个字符地扫描模式字符串。\n```c++\nvoid pattern_formatter::compile_pattern_(const std::string &pattern) {\n    auto end = pattern.end();\n    std::unique_ptr<details::aggregate_formatter> user_chars;\n    formatters_.clear();\n    //遍历整个模式字符串\n    for (auto it = pattern.begin(); it != end; ++it) {\n        ......\n    }\n    if (user_chars) \n    {\n        formatters_.push_back(std::move(user_chars));\n    }\n}\n```\n2.  **处理普通字符:** 如果当前字符不是 `%`，则将其视为普通文本。\n    * 创建一个 `details::aggregate_formatter` 实例（如果尚不存在）。\n    * 调用 `aggregate_formatter::add_ch()` 方法将该普通字符追加到其内部字符串 `str_` 中。\n    * 连续的普通字符会被追加到同一个 `aggregate_formatter` 实例。\n```c++\nvoid pattern_formatter::compile_pattern_(const std::string &pattern) {\n    ......\n    for (auto it = pattern.begin(); it != end; ++it) {\n        if (*it == '%') {\n           ......\n        } else  //处理普通字符\n        {\n            if (!user_chars) {\n                user_chars = details::make_unique<details::aggregate_formatter>();\n            }\n            user_chars->add_ch(*it);\n        }\n    }\n    if (user_chars)  \n    {\n        formatters_.push_back(std::move(user_chars));\n    }\n}\n```\n3.  **处理模式标志 (`%`):** 如果当前字符是 `%`：\n    * 首先，如果之前存在收集普通字符的 `aggregate_formatter` 实例，则将其添加到 `formatters_` 列表中。\n    * 然后，尝试解析 `%` 后面的填充与对齐说明（padding spec），由 `handle_padspec_` 完成。\n    * 接着，读取 `%` 后面的**标志字符** (flag character)，例如 `l`, `t`, `v`, `Y` 等。\n    * 调用 `handle_flag_` 方法处理这个标志字符和解析出的填充信息。\n```c++\nvoid pattern_formatter::compile_pattern_(const std::string &pattern) {\n    auto end = pattern.end();\n    std::unique_ptr<details::aggregate_formatter> user_chars;\n    formatters_.clear();\n    for (auto it = pattern.begin(); it != end; ++it) {\n        //处理模式字符\n        if (*it == '%') {\n            if (user_chars)  //先将之前的普通字符对象加入进去\n            {\n                formatters_.push_back(std::move(user_chars));\n            }\n\n            auto padding = handle_padspec_(++it, end);\n\n            if (it != end) {\n                if (padding.enabled()) {\n                    handle_flag_<details::scoped_padder>(*it, padding);\n                } else {\n                    handle_flag_<details::null_scoped_padder>(*it, padding);\n                }\n            } else {\n                break;\n            }\n        } else  \n           ......\n        }\n    }\n    if (user_chars)  \n    {\n        formatters_.push_back(std::move(user_chars));\n    }\n}\n```\n4.  **`handle_flag_` 的逻辑:**\n    * **检查自定义标志:** 首先在 `custom_handlers_` (一个存储用户自定义标志处理器的 map) 中查找该标志字符。\n        * 如果找到，说明用户注册了针对该字符的自定义格式化器。创建一个该自定义格式化器的克隆实例，设置好填充信息，并将其添加到 `formatters_` 列表中。**注意：用户自定义标志的优先级高于内置标志。**\n    * **处理内置标志:** 如果不是自定义标志，则进入一个巨大的 `switch` 语句，根据标志字符匹配对应的内置 `flag_formatter` 子类。\n        * 例如，`case 'l'` 会创建一个 `details::level_formatter` 实例；`case 'v'` 会创建一个 `details::v_formatter` 实例；各种时间相关的标志（`Y`, `m`, `d`, `H`, `M`, `S`, `e`, `f`, `F` 等）会创建对应的 `X_formatter` 实例。\n        * 根据是否需要填充，会选择性地使用 `details::scoped_padder` 或 `details::null_scoped_padder` 作为模板参数。\n        * 创建好对应的 formatter 实例后，将其添加到 `formatters_` 列表中。\n    * **处理未知标志:** 如果标志字符既不是自定义的，也不在内置 `switch` 语句中，`spdlog` 默认会将其视为普通文本（连同前面的 `%` 一起）添加到 `aggregate_formatter` 中。\n\n```c++\ntemplate <typename Padder>\nSPDLOG_INLINE void pattern_formatter::handle_flag_(char flag, details::padding_info padding) {\n    //处理自定义的模式字符，遇到直接退出，overrider原本定义的模式字符\n    auto it = custom_handlers_.find(flag);\n    if (it != custom_handlers_.end()) {\n        auto custom_handler = it->second->clone();\n        custom_handler->set_padding_info(padding);\n        formatters_.push_back(std::move(custom_handler));\n        return;\n    }\n\n    switch (flag) {\n        case ('+'):  \n            formatters_.push_back(details::make_unique<details::full_formatter>(padding));\n            need_localtime_ = true;\n            break;\n\n        case 'n':  \n            formatters_.push_back(details::make_unique<details::name_formatter<Padder>>(padding));\n            break;\n\n        case 'l':  \n            formatters_.push_back(details::make_unique<details::level_formatter<Padder>>(padding));\n            break;\n        ......\n        default:  \n            auto unknown_flag = details::make_unique<details::aggregate_formatter>();\n\n            if (!padding.truncate_) {\n                unknown_flag->add_ch('%');\n                unknown_flag->add_ch(flag);\n                formatters_.push_back((std::move(unknown_flag)));\n            }\n        \n            else {\n                padding.truncate_ = false;\n                formatters_.push_back(\n                    details::make_unique<details::source_funcname_formatter<Padder>>(padding));\n                unknown_flag->add_ch(flag);\n                formatters_.push_back((std::move(unknown_flag)));\n            }\n\n            break;\n    }\n}\n```\n5.  **结束处理:** 遍历完整个模式字符串后，如果最后还有未添加的 `aggregate_formatter` 实例（表示模式串以普通字符结尾），则将其添加到 `formatters_` 列表末尾。\n\n```c++\nvoid pattern_formatter::compile_pattern_(const std::string &pattern) {\n    ......\n    //末尾的普通字符要保持\n    if (user_chars)  \n    {\n        formatters_.push_back(std::move(user_chars));\n    }\n}\n```\n经过这个编译阶段，模式字符串就被有效地转换成了一个由 `flag_formatter` 对象组成的、有序的“格式化指令列表” `formatters_`。\n\n## 执行阶段：格式化日志消息\n\n当调用 `pattern_formatter::format(const details::log_msg &msg, memory_buf_t &dest)` 方法来格式化一条具体的日志消息时，执行阶段开始。\n\n这个过程相对简单：\n\n1.  **遍历 `formatters_` 列表:** 按顺序迭代编译阶段生成的 `formatters_` 向量中的每一个 `std::unique_ptr<flag_formatter>`。\n2.  **调用 `format` 方法:** 对每一个 `flag_formatter` 对象，调用其**虚函数 `format(const details::log_msg &msg, const std::tm &tm_time, memory_buf_t &dest)`**。\n    * `spdlog` 会预先计算好日志消息的时间戳对应的 `std::tm` 结构（如果模式中包含时间相关标志），并传递给 `format` 方法。\n    * 每个具体的 `flag_formatter` 子类会实现自己的 `format` 方法，根据其职责从 `msg` 或 `tm_time` 中提取所需信息（如日志级别、线程 ID、格式化的时间部分、日志消息文本等），进行必要的处理和填充，并使用 `fmt_helper` 中的函数将结果**追加 (append)** 到传入的目标缓冲区 `dest` 中。\n3.  **完成格式化:** 当 `formatters_` 列表中的所有对象都执行完其 `format` 方法后，`dest` 缓冲区中就包含了根据原始模式字符串生成的、完整的、格式化好的日志输出。\n\n```c++\nvoid pattern_formatter::format(const details::log_msg &msg, memory_buf_t &dest) {\n    ......\n    for (auto &f : formatters_) {\n        f->format(msg, cached_tm_, dest);\n    }\n    details::fmt_helper::append_string_view(eol_, dest);\n}\n```\n## 关键类与设计\n\n`pattern_formatter` 的设计体现了良好的面向对象思想：\n\n* **`flag_formatter` (基类):** 定义了所有格式化单元的统一接口（主要是 `format` 虚函数），是实现多态的基础。\n* **`aggregate_formatter` (子类):** 处理模式串中的普通文本部分。\n* **众多具体的 `X_formatter` (子类):** 如 `level_formatter`, `v_formatter`, `Y_formatter`, `H_formatter` 等，每个类负责处理一个特定的 `%` 格式标志，实现了单一职责原则。\n* **`pattern_formatter` (协调者):** 负责解析模式串（编译过程），管理 `flag_formatter` 对象列表，并在需要时按顺序调用它们（执行过程）。\n\n这种设计可以看作是**策略模式 (Strategy Pattern)** 的应用：每个 `%` 标志对应一种格式化策略，由一个具体的 `flag_formatter` 子类实现。`pattern_formatter` 在编译时根据模式串选择并组合这些策略，在执行时应用它们。同时，`formatters_` 列表也体现了**组合模式 (Composite Pattern)** 的思想，将简单的格式化单元组合成复杂的格式化逻辑。\n\n## 扩展性：自定义格式标志\n\n`spdlog` 的格式化引擎不仅功能丰富，还具有良好的扩展性，允许用户添加自己定义的格式标志。\n\n实现步骤如下：\n\n1.  **创建自定义 Formatter 类:** 创建一个新类，继承自 `spdlog::custom_flag_formatter`。\n2.  **实现 `format` 方法:** 在新类中重写 `format` 方法，实现自定义的格式化逻辑。你可以从 `log_msg` 对象获取信息，进行处理，并将结果追加到 `dest` 缓冲区。\n3.  **实现 `clone` 方法:** 实现一个 `clone` 方法，用于在编译阶段创建自定义 formatter 的实例。通常是返回 `std::make_unique<YourCustomFormatter>(*this)`。\n4.  **注册自定义标志:** 获取 `pattern_formatter` 对象（或者通过 `spdlog::set_formatter` 设置一个新的），调用其 `add_flag<YourCustomFormatter>(flag_char)` 方法，将你的自定义 formatter 类与一个未被使用的字符（作为新的标志字符）关联起来。\n\n**spdlog中的github上的示例**\n```c++\n#include \"spdlog/pattern_formatter.h\"\nclass my_formatter_flag : public spdlog::custom_flag_formatter\n{\npublic:\n    void format(const spdlog::details::log_msg &, const std::tm &, spdlog::memory_buf_t &dest) override\n    {\n        std::string some_txt = \"custom-flag\";\n        dest.append(some_txt.data(), some_txt.data() + some_txt.size());\n    }\n\n    std::unique_ptr<custom_flag_formatter> clone() const override\n    {\n        return spdlog::details::make_unique<my_formatter_flag>();\n    }\n};\n\nvoid custom_flags_example()\n{    \n    auto formatter = std::make_unique<spdlog::pattern_formatter>();\n    formatter->add_flag<my_formatter_flag>('*').set_pattern(\"[%n] [%*] [%^%l%$] %v\");\n    spdlog::set_formatter(std::move(formatter));\n}\n\n```\n\n完成注册后，`pattern_formatter` 在编译阶段遇到你指定的 `flag_char` 时，就会优先创建并使用你的 `YourCustomFormatter` 实例。如前所述，**自定义标志的优先级高于内置标志**，这意味着你可以用自定义实现覆盖掉 `spdlog` 的默认行为（但不建议覆盖常用标志，最好选择未使用或特殊的字符）。\n\n## 总结\n\n`spdlog` 的 `pattern_formatter` 通过巧妙的“编译-执行”两阶段机制，将用户定义的模式字符串高效地转换并应用于日志消息。其核心在于将模式串解析为一系列 `flag_formatter` 对象，每个对象负责处理模式的一部分。这种基于策略模式和组合模式的设计不仅实现了丰富的功能，还通过 `custom_flag_formatter` 提供了优秀的扩展性。\n\n至此，我们已经完成了对 `spdlog` 核心组件——异步机制、内建 sink、自定义 sink 扩展以及核心格式化引擎 `pattern_formatter` 的剖析。\n\n\n\n","slug":"spdlog/spdlog源码阅读:04.format格式化引擎分析","published":1,"updated":"2025-08-28T12:45:20.495Z","comments":1,"layout":"post","photos":[],"_id":"cmevecvsi0022hfro0ha0eu0v","content":"<h2 id=\"引言\"><a href=\"#引言\" class=\"headerlink\" title=\"引言\"></a>引言</h2><p>在本系列的前三篇文章中，我们依次探讨了 spdlog 的核心异步日志机制、两种常用的内建文件 Sink（<code>daily_file_sink</code> 和 <code>rotating_file_sink</code>），以及如何通过实现自定义 Sink（以 <code>compressed_file_sink</code> 为例）来扩展其功能。至此，我们已经对日志消息的产生、处理、流转以及最终输出有了较为深入的理解。</p>\n<p>现在我们开始剖析spdlog日志中的最后一个组件 <code>formmatter</code>。</p>\n<p><code>spdlog</code> 提供了强大的日志格式化功能，允许用户通过模式字符串 (pattern string) 精确控制日志输出的每一个细节，例如时间戳、日志级别、线程 ID、源代码位置以及日志消息本身。这一核心功能主要由 <code>pattern_formatter</code> 类负责。</p>\n<p>本文将聚焦于 <code>spdlog</code> 的**核心格式化引擎 <code>pattern_formatter</code>**，剖析其如何将用户定义的模式字符串解析、编译，并最终应用于日志消息，生成格式化的输出。通过本文，你将理解：</p>\n<ul>\n<li><code>pattern_formatter</code> 的两阶段工作机制：“编译”与“执行”。</li>\n<li>模式字符串是如何被解析成一系列格式化单元 (<code>flag_formatter</code>) 的。</li>\n<li><code>spdlog</code> 如何支持丰富的内置格式标志（如 <code>%Y</code>, <code>%m</code>, <code>%l</code>, <code>%v</code> 等）。</li>\n<li><code>spdlog</code> 格式化引擎的扩展性：如何实现并注册自定义的格式标志。</li>\n</ul>\n<p><strong>注：本文分析的源码基于 spdlog v1.15.1。</strong></p>\n<span id=\"more\"></span>\n<h2 id=\"pattern-formatter-工作原理：编译与执行\"><a href=\"#pattern-formatter-工作原理：编译与执行\" class=\"headerlink\" title=\"pattern_formatter 工作原理：编译与执行\"></a><code>pattern_formatter</code> 工作原理：<strong>编译与执行</strong></h2><p><code>pattern_formatter</code> 的核心思路是将格式化的过程分为两个阶段：</p>\n<ol>\n<li><strong>编译阶段 (Compilation Phase):</strong> 在创建 <code>pattern_formatter</code> 对象或设置新的模式字符串时执行。它会解析模式字符串，将其转换(或称“编译”)成一个内部的、由多个小型格式化单元 (<code>flag_formatter</code> 对象) 组成的序列。</li>\n<li><strong>执行阶段 (Execution&#x2F;Formatting Phase):</strong> 在每次需要格式化一条具体的日志消息 (<code>log_msg</code>) 时执行。它会按顺序执行“编译”阶段生成好的格式化单元序列，每个单元负责输出模式字符串中的一部分内容，最终拼接成完整的格式化日志。</li>\n</ol>\n<p>下面我们详细分析这两个阶段。</p>\n<h2 id=\"编译阶段：解析模式串\"><a href=\"#编译阶段：解析模式串\" class=\"headerlink\" title=\"编译阶段：解析模式串\"></a>编译阶段：解析模式串</h2><p>编译阶段的目标是将用户提供的模式字符串（如 <code>&quot;%Y-%m-%d %H:%M:%S.%e [%l] %v&quot;</code>）转换成一个 <code>std::vector&lt;std::unique_ptr&lt;flag_formatter&gt;&gt;</code> 对象（即 <code>formatters_</code> 成员变量）。这个过程由 <code>pattern_formatter::compile_pattern_</code> 私有方法完成。</p>\n<p>其主要逻辑如下：</p>\n<ol>\n<li><strong>遍历模式串:</strong> 从头到尾逐个字符地扫描模式字符串。<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">pattern_formatter::compile_pattern_</span><span class=\"params\">(<span class=\"type\">const</span> std::string &amp;pattern)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">auto</span> end = pattern.<span class=\"built_in\">end</span>();</span><br><span class=\"line\">    std::unique_ptr&lt;details::aggregate_formatter&gt; user_chars;</span><br><span class=\"line\">    formatters_.<span class=\"built_in\">clear</span>();</span><br><span class=\"line\">    <span class=\"comment\">//遍历整个模式字符串</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">auto</span> it = pattern.<span class=\"built_in\">begin</span>(); it != end; ++it) &#123;</span><br><span class=\"line\">        ......</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (user_chars) </span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        formatters_.<span class=\"built_in\">push_back</span>(std::<span class=\"built_in\">move</span>(user_chars));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li><strong>处理普通字符:</strong> 如果当前字符不是 <code>%</code>，则将其视为普通文本。<ul>\n<li>创建一个 <code>details::aggregate_formatter</code> 实例（如果尚不存在）。</li>\n<li>调用 <code>aggregate_formatter::add_ch()</code> 方法将该普通字符追加到其内部字符串 <code>str_</code> 中。</li>\n<li>连续的普通字符会被追加到同一个 <code>aggregate_formatter</code> 实例。<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">pattern_formatter::compile_pattern_</span><span class=\"params\">(<span class=\"type\">const</span> std::string &amp;pattern)</span> </span>&#123;</span><br><span class=\"line\">    ......</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">auto</span> it = pattern.<span class=\"built_in\">begin</span>(); it != end; ++it) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (*it == <span class=\"string\">&#x27;%&#x27;</span>) &#123;</span><br><span class=\"line\">           ......</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span>  <span class=\"comment\">//处理普通字符</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (!user_chars) &#123;</span><br><span class=\"line\">                user_chars = details::<span class=\"built_in\">make_unique</span>&lt;details::aggregate_formatter&gt;();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            user_chars-&gt;<span class=\"built_in\">add_ch</span>(*it);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (user_chars)  </span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        formatters_.<span class=\"built_in\">push_back</span>(std::<span class=\"built_in\">move</span>(user_chars));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n<li><strong>处理模式标志 (<code>%</code>):</strong> 如果当前字符是 <code>%</code>：<ul>\n<li>首先，如果之前存在收集普通字符的 <code>aggregate_formatter</code> 实例，则将其添加到 <code>formatters_</code> 列表中。</li>\n<li>然后，尝试解析 <code>%</code> 后面的填充与对齐说明（padding spec），由 <code>handle_padspec_</code> 完成。</li>\n<li>接着，读取 <code>%</code> 后面的<strong>标志字符</strong> (flag character)，例如 <code>l</code>, <code>t</code>, <code>v</code>, <code>Y</code> 等。</li>\n<li>调用 <code>handle_flag_</code> 方法处理这个标志字符和解析出的填充信息。<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">pattern_formatter::compile_pattern_</span><span class=\"params\">(<span class=\"type\">const</span> std::string &amp;pattern)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">auto</span> end = pattern.<span class=\"built_in\">end</span>();</span><br><span class=\"line\">    std::unique_ptr&lt;details::aggregate_formatter&gt; user_chars;</span><br><span class=\"line\">    formatters_.<span class=\"built_in\">clear</span>();</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">auto</span> it = pattern.<span class=\"built_in\">begin</span>(); it != end; ++it) &#123;</span><br><span class=\"line\">        <span class=\"comment\">//处理模式字符</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (*it == <span class=\"string\">&#x27;%&#x27;</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (user_chars)  <span class=\"comment\">//先将之前的普通字符对象加入进去</span></span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                formatters_.<span class=\"built_in\">push_back</span>(std::<span class=\"built_in\">move</span>(user_chars));</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">auto</span> padding = <span class=\"built_in\">handle_padspec_</span>(++it, end);</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (it != end) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (padding.<span class=\"built_in\">enabled</span>()) &#123;</span><br><span class=\"line\">                    <span class=\"built_in\">handle_flag_</span>&lt;details::scoped_padder&gt;(*it, padding);</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                    <span class=\"built_in\">handle_flag_</span>&lt;details::null_scoped_padder&gt;(*it, padding);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span>  </span><br><span class=\"line\">           ......</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (user_chars)  </span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        formatters_.<span class=\"built_in\">push_back</span>(std::<span class=\"built_in\">move</span>(user_chars));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n<li><strong><code>handle_flag_</code> 的逻辑:</strong><ul>\n<li><strong>检查自定义标志:</strong> 首先在 <code>custom_handlers_</code> (一个存储用户自定义标志处理器的 map) 中查找该标志字符。<ul>\n<li>如果找到，说明用户注册了针对该字符的自定义格式化器。创建一个该自定义格式化器的克隆实例，设置好填充信息，并将其添加到 <code>formatters_</code> 列表中。<strong>注意：用户自定义标志的优先级高于内置标志。</strong></li>\n</ul>\n</li>\n<li><strong>处理内置标志:</strong> 如果不是自定义标志，则进入一个巨大的 <code>switch</code> 语句，根据标志字符匹配对应的内置 <code>flag_formatter</code> 子类。<ul>\n<li>例如，<code>case &#39;l&#39;</code> 会创建一个 <code>details::level_formatter</code> 实例；<code>case &#39;v&#39;</code> 会创建一个 <code>details::v_formatter</code> 实例；各种时间相关的标志（<code>Y</code>, <code>m</code>, <code>d</code>, <code>H</code>, <code>M</code>, <code>S</code>, <code>e</code>, <code>f</code>, <code>F</code> 等）会创建对应的 <code>X_formatter</code> 实例。</li>\n<li>根据是否需要填充，会选择性地使用 <code>details::scoped_padder</code> 或 <code>details::null_scoped_padder</code> 作为模板参数。</li>\n<li>创建好对应的 formatter 实例后，将其添加到 <code>formatters_</code> 列表中。</li>\n</ul>\n</li>\n<li><strong>处理未知标志:</strong> 如果标志字符既不是自定义的，也不在内置 <code>switch</code> 语句中，<code>spdlog</code> 默认会将其视为普通文本（连同前面的 <code>%</code> 一起）添加到 <code>aggregate_formatter</code> 中。</li>\n</ul>\n</li>\n</ol>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"keyword\">typename</span> Padder&gt;</span><br><span class=\"line\"><span class=\"function\">SPDLOG_INLINE <span class=\"type\">void</span> <span class=\"title\">pattern_formatter::handle_flag_</span><span class=\"params\">(<span class=\"type\">char</span> flag, details::padding_info padding)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//处理自定义的模式字符，遇到直接退出，overrider原本定义的模式字符</span></span><br><span class=\"line\">    <span class=\"keyword\">auto</span> it = custom_handlers_.<span class=\"built_in\">find</span>(flag);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (it != custom_handlers_.<span class=\"built_in\">end</span>()) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">auto</span> custom_handler = it-&gt;second-&gt;<span class=\"built_in\">clone</span>();</span><br><span class=\"line\">        custom_handler-&gt;<span class=\"built_in\">set_padding_info</span>(padding);</span><br><span class=\"line\">        formatters_.<span class=\"built_in\">push_back</span>(std::<span class=\"built_in\">move</span>(custom_handler));</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">switch</span> (flag) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">case</span> (<span class=\"string\">&#x27;+&#x27;</span>):  </span><br><span class=\"line\">            formatters_.<span class=\"built_in\">push_back</span>(details::<span class=\"built_in\">make_unique</span>&lt;details::full_formatter&gt;(padding));</span><br><span class=\"line\">            need_localtime_ = <span class=\"literal\">true</span>;</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"string\">&#x27;n&#x27;</span>:  </span><br><span class=\"line\">            formatters_.<span class=\"built_in\">push_back</span>(details::make_unique&lt;details::name_formatter&lt;Padder&gt;&gt;(padding));</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"string\">&#x27;l&#x27;</span>:  </span><br><span class=\"line\">            formatters_.<span class=\"built_in\">push_back</span>(details::make_unique&lt;details::level_formatter&lt;Padder&gt;&gt;(padding));</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        ......</span><br><span class=\"line\">        <span class=\"keyword\">default</span>:  </span><br><span class=\"line\">            <span class=\"keyword\">auto</span> unknown_flag = details::<span class=\"built_in\">make_unique</span>&lt;details::aggregate_formatter&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (!padding.truncate_) &#123;</span><br><span class=\"line\">                unknown_flag-&gt;<span class=\"built_in\">add_ch</span>(<span class=\"string\">&#x27;%&#x27;</span>);</span><br><span class=\"line\">                unknown_flag-&gt;<span class=\"built_in\">add_ch</span>(flag);</span><br><span class=\"line\">                formatters_.<span class=\"built_in\">push_back</span>((std::<span class=\"built_in\">move</span>(unknown_flag)));</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">            <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                padding.truncate_ = <span class=\"literal\">false</span>;</span><br><span class=\"line\">                formatters_.<span class=\"built_in\">push_back</span>(</span><br><span class=\"line\">                    details::make_unique&lt;details::source_funcname_formatter&lt;Padder&gt;&gt;(padding));</span><br><span class=\"line\">                unknown_flag-&gt;<span class=\"built_in\">add_ch</span>(flag);</span><br><span class=\"line\">                formatters_.<span class=\"built_in\">push_back</span>((std::<span class=\"built_in\">move</span>(unknown_flag)));</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ol start=\"5\">\n<li><strong>结束处理:</strong> 遍历完整个模式字符串后，如果最后还有未添加的 <code>aggregate_formatter</code> 实例（表示模式串以普通字符结尾），则将其添加到 <code>formatters_</code> 列表末尾。</li>\n</ol>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">pattern_formatter::compile_pattern_</span><span class=\"params\">(<span class=\"type\">const</span> std::string &amp;pattern)</span> </span>&#123;</span><br><span class=\"line\">    ......</span><br><span class=\"line\">    <span class=\"comment\">//末尾的普通字符要保持</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (user_chars)  </span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        formatters_.<span class=\"built_in\">push_back</span>(std::<span class=\"built_in\">move</span>(user_chars));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>经过这个编译阶段，模式字符串就被有效地转换成了一个由 <code>flag_formatter</code> 对象组成的、有序的“格式化指令列表” <code>formatters_</code>。</p>\n<h2 id=\"执行阶段：格式化日志消息\"><a href=\"#执行阶段：格式化日志消息\" class=\"headerlink\" title=\"执行阶段：格式化日志消息\"></a>执行阶段：格式化日志消息</h2><p>当调用 <code>pattern_formatter::format(const details::log_msg &amp;msg, memory_buf_t &amp;dest)</code> 方法来格式化一条具体的日志消息时，执行阶段开始。</p>\n<p>这个过程相对简单：</p>\n<ol>\n<li><strong>遍历 <code>formatters_</code> 列表:</strong> 按顺序迭代编译阶段生成的 <code>formatters_</code> 向量中的每一个 <code>std::unique_ptr&lt;flag_formatter&gt;</code>。</li>\n<li><strong>调用 <code>format</code> 方法:</strong> 对每一个 <code>flag_formatter</code> 对象，调用其**虚函数 <code>format(const details::log_msg &amp;msg, const std::tm &amp;tm_time, memory_buf_t &amp;dest)</code>**。<ul>\n<li><code>spdlog</code> 会预先计算好日志消息的时间戳对应的 <code>std::tm</code> 结构（如果模式中包含时间相关标志），并传递给 <code>format</code> 方法。</li>\n<li>每个具体的 <code>flag_formatter</code> 子类会实现自己的 <code>format</code> 方法，根据其职责从 <code>msg</code> 或 <code>tm_time</code> 中提取所需信息（如日志级别、线程 ID、格式化的时间部分、日志消息文本等），进行必要的处理和填充，并使用 <code>fmt_helper</code> 中的函数将结果<strong>追加 (append)</strong> 到传入的目标缓冲区 <code>dest</code> 中。</li>\n</ul>\n</li>\n<li><strong>完成格式化:</strong> 当 <code>formatters_</code> 列表中的所有对象都执行完其 <code>format</code> 方法后，<code>dest</code> 缓冲区中就包含了根据原始模式字符串生成的、完整的、格式化好的日志输出。</li>\n</ol>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">pattern_formatter::format</span><span class=\"params\">(<span class=\"type\">const</span> details::log_msg &amp;msg, <span class=\"type\">memory_buf_t</span> &amp;dest)</span> </span>&#123;</span><br><span class=\"line\">    ......</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">auto</span> &amp;f : formatters_) &#123;</span><br><span class=\"line\">        f-&gt;format(msg, cached_tm_, dest);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    details::fmt_helper::<span class=\"built_in\">append_string_view</span>(eol_, dest);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"关键类与设计\"><a href=\"#关键类与设计\" class=\"headerlink\" title=\"关键类与设计\"></a>关键类与设计</h2><p><code>pattern_formatter</code> 的设计体现了良好的面向对象思想：</p>\n<ul>\n<li><strong><code>flag_formatter</code> (基类):</strong> 定义了所有格式化单元的统一接口（主要是 <code>format</code> 虚函数），是实现多态的基础。</li>\n<li><strong><code>aggregate_formatter</code> (子类):</strong> 处理模式串中的普通文本部分。</li>\n<li><strong>众多具体的 <code>X_formatter</code> (子类):</strong> 如 <code>level_formatter</code>, <code>v_formatter</code>, <code>Y_formatter</code>, <code>H_formatter</code> 等，每个类负责处理一个特定的 <code>%</code> 格式标志，实现了单一职责原则。</li>\n<li><strong><code>pattern_formatter</code> (协调者):</strong> 负责解析模式串（编译过程），管理 <code>flag_formatter</code> 对象列表，并在需要时按顺序调用它们（执行过程）。</li>\n</ul>\n<p>这种设计可以看作是<strong>策略模式 (Strategy Pattern)</strong> 的应用：每个 <code>%</code> 标志对应一种格式化策略，由一个具体的 <code>flag_formatter</code> 子类实现。<code>pattern_formatter</code> 在编译时根据模式串选择并组合这些策略，在执行时应用它们。同时，<code>formatters_</code> 列表也体现了<strong>组合模式 (Composite Pattern)</strong> 的思想，将简单的格式化单元组合成复杂的格式化逻辑。</p>\n<h2 id=\"扩展性：自定义格式标志\"><a href=\"#扩展性：自定义格式标志\" class=\"headerlink\" title=\"扩展性：自定义格式标志\"></a>扩展性：自定义格式标志</h2><p><code>spdlog</code> 的格式化引擎不仅功能丰富，还具有良好的扩展性，允许用户添加自己定义的格式标志。</p>\n<p>实现步骤如下：</p>\n<ol>\n<li><strong>创建自定义 Formatter 类:</strong> 创建一个新类，继承自 <code>spdlog::custom_flag_formatter</code>。</li>\n<li><strong>实现 <code>format</code> 方法:</strong> 在新类中重写 <code>format</code> 方法，实现自定义的格式化逻辑。你可以从 <code>log_msg</code> 对象获取信息，进行处理，并将结果追加到 <code>dest</code> 缓冲区。</li>\n<li><strong>实现 <code>clone</code> 方法:</strong> 实现一个 <code>clone</code> 方法，用于在编译阶段创建自定义 formatter 的实例。通常是返回 <code>std::make_unique&lt;YourCustomFormatter&gt;(*this)</code>。</li>\n<li><strong>注册自定义标志:</strong> 获取 <code>pattern_formatter</code> 对象（或者通过 <code>spdlog::set_formatter</code> 设置一个新的），调用其 <code>add_flag&lt;YourCustomFormatter&gt;(flag_char)</code> 方法，将你的自定义 formatter 类与一个未被使用的字符（作为新的标志字符）关联起来。</li>\n</ol>\n<p><strong>spdlog中的github上的示例</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;spdlog/pattern_formatter.h&quot;</span></span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">my_formatter_flag</span> : <span class=\"keyword\">public</span> spdlog::custom_flag_formatter</span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">format</span><span class=\"params\">(<span class=\"type\">const</span> spdlog::details::log_msg &amp;, <span class=\"type\">const</span> std::tm &amp;, spdlog::<span class=\"type\">memory_buf_t</span> &amp;dest)</span> <span class=\"keyword\">override</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        std::string some_txt = <span class=\"string\">&quot;custom-flag&quot;</span>;</span><br><span class=\"line\">        dest.<span class=\"built_in\">append</span>(some_txt.<span class=\"built_in\">data</span>(), some_txt.<span class=\"built_in\">data</span>() + some_txt.<span class=\"built_in\">size</span>());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\">std::unique_ptr&lt;custom_flag_formatter&gt; <span class=\"title\">clone</span><span class=\"params\">()</span> <span class=\"type\">const</span> <span class=\"keyword\">override</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> spdlog::details::<span class=\"built_in\">make_unique</span>&lt;my_formatter_flag&gt;();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">custom_flags_example</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;    </span><br><span class=\"line\">    <span class=\"keyword\">auto</span> formatter = std::<span class=\"built_in\">make_unique</span>&lt;spdlog::pattern_formatter&gt;();</span><br><span class=\"line\">    formatter-&gt;<span class=\"built_in\">add_flag</span>&lt;my_formatter_flag&gt;(<span class=\"string\">&#x27;*&#x27;</span>).<span class=\"built_in\">set_pattern</span>(<span class=\"string\">&quot;[%n] [%*] [%^%l%$] %v&quot;</span>);</span><br><span class=\"line\">    spdlog::<span class=\"built_in\">set_formatter</span>(std::<span class=\"built_in\">move</span>(formatter));</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>完成注册后，<code>pattern_formatter</code> 在编译阶段遇到你指定的 <code>flag_char</code> 时，就会优先创建并使用你的 <code>YourCustomFormatter</code> 实例。如前所述，<strong>自定义标志的优先级高于内置标志</strong>，这意味着你可以用自定义实现覆盖掉 <code>spdlog</code> 的默认行为（但不建议覆盖常用标志，最好选择未使用或特殊的字符）。</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p><code>spdlog</code> 的 <code>pattern_formatter</code> 通过巧妙的“编译-执行”两阶段机制，将用户定义的模式字符串高效地转换并应用于日志消息。其核心在于将模式串解析为一系列 <code>flag_formatter</code> 对象，每个对象负责处理模式的一部分。这种基于策略模式和组合模式的设计不仅实现了丰富的功能，还通过 <code>custom_flag_formatter</code> 提供了优秀的扩展性。</p>\n<p>至此，我们已经完成了对 <code>spdlog</code> 核心组件——异步机制、内建 sink、自定义 sink 扩展以及核心格式化引擎 <code>pattern_formatter</code> 的剖析。</p>\n","excerpt":"<h2 id=\"引言\"><a href=\"#引言\" class=\"headerlink\" title=\"引言\"></a>引言</h2><p>在本系列的前三篇文章中，我们依次探讨了 spdlog 的核心异步日志机制、两种常用的内建文件 Sink（<code>daily_file_sink</code> 和 <code>rotating_file_sink</code>），以及如何通过实现自定义 Sink（以 <code>compressed_file_sink</code> 为例）来扩展其功能。至此，我们已经对日志消息的产生、处理、流转以及最终输出有了较为深入的理解。</p>\n<p>现在我们开始剖析spdlog日志中的最后一个组件 <code>formmatter</code>。</p>\n<p><code>spdlog</code> 提供了强大的日志格式化功能，允许用户通过模式字符串 (pattern string) 精确控制日志输出的每一个细节，例如时间戳、日志级别、线程 ID、源代码位置以及日志消息本身。这一核心功能主要由 <code>pattern_formatter</code> 类负责。</p>\n<p>本文将聚焦于 <code>spdlog</code> 的**核心格式化引擎 <code>pattern_formatter</code>**，剖析其如何将用户定义的模式字符串解析、编译，并最终应用于日志消息，生成格式化的输出。通过本文，你将理解：</p>\n<ul>\n<li><code>pattern_formatter</code> 的两阶段工作机制：“编译”与“执行”。</li>\n<li>模式字符串是如何被解析成一系列格式化单元 (<code>flag_formatter</code>) 的。</li>\n<li><code>spdlog</code> 如何支持丰富的内置格式标志（如 <code>%Y</code>, <code>%m</code>, <code>%l</code>, <code>%v</code> 等）。</li>\n<li><code>spdlog</code> 格式化引擎的扩展性：如何实现并注册自定义的格式标志。</li>\n</ul>\n<p><strong>注：本文分析的源码基于 spdlog v1.15.1。</strong></p>","more":"<h2 id=\"pattern-formatter-工作原理：编译与执行\"><a href=\"#pattern-formatter-工作原理：编译与执行\" class=\"headerlink\" title=\"pattern_formatter 工作原理：编译与执行\"></a><code>pattern_formatter</code> 工作原理：<strong>编译与执行</strong></h2><p><code>pattern_formatter</code> 的核心思路是将格式化的过程分为两个阶段：</p>\n<ol>\n<li><strong>编译阶段 (Compilation Phase):</strong> 在创建 <code>pattern_formatter</code> 对象或设置新的模式字符串时执行。它会解析模式字符串，将其转换(或称“编译”)成一个内部的、由多个小型格式化单元 (<code>flag_formatter</code> 对象) 组成的序列。</li>\n<li><strong>执行阶段 (Execution&#x2F;Formatting Phase):</strong> 在每次需要格式化一条具体的日志消息 (<code>log_msg</code>) 时执行。它会按顺序执行“编译”阶段生成好的格式化单元序列，每个单元负责输出模式字符串中的一部分内容，最终拼接成完整的格式化日志。</li>\n</ol>\n<p>下面我们详细分析这两个阶段。</p>\n<h2 id=\"编译阶段：解析模式串\"><a href=\"#编译阶段：解析模式串\" class=\"headerlink\" title=\"编译阶段：解析模式串\"></a>编译阶段：解析模式串</h2><p>编译阶段的目标是将用户提供的模式字符串（如 <code>&quot;%Y-%m-%d %H:%M:%S.%e [%l] %v&quot;</code>）转换成一个 <code>std::vector&lt;std::unique_ptr&lt;flag_formatter&gt;&gt;</code> 对象（即 <code>formatters_</code> 成员变量）。这个过程由 <code>pattern_formatter::compile_pattern_</code> 私有方法完成。</p>\n<p>其主要逻辑如下：</p>\n<ol>\n<li><strong>遍历模式串:</strong> 从头到尾逐个字符地扫描模式字符串。<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">pattern_formatter::compile_pattern_</span><span class=\"params\">(<span class=\"type\">const</span> std::string &amp;pattern)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">auto</span> end = pattern.<span class=\"built_in\">end</span>();</span><br><span class=\"line\">    std::unique_ptr&lt;details::aggregate_formatter&gt; user_chars;</span><br><span class=\"line\">    formatters_.<span class=\"built_in\">clear</span>();</span><br><span class=\"line\">    <span class=\"comment\">//遍历整个模式字符串</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">auto</span> it = pattern.<span class=\"built_in\">begin</span>(); it != end; ++it) &#123;</span><br><span class=\"line\">        ......</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (user_chars) </span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        formatters_.<span class=\"built_in\">push_back</span>(std::<span class=\"built_in\">move</span>(user_chars));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li><strong>处理普通字符:</strong> 如果当前字符不是 <code>%</code>，则将其视为普通文本。<ul>\n<li>创建一个 <code>details::aggregate_formatter</code> 实例（如果尚不存在）。</li>\n<li>调用 <code>aggregate_formatter::add_ch()</code> 方法将该普通字符追加到其内部字符串 <code>str_</code> 中。</li>\n<li>连续的普通字符会被追加到同一个 <code>aggregate_formatter</code> 实例。<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">pattern_formatter::compile_pattern_</span><span class=\"params\">(<span class=\"type\">const</span> std::string &amp;pattern)</span> </span>&#123;</span><br><span class=\"line\">    ......</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">auto</span> it = pattern.<span class=\"built_in\">begin</span>(); it != end; ++it) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (*it == <span class=\"string\">&#x27;%&#x27;</span>) &#123;</span><br><span class=\"line\">           ......</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span>  <span class=\"comment\">//处理普通字符</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (!user_chars) &#123;</span><br><span class=\"line\">                user_chars = details::<span class=\"built_in\">make_unique</span>&lt;details::aggregate_formatter&gt;();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            user_chars-&gt;<span class=\"built_in\">add_ch</span>(*it);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (user_chars)  </span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        formatters_.<span class=\"built_in\">push_back</span>(std::<span class=\"built_in\">move</span>(user_chars));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n<li><strong>处理模式标志 (<code>%</code>):</strong> 如果当前字符是 <code>%</code>：<ul>\n<li>首先，如果之前存在收集普通字符的 <code>aggregate_formatter</code> 实例，则将其添加到 <code>formatters_</code> 列表中。</li>\n<li>然后，尝试解析 <code>%</code> 后面的填充与对齐说明（padding spec），由 <code>handle_padspec_</code> 完成。</li>\n<li>接着，读取 <code>%</code> 后面的<strong>标志字符</strong> (flag character)，例如 <code>l</code>, <code>t</code>, <code>v</code>, <code>Y</code> 等。</li>\n<li>调用 <code>handle_flag_</code> 方法处理这个标志字符和解析出的填充信息。<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">pattern_formatter::compile_pattern_</span><span class=\"params\">(<span class=\"type\">const</span> std::string &amp;pattern)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">auto</span> end = pattern.<span class=\"built_in\">end</span>();</span><br><span class=\"line\">    std::unique_ptr&lt;details::aggregate_formatter&gt; user_chars;</span><br><span class=\"line\">    formatters_.<span class=\"built_in\">clear</span>();</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">auto</span> it = pattern.<span class=\"built_in\">begin</span>(); it != end; ++it) &#123;</span><br><span class=\"line\">        <span class=\"comment\">//处理模式字符</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (*it == <span class=\"string\">&#x27;%&#x27;</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (user_chars)  <span class=\"comment\">//先将之前的普通字符对象加入进去</span></span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                formatters_.<span class=\"built_in\">push_back</span>(std::<span class=\"built_in\">move</span>(user_chars));</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">auto</span> padding = <span class=\"built_in\">handle_padspec_</span>(++it, end);</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (it != end) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (padding.<span class=\"built_in\">enabled</span>()) &#123;</span><br><span class=\"line\">                    <span class=\"built_in\">handle_flag_</span>&lt;details::scoped_padder&gt;(*it, padding);</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                    <span class=\"built_in\">handle_flag_</span>&lt;details::null_scoped_padder&gt;(*it, padding);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span>  </span><br><span class=\"line\">           ......</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (user_chars)  </span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        formatters_.<span class=\"built_in\">push_back</span>(std::<span class=\"built_in\">move</span>(user_chars));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n<li><strong><code>handle_flag_</code> 的逻辑:</strong><ul>\n<li><strong>检查自定义标志:</strong> 首先在 <code>custom_handlers_</code> (一个存储用户自定义标志处理器的 map) 中查找该标志字符。<ul>\n<li>如果找到，说明用户注册了针对该字符的自定义格式化器。创建一个该自定义格式化器的克隆实例，设置好填充信息，并将其添加到 <code>formatters_</code> 列表中。<strong>注意：用户自定义标志的优先级高于内置标志。</strong></li>\n</ul>\n</li>\n<li><strong>处理内置标志:</strong> 如果不是自定义标志，则进入一个巨大的 <code>switch</code> 语句，根据标志字符匹配对应的内置 <code>flag_formatter</code> 子类。<ul>\n<li>例如，<code>case &#39;l&#39;</code> 会创建一个 <code>details::level_formatter</code> 实例；<code>case &#39;v&#39;</code> 会创建一个 <code>details::v_formatter</code> 实例；各种时间相关的标志（<code>Y</code>, <code>m</code>, <code>d</code>, <code>H</code>, <code>M</code>, <code>S</code>, <code>e</code>, <code>f</code>, <code>F</code> 等）会创建对应的 <code>X_formatter</code> 实例。</li>\n<li>根据是否需要填充，会选择性地使用 <code>details::scoped_padder</code> 或 <code>details::null_scoped_padder</code> 作为模板参数。</li>\n<li>创建好对应的 formatter 实例后，将其添加到 <code>formatters_</code> 列表中。</li>\n</ul>\n</li>\n<li><strong>处理未知标志:</strong> 如果标志字符既不是自定义的，也不在内置 <code>switch</code> 语句中，<code>spdlog</code> 默认会将其视为普通文本（连同前面的 <code>%</code> 一起）添加到 <code>aggregate_formatter</code> 中。</li>\n</ul>\n</li>\n</ol>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"keyword\">typename</span> Padder&gt;</span><br><span class=\"line\"><span class=\"function\">SPDLOG_INLINE <span class=\"type\">void</span> <span class=\"title\">pattern_formatter::handle_flag_</span><span class=\"params\">(<span class=\"type\">char</span> flag, details::padding_info padding)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//处理自定义的模式字符，遇到直接退出，overrider原本定义的模式字符</span></span><br><span class=\"line\">    <span class=\"keyword\">auto</span> it = custom_handlers_.<span class=\"built_in\">find</span>(flag);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (it != custom_handlers_.<span class=\"built_in\">end</span>()) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">auto</span> custom_handler = it-&gt;second-&gt;<span class=\"built_in\">clone</span>();</span><br><span class=\"line\">        custom_handler-&gt;<span class=\"built_in\">set_padding_info</span>(padding);</span><br><span class=\"line\">        formatters_.<span class=\"built_in\">push_back</span>(std::<span class=\"built_in\">move</span>(custom_handler));</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">switch</span> (flag) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">case</span> (<span class=\"string\">&#x27;+&#x27;</span>):  </span><br><span class=\"line\">            formatters_.<span class=\"built_in\">push_back</span>(details::<span class=\"built_in\">make_unique</span>&lt;details::full_formatter&gt;(padding));</span><br><span class=\"line\">            need_localtime_ = <span class=\"literal\">true</span>;</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"string\">&#x27;n&#x27;</span>:  </span><br><span class=\"line\">            formatters_.<span class=\"built_in\">push_back</span>(details::make_unique&lt;details::name_formatter&lt;Padder&gt;&gt;(padding));</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"string\">&#x27;l&#x27;</span>:  </span><br><span class=\"line\">            formatters_.<span class=\"built_in\">push_back</span>(details::make_unique&lt;details::level_formatter&lt;Padder&gt;&gt;(padding));</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        ......</span><br><span class=\"line\">        <span class=\"keyword\">default</span>:  </span><br><span class=\"line\">            <span class=\"keyword\">auto</span> unknown_flag = details::<span class=\"built_in\">make_unique</span>&lt;details::aggregate_formatter&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (!padding.truncate_) &#123;</span><br><span class=\"line\">                unknown_flag-&gt;<span class=\"built_in\">add_ch</span>(<span class=\"string\">&#x27;%&#x27;</span>);</span><br><span class=\"line\">                unknown_flag-&gt;<span class=\"built_in\">add_ch</span>(flag);</span><br><span class=\"line\">                formatters_.<span class=\"built_in\">push_back</span>((std::<span class=\"built_in\">move</span>(unknown_flag)));</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">            <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                padding.truncate_ = <span class=\"literal\">false</span>;</span><br><span class=\"line\">                formatters_.<span class=\"built_in\">push_back</span>(</span><br><span class=\"line\">                    details::make_unique&lt;details::source_funcname_formatter&lt;Padder&gt;&gt;(padding));</span><br><span class=\"line\">                unknown_flag-&gt;<span class=\"built_in\">add_ch</span>(flag);</span><br><span class=\"line\">                formatters_.<span class=\"built_in\">push_back</span>((std::<span class=\"built_in\">move</span>(unknown_flag)));</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ol start=\"5\">\n<li><strong>结束处理:</strong> 遍历完整个模式字符串后，如果最后还有未添加的 <code>aggregate_formatter</code> 实例（表示模式串以普通字符结尾），则将其添加到 <code>formatters_</code> 列表末尾。</li>\n</ol>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">pattern_formatter::compile_pattern_</span><span class=\"params\">(<span class=\"type\">const</span> std::string &amp;pattern)</span> </span>&#123;</span><br><span class=\"line\">    ......</span><br><span class=\"line\">    <span class=\"comment\">//末尾的普通字符要保持</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (user_chars)  </span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        formatters_.<span class=\"built_in\">push_back</span>(std::<span class=\"built_in\">move</span>(user_chars));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>经过这个编译阶段，模式字符串就被有效地转换成了一个由 <code>flag_formatter</code> 对象组成的、有序的“格式化指令列表” <code>formatters_</code>。</p>\n<h2 id=\"执行阶段：格式化日志消息\"><a href=\"#执行阶段：格式化日志消息\" class=\"headerlink\" title=\"执行阶段：格式化日志消息\"></a>执行阶段：格式化日志消息</h2><p>当调用 <code>pattern_formatter::format(const details::log_msg &amp;msg, memory_buf_t &amp;dest)</code> 方法来格式化一条具体的日志消息时，执行阶段开始。</p>\n<p>这个过程相对简单：</p>\n<ol>\n<li><strong>遍历 <code>formatters_</code> 列表:</strong> 按顺序迭代编译阶段生成的 <code>formatters_</code> 向量中的每一个 <code>std::unique_ptr&lt;flag_formatter&gt;</code>。</li>\n<li><strong>调用 <code>format</code> 方法:</strong> 对每一个 <code>flag_formatter</code> 对象，调用其**虚函数 <code>format(const details::log_msg &amp;msg, const std::tm &amp;tm_time, memory_buf_t &amp;dest)</code>**。<ul>\n<li><code>spdlog</code> 会预先计算好日志消息的时间戳对应的 <code>std::tm</code> 结构（如果模式中包含时间相关标志），并传递给 <code>format</code> 方法。</li>\n<li>每个具体的 <code>flag_formatter</code> 子类会实现自己的 <code>format</code> 方法，根据其职责从 <code>msg</code> 或 <code>tm_time</code> 中提取所需信息（如日志级别、线程 ID、格式化的时间部分、日志消息文本等），进行必要的处理和填充，并使用 <code>fmt_helper</code> 中的函数将结果<strong>追加 (append)</strong> 到传入的目标缓冲区 <code>dest</code> 中。</li>\n</ul>\n</li>\n<li><strong>完成格式化:</strong> 当 <code>formatters_</code> 列表中的所有对象都执行完其 <code>format</code> 方法后，<code>dest</code> 缓冲区中就包含了根据原始模式字符串生成的、完整的、格式化好的日志输出。</li>\n</ol>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">pattern_formatter::format</span><span class=\"params\">(<span class=\"type\">const</span> details::log_msg &amp;msg, <span class=\"type\">memory_buf_t</span> &amp;dest)</span> </span>&#123;</span><br><span class=\"line\">    ......</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">auto</span> &amp;f : formatters_) &#123;</span><br><span class=\"line\">        f-&gt;format(msg, cached_tm_, dest);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    details::fmt_helper::<span class=\"built_in\">append_string_view</span>(eol_, dest);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"关键类与设计\"><a href=\"#关键类与设计\" class=\"headerlink\" title=\"关键类与设计\"></a>关键类与设计</h2><p><code>pattern_formatter</code> 的设计体现了良好的面向对象思想：</p>\n<ul>\n<li><strong><code>flag_formatter</code> (基类):</strong> 定义了所有格式化单元的统一接口（主要是 <code>format</code> 虚函数），是实现多态的基础。</li>\n<li><strong><code>aggregate_formatter</code> (子类):</strong> 处理模式串中的普通文本部分。</li>\n<li><strong>众多具体的 <code>X_formatter</code> (子类):</strong> 如 <code>level_formatter</code>, <code>v_formatter</code>, <code>Y_formatter</code>, <code>H_formatter</code> 等，每个类负责处理一个特定的 <code>%</code> 格式标志，实现了单一职责原则。</li>\n<li><strong><code>pattern_formatter</code> (协调者):</strong> 负责解析模式串（编译过程），管理 <code>flag_formatter</code> 对象列表，并在需要时按顺序调用它们（执行过程）。</li>\n</ul>\n<p>这种设计可以看作是<strong>策略模式 (Strategy Pattern)</strong> 的应用：每个 <code>%</code> 标志对应一种格式化策略，由一个具体的 <code>flag_formatter</code> 子类实现。<code>pattern_formatter</code> 在编译时根据模式串选择并组合这些策略，在执行时应用它们。同时，<code>formatters_</code> 列表也体现了<strong>组合模式 (Composite Pattern)</strong> 的思想，将简单的格式化单元组合成复杂的格式化逻辑。</p>\n<h2 id=\"扩展性：自定义格式标志\"><a href=\"#扩展性：自定义格式标志\" class=\"headerlink\" title=\"扩展性：自定义格式标志\"></a>扩展性：自定义格式标志</h2><p><code>spdlog</code> 的格式化引擎不仅功能丰富，还具有良好的扩展性，允许用户添加自己定义的格式标志。</p>\n<p>实现步骤如下：</p>\n<ol>\n<li><strong>创建自定义 Formatter 类:</strong> 创建一个新类，继承自 <code>spdlog::custom_flag_formatter</code>。</li>\n<li><strong>实现 <code>format</code> 方法:</strong> 在新类中重写 <code>format</code> 方法，实现自定义的格式化逻辑。你可以从 <code>log_msg</code> 对象获取信息，进行处理，并将结果追加到 <code>dest</code> 缓冲区。</li>\n<li><strong>实现 <code>clone</code> 方法:</strong> 实现一个 <code>clone</code> 方法，用于在编译阶段创建自定义 formatter 的实例。通常是返回 <code>std::make_unique&lt;YourCustomFormatter&gt;(*this)</code>。</li>\n<li><strong>注册自定义标志:</strong> 获取 <code>pattern_formatter</code> 对象（或者通过 <code>spdlog::set_formatter</code> 设置一个新的），调用其 <code>add_flag&lt;YourCustomFormatter&gt;(flag_char)</code> 方法，将你的自定义 formatter 类与一个未被使用的字符（作为新的标志字符）关联起来。</li>\n</ol>\n<p><strong>spdlog中的github上的示例</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;spdlog/pattern_formatter.h&quot;</span></span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">my_formatter_flag</span> : <span class=\"keyword\">public</span> spdlog::custom_flag_formatter</span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">format</span><span class=\"params\">(<span class=\"type\">const</span> spdlog::details::log_msg &amp;, <span class=\"type\">const</span> std::tm &amp;, spdlog::<span class=\"type\">memory_buf_t</span> &amp;dest)</span> <span class=\"keyword\">override</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        std::string some_txt = <span class=\"string\">&quot;custom-flag&quot;</span>;</span><br><span class=\"line\">        dest.<span class=\"built_in\">append</span>(some_txt.<span class=\"built_in\">data</span>(), some_txt.<span class=\"built_in\">data</span>() + some_txt.<span class=\"built_in\">size</span>());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\">std::unique_ptr&lt;custom_flag_formatter&gt; <span class=\"title\">clone</span><span class=\"params\">()</span> <span class=\"type\">const</span> <span class=\"keyword\">override</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> spdlog::details::<span class=\"built_in\">make_unique</span>&lt;my_formatter_flag&gt;();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">custom_flags_example</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;    </span><br><span class=\"line\">    <span class=\"keyword\">auto</span> formatter = std::<span class=\"built_in\">make_unique</span>&lt;spdlog::pattern_formatter&gt;();</span><br><span class=\"line\">    formatter-&gt;<span class=\"built_in\">add_flag</span>&lt;my_formatter_flag&gt;(<span class=\"string\">&#x27;*&#x27;</span>).<span class=\"built_in\">set_pattern</span>(<span class=\"string\">&quot;[%n] [%*] [%^%l%$] %v&quot;</span>);</span><br><span class=\"line\">    spdlog::<span class=\"built_in\">set_formatter</span>(std::<span class=\"built_in\">move</span>(formatter));</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>完成注册后，<code>pattern_formatter</code> 在编译阶段遇到你指定的 <code>flag_char</code> 时，就会优先创建并使用你的 <code>YourCustomFormatter</code> 实例。如前所述，<strong>自定义标志的优先级高于内置标志</strong>，这意味着你可以用自定义实现覆盖掉 <code>spdlog</code> 的默认行为（但不建议覆盖常用标志，最好选择未使用或特殊的字符）。</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p><code>spdlog</code> 的 <code>pattern_formatter</code> 通过巧妙的“编译-执行”两阶段机制，将用户定义的模式字符串高效地转换并应用于日志消息。其核心在于将模式串解析为一系列 <code>flag_formatter</code> 对象，每个对象负责处理模式的一部分。这种基于策略模式和组合模式的设计不仅实现了丰富的功能，还通过 <code>custom_flag_formatter</code> 提供了优秀的扩展性。</p>\n<p>至此，我们已经完成了对 <code>spdlog</code> 核心组件——异步机制、内建 sink、自定义 sink 扩展以及核心格式化引擎 <code>pattern_formatter</code> 的剖析。</p>"},{"title":"spdlog源码阅读:05.spdlog性能优化尝试","date":"2025-08-25T16:00:00.000Z","_content":"## 引言\n\n在本系列的前四篇文章中，我们对 `spdlog` 的异步机制、文件 Sink、自定义 Sink 扩展以及核心格式化引擎 `pattern_formatter` 进行了深入剖析。通过这些分析，我们对 `spdlog` 的设计哲学和实现细节有了全面的理解。`spdlog` 以其丰富的功能和相对不错的性能得到了广泛应用，但其默认的异步日志模型（基于共享的 MPMC 阻塞队列）在高并发、多生产者场景下，队列的锁竞争可能成为性能瓶颈。\n\n受到 `nanolog` 等高性能日志库关于利用 `thread_local` 减少前端竞争思想的启发，本文将详细阐述一种对 `spdlog` 异步日志机制的改进方案。核心思路是将原有的“多生产者-单消费者 (MPSC)”模型，演进为“**多个独立的单生产者-单消费者 (SPSC) 模型集合 + 后端统一合并处理**”的架构，旨在显著降低生产者线程间的锁竞争，并利用最小堆保证全局日志的时间顺序，以期获得性能上的提升。\n\n通过本文，你将了解到：\n\n* 该改进方案的设计思想与架构。\n* 如何利用 `thread_local` 为每个生产者线程创建独立的 SPSC 队列。\n* 后端消费者线程如何发现、管理这些动态创建的队列。\n* 如何通过最小堆（优先级队列）对来自不同 SPSC 队列的日志消息进行时间戳排序，以保证全局顺序。\n* 关键组件（如 `details::thread_pool_local`、`spsc_blocking_queue`）的设计与核心实现。\n* 以及笔者通过实验验证此方案相较于原版 `spdlog` 带来的性能提升。\n\n**注：本文的改进方案基于对 `spdlog` v1.15.1 的理解和修改实践。**\n<!-- more -->\n## 核心改进思路：从 MPMC 到 “`thread_local` SPSC 集合 + 最小堆合并”\n\n`spdlog` 默认的异步模型中，所有生产者（业务线程）共享一个中央的 `mpmc_blocking_queue`。在高并发写入时，对该队列的互斥锁（`std::mutex`）的竞争会成为影响前端（业务线程）性能的瓶颈。\n\n我们的改进思路旨在通过以下方式优化这一模型：\n\n1.  **前端无锁化 (或极低锁)：** 为每一个首次进行日志记录的生产者线程，通过 `thread_local` 动态创建一个专属于该线程的、轻量级的 **SPSC (Single-Producer, Single-Consumer) 阻塞队列**。日志消息直接写入这个线程局部队列。由于每个队列只有一个生产者（即线程自身），写入操作可以降低锁的开销。\n2.  **后端集中处理与排序：** 单个后台消费者线程负责从所有这些 `thread_local` SPSC 队列中收集日志消息。\n3.  **保证全局顺序：** 收集到的日志消息可能来自不同的生产者线程，其时间戳可能是交错的。为了保证最终输出的日志具有全局严格的时间顺序，消费者线程在将消息送往 Sink 之前，会使用一个**基于时间戳的最小堆（优先级队列）**对这些消息进行排序。\n\n整体架构从原先的：\n\n![mpmc.png](/images/mpmc.png)\n\n演变为：\n\n![spsc.png](/images/spsc.png)\n## 关键组件设计与实现\n\n为了实现上述思路，我们需要对 `spdlog` 的核心异步组件 `details::thread_pool` 进行改造，并引入新的队列类型。我们将改造后的线程池称为 `details::thread_pool_local`，新的 `logger` 实现称为 `async_logger_local`。\n\n### 1. `thread_local` SPSC 队列的创建与管理\n\n* **`thread_local q_ptr_local_`**: 在 `details::thread_pool_local` 中，我们定义一个 `static thread_local` 的指向 SPSC 队列的智能指针。\n```c++\nusing item_type = async_msg_local;\nusing q_type = details::spsc_blocking_queue<item_type>;\nusing q_type_ptr = std::shared_ptr<q_type>;\nstatic thread_local q_type_ptr q_ptr_local_;\n```\n* **按需创建**: 当一个生产者线程首次调用日志接口（如 `async_logger_local::sink_it_` 内部会调用到 `thread_pool_local::post_async_msg_`）时，会检查 `q_ptr_local_` 是否为空。如果为空，表示该线程尚未拥有自己的 SPSC 队列。\n   * 此时，需要创建一个新的 SPSC 队列实例（`std::make_shared<q_type>(queue_capacity)`）。\n   * 这个新创建的队列指针不仅赋值给 `q_ptr_local_`，还需要**注册到一个全局的、消费者线程可见的队列池中**，例如 `q_ptrs_front_`（一个 `std::vector<q_type_ptr>`，需要用锁保护其访问）。\n* **前端写入**: 生产者线程后续的日志消息都将直接写入其 `q_ptr_local_` 指向的线程局部 SPSC 队列。\n\n```c++\nif (q_ptr_local_ == nullptr)\n{\n    std::unique_lock<std::recursive_mutex> lock(que_mutex_); // que_mutex_ 保护 q_ptrs_front_\n    q_ptr_local_ = std::make_shared<q_type>(INITIAL_QUEUE_CAPACITY); // q_type 是新的SPSC队列类型\n    q_ptrs_front_.push_back(q_ptr_local_); // 注册到全局队列池\n}\n// ... 将消息写入 q_ptr_local_ ...\n```\n\n### 2. `spsc_blocking_queue` 的设计\n\n为了配合上述模型，需要一个新的队列 `spsc_blocking_queue`（或类似名称）。\n\n* **生产者写入 (`enqueue`)**:\n   * 由于是单生产者，写入端可以进行高度优化。\n   * 当队列满时，行为由 `async_overflow_policy_local` 控制，例如**阻塞生产者** (`block`)，或者丢弃消息（`overrun_oldest` 或 `discard_new`）。\n```c++\nvoid enqueue(T &&item)\n{\n    std::unique_lock<std::mutex> lock(queue_mutex_);\n    pop_cv_.wait(lock, [this] { return !this->q_.full(); });\n    q_.push_back(std::move(item));\n}\n```\n* **消费者读取 (`dequeue`)**:\n   * 由于是单消费者（特指从这个特定 SPSC 队列实例读取的消费者，即我们的后端主消费者线程），读取端也可以优化。\n   * 关键特性是支持**非阻塞读取**。当队列为空时，它应该立即返回一个表示“无数据”的状态，而不是阻塞消费者。这是因为后端消费者需要轮询多个这样的 SPSC 队列。\n```c++\nbool dequeue(T &popped_item)\n{\n    {\n        std::unique_lock<std::mutex> lock(queue_mutex_);\n        if (q_.empty())\n            return false;\n        popped_item = std::move(q_.front());\n        q_.pop_front();\n    }\n    pop_cv_.notify_one();\n    return true;\n}\n```\n### 3. 后端消费者 (`thread_pool_local::worker_loop_`) 的工作流程\n\n后端消费者线程（在 `thread_pool_local` 中通常只有一个）的工作循环 `worker_loop_` 内部调用 `process_msg_`，其核心逻辑如下：\n\n1.  **发现并接管新的 SPSC 队列**:\n   * 定期检查全局的“前端队列池” `q_ptrs_front_`（需要加锁访问）。\n   * 如果发现有新注册的 SPSC 队列，将它们从 `q_ptrs_front_` **移动**到一个“后端工作队列池” `q_ptrs_back_`（一个仅由消费者线程访问的 `std::vector<q_type_ptr>`，因此后续对 `q_ptrs_back_` 的遍历无需加锁）。清空 `q_ptrs_front_` 以便前端可以继续注册。\n\n    ```c++\n    // in details::thread_pool_local::process_msg_()\n    {\n        std::unique_lock<std::recursive_mutex> lock(que_mutex_); // 保护 q_ptrs_front_\n        if (!q_ptrs_front_.empty())\n        {\n            for (auto &t : q_ptrs_front_)\n            {\n                q_ptrs_back_.emplace_back(t); // 移动或复制指针\n            }\n            q_ptrs_front_.clear();\n        }\n    }\n    ```\n\n2.  **从所有 SPSC 队列收集日志到最小堆**:\n   * 遍历 `q_ptrs_back_` 中的每一个 SPSC 队列。\n   * 对每个队列，**非阻塞地**调用其 `dequeue` 方法，尝试取出日志消息 (`async_msg_local`)。\n   * 将成功取出的日志消息**放入一个基于时间戳的最小堆 `msg_q_`** (`std::priority_queue<std::unique_ptr<async_msg_local>, std::vector<std::unique_ptr<async_msg_local>>, CompareAsyncMsgLocalPtrTimestamp>`)。`CompareAsyncMsgLocalPtrTimestamp` 是一个自定义比较器，确保时间戳最小的消息在堆顶。\n\n    ```c++\n    // in details::thread_pool_local::process_msg_()\n    for (auto &spsc_q_ptr : q_ptrs_back_)\n    {\n        async_msg_local incoming_msg;\n        while (spsc_q_ptr->dequeue(incoming_msg)) // 非阻塞 dequeue\n        {\n            // 假设 incoming_msg 包含时间戳\n            // LogMsg 包含时间戳 log_msg_obj.time\n            // async_msg_local 内部的 log_msg_obj.time\n            msg_q_.push(spdlog::details::make_unique<async_msg_local>(std::move(incoming_msg)));\n        }\n    }\n    ```\n\n3.  **从最小堆中取出并处理日志**:\n   * 检查最小堆 `msg_q_` 是否为空。\n   * 如果不为空，从堆顶取出时间戳最早的日志消息。\n   * 根据消息类型 (`log`, `flush`, `terminate`) 进行处理，通常是调用 `async_logger_local` 实例的 `backend_sink_it_` 或 `backend_flush_` 方法，将消息传递给实际的 Sinks。\n\n    ```c++\n    // in details::thread_pool_local::process_msg_()\n    bool processed_any_data = false;\n    while (!msg_q_.empty())\n    {\n        processed_any_data = true;\n        auto msg_ptr = std::move(const_cast<std::unique_ptr<async_msg_local>&>(msg_q_.top()));\n        msg_q_.pop();\n\n        switch (msg_ptr->msg_type)\n        {\n            case async_msg_type_local::log:\n                msg_ptr->worker_ptr->backend_sink_it_(*msg_ptr);\n                break;\n            case async_msg_type_local::flush:\n                msg_ptr->worker_ptr->backend_flush_();\n                break;\n            // ... terminate case ...\n        }\n    }\n    ```\n\n4.  **消费者调度与休眠**:\n   * 如果在一轮完整的收割和处理后（即遍历了所有 SPSC 队列并将最小堆中的消息处理完），没有处理任何数据（所有队列都为空，最小堆也为空），那么消费者线程可以短暂休眠一小段时间（例如几纳秒或几微秒），避免忙等待消耗过多 CPU。\n\n    ```c++\n    // in details::thread_pool_local::process_msg_()\n    if (!processed_any_data)\n    {\n        std::this_thread::sleep_for(std::chrono::nanoseconds(MIN_SLEEP_DURATION)); // 例如 1ns\n    }\n    ```\n\n5.  **优雅退出**:\n   * 当 `thread_pool_local` 析构时，会向所有 SPSC 队列（或通过一个特殊的全局信号）发送 `terminate` 消息。\n   * `worker_loop_` 在收到 `terminate` 信号或外部 `stop_` 标志被设置后，会退出循环前最后一次调用 `process_msg_()`，以确保所有缓冲区的日志都被处理和刷新。\n\n### 4. `async_logger_local` 的改动\n\n`async_logger_local` 的改动相对较小，主要是其构造函数需要接收 `std::weak_ptr<details::thread_pool_local>`，并且其 `sink_it_` 和 `flush_` 方法内部调用的 `thread_pool_` 的 `post_log` 和 `post_flush` 方法是新 `thread_pool_local` 提供的版本。\n\n## 初步性能验证\n\n通过本地的初步基准测试，将此改进方案与原版 `spdlog` (v1.15.1) 在相同的硬件条件下，使用spdlog提供的异步评测示例，测试basic_file_sink在阻塞状态下二者的性能区别。\n\n结果显示，在多生产者线程（如 4 线程及以上）的场景下，由于前端 `thread_local` SPSC 队列显著减少了锁竞争，**改进方案在日志吞吐量表现出了一定程度的性能提升**。\n\n### 测试环境\n\n| **组件**           | **描述**                              |\n|--------------------|---------------------------------------|\n| **CPU**            | Intel Core i7-13700KF, 16 核, 24 线程, 5.3 GHz (最大 5.4 GHz) |\n| **缓存**           | L3 30 MiB                            |\n| **内存**           | 32GB DDR4                            |\n| **存储**           | Samsung SSD 980 PRO 2TB (NVMe)       |\n| **操作系统**       | atzlinux 12 (Ubuntu-based), 内核 6.8.0-58 |\n| **编译器**         | GCC 11.4.0, -O3 优化                 |\n| **系统负载**       | 平均负载 0.71-0.97 (低负载)          |\n\n### 测试条件\n- **队列大小**：8192。\n- **生产者线程数**：1、2、4、8。\n- **测试方法**：10 次运行取平均值，输出到文件 Sink。\n- **指标**：吞吐量（条/秒）。\n\n### 吞吐量对比\n\n| **生产者线程数** | **spdlog 吞吐量 (条/秒)** | **优化 SPSC 日志库 (条/秒)** | **提升百分比** |\n|------------------|---------------------------|------------------------------|----------------|\n| 1                | 4,240,865                 | 3,673,841                    | -13.37%        |\n| 2                | 2,732,199                 | 3,264,696                    | +19.49%        |\n| 4                | 1,431,440                 | 3,146,138                    | +119.82%       |\n| 8                | 1,052,129                 | 3,803,022                    | +261.47%       |\n\n## 总结与展望\n\n本文提出并实现了一种基于 `thread_local` SPSC 队列和后端最小堆合并排序的 `spdlog` 异步日志机制改进方案。通过为每个生产者线程提供独立的、写入端几乎无竞争的队列，并由后端消费者线程统一收集、排序和输出，该方案有效地解决了原 MPMC 队列在高并发下的锁竞争问题，并在保证全局日志时间顺序的前提下，获得了可观的性能提升。\n\n代码层面的核心改动在于引入了 `async_logger_local`、`details::thread_pool_local` 以及一个支持非阻塞消费的 `spsc_blocking_queue`。`thread_pool_local` 通过 `static thread_local` 变量为每个日志线程按需创建队列，并通过一个集中的“前端队列池” (`q_ptrs_front_`) 进行注册。消费者线程则将这些队列转移到自己的“后端工作队列池” (`q_ptrs_back_`)，轮询数据放入基于时间戳的最小堆，最后从堆中取出有序日志进行处理。\n\n\n\n\n\n","source":"_posts/spdlog/spdlog源码阅读:05.spdlog性能优化尝试.md","raw":"---\ntitle: \"spdlog源码阅读:05.spdlog性能优化尝试\"\ndate: 2025-08-26\ncategories: \n  - 源码分析\n  - spdlog\ntags:\n  - C++\n  - spdlog\n  - 日志系统\n---\n## 引言\n\n在本系列的前四篇文章中，我们对 `spdlog` 的异步机制、文件 Sink、自定义 Sink 扩展以及核心格式化引擎 `pattern_formatter` 进行了深入剖析。通过这些分析，我们对 `spdlog` 的设计哲学和实现细节有了全面的理解。`spdlog` 以其丰富的功能和相对不错的性能得到了广泛应用，但其默认的异步日志模型（基于共享的 MPMC 阻塞队列）在高并发、多生产者场景下，队列的锁竞争可能成为性能瓶颈。\n\n受到 `nanolog` 等高性能日志库关于利用 `thread_local` 减少前端竞争思想的启发，本文将详细阐述一种对 `spdlog` 异步日志机制的改进方案。核心思路是将原有的“多生产者-单消费者 (MPSC)”模型，演进为“**多个独立的单生产者-单消费者 (SPSC) 模型集合 + 后端统一合并处理**”的架构，旨在显著降低生产者线程间的锁竞争，并利用最小堆保证全局日志的时间顺序，以期获得性能上的提升。\n\n通过本文，你将了解到：\n\n* 该改进方案的设计思想与架构。\n* 如何利用 `thread_local` 为每个生产者线程创建独立的 SPSC 队列。\n* 后端消费者线程如何发现、管理这些动态创建的队列。\n* 如何通过最小堆（优先级队列）对来自不同 SPSC 队列的日志消息进行时间戳排序，以保证全局顺序。\n* 关键组件（如 `details::thread_pool_local`、`spsc_blocking_queue`）的设计与核心实现。\n* 以及笔者通过实验验证此方案相较于原版 `spdlog` 带来的性能提升。\n\n**注：本文的改进方案基于对 `spdlog` v1.15.1 的理解和修改实践。**\n<!-- more -->\n## 核心改进思路：从 MPMC 到 “`thread_local` SPSC 集合 + 最小堆合并”\n\n`spdlog` 默认的异步模型中，所有生产者（业务线程）共享一个中央的 `mpmc_blocking_queue`。在高并发写入时，对该队列的互斥锁（`std::mutex`）的竞争会成为影响前端（业务线程）性能的瓶颈。\n\n我们的改进思路旨在通过以下方式优化这一模型：\n\n1.  **前端无锁化 (或极低锁)：** 为每一个首次进行日志记录的生产者线程，通过 `thread_local` 动态创建一个专属于该线程的、轻量级的 **SPSC (Single-Producer, Single-Consumer) 阻塞队列**。日志消息直接写入这个线程局部队列。由于每个队列只有一个生产者（即线程自身），写入操作可以降低锁的开销。\n2.  **后端集中处理与排序：** 单个后台消费者线程负责从所有这些 `thread_local` SPSC 队列中收集日志消息。\n3.  **保证全局顺序：** 收集到的日志消息可能来自不同的生产者线程，其时间戳可能是交错的。为了保证最终输出的日志具有全局严格的时间顺序，消费者线程在将消息送往 Sink 之前，会使用一个**基于时间戳的最小堆（优先级队列）**对这些消息进行排序。\n\n整体架构从原先的：\n\n![mpmc.png](/images/mpmc.png)\n\n演变为：\n\n![spsc.png](/images/spsc.png)\n## 关键组件设计与实现\n\n为了实现上述思路，我们需要对 `spdlog` 的核心异步组件 `details::thread_pool` 进行改造，并引入新的队列类型。我们将改造后的线程池称为 `details::thread_pool_local`，新的 `logger` 实现称为 `async_logger_local`。\n\n### 1. `thread_local` SPSC 队列的创建与管理\n\n* **`thread_local q_ptr_local_`**: 在 `details::thread_pool_local` 中，我们定义一个 `static thread_local` 的指向 SPSC 队列的智能指针。\n```c++\nusing item_type = async_msg_local;\nusing q_type = details::spsc_blocking_queue<item_type>;\nusing q_type_ptr = std::shared_ptr<q_type>;\nstatic thread_local q_type_ptr q_ptr_local_;\n```\n* **按需创建**: 当一个生产者线程首次调用日志接口（如 `async_logger_local::sink_it_` 内部会调用到 `thread_pool_local::post_async_msg_`）时，会检查 `q_ptr_local_` 是否为空。如果为空，表示该线程尚未拥有自己的 SPSC 队列。\n   * 此时，需要创建一个新的 SPSC 队列实例（`std::make_shared<q_type>(queue_capacity)`）。\n   * 这个新创建的队列指针不仅赋值给 `q_ptr_local_`，还需要**注册到一个全局的、消费者线程可见的队列池中**，例如 `q_ptrs_front_`（一个 `std::vector<q_type_ptr>`，需要用锁保护其访问）。\n* **前端写入**: 生产者线程后续的日志消息都将直接写入其 `q_ptr_local_` 指向的线程局部 SPSC 队列。\n\n```c++\nif (q_ptr_local_ == nullptr)\n{\n    std::unique_lock<std::recursive_mutex> lock(que_mutex_); // que_mutex_ 保护 q_ptrs_front_\n    q_ptr_local_ = std::make_shared<q_type>(INITIAL_QUEUE_CAPACITY); // q_type 是新的SPSC队列类型\n    q_ptrs_front_.push_back(q_ptr_local_); // 注册到全局队列池\n}\n// ... 将消息写入 q_ptr_local_ ...\n```\n\n### 2. `spsc_blocking_queue` 的设计\n\n为了配合上述模型，需要一个新的队列 `spsc_blocking_queue`（或类似名称）。\n\n* **生产者写入 (`enqueue`)**:\n   * 由于是单生产者，写入端可以进行高度优化。\n   * 当队列满时，行为由 `async_overflow_policy_local` 控制，例如**阻塞生产者** (`block`)，或者丢弃消息（`overrun_oldest` 或 `discard_new`）。\n```c++\nvoid enqueue(T &&item)\n{\n    std::unique_lock<std::mutex> lock(queue_mutex_);\n    pop_cv_.wait(lock, [this] { return !this->q_.full(); });\n    q_.push_back(std::move(item));\n}\n```\n* **消费者读取 (`dequeue`)**:\n   * 由于是单消费者（特指从这个特定 SPSC 队列实例读取的消费者，即我们的后端主消费者线程），读取端也可以优化。\n   * 关键特性是支持**非阻塞读取**。当队列为空时，它应该立即返回一个表示“无数据”的状态，而不是阻塞消费者。这是因为后端消费者需要轮询多个这样的 SPSC 队列。\n```c++\nbool dequeue(T &popped_item)\n{\n    {\n        std::unique_lock<std::mutex> lock(queue_mutex_);\n        if (q_.empty())\n            return false;\n        popped_item = std::move(q_.front());\n        q_.pop_front();\n    }\n    pop_cv_.notify_one();\n    return true;\n}\n```\n### 3. 后端消费者 (`thread_pool_local::worker_loop_`) 的工作流程\n\n后端消费者线程（在 `thread_pool_local` 中通常只有一个）的工作循环 `worker_loop_` 内部调用 `process_msg_`，其核心逻辑如下：\n\n1.  **发现并接管新的 SPSC 队列**:\n   * 定期检查全局的“前端队列池” `q_ptrs_front_`（需要加锁访问）。\n   * 如果发现有新注册的 SPSC 队列，将它们从 `q_ptrs_front_` **移动**到一个“后端工作队列池” `q_ptrs_back_`（一个仅由消费者线程访问的 `std::vector<q_type_ptr>`，因此后续对 `q_ptrs_back_` 的遍历无需加锁）。清空 `q_ptrs_front_` 以便前端可以继续注册。\n\n    ```c++\n    // in details::thread_pool_local::process_msg_()\n    {\n        std::unique_lock<std::recursive_mutex> lock(que_mutex_); // 保护 q_ptrs_front_\n        if (!q_ptrs_front_.empty())\n        {\n            for (auto &t : q_ptrs_front_)\n            {\n                q_ptrs_back_.emplace_back(t); // 移动或复制指针\n            }\n            q_ptrs_front_.clear();\n        }\n    }\n    ```\n\n2.  **从所有 SPSC 队列收集日志到最小堆**:\n   * 遍历 `q_ptrs_back_` 中的每一个 SPSC 队列。\n   * 对每个队列，**非阻塞地**调用其 `dequeue` 方法，尝试取出日志消息 (`async_msg_local`)。\n   * 将成功取出的日志消息**放入一个基于时间戳的最小堆 `msg_q_`** (`std::priority_queue<std::unique_ptr<async_msg_local>, std::vector<std::unique_ptr<async_msg_local>>, CompareAsyncMsgLocalPtrTimestamp>`)。`CompareAsyncMsgLocalPtrTimestamp` 是一个自定义比较器，确保时间戳最小的消息在堆顶。\n\n    ```c++\n    // in details::thread_pool_local::process_msg_()\n    for (auto &spsc_q_ptr : q_ptrs_back_)\n    {\n        async_msg_local incoming_msg;\n        while (spsc_q_ptr->dequeue(incoming_msg)) // 非阻塞 dequeue\n        {\n            // 假设 incoming_msg 包含时间戳\n            // LogMsg 包含时间戳 log_msg_obj.time\n            // async_msg_local 内部的 log_msg_obj.time\n            msg_q_.push(spdlog::details::make_unique<async_msg_local>(std::move(incoming_msg)));\n        }\n    }\n    ```\n\n3.  **从最小堆中取出并处理日志**:\n   * 检查最小堆 `msg_q_` 是否为空。\n   * 如果不为空，从堆顶取出时间戳最早的日志消息。\n   * 根据消息类型 (`log`, `flush`, `terminate`) 进行处理，通常是调用 `async_logger_local` 实例的 `backend_sink_it_` 或 `backend_flush_` 方法，将消息传递给实际的 Sinks。\n\n    ```c++\n    // in details::thread_pool_local::process_msg_()\n    bool processed_any_data = false;\n    while (!msg_q_.empty())\n    {\n        processed_any_data = true;\n        auto msg_ptr = std::move(const_cast<std::unique_ptr<async_msg_local>&>(msg_q_.top()));\n        msg_q_.pop();\n\n        switch (msg_ptr->msg_type)\n        {\n            case async_msg_type_local::log:\n                msg_ptr->worker_ptr->backend_sink_it_(*msg_ptr);\n                break;\n            case async_msg_type_local::flush:\n                msg_ptr->worker_ptr->backend_flush_();\n                break;\n            // ... terminate case ...\n        }\n    }\n    ```\n\n4.  **消费者调度与休眠**:\n   * 如果在一轮完整的收割和处理后（即遍历了所有 SPSC 队列并将最小堆中的消息处理完），没有处理任何数据（所有队列都为空，最小堆也为空），那么消费者线程可以短暂休眠一小段时间（例如几纳秒或几微秒），避免忙等待消耗过多 CPU。\n\n    ```c++\n    // in details::thread_pool_local::process_msg_()\n    if (!processed_any_data)\n    {\n        std::this_thread::sleep_for(std::chrono::nanoseconds(MIN_SLEEP_DURATION)); // 例如 1ns\n    }\n    ```\n\n5.  **优雅退出**:\n   * 当 `thread_pool_local` 析构时，会向所有 SPSC 队列（或通过一个特殊的全局信号）发送 `terminate` 消息。\n   * `worker_loop_` 在收到 `terminate` 信号或外部 `stop_` 标志被设置后，会退出循环前最后一次调用 `process_msg_()`，以确保所有缓冲区的日志都被处理和刷新。\n\n### 4. `async_logger_local` 的改动\n\n`async_logger_local` 的改动相对较小，主要是其构造函数需要接收 `std::weak_ptr<details::thread_pool_local>`，并且其 `sink_it_` 和 `flush_` 方法内部调用的 `thread_pool_` 的 `post_log` 和 `post_flush` 方法是新 `thread_pool_local` 提供的版本。\n\n## 初步性能验证\n\n通过本地的初步基准测试，将此改进方案与原版 `spdlog` (v1.15.1) 在相同的硬件条件下，使用spdlog提供的异步评测示例，测试basic_file_sink在阻塞状态下二者的性能区别。\n\n结果显示，在多生产者线程（如 4 线程及以上）的场景下，由于前端 `thread_local` SPSC 队列显著减少了锁竞争，**改进方案在日志吞吐量表现出了一定程度的性能提升**。\n\n### 测试环境\n\n| **组件**           | **描述**                              |\n|--------------------|---------------------------------------|\n| **CPU**            | Intel Core i7-13700KF, 16 核, 24 线程, 5.3 GHz (最大 5.4 GHz) |\n| **缓存**           | L3 30 MiB                            |\n| **内存**           | 32GB DDR4                            |\n| **存储**           | Samsung SSD 980 PRO 2TB (NVMe)       |\n| **操作系统**       | atzlinux 12 (Ubuntu-based), 内核 6.8.0-58 |\n| **编译器**         | GCC 11.4.0, -O3 优化                 |\n| **系统负载**       | 平均负载 0.71-0.97 (低负载)          |\n\n### 测试条件\n- **队列大小**：8192。\n- **生产者线程数**：1、2、4、8。\n- **测试方法**：10 次运行取平均值，输出到文件 Sink。\n- **指标**：吞吐量（条/秒）。\n\n### 吞吐量对比\n\n| **生产者线程数** | **spdlog 吞吐量 (条/秒)** | **优化 SPSC 日志库 (条/秒)** | **提升百分比** |\n|------------------|---------------------------|------------------------------|----------------|\n| 1                | 4,240,865                 | 3,673,841                    | -13.37%        |\n| 2                | 2,732,199                 | 3,264,696                    | +19.49%        |\n| 4                | 1,431,440                 | 3,146,138                    | +119.82%       |\n| 8                | 1,052,129                 | 3,803,022                    | +261.47%       |\n\n## 总结与展望\n\n本文提出并实现了一种基于 `thread_local` SPSC 队列和后端最小堆合并排序的 `spdlog` 异步日志机制改进方案。通过为每个生产者线程提供独立的、写入端几乎无竞争的队列，并由后端消费者线程统一收集、排序和输出，该方案有效地解决了原 MPMC 队列在高并发下的锁竞争问题，并在保证全局日志时间顺序的前提下，获得了可观的性能提升。\n\n代码层面的核心改动在于引入了 `async_logger_local`、`details::thread_pool_local` 以及一个支持非阻塞消费的 `spsc_blocking_queue`。`thread_pool_local` 通过 `static thread_local` 变量为每个日志线程按需创建队列，并通过一个集中的“前端队列池” (`q_ptrs_front_`) 进行注册。消费者线程则将这些队列转移到自己的“后端工作队列池” (`q_ptrs_back_`)，轮询数据放入基于时间戳的最小堆，最后从堆中取出有序日志进行处理。\n\n\n\n\n\n","slug":"spdlog/spdlog源码阅读:05.spdlog性能优化尝试","published":1,"updated":"2025-08-28T12:45:20.495Z","comments":1,"layout":"post","photos":[],"_id":"cmevecvsj0024hfro19c97eka","content":"<h2 id=\"引言\"><a href=\"#引言\" class=\"headerlink\" title=\"引言\"></a>引言</h2><p>在本系列的前四篇文章中，我们对 <code>spdlog</code> 的异步机制、文件 Sink、自定义 Sink 扩展以及核心格式化引擎 <code>pattern_formatter</code> 进行了深入剖析。通过这些分析，我们对 <code>spdlog</code> 的设计哲学和实现细节有了全面的理解。<code>spdlog</code> 以其丰富的功能和相对不错的性能得到了广泛应用，但其默认的异步日志模型（基于共享的 MPMC 阻塞队列）在高并发、多生产者场景下，队列的锁竞争可能成为性能瓶颈。</p>\n<p>受到 <code>nanolog</code> 等高性能日志库关于利用 <code>thread_local</code> 减少前端竞争思想的启发，本文将详细阐述一种对 <code>spdlog</code> 异步日志机制的改进方案。核心思路是将原有的“多生产者-单消费者 (MPSC)”模型，演进为“<strong>多个独立的单生产者-单消费者 (SPSC) 模型集合 + 后端统一合并处理</strong>”的架构，旨在显著降低生产者线程间的锁竞争，并利用最小堆保证全局日志的时间顺序，以期获得性能上的提升。</p>\n<p>通过本文，你将了解到：</p>\n<ul>\n<li>该改进方案的设计思想与架构。</li>\n<li>如何利用 <code>thread_local</code> 为每个生产者线程创建独立的 SPSC 队列。</li>\n<li>后端消费者线程如何发现、管理这些动态创建的队列。</li>\n<li>如何通过最小堆（优先级队列）对来自不同 SPSC 队列的日志消息进行时间戳排序，以保证全局顺序。</li>\n<li>关键组件（如 <code>details::thread_pool_local</code>、<code>spsc_blocking_queue</code>）的设计与核心实现。</li>\n<li>以及笔者通过实验验证此方案相较于原版 <code>spdlog</code> 带来的性能提升。</li>\n</ul>\n<p><strong>注：本文的改进方案基于对 <code>spdlog</code> v1.15.1 的理解和修改实践。</strong></p>\n<span id=\"more\"></span>\n<h2 id=\"核心改进思路：从-MPMC-到-“thread-local-SPSC-集合-最小堆合并”\"><a href=\"#核心改进思路：从-MPMC-到-“thread-local-SPSC-集合-最小堆合并”\" class=\"headerlink\" title=\"核心改进思路：从 MPMC 到 “thread_local SPSC 集合 + 最小堆合并”\"></a>核心改进思路：从 MPMC 到 “<code>thread_local</code> SPSC 集合 + 最小堆合并”</h2><p><code>spdlog</code> 默认的异步模型中，所有生产者（业务线程）共享一个中央的 <code>mpmc_blocking_queue</code>。在高并发写入时，对该队列的互斥锁（<code>std::mutex</code>）的竞争会成为影响前端（业务线程）性能的瓶颈。</p>\n<p>我们的改进思路旨在通过以下方式优化这一模型：</p>\n<ol>\n<li><strong>前端无锁化 (或极低锁)：</strong> 为每一个首次进行日志记录的生产者线程，通过 <code>thread_local</code> 动态创建一个专属于该线程的、轻量级的 <strong>SPSC (Single-Producer, Single-Consumer) 阻塞队列</strong>。日志消息直接写入这个线程局部队列。由于每个队列只有一个生产者（即线程自身），写入操作可以降低锁的开销。</li>\n<li><strong>后端集中处理与排序：</strong> 单个后台消费者线程负责从所有这些 <code>thread_local</code> SPSC 队列中收集日志消息。</li>\n<li><strong>保证全局顺序：</strong> 收集到的日志消息可能来自不同的生产者线程，其时间戳可能是交错的。为了保证最终输出的日志具有全局严格的时间顺序，消费者线程在将消息送往 Sink 之前，会使用一个<strong>基于时间戳的最小堆（优先级队列）</strong>对这些消息进行排序。</li>\n</ol>\n<p>整体架构从原先的：</p>\n<p><img src=\"/images/mpmc.png\" alt=\"mpmc.png\"></p>\n<p>演变为：</p>\n<p><img src=\"/images/spsc.png\" alt=\"spsc.png\"></p>\n<h2 id=\"关键组件设计与实现\"><a href=\"#关键组件设计与实现\" class=\"headerlink\" title=\"关键组件设计与实现\"></a>关键组件设计与实现</h2><p>为了实现上述思路，我们需要对 <code>spdlog</code> 的核心异步组件 <code>details::thread_pool</code> 进行改造，并引入新的队列类型。我们将改造后的线程池称为 <code>details::thread_pool_local</code>，新的 <code>logger</code> 实现称为 <code>async_logger_local</code>。</p>\n<h3 id=\"1-thread-local-SPSC-队列的创建与管理\"><a href=\"#1-thread-local-SPSC-队列的创建与管理\" class=\"headerlink\" title=\"1. thread_local SPSC 队列的创建与管理\"></a>1. <code>thread_local</code> SPSC 队列的创建与管理</h3><ul>\n<li><strong><code>thread_local q_ptr_local_</code></strong>: 在 <code>details::thread_pool_local</code> 中，我们定义一个 <code>static thread_local</code> 的指向 SPSC 队列的智能指针。<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">using</span> item_type = async_msg_local;</span><br><span class=\"line\"><span class=\"keyword\">using</span> q_type = details::spsc_blocking_queue&lt;item_type&gt;;</span><br><span class=\"line\"><span class=\"keyword\">using</span> q_type_ptr = std::shared_ptr&lt;q_type&gt;;</span><br><span class=\"line\"><span class=\"type\">static</span> <span class=\"keyword\">thread_local</span> q_type_ptr q_ptr_local_;</span><br></pre></td></tr></table></figure></li>\n<li><strong>按需创建</strong>: 当一个生产者线程首次调用日志接口（如 <code>async_logger_local::sink_it_</code> 内部会调用到 <code>thread_pool_local::post_async_msg_</code>）时，会检查 <code>q_ptr_local_</code> 是否为空。如果为空，表示该线程尚未拥有自己的 SPSC 队列。<ul>\n<li>此时，需要创建一个新的 SPSC 队列实例（<code>std::make_shared&lt;q_type&gt;(queue_capacity)</code>）。</li>\n<li>这个新创建的队列指针不仅赋值给 <code>q_ptr_local_</code>，还需要<strong>注册到一个全局的、消费者线程可见的队列池中</strong>，例如 <code>q_ptrs_front_</code>（一个 <code>std::vector&lt;q_type_ptr&gt;</code>，需要用锁保护其访问）。</li>\n</ul>\n</li>\n<li><strong>前端写入</strong>: 生产者线程后续的日志消息都将直接写入其 <code>q_ptr_local_</code> 指向的线程局部 SPSC 队列。</li>\n</ul>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (q_ptr_local_ == <span class=\"literal\">nullptr</span>)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"function\">std::unique_lock&lt;std::recursive_mutex&gt; <span class=\"title\">lock</span><span class=\"params\">(que_mutex_)</span></span>; <span class=\"comment\">// que_mutex_ 保护 q_ptrs_front_</span></span><br><span class=\"line\">    q_ptr_local_ = std::<span class=\"built_in\">make_shared</span>&lt;q_type&gt;(INITIAL_QUEUE_CAPACITY); <span class=\"comment\">// q_type 是新的SPSC队列类型</span></span><br><span class=\"line\">    q_ptrs_front_.<span class=\"built_in\">push_back</span>(q_ptr_local_); <span class=\"comment\">// 注册到全局队列池</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// ... 将消息写入 q_ptr_local_ ...</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-spsc-blocking-queue-的设计\"><a href=\"#2-spsc-blocking-queue-的设计\" class=\"headerlink\" title=\"2. spsc_blocking_queue 的设计\"></a>2. <code>spsc_blocking_queue</code> 的设计</h3><p>为了配合上述模型，需要一个新的队列 <code>spsc_blocking_queue</code>（或类似名称）。</p>\n<ul>\n<li><strong>生产者写入 (<code>enqueue</code>)</strong>:<ul>\n<li>由于是单生产者，写入端可以进行高度优化。</li>\n<li>当队列满时，行为由 <code>async_overflow_policy_local</code> 控制，例如<strong>阻塞生产者</strong> (<code>block</code>)，或者丢弃消息（<code>overrun_oldest</code> 或 <code>discard_new</code>）。<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">enqueue</span><span class=\"params\">(T &amp;&amp;item)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"function\">std::unique_lock&lt;std::mutex&gt; <span class=\"title\">lock</span><span class=\"params\">(queue_mutex_)</span></span>;</span><br><span class=\"line\">    pop_cv_.<span class=\"built_in\">wait</span>(lock, [<span class=\"keyword\">this</span>] &#123; <span class=\"keyword\">return</span> !<span class=\"keyword\">this</span>-&gt;q_.<span class=\"built_in\">full</span>(); &#125;);</span><br><span class=\"line\">    q_.<span class=\"built_in\">push_back</span>(std::<span class=\"built_in\">move</span>(item));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n<li><strong>消费者读取 (<code>dequeue</code>)</strong>:<ul>\n<li>由于是单消费者（特指从这个特定 SPSC 队列实例读取的消费者，即我们的后端主消费者线程），读取端也可以优化。</li>\n<li>关键特性是支持<strong>非阻塞读取</strong>。当队列为空时，它应该立即返回一个表示“无数据”的状态，而不是阻塞消费者。这是因为后端消费者需要轮询多个这样的 SPSC 队列。<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">dequeue</span><span class=\"params\">(T &amp;popped_item)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"function\">std::unique_lock&lt;std::mutex&gt; <span class=\"title\">lock</span><span class=\"params\">(queue_mutex_)</span></span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (q_.<span class=\"built_in\">empty</span>())</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">        popped_item = std::<span class=\"built_in\">move</span>(q_.<span class=\"built_in\">front</span>());</span><br><span class=\"line\">        q_.<span class=\"built_in\">pop_front</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    pop_cv_.<span class=\"built_in\">notify_one</span>();</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n</ul>\n<h3 id=\"3-后端消费者-thread-pool-local-worker-loop-的工作流程\"><a href=\"#3-后端消费者-thread-pool-local-worker-loop-的工作流程\" class=\"headerlink\" title=\"3. 后端消费者 (thread_pool_local::worker_loop_) 的工作流程\"></a>3. 后端消费者 (<code>thread_pool_local::worker_loop_</code>) 的工作流程</h3><p>后端消费者线程（在 <code>thread_pool_local</code> 中通常只有一个）的工作循环 <code>worker_loop_</code> 内部调用 <code>process_msg_</code>，其核心逻辑如下：</p>\n<ol>\n<li><strong>发现并接管新的 SPSC 队列</strong>:</li>\n</ol>\n<ul>\n<li>定期检查全局的“前端队列池” <code>q_ptrs_front_</code>（需要加锁访问）。</li>\n<li>如果发现有新注册的 SPSC 队列，将它们从 <code>q_ptrs_front_</code> <strong>移动</strong>到一个“后端工作队列池” <code>q_ptrs_back_</code>（一个仅由消费者线程访问的 <code>std::vector&lt;q_type_ptr&gt;</code>，因此后续对 <code>q_ptrs_back_</code> 的遍历无需加锁）。清空 <code>q_ptrs_front_</code> 以便前端可以继续注册。</li>\n</ul>\n<pre><code><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// in details::thread_pool_local::process_msg_()</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"function\">std::unique_lock&lt;std::recursive_mutex&gt; <span class=\"title\">lock</span><span class=\"params\">(que_mutex_)</span></span>; <span class=\"comment\">// 保护 q_ptrs_front_</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!q_ptrs_front_.<span class=\"built_in\">empty</span>())</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">auto</span> &amp;t : q_ptrs_front_)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            q_ptrs_back_.<span class=\"built_in\">emplace_back</span>(t); <span class=\"comment\">// 移动或复制指针</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        q_ptrs_front_.<span class=\"built_in\">clear</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</code></pre>\n<ol start=\"2\">\n<li><strong>从所有 SPSC 队列收集日志到最小堆</strong>:</li>\n</ol>\n<ul>\n<li>遍历 <code>q_ptrs_back_</code> 中的每一个 SPSC 队列。</li>\n<li>对每个队列，<strong>非阻塞地</strong>调用其 <code>dequeue</code> 方法，尝试取出日志消息 (<code>async_msg_local</code>)。</li>\n<li>将成功取出的日志消息<strong>放入一个基于时间戳的最小堆 <code>msg_q_</code></strong> (<code>std::priority_queue&lt;std::unique_ptr&lt;async_msg_local&gt;, std::vector&lt;std::unique_ptr&lt;async_msg_local&gt;&gt;, CompareAsyncMsgLocalPtrTimestamp&gt;</code>)。<code>CompareAsyncMsgLocalPtrTimestamp</code> 是一个自定义比较器，确保时间戳最小的消息在堆顶。</li>\n</ul>\n<pre><code><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// in details::thread_pool_local::process_msg_()</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">auto</span> &amp;spsc_q_ptr : q_ptrs_back_)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    async_msg_local incoming_msg;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (spsc_q_ptr-&gt;<span class=\"built_in\">dequeue</span>(incoming_msg)) <span class=\"comment\">// 非阻塞 dequeue</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 假设 incoming_msg 包含时间戳</span></span><br><span class=\"line\">        <span class=\"comment\">// LogMsg 包含时间戳 log_msg_obj.time</span></span><br><span class=\"line\">        <span class=\"comment\">// async_msg_local 内部的 log_msg_obj.time</span></span><br><span class=\"line\">        msg_q_.<span class=\"built_in\">push</span>(spdlog::details::<span class=\"built_in\">make_unique</span>&lt;async_msg_local&gt;(std::<span class=\"built_in\">move</span>(incoming_msg)));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</code></pre>\n<ol start=\"3\">\n<li><strong>从最小堆中取出并处理日志</strong>:</li>\n</ol>\n<ul>\n<li>检查最小堆 <code>msg_q_</code> 是否为空。</li>\n<li>如果不为空，从堆顶取出时间戳最早的日志消息。</li>\n<li>根据消息类型 (<code>log</code>, <code>flush</code>, <code>terminate</code>) 进行处理，通常是调用 <code>async_logger_local</code> 实例的 <code>backend_sink_it_</code> 或 <code>backend_flush_</code> 方法，将消息传递给实际的 Sinks。</li>\n</ul>\n<pre><code><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// in details::thread_pool_local::process_msg_()</span></span><br><span class=\"line\"><span class=\"type\">bool</span> processed_any_data = <span class=\"literal\">false</span>;</span><br><span class=\"line\"><span class=\"keyword\">while</span> (!msg_q_.<span class=\"built_in\">empty</span>())</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    processed_any_data = <span class=\"literal\">true</span>;</span><br><span class=\"line\">    <span class=\"keyword\">auto</span> msg_ptr = std::<span class=\"built_in\">move</span>(<span class=\"keyword\">const_cast</span>&lt;std::unique_ptr&lt;async_msg_local&gt;&amp;&gt;(msg_q_.<span class=\"built_in\">top</span>()));</span><br><span class=\"line\">    msg_q_.<span class=\"built_in\">pop</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">switch</span> (msg_ptr-&gt;msg_type)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> async_msg_type_local::log:</span><br><span class=\"line\">            msg_ptr-&gt;worker_ptr-&gt;<span class=\"built_in\">backend_sink_it_</span>(*msg_ptr);</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> async_msg_type_local::flush:</span><br><span class=\"line\">            msg_ptr-&gt;worker_ptr-&gt;<span class=\"built_in\">backend_flush_</span>();</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        <span class=\"comment\">// ... terminate case ...</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</code></pre>\n<ol start=\"4\">\n<li><strong>消费者调度与休眠</strong>:</li>\n</ol>\n<ul>\n<li>如果在一轮完整的收割和处理后（即遍历了所有 SPSC 队列并将最小堆中的消息处理完），没有处理任何数据（所有队列都为空，最小堆也为空），那么消费者线程可以短暂休眠一小段时间（例如几纳秒或几微秒），避免忙等待消耗过多 CPU。</li>\n</ul>\n<pre><code><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// in details::thread_pool_local::process_msg_()</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (!processed_any_data)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    std::this_thread::<span class=\"built_in\">sleep_for</span>(std::chrono::<span class=\"built_in\">nanoseconds</span>(MIN_SLEEP_DURATION)); <span class=\"comment\">// 例如 1ns</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</code></pre>\n<ol start=\"5\">\n<li><strong>优雅退出</strong>:</li>\n</ol>\n<ul>\n<li>当 <code>thread_pool_local</code> 析构时，会向所有 SPSC 队列（或通过一个特殊的全局信号）发送 <code>terminate</code> 消息。</li>\n<li><code>worker_loop_</code> 在收到 <code>terminate</code> 信号或外部 <code>stop_</code> 标志被设置后，会退出循环前最后一次调用 <code>process_msg_()</code>，以确保所有缓冲区的日志都被处理和刷新。</li>\n</ul>\n<h3 id=\"4-async-logger-local-的改动\"><a href=\"#4-async-logger-local-的改动\" class=\"headerlink\" title=\"4. async_logger_local 的改动\"></a>4. <code>async_logger_local</code> 的改动</h3><p><code>async_logger_local</code> 的改动相对较小，主要是其构造函数需要接收 <code>std::weak_ptr&lt;details::thread_pool_local&gt;</code>，并且其 <code>sink_it_</code> 和 <code>flush_</code> 方法内部调用的 <code>thread_pool_</code> 的 <code>post_log</code> 和 <code>post_flush</code> 方法是新 <code>thread_pool_local</code> 提供的版本。</p>\n<h2 id=\"初步性能验证\"><a href=\"#初步性能验证\" class=\"headerlink\" title=\"初步性能验证\"></a>初步性能验证</h2><p>通过本地的初步基准测试，将此改进方案与原版 <code>spdlog</code> (v1.15.1) 在相同的硬件条件下，使用spdlog提供的异步评测示例，测试basic_file_sink在阻塞状态下二者的性能区别。</p>\n<p>结果显示，在多生产者线程（如 4 线程及以上）的场景下，由于前端 <code>thread_local</code> SPSC 队列显著减少了锁竞争，<strong>改进方案在日志吞吐量表现出了一定程度的性能提升</strong>。</p>\n<h3 id=\"测试环境\"><a href=\"#测试环境\" class=\"headerlink\" title=\"测试环境\"></a>测试环境</h3><table>\n<thead>\n<tr>\n<th><strong>组件</strong></th>\n<th><strong>描述</strong></th>\n</tr>\n</thead>\n<tbody><tr>\n<td><strong>CPU</strong></td>\n<td>Intel Core i7-13700KF, 16 核, 24 线程, 5.3 GHz (最大 5.4 GHz)</td>\n</tr>\n<tr>\n<td><strong>缓存</strong></td>\n<td>L3 30 MiB</td>\n</tr>\n<tr>\n<td><strong>内存</strong></td>\n<td>32GB DDR4</td>\n</tr>\n<tr>\n<td><strong>存储</strong></td>\n<td>Samsung SSD 980 PRO 2TB (NVMe)</td>\n</tr>\n<tr>\n<td><strong>操作系统</strong></td>\n<td>atzlinux 12 (Ubuntu-based), 内核 6.8.0-58</td>\n</tr>\n<tr>\n<td><strong>编译器</strong></td>\n<td>GCC 11.4.0, -O3 优化</td>\n</tr>\n<tr>\n<td><strong>系统负载</strong></td>\n<td>平均负载 0.71-0.97 (低负载)</td>\n</tr>\n</tbody></table>\n<h3 id=\"测试条件\"><a href=\"#测试条件\" class=\"headerlink\" title=\"测试条件\"></a>测试条件</h3><ul>\n<li><strong>队列大小</strong>：8192。</li>\n<li><strong>生产者线程数</strong>：1、2、4、8。</li>\n<li><strong>测试方法</strong>：10 次运行取平均值，输出到文件 Sink。</li>\n<li><strong>指标</strong>：吞吐量（条&#x2F;秒）。</li>\n</ul>\n<h3 id=\"吞吐量对比\"><a href=\"#吞吐量对比\" class=\"headerlink\" title=\"吞吐量对比\"></a>吞吐量对比</h3><table>\n<thead>\n<tr>\n<th><strong>生产者线程数</strong></th>\n<th><strong>spdlog 吞吐量 (条&#x2F;秒)</strong></th>\n<th><strong>优化 SPSC 日志库 (条&#x2F;秒)</strong></th>\n<th><strong>提升百分比</strong></th>\n</tr>\n</thead>\n<tbody><tr>\n<td>1</td>\n<td>4,240,865</td>\n<td>3,673,841</td>\n<td>-13.37%</td>\n</tr>\n<tr>\n<td>2</td>\n<td>2,732,199</td>\n<td>3,264,696</td>\n<td>+19.49%</td>\n</tr>\n<tr>\n<td>4</td>\n<td>1,431,440</td>\n<td>3,146,138</td>\n<td>+119.82%</td>\n</tr>\n<tr>\n<td>8</td>\n<td>1,052,129</td>\n<td>3,803,022</td>\n<td>+261.47%</td>\n</tr>\n</tbody></table>\n<h2 id=\"总结与展望\"><a href=\"#总结与展望\" class=\"headerlink\" title=\"总结与展望\"></a>总结与展望</h2><p>本文提出并实现了一种基于 <code>thread_local</code> SPSC 队列和后端最小堆合并排序的 <code>spdlog</code> 异步日志机制改进方案。通过为每个生产者线程提供独立的、写入端几乎无竞争的队列，并由后端消费者线程统一收集、排序和输出，该方案有效地解决了原 MPMC 队列在高并发下的锁竞争问题，并在保证全局日志时间顺序的前提下，获得了可观的性能提升。</p>\n<p>代码层面的核心改动在于引入了 <code>async_logger_local</code>、<code>details::thread_pool_local</code> 以及一个支持非阻塞消费的 <code>spsc_blocking_queue</code>。<code>thread_pool_local</code> 通过 <code>static thread_local</code> 变量为每个日志线程按需创建队列，并通过一个集中的“前端队列池” (<code>q_ptrs_front_</code>) 进行注册。消费者线程则将这些队列转移到自己的“后端工作队列池” (<code>q_ptrs_back_</code>)，轮询数据放入基于时间戳的最小堆，最后从堆中取出有序日志进行处理。</p>\n","excerpt":"<h2 id=\"引言\"><a href=\"#引言\" class=\"headerlink\" title=\"引言\"></a>引言</h2><p>在本系列的前四篇文章中，我们对 <code>spdlog</code> 的异步机制、文件 Sink、自定义 Sink 扩展以及核心格式化引擎 <code>pattern_formatter</code> 进行了深入剖析。通过这些分析，我们对 <code>spdlog</code> 的设计哲学和实现细节有了全面的理解。<code>spdlog</code> 以其丰富的功能和相对不错的性能得到了广泛应用，但其默认的异步日志模型（基于共享的 MPMC 阻塞队列）在高并发、多生产者场景下，队列的锁竞争可能成为性能瓶颈。</p>\n<p>受到 <code>nanolog</code> 等高性能日志库关于利用 <code>thread_local</code> 减少前端竞争思想的启发，本文将详细阐述一种对 <code>spdlog</code> 异步日志机制的改进方案。核心思路是将原有的“多生产者-单消费者 (MPSC)”模型，演进为“<strong>多个独立的单生产者-单消费者 (SPSC) 模型集合 + 后端统一合并处理</strong>”的架构，旨在显著降低生产者线程间的锁竞争，并利用最小堆保证全局日志的时间顺序，以期获得性能上的提升。</p>\n<p>通过本文，你将了解到：</p>\n<ul>\n<li>该改进方案的设计思想与架构。</li>\n<li>如何利用 <code>thread_local</code> 为每个生产者线程创建独立的 SPSC 队列。</li>\n<li>后端消费者线程如何发现、管理这些动态创建的队列。</li>\n<li>如何通过最小堆（优先级队列）对来自不同 SPSC 队列的日志消息进行时间戳排序，以保证全局顺序。</li>\n<li>关键组件（如 <code>details::thread_pool_local</code>、<code>spsc_blocking_queue</code>）的设计与核心实现。</li>\n<li>以及笔者通过实验验证此方案相较于原版 <code>spdlog</code> 带来的性能提升。</li>\n</ul>\n<p><strong>注：本文的改进方案基于对 <code>spdlog</code> v1.15.1 的理解和修改实践。</strong></p>","more":"<h2 id=\"核心改进思路：从-MPMC-到-“thread-local-SPSC-集合-最小堆合并”\"><a href=\"#核心改进思路：从-MPMC-到-“thread-local-SPSC-集合-最小堆合并”\" class=\"headerlink\" title=\"核心改进思路：从 MPMC 到 “thread_local SPSC 集合 + 最小堆合并”\"></a>核心改进思路：从 MPMC 到 “<code>thread_local</code> SPSC 集合 + 最小堆合并”</h2><p><code>spdlog</code> 默认的异步模型中，所有生产者（业务线程）共享一个中央的 <code>mpmc_blocking_queue</code>。在高并发写入时，对该队列的互斥锁（<code>std::mutex</code>）的竞争会成为影响前端（业务线程）性能的瓶颈。</p>\n<p>我们的改进思路旨在通过以下方式优化这一模型：</p>\n<ol>\n<li><strong>前端无锁化 (或极低锁)：</strong> 为每一个首次进行日志记录的生产者线程，通过 <code>thread_local</code> 动态创建一个专属于该线程的、轻量级的 <strong>SPSC (Single-Producer, Single-Consumer) 阻塞队列</strong>。日志消息直接写入这个线程局部队列。由于每个队列只有一个生产者（即线程自身），写入操作可以降低锁的开销。</li>\n<li><strong>后端集中处理与排序：</strong> 单个后台消费者线程负责从所有这些 <code>thread_local</code> SPSC 队列中收集日志消息。</li>\n<li><strong>保证全局顺序：</strong> 收集到的日志消息可能来自不同的生产者线程，其时间戳可能是交错的。为了保证最终输出的日志具有全局严格的时间顺序，消费者线程在将消息送往 Sink 之前，会使用一个<strong>基于时间戳的最小堆（优先级队列）</strong>对这些消息进行排序。</li>\n</ol>\n<p>整体架构从原先的：</p>\n<p><img src=\"/images/mpmc.png\" alt=\"mpmc.png\"></p>\n<p>演变为：</p>\n<p><img src=\"/images/spsc.png\" alt=\"spsc.png\"></p>\n<h2 id=\"关键组件设计与实现\"><a href=\"#关键组件设计与实现\" class=\"headerlink\" title=\"关键组件设计与实现\"></a>关键组件设计与实现</h2><p>为了实现上述思路，我们需要对 <code>spdlog</code> 的核心异步组件 <code>details::thread_pool</code> 进行改造，并引入新的队列类型。我们将改造后的线程池称为 <code>details::thread_pool_local</code>，新的 <code>logger</code> 实现称为 <code>async_logger_local</code>。</p>\n<h3 id=\"1-thread-local-SPSC-队列的创建与管理\"><a href=\"#1-thread-local-SPSC-队列的创建与管理\" class=\"headerlink\" title=\"1. thread_local SPSC 队列的创建与管理\"></a>1. <code>thread_local</code> SPSC 队列的创建与管理</h3><ul>\n<li><strong><code>thread_local q_ptr_local_</code></strong>: 在 <code>details::thread_pool_local</code> 中，我们定义一个 <code>static thread_local</code> 的指向 SPSC 队列的智能指针。<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">using</span> item_type = async_msg_local;</span><br><span class=\"line\"><span class=\"keyword\">using</span> q_type = details::spsc_blocking_queue&lt;item_type&gt;;</span><br><span class=\"line\"><span class=\"keyword\">using</span> q_type_ptr = std::shared_ptr&lt;q_type&gt;;</span><br><span class=\"line\"><span class=\"type\">static</span> <span class=\"keyword\">thread_local</span> q_type_ptr q_ptr_local_;</span><br></pre></td></tr></table></figure></li>\n<li><strong>按需创建</strong>: 当一个生产者线程首次调用日志接口（如 <code>async_logger_local::sink_it_</code> 内部会调用到 <code>thread_pool_local::post_async_msg_</code>）时，会检查 <code>q_ptr_local_</code> 是否为空。如果为空，表示该线程尚未拥有自己的 SPSC 队列。<ul>\n<li>此时，需要创建一个新的 SPSC 队列实例（<code>std::make_shared&lt;q_type&gt;(queue_capacity)</code>）。</li>\n<li>这个新创建的队列指针不仅赋值给 <code>q_ptr_local_</code>，还需要<strong>注册到一个全局的、消费者线程可见的队列池中</strong>，例如 <code>q_ptrs_front_</code>（一个 <code>std::vector&lt;q_type_ptr&gt;</code>，需要用锁保护其访问）。</li>\n</ul>\n</li>\n<li><strong>前端写入</strong>: 生产者线程后续的日志消息都将直接写入其 <code>q_ptr_local_</code> 指向的线程局部 SPSC 队列。</li>\n</ul>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (q_ptr_local_ == <span class=\"literal\">nullptr</span>)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"function\">std::unique_lock&lt;std::recursive_mutex&gt; <span class=\"title\">lock</span><span class=\"params\">(que_mutex_)</span></span>; <span class=\"comment\">// que_mutex_ 保护 q_ptrs_front_</span></span><br><span class=\"line\">    q_ptr_local_ = std::<span class=\"built_in\">make_shared</span>&lt;q_type&gt;(INITIAL_QUEUE_CAPACITY); <span class=\"comment\">// q_type 是新的SPSC队列类型</span></span><br><span class=\"line\">    q_ptrs_front_.<span class=\"built_in\">push_back</span>(q_ptr_local_); <span class=\"comment\">// 注册到全局队列池</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// ... 将消息写入 q_ptr_local_ ...</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-spsc-blocking-queue-的设计\"><a href=\"#2-spsc-blocking-queue-的设计\" class=\"headerlink\" title=\"2. spsc_blocking_queue 的设计\"></a>2. <code>spsc_blocking_queue</code> 的设计</h3><p>为了配合上述模型，需要一个新的队列 <code>spsc_blocking_queue</code>（或类似名称）。</p>\n<ul>\n<li><strong>生产者写入 (<code>enqueue</code>)</strong>:<ul>\n<li>由于是单生产者，写入端可以进行高度优化。</li>\n<li>当队列满时，行为由 <code>async_overflow_policy_local</code> 控制，例如<strong>阻塞生产者</strong> (<code>block</code>)，或者丢弃消息（<code>overrun_oldest</code> 或 <code>discard_new</code>）。<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">enqueue</span><span class=\"params\">(T &amp;&amp;item)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"function\">std::unique_lock&lt;std::mutex&gt; <span class=\"title\">lock</span><span class=\"params\">(queue_mutex_)</span></span>;</span><br><span class=\"line\">    pop_cv_.<span class=\"built_in\">wait</span>(lock, [<span class=\"keyword\">this</span>] &#123; <span class=\"keyword\">return</span> !<span class=\"keyword\">this</span>-&gt;q_.<span class=\"built_in\">full</span>(); &#125;);</span><br><span class=\"line\">    q_.<span class=\"built_in\">push_back</span>(std::<span class=\"built_in\">move</span>(item));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n<li><strong>消费者读取 (<code>dequeue</code>)</strong>:<ul>\n<li>由于是单消费者（特指从这个特定 SPSC 队列实例读取的消费者，即我们的后端主消费者线程），读取端也可以优化。</li>\n<li>关键特性是支持<strong>非阻塞读取</strong>。当队列为空时，它应该立即返回一个表示“无数据”的状态，而不是阻塞消费者。这是因为后端消费者需要轮询多个这样的 SPSC 队列。<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">dequeue</span><span class=\"params\">(T &amp;popped_item)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"function\">std::unique_lock&lt;std::mutex&gt; <span class=\"title\">lock</span><span class=\"params\">(queue_mutex_)</span></span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (q_.<span class=\"built_in\">empty</span>())</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">        popped_item = std::<span class=\"built_in\">move</span>(q_.<span class=\"built_in\">front</span>());</span><br><span class=\"line\">        q_.<span class=\"built_in\">pop_front</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    pop_cv_.<span class=\"built_in\">notify_one</span>();</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n</ul>\n<h3 id=\"3-后端消费者-thread-pool-local-worker-loop-的工作流程\"><a href=\"#3-后端消费者-thread-pool-local-worker-loop-的工作流程\" class=\"headerlink\" title=\"3. 后端消费者 (thread_pool_local::worker_loop_) 的工作流程\"></a>3. 后端消费者 (<code>thread_pool_local::worker_loop_</code>) 的工作流程</h3><p>后端消费者线程（在 <code>thread_pool_local</code> 中通常只有一个）的工作循环 <code>worker_loop_</code> 内部调用 <code>process_msg_</code>，其核心逻辑如下：</p>\n<ol>\n<li><strong>发现并接管新的 SPSC 队列</strong>:</li>\n</ol>\n<ul>\n<li>定期检查全局的“前端队列池” <code>q_ptrs_front_</code>（需要加锁访问）。</li>\n<li>如果发现有新注册的 SPSC 队列，将它们从 <code>q_ptrs_front_</code> <strong>移动</strong>到一个“后端工作队列池” <code>q_ptrs_back_</code>（一个仅由消费者线程访问的 <code>std::vector&lt;q_type_ptr&gt;</code>，因此后续对 <code>q_ptrs_back_</code> 的遍历无需加锁）。清空 <code>q_ptrs_front_</code> 以便前端可以继续注册。</li>\n</ul>\n<pre><code><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// in details::thread_pool_local::process_msg_()</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"function\">std::unique_lock&lt;std::recursive_mutex&gt; <span class=\"title\">lock</span><span class=\"params\">(que_mutex_)</span></span>; <span class=\"comment\">// 保护 q_ptrs_front_</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!q_ptrs_front_.<span class=\"built_in\">empty</span>())</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">auto</span> &amp;t : q_ptrs_front_)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            q_ptrs_back_.<span class=\"built_in\">emplace_back</span>(t); <span class=\"comment\">// 移动或复制指针</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        q_ptrs_front_.<span class=\"built_in\">clear</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</code></pre>\n<ol start=\"2\">\n<li><strong>从所有 SPSC 队列收集日志到最小堆</strong>:</li>\n</ol>\n<ul>\n<li>遍历 <code>q_ptrs_back_</code> 中的每一个 SPSC 队列。</li>\n<li>对每个队列，<strong>非阻塞地</strong>调用其 <code>dequeue</code> 方法，尝试取出日志消息 (<code>async_msg_local</code>)。</li>\n<li>将成功取出的日志消息<strong>放入一个基于时间戳的最小堆 <code>msg_q_</code></strong> (<code>std::priority_queue&lt;std::unique_ptr&lt;async_msg_local&gt;, std::vector&lt;std::unique_ptr&lt;async_msg_local&gt;&gt;, CompareAsyncMsgLocalPtrTimestamp&gt;</code>)。<code>CompareAsyncMsgLocalPtrTimestamp</code> 是一个自定义比较器，确保时间戳最小的消息在堆顶。</li>\n</ul>\n<pre><code><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// in details::thread_pool_local::process_msg_()</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">auto</span> &amp;spsc_q_ptr : q_ptrs_back_)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    async_msg_local incoming_msg;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (spsc_q_ptr-&gt;<span class=\"built_in\">dequeue</span>(incoming_msg)) <span class=\"comment\">// 非阻塞 dequeue</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 假设 incoming_msg 包含时间戳</span></span><br><span class=\"line\">        <span class=\"comment\">// LogMsg 包含时间戳 log_msg_obj.time</span></span><br><span class=\"line\">        <span class=\"comment\">// async_msg_local 内部的 log_msg_obj.time</span></span><br><span class=\"line\">        msg_q_.<span class=\"built_in\">push</span>(spdlog::details::<span class=\"built_in\">make_unique</span>&lt;async_msg_local&gt;(std::<span class=\"built_in\">move</span>(incoming_msg)));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</code></pre>\n<ol start=\"3\">\n<li><strong>从最小堆中取出并处理日志</strong>:</li>\n</ol>\n<ul>\n<li>检查最小堆 <code>msg_q_</code> 是否为空。</li>\n<li>如果不为空，从堆顶取出时间戳最早的日志消息。</li>\n<li>根据消息类型 (<code>log</code>, <code>flush</code>, <code>terminate</code>) 进行处理，通常是调用 <code>async_logger_local</code> 实例的 <code>backend_sink_it_</code> 或 <code>backend_flush_</code> 方法，将消息传递给实际的 Sinks。</li>\n</ul>\n<pre><code><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// in details::thread_pool_local::process_msg_()</span></span><br><span class=\"line\"><span class=\"type\">bool</span> processed_any_data = <span class=\"literal\">false</span>;</span><br><span class=\"line\"><span class=\"keyword\">while</span> (!msg_q_.<span class=\"built_in\">empty</span>())</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    processed_any_data = <span class=\"literal\">true</span>;</span><br><span class=\"line\">    <span class=\"keyword\">auto</span> msg_ptr = std::<span class=\"built_in\">move</span>(<span class=\"keyword\">const_cast</span>&lt;std::unique_ptr&lt;async_msg_local&gt;&amp;&gt;(msg_q_.<span class=\"built_in\">top</span>()));</span><br><span class=\"line\">    msg_q_.<span class=\"built_in\">pop</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">switch</span> (msg_ptr-&gt;msg_type)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> async_msg_type_local::log:</span><br><span class=\"line\">            msg_ptr-&gt;worker_ptr-&gt;<span class=\"built_in\">backend_sink_it_</span>(*msg_ptr);</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> async_msg_type_local::flush:</span><br><span class=\"line\">            msg_ptr-&gt;worker_ptr-&gt;<span class=\"built_in\">backend_flush_</span>();</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        <span class=\"comment\">// ... terminate case ...</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</code></pre>\n<ol start=\"4\">\n<li><strong>消费者调度与休眠</strong>:</li>\n</ol>\n<ul>\n<li>如果在一轮完整的收割和处理后（即遍历了所有 SPSC 队列并将最小堆中的消息处理完），没有处理任何数据（所有队列都为空，最小堆也为空），那么消费者线程可以短暂休眠一小段时间（例如几纳秒或几微秒），避免忙等待消耗过多 CPU。</li>\n</ul>\n<pre><code><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// in details::thread_pool_local::process_msg_()</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (!processed_any_data)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    std::this_thread::<span class=\"built_in\">sleep_for</span>(std::chrono::<span class=\"built_in\">nanoseconds</span>(MIN_SLEEP_DURATION)); <span class=\"comment\">// 例如 1ns</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</code></pre>\n<ol start=\"5\">\n<li><strong>优雅退出</strong>:</li>\n</ol>\n<ul>\n<li>当 <code>thread_pool_local</code> 析构时，会向所有 SPSC 队列（或通过一个特殊的全局信号）发送 <code>terminate</code> 消息。</li>\n<li><code>worker_loop_</code> 在收到 <code>terminate</code> 信号或外部 <code>stop_</code> 标志被设置后，会退出循环前最后一次调用 <code>process_msg_()</code>，以确保所有缓冲区的日志都被处理和刷新。</li>\n</ul>\n<h3 id=\"4-async-logger-local-的改动\"><a href=\"#4-async-logger-local-的改动\" class=\"headerlink\" title=\"4. async_logger_local 的改动\"></a>4. <code>async_logger_local</code> 的改动</h3><p><code>async_logger_local</code> 的改动相对较小，主要是其构造函数需要接收 <code>std::weak_ptr&lt;details::thread_pool_local&gt;</code>，并且其 <code>sink_it_</code> 和 <code>flush_</code> 方法内部调用的 <code>thread_pool_</code> 的 <code>post_log</code> 和 <code>post_flush</code> 方法是新 <code>thread_pool_local</code> 提供的版本。</p>\n<h2 id=\"初步性能验证\"><a href=\"#初步性能验证\" class=\"headerlink\" title=\"初步性能验证\"></a>初步性能验证</h2><p>通过本地的初步基准测试，将此改进方案与原版 <code>spdlog</code> (v1.15.1) 在相同的硬件条件下，使用spdlog提供的异步评测示例，测试basic_file_sink在阻塞状态下二者的性能区别。</p>\n<p>结果显示，在多生产者线程（如 4 线程及以上）的场景下，由于前端 <code>thread_local</code> SPSC 队列显著减少了锁竞争，<strong>改进方案在日志吞吐量表现出了一定程度的性能提升</strong>。</p>\n<h3 id=\"测试环境\"><a href=\"#测试环境\" class=\"headerlink\" title=\"测试环境\"></a>测试环境</h3><table>\n<thead>\n<tr>\n<th><strong>组件</strong></th>\n<th><strong>描述</strong></th>\n</tr>\n</thead>\n<tbody><tr>\n<td><strong>CPU</strong></td>\n<td>Intel Core i7-13700KF, 16 核, 24 线程, 5.3 GHz (最大 5.4 GHz)</td>\n</tr>\n<tr>\n<td><strong>缓存</strong></td>\n<td>L3 30 MiB</td>\n</tr>\n<tr>\n<td><strong>内存</strong></td>\n<td>32GB DDR4</td>\n</tr>\n<tr>\n<td><strong>存储</strong></td>\n<td>Samsung SSD 980 PRO 2TB (NVMe)</td>\n</tr>\n<tr>\n<td><strong>操作系统</strong></td>\n<td>atzlinux 12 (Ubuntu-based), 内核 6.8.0-58</td>\n</tr>\n<tr>\n<td><strong>编译器</strong></td>\n<td>GCC 11.4.0, -O3 优化</td>\n</tr>\n<tr>\n<td><strong>系统负载</strong></td>\n<td>平均负载 0.71-0.97 (低负载)</td>\n</tr>\n</tbody></table>\n<h3 id=\"测试条件\"><a href=\"#测试条件\" class=\"headerlink\" title=\"测试条件\"></a>测试条件</h3><ul>\n<li><strong>队列大小</strong>：8192。</li>\n<li><strong>生产者线程数</strong>：1、2、4、8。</li>\n<li><strong>测试方法</strong>：10 次运行取平均值，输出到文件 Sink。</li>\n<li><strong>指标</strong>：吞吐量（条&#x2F;秒）。</li>\n</ul>\n<h3 id=\"吞吐量对比\"><a href=\"#吞吐量对比\" class=\"headerlink\" title=\"吞吐量对比\"></a>吞吐量对比</h3><table>\n<thead>\n<tr>\n<th><strong>生产者线程数</strong></th>\n<th><strong>spdlog 吞吐量 (条&#x2F;秒)</strong></th>\n<th><strong>优化 SPSC 日志库 (条&#x2F;秒)</strong></th>\n<th><strong>提升百分比</strong></th>\n</tr>\n</thead>\n<tbody><tr>\n<td>1</td>\n<td>4,240,865</td>\n<td>3,673,841</td>\n<td>-13.37%</td>\n</tr>\n<tr>\n<td>2</td>\n<td>2,732,199</td>\n<td>3,264,696</td>\n<td>+19.49%</td>\n</tr>\n<tr>\n<td>4</td>\n<td>1,431,440</td>\n<td>3,146,138</td>\n<td>+119.82%</td>\n</tr>\n<tr>\n<td>8</td>\n<td>1,052,129</td>\n<td>3,803,022</td>\n<td>+261.47%</td>\n</tr>\n</tbody></table>\n<h2 id=\"总结与展望\"><a href=\"#总结与展望\" class=\"headerlink\" title=\"总结与展望\"></a>总结与展望</h2><p>本文提出并实现了一种基于 <code>thread_local</code> SPSC 队列和后端最小堆合并排序的 <code>spdlog</code> 异步日志机制改进方案。通过为每个生产者线程提供独立的、写入端几乎无竞争的队列，并由后端消费者线程统一收集、排序和输出，该方案有效地解决了原 MPMC 队列在高并发下的锁竞争问题，并在保证全局日志时间顺序的前提下，获得了可观的性能提升。</p>\n<p>代码层面的核心改动在于引入了 <code>async_logger_local</code>、<code>details::thread_pool_local</code> 以及一个支持非阻塞消费的 <code>spsc_blocking_queue</code>。<code>thread_pool_local</code> 通过 <code>static thread_local</code> 变量为每个日志线程按需创建队列，并通过一个集中的“前端队列池” (<code>q_ptrs_front_</code>) 进行注册。消费者线程则将这些队列转移到自己的“后端工作队列池” (<code>q_ptrs_back_</code>)，轮询数据放入基于时间戳的最小堆，最后从堆中取出有序日志进行处理。</p>"},{"title":"spdlog源码阅读:06.spdlog中的设计模式","date":"2025-08-25T16:00:00.000Z","_content":"\n## **前言：从功能到架构，探寻 spdlog 的设计之美**\n\n在本系列之前的文章中，我们深入剖析了 spdlog 的异步机制、核心组件，并且尝试拓展实现一个压缩sink，还尝试进行了性能优化实践。\n\n我们理解了 spdlog 在功能和性能上“做了什么”以及“怎么做的”。现在，我们跳出具体实现的细节，从**设计模式**的角度重新看一下这个库，\n\n深入探讨 spdlog 是如何巧妙地运用**策略模式 (Strategy)**、**组合模式 (Composite)**、**工厂模式 (Factory)**、以及**单例模式 (Singleton)**，来构建其灵活、高效且用户友好的体系的。\n<!-- more -->\n## **1. 策略模式 (Strategy Pattern)：解耦日志行为的核心**\n\n策略模式的核心思想是：**定义一系列算法，将每一个算法封装起来，并使它们可以相互替换。**\n\n### **为什么使用策略模式？**\n\n对于一个日志库而言，其核心任务是记录日志，但日志的“行为”是多变的：\n\n* 日志消息应该以什么样的**格式 (Format)**呈现？\n* 日志消息应该被发送到哪个**目的地 (Destination)**？\n\nspdlog 通过策略模式，将 logger 的核心记录逻辑与具体的**格式化策略**和**输出策略**完全解耦。\n\n### **在 spdlog 中是如何实现的？**\n\nspdlog 中有两处经典的策略模式应用：**Formatter 对 Sink 的策略** 和 **Sink 对 Logger 的策略**。\n\n**a) Formatter：定义日志的“格式化策略”**\n\nspdlog 定义了一个 formatter 接口，所有具体的格式化器都实现这个接口。sink 对象则**拥有 (has-a)** 一个 formatter 策略。\n\n// spdlog/formatter.h  \n```c++\nclass formatter {  \npublic:  \nvirtual ~formatter() = default;  \nvirtual void format(const details::log_msg &msg, memory_buf_t &dest) = 0;  \nvirtual std::unique_ptr<formatter> clone() const = 0;  \n};\n```\n每个 sink 对象都持有一个 formatter。当 sink 需要记录日志时，它不关心如何格式化，而是把这个任务委托给它持有的 formatter 策略对象。\n\n```c++\n// spdlog/sinks/base_sink.h  \ntemplate <typename Mutex>  \nclass SPDLOG_API base_sink : public sink {  \npublic:  \n// ...  \n    void log(const details::log_msg &msg) final override  \n    {  \n        std::lock_guard<Mutex> lock(mutex_);  \n\n        sink_it_(formatted); // sink_it_ 是子类实现的具体输出逻辑 , 实际调用 formatter_ 的 format 方法，执行格式化策略 \n    }\n\nprotected:  \n// 持有一个 formatter 策略  \n    std::unique_ptr<spdlog::formatter> formatter_;  \n    Mutex mutex_;  \n// ...  \n};\n```\n\n**b) Sink：定义日志的“输出策略”**\n\n同样地，spdlog 定义了一个 sink 接口，代表不同的输出目的地策略。logger 类则**拥有 (has-a)** 一个或多个 sink 策略。\n\n```c++\n// spdlog/sinks/sink.h  \nclass  sink {  \npublic:  \n    virtual ~sink() = default;  \n    virtual void log(const details::log_msg &msg) = 0;  \n    virtual void flush() = 0;  \n    virtual void set_pattern(const std::string &pattern) = 0;  \n    virtual void set_formatter(std::unique_ptr<spdlog::formatter> sink_formatter) = 0;  \n// ...  \n};  \n```\n\n`logger` 类中持有一个 `sink` 的集合。当用户调用 `logger->info(...)` 时，`logger` 将日志消息打包后，委托给它持有的所有 `sink` 策略对象去处理。\n\n```c++\nclass SPDLOG_API logger {\npublic:\n    ......\nprotected:\n    std::string name_;\n    std::vector<sink_ptr> sinks_;\n    spdlog::level_t level_{level::info};\n    spdlog::level_t flush_level_{level::off};\n    err_handler custom_err_handler_{nullptr};\n    details::backtracer tracer_;\n    }\n```\n\n下面是logger,sink和formatter三个类的类图:\n\n![logger类](/images/logger_sink.png)\n### **这样做有什么好处？**\n\n* **高度解耦：** logger、sink、formatter 三者职责清晰，logger 不关心输出细节，sink 不关心格式化细节。\n* **极强的扩展性：** 用户可以轻松创建自己的 sink（如写入数据库）和 formatter（如输出为 JSON），并与现有 logger 无缝集成。\n* **灵活性：** 可以在运行时动态地为 sink 更换 formatter，改变日志格式。\n\n## **2. 组合模式 (Composite Pattern)：统一处理多个目的地**\n\n组合模式的核心思想是：**将对象组合成树形结构以表示“部分-整体”的层次结构，使得用户对单个对象和组合对象的使用具有一致性。**\n\n### **为什么使用组合模式？**\n\n我们常常希望一条日志能同时输出到多个地方，比如控制台和文件。组合模式使得 logger 在处理这种情况时无需区分是在跟一个 sink 还是多个 sink 打交道。\n\n### **在 spdlog 中是如何实现的？**\n\n如上节代码所示，spdlog 的 logger 类中持有一个 std::vector<sink_ptr> 成员 sinks_。当记录日志时，logger::sink_it_() 方法会简单地遍历这个 vector，并对其中的每一个 sink 调用 log() 方法。\n\n这里的实现完美地体现了组合模式的**核心思想——统一对待单个对象和对象集合**。对于 logger（客户端）来说，它处理 sinks_ 的逻辑是完全一致的，无论这个 vector 中只有一个 sink 还是有十个。\n\nspdlog 还提供了一个更经典的组合模式实现——dist_sink，它本身是一个 sink，内部也包含一个 sink 的集合，其 log() 方法就是遍历并调用内部所有 sink 的 log()。\n\n### **这样做有什么好处？**\n\n* **简化客户端代码：** logger 的实现变得非常简单，一个循环就解决了向所有目的地输出的问题。\n* **灵活性：** 用户可以自由地向 logger 的 sinks_ 列表添加或移除 sink，动态地改变日志的输出组合。\n\n## **3. 工厂模式 (Factory Pattern)：简化对象的创建过程**\n\n在 spdlog 中，工厂模式更多的是以**工厂函数 (Factory Function)** 结合 **模板化的工厂结构体 (Factory Struct)** 的形式体现，它提供了一个集中的、简化的方式来创建复杂的、预配置好的 logger 对象。\n\n### **为什么使用工厂模式？**\n\n手动创建一个功能完备的 logger 对象比较繁琐。尤其是异步的logger，还需要去手动创建线程池和设置队列大小。工厂模式将这些复杂的创建逻辑封装起来，向用户提供一个简单、易用的创建接口。\n\n### **在 spdlog 中是如何实现的？**\n\nspdlog 提供了一系列工厂函数，如 basic_logger_mt。这些函数巧妙地利用模板参数来接收一个“工厂”类型，这个工厂类型决定了是创建同步 logger还是异步 logger。\n\n```c++\n// 一个异步文件日志的创建示例  \nvoid async_example()  \n{  \n// 使用 async_factory 作为模板参数，创建异步 logger  \n    auto async_file = spdlog::basic_logger_mt<spdlog::async_factory>(\"async_file_logger\", \"logs/async_log.txt\");  \n}\n```\n\n```c++\n// 这是同步工厂的实现  \nstruct synchronous_factory {  \ntemplate <typename Sink, typename... SinkArgs>  \nstatic std::shared_ptr<spdlog::logger> create(std::string logger_name, SinkArgs &&...args) {  \n    auto sink = std::make_shared<Sink>(std::forward<SinkArgs>(args)...);  \n    auto new_logger = std::make_shared<spdlog::logger>(std::move(logger_name), std::move(sink));  \n    details::registry::instance().initialize_logger(new_logger);  \n    return new_logger;  \n}  \n};\n```\n\n```c++\n// 这是异步工厂的实现  \ntemplate<async_overflow_policy OverflowPolicy = async_overflow_policy::block>  \nstruct async_factory_impl  \n{  \n    template<typename Sink, typename... SinkArgs>  \n    static std::shared_ptr<async_logger> create(std::string logger_name, SinkArgs &&... args)  \n    {  \n    // ... (省略创建和获取全局线程池的逻辑) ...  \n    auto sink = std::make_shared<Sink>(std::forward<SinkArgs>(args)...);  \n    auto new_logger = std::make_shared<async_logger>(std::move(logger_name), std::move(sink),  \n    std::move(tp), OverflowPolicy);  \n    details::registry::instance().initialize_logger(new_logger);  \n    return new_logger;  \n    }  \n};\n\n    using async_factory = async_factory_impl<async_overflow_policy::block>;\n    .......\n```\n\n最终的工厂函数 basic_logger_mt 接收这个工厂类型作为模板参数，并调用其 create 方法。\n\n```c++\ntemplate <typename Factory = spdlog::synchronous_factory>  \ninline std::shared_ptr<logger> basic_logger_mt(const std::string &logger_name,  \n                                               const filename_t &filename,  \n                                               bool truncate = false,  \n                                               const file_event_handlers &event_handlers = {}) \n{  \n    // 调用传入的 Factory 的静态 create 方法来创建 logger  \n    return Factory::template create<sinks::basic_file_sink_mt>(logger_name, filename, truncate,event_handlers);  \n}\n```\n\n下面是工厂调用的时序图:\n\n![factory](/images/factory.png)\n\n### **这样做有什么好处？**\n\n* **极大地简化了用户的使用：** 用户可以用一行代码创建一个功能完备的同步或异步 logger。\n* **高度灵活与解耦：** 通过模板参数注入不同的工厂实现，使得创建不同类型 logger 的逻辑得以复用和解耦。\n* **保证了最佳实践：** 工厂函数创建的 logger 通常是经过预配置的、符合最佳实践的实例（例如，_mt 后缀的都是线程安全的）。\n\n通过这种模板方法和手段实现工厂也是C++实现工厂模式的一个优点，避免了重复创建无意义的工厂接口类，而是通过模板去实现静态多态\n\n## **4. 单例模式 (Singleton Pattern)：提供全局便捷访问**\n\n单例模式确保一个类只有一个实例，并提供一个全局访问点。\n\n### **为什么使用单例模式？**\n\n对于许多简单的应用场景，用户不希望手动创建和管理 logger 实例，而是希望有一个像 printf 一样方便的全局日志函数。spdlog 通过单例模式提供了一个全局的 logger 注册表 (registry) 和一个默认的 logger。\n\n### **在 spdlog 中是如何实现的？**\n\nspdlog 提供了全局的日志函数，如 spdlog::info, spdlog::error 等。\n\n```c++\n#include \"spdlog/spdlog.h\"\n\nint main()   \n{  \n    // 直接使用全局函数进行日志记录  \n    spdlog::info(\"Welcome to spdlog!\");  \n    spdlog::error(\"Some error message with arg: {}\", 1);  \n}\n```\n\n这些全局函数内部都通过调用 default_logger_raw() 来获取一个默认的 logger 实例。\n\n```c++\n   template <typename... Args>  \ninline void debug(format_string_t<Args...> fmt, Args &&...args) {  \n// 调用默认 logger 的 debug 方法  \n    default_logger_raw()->debug(fmt, std::forward<Args>(args)...);  \n}\n```\n\n而这个默认的 logger 由 spdlog::registry 类管理。registry 类自身就是通过单例模式实现的，它使用 C++11 之后线程安全的“Meyers' Singleton”模式。\n\n```c++\n// spdlog/details/registry.h  \nclass SPDLOG_API registry {  \npublic:  \n// ...  \n// 提供一个静态方法 instance() 来获取唯一的实例  \nstatic registry &instance();\n\n    std::shared_ptr<logger> default_logger();  \n    void set_default_logger(std::shared_ptr<logger> new_default_logger);  \n    void register_logger(std::shared_ptr<logger> new_logger);  \n    // ...  \nprivate:  \n    registry(); // 构造函数私有化  \n    ~registry();\n\n    std::unordered_map<std::string, std::shared_ptr<logger>> loggers_;  \n    std::shared_ptr<logger> default_logger_;  \n    // ...  \n};\n\n// spdlog/details/registry.cpp  \nSPDLOG_INLINE registry &registry::instance() {  \n    // C++11 保证了静态局部变量的初始化是线程安全的  \n    static registry s_instance;  \n    return s_instance;  \n}\n```\n\n### **这样做有什么好处？**\n\n* **便捷性：** 为用户提供了极其方便的全局日志接口，大大降低了入门和日常使用的复杂度。\n* **全局注册与管理：** 提供了一个中心化的位置来注册、获取和管理所有命名的 logger，方便统一配置。\n* **平衡了便利与灵活：** spdlog 在提供单例便利的同时，也允许用户创建和管理自己的 logger 实例，不与全局注册表绑定。这种设计非常出色，兼顾了易用性和灵活性，避免了单例模式在大型项目中可能带来的强耦合和测试困难问题。\n\n## **结论**\n\n通过对 spdlog 中设计模式的剖析，我们不难发现，这些经典模式并非孤立存在，而是相互协作，共同构成了 spdlog 优雅的架构：\n\n* **策略模式** 提供了核心的灵活性，使得日志的格式化和输出行为可以被轻松替换和扩展。\n* **组合模式** 使得 logger 能够统一、透明地处理单个或多个输出目的地，简化了客户端逻辑。\n* **工厂模式** (结合模板) 则封装了复杂的对象创建过程，为用户提供了简洁、易用的入口。\n* **单例模式** 为简单的使用场景提供了极大的便利，并提供了一个全局的管理中心。\n","source":"_posts/spdlog/spdlog源码阅读:06.spdlog中的设计模式.md","raw":"---\ntitle: \"spdlog源码阅读:06.spdlog中的设计模式\"\ndate: 2025-08-26\ncategories: \n  - 源码分析\n  - spdlog\ntags:\n  - C++\n  - spdlog\n  - 日志系统\n---\n\n## **前言：从功能到架构，探寻 spdlog 的设计之美**\n\n在本系列之前的文章中，我们深入剖析了 spdlog 的异步机制、核心组件，并且尝试拓展实现一个压缩sink，还尝试进行了性能优化实践。\n\n我们理解了 spdlog 在功能和性能上“做了什么”以及“怎么做的”。现在，我们跳出具体实现的细节，从**设计模式**的角度重新看一下这个库，\n\n深入探讨 spdlog 是如何巧妙地运用**策略模式 (Strategy)**、**组合模式 (Composite)**、**工厂模式 (Factory)**、以及**单例模式 (Singleton)**，来构建其灵活、高效且用户友好的体系的。\n<!-- more -->\n## **1. 策略模式 (Strategy Pattern)：解耦日志行为的核心**\n\n策略模式的核心思想是：**定义一系列算法，将每一个算法封装起来，并使它们可以相互替换。**\n\n### **为什么使用策略模式？**\n\n对于一个日志库而言，其核心任务是记录日志，但日志的“行为”是多变的：\n\n* 日志消息应该以什么样的**格式 (Format)**呈现？\n* 日志消息应该被发送到哪个**目的地 (Destination)**？\n\nspdlog 通过策略模式，将 logger 的核心记录逻辑与具体的**格式化策略**和**输出策略**完全解耦。\n\n### **在 spdlog 中是如何实现的？**\n\nspdlog 中有两处经典的策略模式应用：**Formatter 对 Sink 的策略** 和 **Sink 对 Logger 的策略**。\n\n**a) Formatter：定义日志的“格式化策略”**\n\nspdlog 定义了一个 formatter 接口，所有具体的格式化器都实现这个接口。sink 对象则**拥有 (has-a)** 一个 formatter 策略。\n\n// spdlog/formatter.h  \n```c++\nclass formatter {  \npublic:  \nvirtual ~formatter() = default;  \nvirtual void format(const details::log_msg &msg, memory_buf_t &dest) = 0;  \nvirtual std::unique_ptr<formatter> clone() const = 0;  \n};\n```\n每个 sink 对象都持有一个 formatter。当 sink 需要记录日志时，它不关心如何格式化，而是把这个任务委托给它持有的 formatter 策略对象。\n\n```c++\n// spdlog/sinks/base_sink.h  \ntemplate <typename Mutex>  \nclass SPDLOG_API base_sink : public sink {  \npublic:  \n// ...  \n    void log(const details::log_msg &msg) final override  \n    {  \n        std::lock_guard<Mutex> lock(mutex_);  \n\n        sink_it_(formatted); // sink_it_ 是子类实现的具体输出逻辑 , 实际调用 formatter_ 的 format 方法，执行格式化策略 \n    }\n\nprotected:  \n// 持有一个 formatter 策略  \n    std::unique_ptr<spdlog::formatter> formatter_;  \n    Mutex mutex_;  \n// ...  \n};\n```\n\n**b) Sink：定义日志的“输出策略”**\n\n同样地，spdlog 定义了一个 sink 接口，代表不同的输出目的地策略。logger 类则**拥有 (has-a)** 一个或多个 sink 策略。\n\n```c++\n// spdlog/sinks/sink.h  \nclass  sink {  \npublic:  \n    virtual ~sink() = default;  \n    virtual void log(const details::log_msg &msg) = 0;  \n    virtual void flush() = 0;  \n    virtual void set_pattern(const std::string &pattern) = 0;  \n    virtual void set_formatter(std::unique_ptr<spdlog::formatter> sink_formatter) = 0;  \n// ...  \n};  \n```\n\n`logger` 类中持有一个 `sink` 的集合。当用户调用 `logger->info(...)` 时，`logger` 将日志消息打包后，委托给它持有的所有 `sink` 策略对象去处理。\n\n```c++\nclass SPDLOG_API logger {\npublic:\n    ......\nprotected:\n    std::string name_;\n    std::vector<sink_ptr> sinks_;\n    spdlog::level_t level_{level::info};\n    spdlog::level_t flush_level_{level::off};\n    err_handler custom_err_handler_{nullptr};\n    details::backtracer tracer_;\n    }\n```\n\n下面是logger,sink和formatter三个类的类图:\n\n![logger类](/images/logger_sink.png)\n### **这样做有什么好处？**\n\n* **高度解耦：** logger、sink、formatter 三者职责清晰，logger 不关心输出细节，sink 不关心格式化细节。\n* **极强的扩展性：** 用户可以轻松创建自己的 sink（如写入数据库）和 formatter（如输出为 JSON），并与现有 logger 无缝集成。\n* **灵活性：** 可以在运行时动态地为 sink 更换 formatter，改变日志格式。\n\n## **2. 组合模式 (Composite Pattern)：统一处理多个目的地**\n\n组合模式的核心思想是：**将对象组合成树形结构以表示“部分-整体”的层次结构，使得用户对单个对象和组合对象的使用具有一致性。**\n\n### **为什么使用组合模式？**\n\n我们常常希望一条日志能同时输出到多个地方，比如控制台和文件。组合模式使得 logger 在处理这种情况时无需区分是在跟一个 sink 还是多个 sink 打交道。\n\n### **在 spdlog 中是如何实现的？**\n\n如上节代码所示，spdlog 的 logger 类中持有一个 std::vector<sink_ptr> 成员 sinks_。当记录日志时，logger::sink_it_() 方法会简单地遍历这个 vector，并对其中的每一个 sink 调用 log() 方法。\n\n这里的实现完美地体现了组合模式的**核心思想——统一对待单个对象和对象集合**。对于 logger（客户端）来说，它处理 sinks_ 的逻辑是完全一致的，无论这个 vector 中只有一个 sink 还是有十个。\n\nspdlog 还提供了一个更经典的组合模式实现——dist_sink，它本身是一个 sink，内部也包含一个 sink 的集合，其 log() 方法就是遍历并调用内部所有 sink 的 log()。\n\n### **这样做有什么好处？**\n\n* **简化客户端代码：** logger 的实现变得非常简单，一个循环就解决了向所有目的地输出的问题。\n* **灵活性：** 用户可以自由地向 logger 的 sinks_ 列表添加或移除 sink，动态地改变日志的输出组合。\n\n## **3. 工厂模式 (Factory Pattern)：简化对象的创建过程**\n\n在 spdlog 中，工厂模式更多的是以**工厂函数 (Factory Function)** 结合 **模板化的工厂结构体 (Factory Struct)** 的形式体现，它提供了一个集中的、简化的方式来创建复杂的、预配置好的 logger 对象。\n\n### **为什么使用工厂模式？**\n\n手动创建一个功能完备的 logger 对象比较繁琐。尤其是异步的logger，还需要去手动创建线程池和设置队列大小。工厂模式将这些复杂的创建逻辑封装起来，向用户提供一个简单、易用的创建接口。\n\n### **在 spdlog 中是如何实现的？**\n\nspdlog 提供了一系列工厂函数，如 basic_logger_mt。这些函数巧妙地利用模板参数来接收一个“工厂”类型，这个工厂类型决定了是创建同步 logger还是异步 logger。\n\n```c++\n// 一个异步文件日志的创建示例  \nvoid async_example()  \n{  \n// 使用 async_factory 作为模板参数，创建异步 logger  \n    auto async_file = spdlog::basic_logger_mt<spdlog::async_factory>(\"async_file_logger\", \"logs/async_log.txt\");  \n}\n```\n\n```c++\n// 这是同步工厂的实现  \nstruct synchronous_factory {  \ntemplate <typename Sink, typename... SinkArgs>  \nstatic std::shared_ptr<spdlog::logger> create(std::string logger_name, SinkArgs &&...args) {  \n    auto sink = std::make_shared<Sink>(std::forward<SinkArgs>(args)...);  \n    auto new_logger = std::make_shared<spdlog::logger>(std::move(logger_name), std::move(sink));  \n    details::registry::instance().initialize_logger(new_logger);  \n    return new_logger;  \n}  \n};\n```\n\n```c++\n// 这是异步工厂的实现  \ntemplate<async_overflow_policy OverflowPolicy = async_overflow_policy::block>  \nstruct async_factory_impl  \n{  \n    template<typename Sink, typename... SinkArgs>  \n    static std::shared_ptr<async_logger> create(std::string logger_name, SinkArgs &&... args)  \n    {  \n    // ... (省略创建和获取全局线程池的逻辑) ...  \n    auto sink = std::make_shared<Sink>(std::forward<SinkArgs>(args)...);  \n    auto new_logger = std::make_shared<async_logger>(std::move(logger_name), std::move(sink),  \n    std::move(tp), OverflowPolicy);  \n    details::registry::instance().initialize_logger(new_logger);  \n    return new_logger;  \n    }  \n};\n\n    using async_factory = async_factory_impl<async_overflow_policy::block>;\n    .......\n```\n\n最终的工厂函数 basic_logger_mt 接收这个工厂类型作为模板参数，并调用其 create 方法。\n\n```c++\ntemplate <typename Factory = spdlog::synchronous_factory>  \ninline std::shared_ptr<logger> basic_logger_mt(const std::string &logger_name,  \n                                               const filename_t &filename,  \n                                               bool truncate = false,  \n                                               const file_event_handlers &event_handlers = {}) \n{  \n    // 调用传入的 Factory 的静态 create 方法来创建 logger  \n    return Factory::template create<sinks::basic_file_sink_mt>(logger_name, filename, truncate,event_handlers);  \n}\n```\n\n下面是工厂调用的时序图:\n\n![factory](/images/factory.png)\n\n### **这样做有什么好处？**\n\n* **极大地简化了用户的使用：** 用户可以用一行代码创建一个功能完备的同步或异步 logger。\n* **高度灵活与解耦：** 通过模板参数注入不同的工厂实现，使得创建不同类型 logger 的逻辑得以复用和解耦。\n* **保证了最佳实践：** 工厂函数创建的 logger 通常是经过预配置的、符合最佳实践的实例（例如，_mt 后缀的都是线程安全的）。\n\n通过这种模板方法和手段实现工厂也是C++实现工厂模式的一个优点，避免了重复创建无意义的工厂接口类，而是通过模板去实现静态多态\n\n## **4. 单例模式 (Singleton Pattern)：提供全局便捷访问**\n\n单例模式确保一个类只有一个实例，并提供一个全局访问点。\n\n### **为什么使用单例模式？**\n\n对于许多简单的应用场景，用户不希望手动创建和管理 logger 实例，而是希望有一个像 printf 一样方便的全局日志函数。spdlog 通过单例模式提供了一个全局的 logger 注册表 (registry) 和一个默认的 logger。\n\n### **在 spdlog 中是如何实现的？**\n\nspdlog 提供了全局的日志函数，如 spdlog::info, spdlog::error 等。\n\n```c++\n#include \"spdlog/spdlog.h\"\n\nint main()   \n{  \n    // 直接使用全局函数进行日志记录  \n    spdlog::info(\"Welcome to spdlog!\");  \n    spdlog::error(\"Some error message with arg: {}\", 1);  \n}\n```\n\n这些全局函数内部都通过调用 default_logger_raw() 来获取一个默认的 logger 实例。\n\n```c++\n   template <typename... Args>  \ninline void debug(format_string_t<Args...> fmt, Args &&...args) {  \n// 调用默认 logger 的 debug 方法  \n    default_logger_raw()->debug(fmt, std::forward<Args>(args)...);  \n}\n```\n\n而这个默认的 logger 由 spdlog::registry 类管理。registry 类自身就是通过单例模式实现的，它使用 C++11 之后线程安全的“Meyers' Singleton”模式。\n\n```c++\n// spdlog/details/registry.h  \nclass SPDLOG_API registry {  \npublic:  \n// ...  \n// 提供一个静态方法 instance() 来获取唯一的实例  \nstatic registry &instance();\n\n    std::shared_ptr<logger> default_logger();  \n    void set_default_logger(std::shared_ptr<logger> new_default_logger);  \n    void register_logger(std::shared_ptr<logger> new_logger);  \n    // ...  \nprivate:  \n    registry(); // 构造函数私有化  \n    ~registry();\n\n    std::unordered_map<std::string, std::shared_ptr<logger>> loggers_;  \n    std::shared_ptr<logger> default_logger_;  \n    // ...  \n};\n\n// spdlog/details/registry.cpp  \nSPDLOG_INLINE registry &registry::instance() {  \n    // C++11 保证了静态局部变量的初始化是线程安全的  \n    static registry s_instance;  \n    return s_instance;  \n}\n```\n\n### **这样做有什么好处？**\n\n* **便捷性：** 为用户提供了极其方便的全局日志接口，大大降低了入门和日常使用的复杂度。\n* **全局注册与管理：** 提供了一个中心化的位置来注册、获取和管理所有命名的 logger，方便统一配置。\n* **平衡了便利与灵活：** spdlog 在提供单例便利的同时，也允许用户创建和管理自己的 logger 实例，不与全局注册表绑定。这种设计非常出色，兼顾了易用性和灵活性，避免了单例模式在大型项目中可能带来的强耦合和测试困难问题。\n\n## **结论**\n\n通过对 spdlog 中设计模式的剖析，我们不难发现，这些经典模式并非孤立存在，而是相互协作，共同构成了 spdlog 优雅的架构：\n\n* **策略模式** 提供了核心的灵活性，使得日志的格式化和输出行为可以被轻松替换和扩展。\n* **组合模式** 使得 logger 能够统一、透明地处理单个或多个输出目的地，简化了客户端逻辑。\n* **工厂模式** (结合模板) 则封装了复杂的对象创建过程，为用户提供了简洁、易用的入口。\n* **单例模式** 为简单的使用场景提供了极大的便利，并提供了一个全局的管理中心。\n","slug":"spdlog/spdlog源码阅读:06.spdlog中的设计模式","published":1,"updated":"2025-08-28T12:45:20.494Z","comments":1,"layout":"post","photos":[],"_id":"cmevecvsj0028hfro7ve4f3y4","content":"<h2 id=\"前言：从功能到架构，探寻-spdlog-的设计之美\"><a href=\"#前言：从功能到架构，探寻-spdlog-的设计之美\" class=\"headerlink\" title=\"前言：从功能到架构，探寻 spdlog 的设计之美\"></a><strong>前言：从功能到架构，探寻 spdlog 的设计之美</strong></h2><p>在本系列之前的文章中，我们深入剖析了 spdlog 的异步机制、核心组件，并且尝试拓展实现一个压缩sink，还尝试进行了性能优化实践。</p>\n<p>我们理解了 spdlog 在功能和性能上“做了什么”以及“怎么做的”。现在，我们跳出具体实现的细节，从<strong>设计模式</strong>的角度重新看一下这个库，</p>\n<p>深入探讨 spdlog 是如何巧妙地运用**策略模式 (Strategy)<strong>、</strong>组合模式 (Composite)<strong>、</strong>工厂模式 (Factory)<strong>、以及</strong>单例模式 (Singleton)**，来构建其灵活、高效且用户友好的体系的。</p>\n<span id=\"more\"></span>\n<h2 id=\"1-策略模式-Strategy-Pattern-：解耦日志行为的核心\"><a href=\"#1-策略模式-Strategy-Pattern-：解耦日志行为的核心\" class=\"headerlink\" title=\"1. 策略模式 (Strategy Pattern)：解耦日志行为的核心\"></a><strong>1. 策略模式 (Strategy Pattern)：解耦日志行为的核心</strong></h2><p>策略模式的核心思想是：<strong>定义一系列算法，将每一个算法封装起来，并使它们可以相互替换。</strong></p>\n<h3 id=\"为什么使用策略模式？\"><a href=\"#为什么使用策略模式？\" class=\"headerlink\" title=\"为什么使用策略模式？\"></a><strong>为什么使用策略模式？</strong></h3><p>对于一个日志库而言，其核心任务是记录日志，但日志的“行为”是多变的：</p>\n<ul>\n<li>日志消息应该以什么样的**格式 (Format)**呈现？</li>\n<li>日志消息应该被发送到哪个**目的地 (Destination)**？</li>\n</ul>\n<p>spdlog 通过策略模式，将 logger 的核心记录逻辑与具体的<strong>格式化策略</strong>和<strong>输出策略</strong>完全解耦。</p>\n<h3 id=\"在-spdlog-中是如何实现的？\"><a href=\"#在-spdlog-中是如何实现的？\" class=\"headerlink\" title=\"在 spdlog 中是如何实现的？\"></a><strong>在 spdlog 中是如何实现的？</strong></h3><p>spdlog 中有两处经典的策略模式应用：<strong>Formatter 对 Sink 的策略</strong> 和 <strong>Sink 对 Logger 的策略</strong>。</p>\n<p><strong>a) Formatter：定义日志的“格式化策略”</strong></p>\n<p>spdlog 定义了一个 formatter 接口，所有具体的格式化器都实现这个接口。sink 对象则<strong>拥有 (has-a)</strong> 一个 formatter 策略。</p>\n<p>&#x2F;&#x2F; spdlog&#x2F;formatter.h  </p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">formatter</span> &#123;  </span><br><span class=\"line\"><span class=\"keyword\">public</span>:  </span><br><span class=\"line\"><span class=\"keyword\">virtual</span> ~formatter() = <span class=\"keyword\">default</span>;  </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">virtual</span> <span class=\"type\">void</span> <span class=\"title\">format</span><span class=\"params\">(<span class=\"type\">const</span> details::log_msg &amp;msg, <span class=\"type\">memory_buf_t</span> &amp;dest)</span> </span>= <span class=\"number\">0</span>;  </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">virtual</span> std::unique_ptr&lt;formatter&gt; <span class=\"title\">clone</span><span class=\"params\">()</span> <span class=\"type\">const</span> </span>= <span class=\"number\">0</span>;  </span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>每个 sink 对象都持有一个 formatter。当 sink 需要记录日志时，它不关心如何格式化，而是把这个任务委托给它持有的 formatter 策略对象。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// spdlog/sinks/base_sink.h  </span></span><br><span class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"keyword\">typename</span> Mutex&gt;  </span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">SPDLOG_API</span> base_sink : <span class=\"keyword\">public</span> sink &#123;  </span><br><span class=\"line\"><span class=\"keyword\">public</span>:  </span><br><span class=\"line\"><span class=\"comment\">// ...  </span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">log</span><span class=\"params\">(<span class=\"type\">const</span> details::log_msg &amp;msg)</span> <span class=\"keyword\">final</span> <span class=\"keyword\">override</span>  </span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;  </span><br><span class=\"line\">        <span class=\"function\">std::lock_guard&lt;Mutex&gt; <span class=\"title\">lock</span><span class=\"params\">(mutex_)</span></span>;  </span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"built_in\">sink_it_</span>(formatted); <span class=\"comment\">// sink_it_ 是子类实现的具体输出逻辑 , 实际调用 formatter_ 的 format 方法，执行格式化策略 </span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">protected</span>:  </span><br><span class=\"line\"><span class=\"comment\">// 持有一个 formatter 策略  </span></span><br><span class=\"line\">    std::unique_ptr&lt;spdlog::formatter&gt; formatter_;  </span><br><span class=\"line\">    Mutex mutex_;  </span><br><span class=\"line\"><span class=\"comment\">// ...  </span></span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p><strong>b) Sink：定义日志的“输出策略”</strong></p>\n<p>同样地，spdlog 定义了一个 sink 接口，代表不同的输出目的地策略。logger 类则<strong>拥有 (has-a)</strong> 一个或多个 sink 策略。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// spdlog/sinks/sink.h  </span></span><br><span class=\"line\"><span class=\"keyword\">class</span>  <span class=\"title class_\">sink</span> &#123;  </span><br><span class=\"line\"><span class=\"keyword\">public</span>:  </span><br><span class=\"line\">    <span class=\"keyword\">virtual</span> ~<span class=\"built_in\">sink</span>() = <span class=\"keyword\">default</span>;  </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">virtual</span> <span class=\"type\">void</span> <span class=\"title\">log</span><span class=\"params\">(<span class=\"type\">const</span> details::log_msg &amp;msg)</span> </span>= <span class=\"number\">0</span>;  </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">virtual</span> <span class=\"type\">void</span> <span class=\"title\">flush</span><span class=\"params\">()</span> </span>= <span class=\"number\">0</span>;  </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">virtual</span> <span class=\"type\">void</span> <span class=\"title\">set_pattern</span><span class=\"params\">(<span class=\"type\">const</span> std::string &amp;pattern)</span> </span>= <span class=\"number\">0</span>;  </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">virtual</span> <span class=\"type\">void</span> <span class=\"title\">set_formatter</span><span class=\"params\">(std::unique_ptr&lt;spdlog::formatter&gt; sink_formatter)</span> </span>= <span class=\"number\">0</span>;  </span><br><span class=\"line\"><span class=\"comment\">// ...  </span></span><br><span class=\"line\">&#125;;  </span><br></pre></td></tr></table></figure>\n\n<p><code>logger</code> 类中持有一个 <code>sink</code> 的集合。当用户调用 <code>logger-&gt;info(...)</code> 时，<code>logger</code> 将日志消息打包后，委托给它持有的所有 <code>sink</code> 策略对象去处理。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">SPDLOG_API</span> logger &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    ......</span><br><span class=\"line\"><span class=\"keyword\">protected</span>:</span><br><span class=\"line\">    std::string name_;</span><br><span class=\"line\">    std::vector&lt;sink_ptr&gt; sinks_;</span><br><span class=\"line\">    spdlog::<span class=\"type\">level_t</span> level_&#123;level::info&#125;;</span><br><span class=\"line\">    spdlog::<span class=\"type\">level_t</span> flush_level_&#123;level::off&#125;;</span><br><span class=\"line\">    err_handler custom_err_handler_&#123;<span class=\"literal\">nullptr</span>&#125;;</span><br><span class=\"line\">    details::backtracer tracer_;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n<p>下面是logger,sink和formatter三个类的类图:</p>\n<p><img src=\"/images/logger_sink.png\" alt=\"logger类\"></p>\n<h3 id=\"这样做有什么好处？\"><a href=\"#这样做有什么好处？\" class=\"headerlink\" title=\"这样做有什么好处？\"></a><strong>这样做有什么好处？</strong></h3><ul>\n<li><strong>高度解耦：</strong> logger、sink、formatter 三者职责清晰，logger 不关心输出细节，sink 不关心格式化细节。</li>\n<li><strong>极强的扩展性：</strong> 用户可以轻松创建自己的 sink（如写入数据库）和 formatter（如输出为 JSON），并与现有 logger 无缝集成。</li>\n<li><strong>灵活性：</strong> 可以在运行时动态地为 sink 更换 formatter，改变日志格式。</li>\n</ul>\n<h2 id=\"2-组合模式-Composite-Pattern-：统一处理多个目的地\"><a href=\"#2-组合模式-Composite-Pattern-：统一处理多个目的地\" class=\"headerlink\" title=\"2. 组合模式 (Composite Pattern)：统一处理多个目的地\"></a><strong>2. 组合模式 (Composite Pattern)：统一处理多个目的地</strong></h2><p>组合模式的核心思想是：<strong>将对象组合成树形结构以表示“部分-整体”的层次结构，使得用户对单个对象和组合对象的使用具有一致性。</strong></p>\n<h3 id=\"为什么使用组合模式？\"><a href=\"#为什么使用组合模式？\" class=\"headerlink\" title=\"为什么使用组合模式？\"></a><strong>为什么使用组合模式？</strong></h3><p>我们常常希望一条日志能同时输出到多个地方，比如控制台和文件。组合模式使得 logger 在处理这种情况时无需区分是在跟一个 sink 还是多个 sink 打交道。</p>\n<h3 id=\"在-spdlog-中是如何实现的？-1\"><a href=\"#在-spdlog-中是如何实现的？-1\" class=\"headerlink\" title=\"在 spdlog 中是如何实现的？\"></a><strong>在 spdlog 中是如何实现的？</strong></h3><p>如上节代码所示，spdlog 的 logger 类中持有一个 std::vector<sink_ptr> 成员 sinks_。当记录日志时，logger::sink_it_() 方法会简单地遍历这个 vector，并对其中的每一个 sink 调用 log() 方法。</p>\n<p>这里的实现完美地体现了组合模式的<strong>核心思想——统一对待单个对象和对象集合</strong>。对于 logger（客户端）来说，它处理 sinks_ 的逻辑是完全一致的，无论这个 vector 中只有一个 sink 还是有十个。</p>\n<p>spdlog 还提供了一个更经典的组合模式实现——dist_sink，它本身是一个 sink，内部也包含一个 sink 的集合，其 log() 方法就是遍历并调用内部所有 sink 的 log()。</p>\n<h3 id=\"这样做有什么好处？-1\"><a href=\"#这样做有什么好处？-1\" class=\"headerlink\" title=\"这样做有什么好处？\"></a><strong>这样做有什么好处？</strong></h3><ul>\n<li><strong>简化客户端代码：</strong> logger 的实现变得非常简单，一个循环就解决了向所有目的地输出的问题。</li>\n<li><strong>灵活性：</strong> 用户可以自由地向 logger 的 sinks_ 列表添加或移除 sink，动态地改变日志的输出组合。</li>\n</ul>\n<h2 id=\"3-工厂模式-Factory-Pattern-：简化对象的创建过程\"><a href=\"#3-工厂模式-Factory-Pattern-：简化对象的创建过程\" class=\"headerlink\" title=\"3. 工厂模式 (Factory Pattern)：简化对象的创建过程\"></a><strong>3. 工厂模式 (Factory Pattern)：简化对象的创建过程</strong></h2><p>在 spdlog 中，工厂模式更多的是以<strong>工厂函数 (Factory Function)</strong> 结合 <strong>模板化的工厂结构体 (Factory Struct)</strong> 的形式体现，它提供了一个集中的、简化的方式来创建复杂的、预配置好的 logger 对象。</p>\n<h3 id=\"为什么使用工厂模式？\"><a href=\"#为什么使用工厂模式？\" class=\"headerlink\" title=\"为什么使用工厂模式？\"></a><strong>为什么使用工厂模式？</strong></h3><p>手动创建一个功能完备的 logger 对象比较繁琐。尤其是异步的logger，还需要去手动创建线程池和设置队列大小。工厂模式将这些复杂的创建逻辑封装起来，向用户提供一个简单、易用的创建接口。</p>\n<h3 id=\"在-spdlog-中是如何实现的？-2\"><a href=\"#在-spdlog-中是如何实现的？-2\" class=\"headerlink\" title=\"在 spdlog 中是如何实现的？\"></a><strong>在 spdlog 中是如何实现的？</strong></h3><p>spdlog 提供了一系列工厂函数，如 basic_logger_mt。这些函数巧妙地利用模板参数来接收一个“工厂”类型，这个工厂类型决定了是创建同步 logger还是异步 logger。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 一个异步文件日志的创建示例  </span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">async_example</span><span class=\"params\">()</span>  </span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;  </span><br><span class=\"line\"><span class=\"comment\">// 使用 async_factory 作为模板参数，创建异步 logger  </span></span><br><span class=\"line\">    <span class=\"keyword\">auto</span> async_file = spdlog::<span class=\"built_in\">basic_logger_mt</span>&lt;spdlog::async_factory&gt;(<span class=\"string\">&quot;async_file_logger&quot;</span>, <span class=\"string\">&quot;logs/async_log.txt&quot;</span>);  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 这是同步工厂的实现  </span></span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">synchronous_factory</span> &#123;  </span><br><span class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"keyword\">typename</span> Sink, <span class=\"keyword\">typename</span>... SinkArgs&gt;  </span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">static</span> std::shared_ptr&lt;spdlog::logger&gt; <span class=\"title\">create</span><span class=\"params\">(std::string logger_name, SinkArgs &amp;&amp;...args)</span> </span>&#123;  </span><br><span class=\"line\">    <span class=\"keyword\">auto</span> sink = std::<span class=\"built_in\">make_shared</span>&lt;Sink&gt;(std::forward&lt;SinkArgs&gt;(args)...);  </span><br><span class=\"line\">    <span class=\"keyword\">auto</span> new_logger = std::<span class=\"built_in\">make_shared</span>&lt;spdlog::logger&gt;(std::<span class=\"built_in\">move</span>(logger_name), std::<span class=\"built_in\">move</span>(sink));  </span><br><span class=\"line\">    details::registry::<span class=\"built_in\">instance</span>().<span class=\"built_in\">initialize_logger</span>(new_logger);  </span><br><span class=\"line\">    <span class=\"keyword\">return</span> new_logger;  </span><br><span class=\"line\">&#125;  </span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 这是异步工厂的实现  </span></span><br><span class=\"line\"><span class=\"keyword\">template</span>&lt;async_overflow_policy OverflowPolicy = async_overflow_policy::block&gt;  </span><br><span class=\"line\"><span class=\"keyword\">struct</span> async_factory_impl  </span><br><span class=\"line\">&#123;  </span><br><span class=\"line\">    <span class=\"keyword\">template</span>&lt;<span class=\"keyword\">typename</span> Sink, <span class=\"keyword\">typename</span>... SinkArgs&gt;  </span><br><span class=\"line\">    <span class=\"type\">static</span> std::shared_ptr&lt;async_logger&gt; <span class=\"built_in\">create</span>(std::string logger_name, SinkArgs &amp;&amp;... args)  </span><br><span class=\"line\">    &#123;  </span><br><span class=\"line\">    <span class=\"comment\">// ... (省略创建和获取全局线程池的逻辑) ...  </span></span><br><span class=\"line\">    <span class=\"keyword\">auto</span> sink = std::<span class=\"built_in\">make_shared</span>&lt;Sink&gt;(std::forward&lt;SinkArgs&gt;(args)...);  </span><br><span class=\"line\">    <span class=\"keyword\">auto</span> new_logger = std::<span class=\"built_in\">make_shared</span>&lt;async_logger&gt;(std::<span class=\"built_in\">move</span>(logger_name), std::<span class=\"built_in\">move</span>(sink),  </span><br><span class=\"line\">    std::<span class=\"built_in\">move</span>(tp), OverflowPolicy);  </span><br><span class=\"line\">    details::registry::<span class=\"built_in\">instance</span>().<span class=\"built_in\">initialize_logger</span>(new_logger);  </span><br><span class=\"line\">    <span class=\"keyword\">return</span> new_logger;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">using</span> async_factory = async_factory_impl&lt;async_overflow_policy::block&gt;;</span><br><span class=\"line\">    .......</span><br></pre></td></tr></table></figure>\n\n<p>最终的工厂函数 basic_logger_mt 接收这个工厂类型作为模板参数，并调用其 create 方法。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"keyword\">typename</span> Factory = spdlog::synchronous_factory&gt;  </span><br><span class=\"line\"><span class=\"keyword\">inline</span> std::shared_ptr&lt;logger&gt; <span class=\"built_in\">basic_logger_mt</span>(<span class=\"type\">const</span> std::string &amp;logger_name,  </span><br><span class=\"line\">                                               <span class=\"type\">const</span> <span class=\"type\">filename_t</span> &amp;filename,  </span><br><span class=\"line\">                                               <span class=\"type\">bool</span> truncate = <span class=\"literal\">false</span>,  </span><br><span class=\"line\">                                               <span class=\"type\">const</span> file_event_handlers &amp;event_handlers = &#123;&#125;) </span><br><span class=\"line\">&#123;  </span><br><span class=\"line\">    <span class=\"comment\">// 调用传入的 Factory 的静态 create 方法来创建 logger  </span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> Factory::<span class=\"keyword\">template</span> <span class=\"built_in\">create</span>&lt;sinks::basic_file_sink_mt&gt;(logger_name, filename, truncate,event_handlers);  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>下面是工厂调用的时序图:</p>\n<p><img src=\"/images/factory.png\" alt=\"factory\"></p>\n<h3 id=\"这样做有什么好处？-2\"><a href=\"#这样做有什么好处？-2\" class=\"headerlink\" title=\"这样做有什么好处？\"></a><strong>这样做有什么好处？</strong></h3><ul>\n<li><strong>极大地简化了用户的使用：</strong> 用户可以用一行代码创建一个功能完备的同步或异步 logger。</li>\n<li><strong>高度灵活与解耦：</strong> 通过模板参数注入不同的工厂实现，使得创建不同类型 logger 的逻辑得以复用和解耦。</li>\n<li><strong>保证了最佳实践：</strong> 工厂函数创建的 logger 通常是经过预配置的、符合最佳实践的实例（例如，_mt 后缀的都是线程安全的）。</li>\n</ul>\n<p>通过这种模板方法和手段实现工厂也是C++实现工厂模式的一个优点，避免了重复创建无意义的工厂接口类，而是通过模板去实现静态多态</p>\n<h2 id=\"4-单例模式-Singleton-Pattern-：提供全局便捷访问\"><a href=\"#4-单例模式-Singleton-Pattern-：提供全局便捷访问\" class=\"headerlink\" title=\"4. 单例模式 (Singleton Pattern)：提供全局便捷访问\"></a><strong>4. 单例模式 (Singleton Pattern)：提供全局便捷访问</strong></h2><p>单例模式确保一个类只有一个实例，并提供一个全局访问点。</p>\n<h3 id=\"为什么使用单例模式？\"><a href=\"#为什么使用单例模式？\" class=\"headerlink\" title=\"为什么使用单例模式？\"></a><strong>为什么使用单例模式？</strong></h3><p>对于许多简单的应用场景，用户不希望手动创建和管理 logger 实例，而是希望有一个像 printf 一样方便的全局日志函数。spdlog 通过单例模式提供了一个全局的 logger 注册表 (registry) 和一个默认的 logger。</p>\n<h3 id=\"在-spdlog-中是如何实现的？-3\"><a href=\"#在-spdlog-中是如何实现的？-3\" class=\"headerlink\" title=\"在 spdlog 中是如何实现的？\"></a><strong>在 spdlog 中是如何实现的？</strong></h3><p>spdlog 提供了全局的日志函数，如 spdlog::info, spdlog::error 等。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;spdlog/spdlog.h&quot;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span>   </span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;  </span><br><span class=\"line\">    <span class=\"comment\">// 直接使用全局函数进行日志记录  </span></span><br><span class=\"line\">    spdlog::<span class=\"built_in\">info</span>(<span class=\"string\">&quot;Welcome to spdlog!&quot;</span>);  </span><br><span class=\"line\">    spdlog::<span class=\"built_in\">error</span>(<span class=\"string\">&quot;Some error message with arg: &#123;&#125;&quot;</span>, <span class=\"number\">1</span>);  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这些全局函数内部都通过调用 default_logger_raw() 来获取一个默认的 logger 实例。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">   <span class=\"keyword\">template</span> &lt;<span class=\"keyword\">typename</span>... Args&gt;  </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"type\">void</span> <span class=\"title\">debug</span><span class=\"params\">(<span class=\"type\">format_string_t</span>&lt;Args...&gt; fmt, Args &amp;&amp;...args)</span> </span>&#123;  </span><br><span class=\"line\"><span class=\"comment\">// 调用默认 logger 的 debug 方法  </span></span><br><span class=\"line\">    <span class=\"built_in\">default_logger_raw</span>()-&gt;<span class=\"built_in\">debug</span>(fmt, std::forward&lt;Args&gt;(args)...);  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>而这个默认的 logger 由 spdlog::registry 类管理。registry 类自身就是通过单例模式实现的，它使用 C++11 之后线程安全的“Meyers’ Singleton”模式。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// spdlog/details/registry.h  </span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">SPDLOG_API</span> registry &#123;  </span><br><span class=\"line\"><span class=\"keyword\">public</span>:  </span><br><span class=\"line\"><span class=\"comment\">// ...  </span></span><br><span class=\"line\"><span class=\"comment\">// 提供一个静态方法 instance() 来获取唯一的实例  </span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">static</span> registry &amp;<span class=\"title\">instance</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\">std::shared_ptr&lt;logger&gt; <span class=\"title\">default_logger</span><span class=\"params\">()</span></span>;  </span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">set_default_logger</span><span class=\"params\">(std::shared_ptr&lt;logger&gt; new_default_logger)</span></span>;  </span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">register_logger</span><span class=\"params\">(std::shared_ptr&lt;logger&gt; new_logger)</span></span>;  </span><br><span class=\"line\">    <span class=\"comment\">// ...  </span></span><br><span class=\"line\"><span class=\"keyword\">private</span>:  </span><br><span class=\"line\">    <span class=\"built_in\">registry</span>(); <span class=\"comment\">// 构造函数私有化  </span></span><br><span class=\"line\">    ~<span class=\"built_in\">registry</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">    std::unordered_map&lt;std::string, std::shared_ptr&lt;logger&gt;&gt; loggers_;  </span><br><span class=\"line\">    std::shared_ptr&lt;logger&gt; default_logger_;  </span><br><span class=\"line\">    <span class=\"comment\">// ...  </span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// spdlog/details/registry.cpp  </span></span><br><span class=\"line\"><span class=\"function\">SPDLOG_INLINE registry &amp;<span class=\"title\">registry::instance</span><span class=\"params\">()</span> </span>&#123;  </span><br><span class=\"line\">    <span class=\"comment\">// C++11 保证了静态局部变量的初始化是线程安全的  </span></span><br><span class=\"line\">    <span class=\"type\">static</span> registry s_instance;  </span><br><span class=\"line\">    <span class=\"keyword\">return</span> s_instance;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"这样做有什么好处？-3\"><a href=\"#这样做有什么好处？-3\" class=\"headerlink\" title=\"这样做有什么好处？\"></a><strong>这样做有什么好处？</strong></h3><ul>\n<li><strong>便捷性：</strong> 为用户提供了极其方便的全局日志接口，大大降低了入门和日常使用的复杂度。</li>\n<li><strong>全局注册与管理：</strong> 提供了一个中心化的位置来注册、获取和管理所有命名的 logger，方便统一配置。</li>\n<li><strong>平衡了便利与灵活：</strong> spdlog 在提供单例便利的同时，也允许用户创建和管理自己的 logger 实例，不与全局注册表绑定。这种设计非常出色，兼顾了易用性和灵活性，避免了单例模式在大型项目中可能带来的强耦合和测试困难问题。</li>\n</ul>\n<h2 id=\"结论\"><a href=\"#结论\" class=\"headerlink\" title=\"结论\"></a><strong>结论</strong></h2><p>通过对 spdlog 中设计模式的剖析，我们不难发现，这些经典模式并非孤立存在，而是相互协作，共同构成了 spdlog 优雅的架构：</p>\n<ul>\n<li><strong>策略模式</strong> 提供了核心的灵活性，使得日志的格式化和输出行为可以被轻松替换和扩展。</li>\n<li><strong>组合模式</strong> 使得 logger 能够统一、透明地处理单个或多个输出目的地，简化了客户端逻辑。</li>\n<li><strong>工厂模式</strong> (结合模板) 则封装了复杂的对象创建过程，为用户提供了简洁、易用的入口。</li>\n<li><strong>单例模式</strong> 为简单的使用场景提供了极大的便利，并提供了一个全局的管理中心。</li>\n</ul>\n","excerpt":"<h2 id=\"前言：从功能到架构，探寻-spdlog-的设计之美\"><a href=\"#前言：从功能到架构，探寻-spdlog-的设计之美\" class=\"headerlink\" title=\"前言：从功能到架构，探寻 spdlog 的设计之美\"></a><strong>前言：从功能到架构，探寻 spdlog 的设计之美</strong></h2><p>在本系列之前的文章中，我们深入剖析了 spdlog 的异步机制、核心组件，并且尝试拓展实现一个压缩sink，还尝试进行了性能优化实践。</p>\n<p>我们理解了 spdlog 在功能和性能上“做了什么”以及“怎么做的”。现在，我们跳出具体实现的细节，从<strong>设计模式</strong>的角度重新看一下这个库，</p>\n<p>深入探讨 spdlog 是如何巧妙地运用**策略模式 (Strategy)<strong>、</strong>组合模式 (Composite)<strong>、</strong>工厂模式 (Factory)<strong>、以及</strong>单例模式 (Singleton)**，来构建其灵活、高效且用户友好的体系的。</p>","more":"<h2 id=\"1-策略模式-Strategy-Pattern-：解耦日志行为的核心\"><a href=\"#1-策略模式-Strategy-Pattern-：解耦日志行为的核心\" class=\"headerlink\" title=\"1. 策略模式 (Strategy Pattern)：解耦日志行为的核心\"></a><strong>1. 策略模式 (Strategy Pattern)：解耦日志行为的核心</strong></h2><p>策略模式的核心思想是：<strong>定义一系列算法，将每一个算法封装起来，并使它们可以相互替换。</strong></p>\n<h3 id=\"为什么使用策略模式？\"><a href=\"#为什么使用策略模式？\" class=\"headerlink\" title=\"为什么使用策略模式？\"></a><strong>为什么使用策略模式？</strong></h3><p>对于一个日志库而言，其核心任务是记录日志，但日志的“行为”是多变的：</p>\n<ul>\n<li>日志消息应该以什么样的**格式 (Format)**呈现？</li>\n<li>日志消息应该被发送到哪个**目的地 (Destination)**？</li>\n</ul>\n<p>spdlog 通过策略模式，将 logger 的核心记录逻辑与具体的<strong>格式化策略</strong>和<strong>输出策略</strong>完全解耦。</p>\n<h3 id=\"在-spdlog-中是如何实现的？\"><a href=\"#在-spdlog-中是如何实现的？\" class=\"headerlink\" title=\"在 spdlog 中是如何实现的？\"></a><strong>在 spdlog 中是如何实现的？</strong></h3><p>spdlog 中有两处经典的策略模式应用：<strong>Formatter 对 Sink 的策略</strong> 和 <strong>Sink 对 Logger 的策略</strong>。</p>\n<p><strong>a) Formatter：定义日志的“格式化策略”</strong></p>\n<p>spdlog 定义了一个 formatter 接口，所有具体的格式化器都实现这个接口。sink 对象则<strong>拥有 (has-a)</strong> 一个 formatter 策略。</p>\n<p>&#x2F;&#x2F; spdlog&#x2F;formatter.h  </p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">formatter</span> &#123;  </span><br><span class=\"line\"><span class=\"keyword\">public</span>:  </span><br><span class=\"line\"><span class=\"keyword\">virtual</span> ~formatter() = <span class=\"keyword\">default</span>;  </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">virtual</span> <span class=\"type\">void</span> <span class=\"title\">format</span><span class=\"params\">(<span class=\"type\">const</span> details::log_msg &amp;msg, <span class=\"type\">memory_buf_t</span> &amp;dest)</span> </span>= <span class=\"number\">0</span>;  </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">virtual</span> std::unique_ptr&lt;formatter&gt; <span class=\"title\">clone</span><span class=\"params\">()</span> <span class=\"type\">const</span> </span>= <span class=\"number\">0</span>;  </span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>每个 sink 对象都持有一个 formatter。当 sink 需要记录日志时，它不关心如何格式化，而是把这个任务委托给它持有的 formatter 策略对象。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// spdlog/sinks/base_sink.h  </span></span><br><span class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"keyword\">typename</span> Mutex&gt;  </span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">SPDLOG_API</span> base_sink : <span class=\"keyword\">public</span> sink &#123;  </span><br><span class=\"line\"><span class=\"keyword\">public</span>:  </span><br><span class=\"line\"><span class=\"comment\">// ...  </span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">log</span><span class=\"params\">(<span class=\"type\">const</span> details::log_msg &amp;msg)</span> <span class=\"keyword\">final</span> <span class=\"keyword\">override</span>  </span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;  </span><br><span class=\"line\">        <span class=\"function\">std::lock_guard&lt;Mutex&gt; <span class=\"title\">lock</span><span class=\"params\">(mutex_)</span></span>;  </span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"built_in\">sink_it_</span>(formatted); <span class=\"comment\">// sink_it_ 是子类实现的具体输出逻辑 , 实际调用 formatter_ 的 format 方法，执行格式化策略 </span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">protected</span>:  </span><br><span class=\"line\"><span class=\"comment\">// 持有一个 formatter 策略  </span></span><br><span class=\"line\">    std::unique_ptr&lt;spdlog::formatter&gt; formatter_;  </span><br><span class=\"line\">    Mutex mutex_;  </span><br><span class=\"line\"><span class=\"comment\">// ...  </span></span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p><strong>b) Sink：定义日志的“输出策略”</strong></p>\n<p>同样地，spdlog 定义了一个 sink 接口，代表不同的输出目的地策略。logger 类则<strong>拥有 (has-a)</strong> 一个或多个 sink 策略。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// spdlog/sinks/sink.h  </span></span><br><span class=\"line\"><span class=\"keyword\">class</span>  <span class=\"title class_\">sink</span> &#123;  </span><br><span class=\"line\"><span class=\"keyword\">public</span>:  </span><br><span class=\"line\">    <span class=\"keyword\">virtual</span> ~<span class=\"built_in\">sink</span>() = <span class=\"keyword\">default</span>;  </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">virtual</span> <span class=\"type\">void</span> <span class=\"title\">log</span><span class=\"params\">(<span class=\"type\">const</span> details::log_msg &amp;msg)</span> </span>= <span class=\"number\">0</span>;  </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">virtual</span> <span class=\"type\">void</span> <span class=\"title\">flush</span><span class=\"params\">()</span> </span>= <span class=\"number\">0</span>;  </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">virtual</span> <span class=\"type\">void</span> <span class=\"title\">set_pattern</span><span class=\"params\">(<span class=\"type\">const</span> std::string &amp;pattern)</span> </span>= <span class=\"number\">0</span>;  </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">virtual</span> <span class=\"type\">void</span> <span class=\"title\">set_formatter</span><span class=\"params\">(std::unique_ptr&lt;spdlog::formatter&gt; sink_formatter)</span> </span>= <span class=\"number\">0</span>;  </span><br><span class=\"line\"><span class=\"comment\">// ...  </span></span><br><span class=\"line\">&#125;;  </span><br></pre></td></tr></table></figure>\n\n<p><code>logger</code> 类中持有一个 <code>sink</code> 的集合。当用户调用 <code>logger-&gt;info(...)</code> 时，<code>logger</code> 将日志消息打包后，委托给它持有的所有 <code>sink</code> 策略对象去处理。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">SPDLOG_API</span> logger &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    ......</span><br><span class=\"line\"><span class=\"keyword\">protected</span>:</span><br><span class=\"line\">    std::string name_;</span><br><span class=\"line\">    std::vector&lt;sink_ptr&gt; sinks_;</span><br><span class=\"line\">    spdlog::<span class=\"type\">level_t</span> level_&#123;level::info&#125;;</span><br><span class=\"line\">    spdlog::<span class=\"type\">level_t</span> flush_level_&#123;level::off&#125;;</span><br><span class=\"line\">    err_handler custom_err_handler_&#123;<span class=\"literal\">nullptr</span>&#125;;</span><br><span class=\"line\">    details::backtracer tracer_;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n<p>下面是logger,sink和formatter三个类的类图:</p>\n<p><img src=\"/images/logger_sink.png\" alt=\"logger类\"></p>\n<h3 id=\"这样做有什么好处？\"><a href=\"#这样做有什么好处？\" class=\"headerlink\" title=\"这样做有什么好处？\"></a><strong>这样做有什么好处？</strong></h3><ul>\n<li><strong>高度解耦：</strong> logger、sink、formatter 三者职责清晰，logger 不关心输出细节，sink 不关心格式化细节。</li>\n<li><strong>极强的扩展性：</strong> 用户可以轻松创建自己的 sink（如写入数据库）和 formatter（如输出为 JSON），并与现有 logger 无缝集成。</li>\n<li><strong>灵活性：</strong> 可以在运行时动态地为 sink 更换 formatter，改变日志格式。</li>\n</ul>\n<h2 id=\"2-组合模式-Composite-Pattern-：统一处理多个目的地\"><a href=\"#2-组合模式-Composite-Pattern-：统一处理多个目的地\" class=\"headerlink\" title=\"2. 组合模式 (Composite Pattern)：统一处理多个目的地\"></a><strong>2. 组合模式 (Composite Pattern)：统一处理多个目的地</strong></h2><p>组合模式的核心思想是：<strong>将对象组合成树形结构以表示“部分-整体”的层次结构，使得用户对单个对象和组合对象的使用具有一致性。</strong></p>\n<h3 id=\"为什么使用组合模式？\"><a href=\"#为什么使用组合模式？\" class=\"headerlink\" title=\"为什么使用组合模式？\"></a><strong>为什么使用组合模式？</strong></h3><p>我们常常希望一条日志能同时输出到多个地方，比如控制台和文件。组合模式使得 logger 在处理这种情况时无需区分是在跟一个 sink 还是多个 sink 打交道。</p>\n<h3 id=\"在-spdlog-中是如何实现的？-1\"><a href=\"#在-spdlog-中是如何实现的？-1\" class=\"headerlink\" title=\"在 spdlog 中是如何实现的？\"></a><strong>在 spdlog 中是如何实现的？</strong></h3><p>如上节代码所示，spdlog 的 logger 类中持有一个 std::vector<sink_ptr> 成员 sinks_。当记录日志时，logger::sink_it_() 方法会简单地遍历这个 vector，并对其中的每一个 sink 调用 log() 方法。</p>\n<p>这里的实现完美地体现了组合模式的<strong>核心思想——统一对待单个对象和对象集合</strong>。对于 logger（客户端）来说，它处理 sinks_ 的逻辑是完全一致的，无论这个 vector 中只有一个 sink 还是有十个。</p>\n<p>spdlog 还提供了一个更经典的组合模式实现——dist_sink，它本身是一个 sink，内部也包含一个 sink 的集合，其 log() 方法就是遍历并调用内部所有 sink 的 log()。</p>\n<h3 id=\"这样做有什么好处？-1\"><a href=\"#这样做有什么好处？-1\" class=\"headerlink\" title=\"这样做有什么好处？\"></a><strong>这样做有什么好处？</strong></h3><ul>\n<li><strong>简化客户端代码：</strong> logger 的实现变得非常简单，一个循环就解决了向所有目的地输出的问题。</li>\n<li><strong>灵活性：</strong> 用户可以自由地向 logger 的 sinks_ 列表添加或移除 sink，动态地改变日志的输出组合。</li>\n</ul>\n<h2 id=\"3-工厂模式-Factory-Pattern-：简化对象的创建过程\"><a href=\"#3-工厂模式-Factory-Pattern-：简化对象的创建过程\" class=\"headerlink\" title=\"3. 工厂模式 (Factory Pattern)：简化对象的创建过程\"></a><strong>3. 工厂模式 (Factory Pattern)：简化对象的创建过程</strong></h2><p>在 spdlog 中，工厂模式更多的是以<strong>工厂函数 (Factory Function)</strong> 结合 <strong>模板化的工厂结构体 (Factory Struct)</strong> 的形式体现，它提供了一个集中的、简化的方式来创建复杂的、预配置好的 logger 对象。</p>\n<h3 id=\"为什么使用工厂模式？\"><a href=\"#为什么使用工厂模式？\" class=\"headerlink\" title=\"为什么使用工厂模式？\"></a><strong>为什么使用工厂模式？</strong></h3><p>手动创建一个功能完备的 logger 对象比较繁琐。尤其是异步的logger，还需要去手动创建线程池和设置队列大小。工厂模式将这些复杂的创建逻辑封装起来，向用户提供一个简单、易用的创建接口。</p>\n<h3 id=\"在-spdlog-中是如何实现的？-2\"><a href=\"#在-spdlog-中是如何实现的？-2\" class=\"headerlink\" title=\"在 spdlog 中是如何实现的？\"></a><strong>在 spdlog 中是如何实现的？</strong></h3><p>spdlog 提供了一系列工厂函数，如 basic_logger_mt。这些函数巧妙地利用模板参数来接收一个“工厂”类型，这个工厂类型决定了是创建同步 logger还是异步 logger。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 一个异步文件日志的创建示例  </span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">async_example</span><span class=\"params\">()</span>  </span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;  </span><br><span class=\"line\"><span class=\"comment\">// 使用 async_factory 作为模板参数，创建异步 logger  </span></span><br><span class=\"line\">    <span class=\"keyword\">auto</span> async_file = spdlog::<span class=\"built_in\">basic_logger_mt</span>&lt;spdlog::async_factory&gt;(<span class=\"string\">&quot;async_file_logger&quot;</span>, <span class=\"string\">&quot;logs/async_log.txt&quot;</span>);  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 这是同步工厂的实现  </span></span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">synchronous_factory</span> &#123;  </span><br><span class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"keyword\">typename</span> Sink, <span class=\"keyword\">typename</span>... SinkArgs&gt;  </span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">static</span> std::shared_ptr&lt;spdlog::logger&gt; <span class=\"title\">create</span><span class=\"params\">(std::string logger_name, SinkArgs &amp;&amp;...args)</span> </span>&#123;  </span><br><span class=\"line\">    <span class=\"keyword\">auto</span> sink = std::<span class=\"built_in\">make_shared</span>&lt;Sink&gt;(std::forward&lt;SinkArgs&gt;(args)...);  </span><br><span class=\"line\">    <span class=\"keyword\">auto</span> new_logger = std::<span class=\"built_in\">make_shared</span>&lt;spdlog::logger&gt;(std::<span class=\"built_in\">move</span>(logger_name), std::<span class=\"built_in\">move</span>(sink));  </span><br><span class=\"line\">    details::registry::<span class=\"built_in\">instance</span>().<span class=\"built_in\">initialize_logger</span>(new_logger);  </span><br><span class=\"line\">    <span class=\"keyword\">return</span> new_logger;  </span><br><span class=\"line\">&#125;  </span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 这是异步工厂的实现  </span></span><br><span class=\"line\"><span class=\"keyword\">template</span>&lt;async_overflow_policy OverflowPolicy = async_overflow_policy::block&gt;  </span><br><span class=\"line\"><span class=\"keyword\">struct</span> async_factory_impl  </span><br><span class=\"line\">&#123;  </span><br><span class=\"line\">    <span class=\"keyword\">template</span>&lt;<span class=\"keyword\">typename</span> Sink, <span class=\"keyword\">typename</span>... SinkArgs&gt;  </span><br><span class=\"line\">    <span class=\"type\">static</span> std::shared_ptr&lt;async_logger&gt; <span class=\"built_in\">create</span>(std::string logger_name, SinkArgs &amp;&amp;... args)  </span><br><span class=\"line\">    &#123;  </span><br><span class=\"line\">    <span class=\"comment\">// ... (省略创建和获取全局线程池的逻辑) ...  </span></span><br><span class=\"line\">    <span class=\"keyword\">auto</span> sink = std::<span class=\"built_in\">make_shared</span>&lt;Sink&gt;(std::forward&lt;SinkArgs&gt;(args)...);  </span><br><span class=\"line\">    <span class=\"keyword\">auto</span> new_logger = std::<span class=\"built_in\">make_shared</span>&lt;async_logger&gt;(std::<span class=\"built_in\">move</span>(logger_name), std::<span class=\"built_in\">move</span>(sink),  </span><br><span class=\"line\">    std::<span class=\"built_in\">move</span>(tp), OverflowPolicy);  </span><br><span class=\"line\">    details::registry::<span class=\"built_in\">instance</span>().<span class=\"built_in\">initialize_logger</span>(new_logger);  </span><br><span class=\"line\">    <span class=\"keyword\">return</span> new_logger;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">using</span> async_factory = async_factory_impl&lt;async_overflow_policy::block&gt;;</span><br><span class=\"line\">    .......</span><br></pre></td></tr></table></figure>\n\n<p>最终的工厂函数 basic_logger_mt 接收这个工厂类型作为模板参数，并调用其 create 方法。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"keyword\">typename</span> Factory = spdlog::synchronous_factory&gt;  </span><br><span class=\"line\"><span class=\"keyword\">inline</span> std::shared_ptr&lt;logger&gt; <span class=\"built_in\">basic_logger_mt</span>(<span class=\"type\">const</span> std::string &amp;logger_name,  </span><br><span class=\"line\">                                               <span class=\"type\">const</span> <span class=\"type\">filename_t</span> &amp;filename,  </span><br><span class=\"line\">                                               <span class=\"type\">bool</span> truncate = <span class=\"literal\">false</span>,  </span><br><span class=\"line\">                                               <span class=\"type\">const</span> file_event_handlers &amp;event_handlers = &#123;&#125;) </span><br><span class=\"line\">&#123;  </span><br><span class=\"line\">    <span class=\"comment\">// 调用传入的 Factory 的静态 create 方法来创建 logger  </span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> Factory::<span class=\"keyword\">template</span> <span class=\"built_in\">create</span>&lt;sinks::basic_file_sink_mt&gt;(logger_name, filename, truncate,event_handlers);  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>下面是工厂调用的时序图:</p>\n<p><img src=\"/images/factory.png\" alt=\"factory\"></p>\n<h3 id=\"这样做有什么好处？-2\"><a href=\"#这样做有什么好处？-2\" class=\"headerlink\" title=\"这样做有什么好处？\"></a><strong>这样做有什么好处？</strong></h3><ul>\n<li><strong>极大地简化了用户的使用：</strong> 用户可以用一行代码创建一个功能完备的同步或异步 logger。</li>\n<li><strong>高度灵活与解耦：</strong> 通过模板参数注入不同的工厂实现，使得创建不同类型 logger 的逻辑得以复用和解耦。</li>\n<li><strong>保证了最佳实践：</strong> 工厂函数创建的 logger 通常是经过预配置的、符合最佳实践的实例（例如，_mt 后缀的都是线程安全的）。</li>\n</ul>\n<p>通过这种模板方法和手段实现工厂也是C++实现工厂模式的一个优点，避免了重复创建无意义的工厂接口类，而是通过模板去实现静态多态</p>\n<h2 id=\"4-单例模式-Singleton-Pattern-：提供全局便捷访问\"><a href=\"#4-单例模式-Singleton-Pattern-：提供全局便捷访问\" class=\"headerlink\" title=\"4. 单例模式 (Singleton Pattern)：提供全局便捷访问\"></a><strong>4. 单例模式 (Singleton Pattern)：提供全局便捷访问</strong></h2><p>单例模式确保一个类只有一个实例，并提供一个全局访问点。</p>\n<h3 id=\"为什么使用单例模式？\"><a href=\"#为什么使用单例模式？\" class=\"headerlink\" title=\"为什么使用单例模式？\"></a><strong>为什么使用单例模式？</strong></h3><p>对于许多简单的应用场景，用户不希望手动创建和管理 logger 实例，而是希望有一个像 printf 一样方便的全局日志函数。spdlog 通过单例模式提供了一个全局的 logger 注册表 (registry) 和一个默认的 logger。</p>\n<h3 id=\"在-spdlog-中是如何实现的？-3\"><a href=\"#在-spdlog-中是如何实现的？-3\" class=\"headerlink\" title=\"在 spdlog 中是如何实现的？\"></a><strong>在 spdlog 中是如何实现的？</strong></h3><p>spdlog 提供了全局的日志函数，如 spdlog::info, spdlog::error 等。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;spdlog/spdlog.h&quot;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span>   </span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;  </span><br><span class=\"line\">    <span class=\"comment\">// 直接使用全局函数进行日志记录  </span></span><br><span class=\"line\">    spdlog::<span class=\"built_in\">info</span>(<span class=\"string\">&quot;Welcome to spdlog!&quot;</span>);  </span><br><span class=\"line\">    spdlog::<span class=\"built_in\">error</span>(<span class=\"string\">&quot;Some error message with arg: &#123;&#125;&quot;</span>, <span class=\"number\">1</span>);  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这些全局函数内部都通过调用 default_logger_raw() 来获取一个默认的 logger 实例。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">   <span class=\"keyword\">template</span> &lt;<span class=\"keyword\">typename</span>... Args&gt;  </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"type\">void</span> <span class=\"title\">debug</span><span class=\"params\">(<span class=\"type\">format_string_t</span>&lt;Args...&gt; fmt, Args &amp;&amp;...args)</span> </span>&#123;  </span><br><span class=\"line\"><span class=\"comment\">// 调用默认 logger 的 debug 方法  </span></span><br><span class=\"line\">    <span class=\"built_in\">default_logger_raw</span>()-&gt;<span class=\"built_in\">debug</span>(fmt, std::forward&lt;Args&gt;(args)...);  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>而这个默认的 logger 由 spdlog::registry 类管理。registry 类自身就是通过单例模式实现的，它使用 C++11 之后线程安全的“Meyers’ Singleton”模式。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// spdlog/details/registry.h  </span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">SPDLOG_API</span> registry &#123;  </span><br><span class=\"line\"><span class=\"keyword\">public</span>:  </span><br><span class=\"line\"><span class=\"comment\">// ...  </span></span><br><span class=\"line\"><span class=\"comment\">// 提供一个静态方法 instance() 来获取唯一的实例  </span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">static</span> registry &amp;<span class=\"title\">instance</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\">std::shared_ptr&lt;logger&gt; <span class=\"title\">default_logger</span><span class=\"params\">()</span></span>;  </span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">set_default_logger</span><span class=\"params\">(std::shared_ptr&lt;logger&gt; new_default_logger)</span></span>;  </span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">register_logger</span><span class=\"params\">(std::shared_ptr&lt;logger&gt; new_logger)</span></span>;  </span><br><span class=\"line\">    <span class=\"comment\">// ...  </span></span><br><span class=\"line\"><span class=\"keyword\">private</span>:  </span><br><span class=\"line\">    <span class=\"built_in\">registry</span>(); <span class=\"comment\">// 构造函数私有化  </span></span><br><span class=\"line\">    ~<span class=\"built_in\">registry</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">    std::unordered_map&lt;std::string, std::shared_ptr&lt;logger&gt;&gt; loggers_;  </span><br><span class=\"line\">    std::shared_ptr&lt;logger&gt; default_logger_;  </span><br><span class=\"line\">    <span class=\"comment\">// ...  </span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// spdlog/details/registry.cpp  </span></span><br><span class=\"line\"><span class=\"function\">SPDLOG_INLINE registry &amp;<span class=\"title\">registry::instance</span><span class=\"params\">()</span> </span>&#123;  </span><br><span class=\"line\">    <span class=\"comment\">// C++11 保证了静态局部变量的初始化是线程安全的  </span></span><br><span class=\"line\">    <span class=\"type\">static</span> registry s_instance;  </span><br><span class=\"line\">    <span class=\"keyword\">return</span> s_instance;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"这样做有什么好处？-3\"><a href=\"#这样做有什么好处？-3\" class=\"headerlink\" title=\"这样做有什么好处？\"></a><strong>这样做有什么好处？</strong></h3><ul>\n<li><strong>便捷性：</strong> 为用户提供了极其方便的全局日志接口，大大降低了入门和日常使用的复杂度。</li>\n<li><strong>全局注册与管理：</strong> 提供了一个中心化的位置来注册、获取和管理所有命名的 logger，方便统一配置。</li>\n<li><strong>平衡了便利与灵活：</strong> spdlog 在提供单例便利的同时，也允许用户创建和管理自己的 logger 实例，不与全局注册表绑定。这种设计非常出色，兼顾了易用性和灵活性，避免了单例模式在大型项目中可能带来的强耦合和测试困难问题。</li>\n</ul>\n<h2 id=\"结论\"><a href=\"#结论\" class=\"headerlink\" title=\"结论\"></a><strong>结论</strong></h2><p>通过对 spdlog 中设计模式的剖析，我们不难发现，这些经典模式并非孤立存在，而是相互协作，共同构成了 spdlog 优雅的架构：</p>\n<ul>\n<li><strong>策略模式</strong> 提供了核心的灵活性，使得日志的格式化和输出行为可以被轻松替换和扩展。</li>\n<li><strong>组合模式</strong> 使得 logger 能够统一、透明地处理单个或多个输出目的地，简化了客户端逻辑。</li>\n<li><strong>工厂模式</strong> (结合模板) 则封装了复杂的对象创建过程，为用户提供了简洁、易用的入口。</li>\n<li><strong>单例模式</strong> 为简单的使用场景提供了极大的便利，并提供了一个全局的管理中心。</li>\n</ul>"},{"title":"spdlog源码阅读:03.实现自定义压缩sink","date":"2025-08-25T16:00:00.000Z","_content":"# 引言\n\nspdlog 是一个功能强大且高度可扩展的 C++ 日志库，其模块化设计允许开发者通过自定义 sink 实现灵活的日志输出。在前两篇文章中，我们分析了 spdlog 的异步日志机制以及 `daily_file_sink` 和 `rotating_file_sink` 的实现。本文将聚焦于 **如何在 spdlog 中实现自定义 sink**，以 `compressed_file_sink` 为例，详细讲解如何利用 zlib 库实现日志压缩功能，减少磁盘空间占用。\n\n通过本文，你将学会：\n\n- spdlog 中自定义 sink 的实现步骤。\n- `compressed_file_sink` 如何通过 zlib 实现日志压缩。\n- 自定义 sink 的关键设计要点和注意事项。\n\n**注：本文分析的源码基于 spdlog v1.15.1 和提供的 `compressed_file_sink` 实现。**\n<!-- more -->\n# spdlog 中自定义 sink 的实现方法\n\nspdlog 的 sink 机制是其扩展性的核心。所有 sink 都继承自 `base_sink` 模板类，通过实现两个关键虚函数 `sink_it_` 和 `flush_`，即可定义日志的输出逻辑。以下是实现自定义 sink 的通用步骤：\n\n1. **继承 base_sink**：创建一个新类，继承 `base_sink<Mutex>`，选择合适的互斥锁（如 `std::mutex` 用于多线程，`null_mutex` 用于单线程）。\n2. **实现 sink_it_**：定义日志消息的处理逻辑，如格式化、加工或输出到目标（如文件、网络）。\n3. **实现 flush_**：确保缓冲区数据被刷新到目标，完成输出。\n4. **管理资源**：在构造函数中初始化资源（如文件句柄、缓冲区），在析构函数中清理。\n5. **提供工厂函数**：为多线程和单线程模式定义便捷的创建函数（如 `compressed_file_logger_mt/st`）。\n\n`compressed_file_sink` 遵循上述步骤，通过集成 zlib 库实现了压缩日志的输出，下面我们以其为案例进行深入分析。\n\n# compressed_file_sink 实现解析\n\n`compressed_file_sink` 是一个自定义 sink，通过缓冲日志消息、利用 zlib 压缩数据并写入文件，实现高效的日志存储。以下从 demo 入手，逐步剖析其实现原理。\n\n## 使用 demo\n\n以下是一个简单的 `compressed_file_sink` 使用示例：\n\n```cpp\n#include \"spdlog/spdlog.h\"\n#include \"compressed_file_sink.h\"\n\nvoid compressed_file_example() {\n    auto compressed_logger = spdlog::compressed_file_logger_mt(\"compressed_logger\", \"logs/compressed_log.z\", 8192, Z_DEFAULT_COMPRESSION);\n    compressed_logger->info(\"This is a compressed log message.\");\n    compressed_logger->flush();\n}\n```\n在这个 demo 中，我们创建了一个多线程的压缩日志 logger，日志消息通过 `compressed_file_sink` 压缩后写入 `logs/compressed_log.z` 文件。\n\n## 日志消息流转与压缩实现\n\n以 `info(\"This is a compressed log message.\")` 为例，分析日志消息的处理流程，重点讲解压缩逻辑。\n\n### 日志生产\n\n1. **调用 info 方法**：\n    - 用户调用 `logger->info`，触发模板函数，最终调用 `base_sink` 的 `log` 方法，执行 `sink_it_` 虚函数。\n    - 在 `compressed_file_sink::sink_it_` 中，日志消息被格式化并追加到内部缓冲区。\n\n```cpp\nvoid sink_it_(const details::log_msg &msg) override {\n    memory_buf_t formatted;\n    base_sink<Mutex>::formatter_->format(msg, formatted);\n    buffer_.append(formatted.data(), formatted.data() + formatted.size());\n    if (buffer_.size() >= buffer_capacity_) {\n        compress_and_write_();\n    }\n}\n```\n2. **缓冲管理**：\n    - 格式化后的日志消息存储在 `buffer_`（类型为 `memory_buf_t`）。\n    - 当 `buffer_` 大小达到 `buffer_capacity_`（默认 8192 字节）时，调用 `compress_and_write_` 进行压缩和写入。\n\n### 日志压缩与写入\n\n`compress_and_write_` 是压缩功能的核心，结合 zlib 库完成数据压缩并写入文件。以下是其实现步骤：\n\n1. **初始化 zlib 输入**：\n    - 将 `buffer_` 的数据传递给 zlib 压缩流 `strm_`，设置输入指针（`next_in`）和长度（`avail_in`）。\n\n```cpp\nstrm_.avail_in = static_cast<uInt>(buffer_.size());\nstrm_.next_in = reinterpret_cast<Bytef *>(const_cast<char *>(buffer_.data()));\n```\n\n2. **逐步压缩（Z_NO_FLUSH）**：\n    - 使用 `deflate` 函数以 `Z_NO_FLUSH` 模式分步处理输入数据，输出到临时缓冲区 `compress_buffer_`（类型为 `std::vector<unsigned char>`）。\n    - 循环调用 `deflate` 直到所有输入数据被消耗，收集压缩输出到 `compressed_output`。\n\n```cpp\ndo {\n    strm_.avail_out = static_cast<uInt>(compress_buffer_.size());\n    strm_.next_out = compress_buffer_.data();\n    deflate_ret = deflate(&strm_, Z_NO_FLUSH);\n    size_t have = compress_buffer_.size() - strm_.avail_out;\n    if (have > 0) {\n        compressed_output.insert(compressed_output.end(), compress_buffer_.data(), compress_buffer_.data() + have);\n    }\n} while (strm_.avail_out == 0 && strm_.avail_in > 0);\n```\n\n3. **结束压缩（Z_FINISH）**：\n    - 使用 `Z_FINISH` 模式完成当前压缩块，生成完整的压缩数据。\n    - 继续调用 `deflate` 直到返回 `Z_STREAM_END`，确保所有输出被收集。\n\n```cpp\ndo {\n    strm_.avail_out = static_cast<uInt>(compress_buffer_.size());\n    strm_.next_out = compress_buffer_.data();\n    finish_ret = deflate(&strm_, Z_FINISH);\n    size_t have = compress_buffer_.size() - strm_.avail_out;\n    if (have > 0) {\n        compressed_output.insert(compressed_output.end(), compress_buffer_.data(), compress_buffer_.data() + have);\n    }\n} while (finish_ret != Z_STREAM_END);\n```\n\n4. **写入文件**：\n    - 压缩数据存储在 `compressed_output` 中。\n    - 首先写入 4 字节的压缩块长度（`uint32_t`），便于解压时解析。\n    - 然后写入压缩数据，使用 `file_helper_.write` 完成文件 IO。\n\n```cpp\nuint32_t compressed_size = static_cast<uint32_t>(compressed_output.size());\nif (compressed_size > 0) {\n    memory_buf_t size_buf;\n    size_buf.append(reinterpret_cast<const char *>(&compressed_size), \n                    reinterpret_cast<const char *>(&compressed_size) + sizeof(compressed_size));\n    file_helper_.write(size_buf);\n    memory_buf_t data_buf;\n    data_buf.append(reinterpret_cast<const char *>(compressed_output.data()), \n                    reinterpret_cast<const char *>(compressed_output.data()) + compressed_output.size());\n    file_helper_.write(data_buf);\n}\n```\n\n5. **重置与清理**：\n    - 通过 `deflateReset` 重置 zlib 流，为下一块压缩准备。\n    - 清空 `buffer_`，等待新的日志消息。\n\n```cpp\ndeflateReset(&strm_);\nbuffer_.clear();\n```\n\n### 刷新与资源管理\n\n1. **刷新缓冲区**：\n    - 用户调用 `logger->flush()` 触发 `flush_` 方法，调用 `compress_and_write_` 压缩剩余数据，并通过 `file_helper_.flush()` 确保写入磁盘。\n\n```cpp\nvoid flush_() override {\n    compress_and_write_();\n    file_helper_.flush();\n}\n```\n2. **资源初始化与清理**：\n    - **构造函数**：初始化 zlib 流（`deflateInit`）、打开文件（`file_helper_.open`）、预分配缓冲区（`buffer_` 和 `compress_buffer_`）。\n    - **析构函数**：刷新缓冲区、释放 zlib 资源（`deflateEnd`），`file_helper_` 自动关闭文件。\n\n```cpp\nexplicit compressed_file_sink(const filename_t &filename, size_t buffer_capacity = 8192,\n                              int compression_level = Z_DEFAULT_COMPRESSION) {\n    strm_.zalloc = Z_NULL;\n    strm_.zfree = Z_NULL;\n    strm_.opaque = Z_NULL;\n    int ret = deflateInit(&strm_, compression_level_);\n    if (ret != Z_OK) throw spdlog_ex(\"Failed to initialize zlib deflate\", ret);\n    file_helper_.open(filename_, false);\n    buffer_.reserve(buffer_capacity_);\n    compress_buffer_.resize(buffer_capacity_);\n}\n\n~compressed_file_sink() override {\n    try {\n        std::lock_guard<Mutex> lock(base_sink<Mutex>::mutex_);\n        flush_();\n        deflateEnd(&strm_);\n    } catch (...) {}\n}\n```\n## 关键类与设计\n### 类层次结构\n`compressed_file_sink` 的设计充分利用了 spdlog 的模块化架构，以下是关键类关系：\n\n- **base_sink**：提供日志格式化和线程安全的基础功能，定义 `sink_it_` 和 `flush_` 接口。\n- **compressed_file_sink**：继承 `base_sink`，实现压缩逻辑，管理 zlib 流和缓冲区。\n- **file_helper**：封装文件操作，负责打开、写入和刷新。\n- **formatter**：格式化日志消息。\n\n类图如下：\n![spdlog_sink_compress.png](/images/spdlog_sink_compress.png)\n\n# 总结\n\n通过分析 `compressed_file_sink`，我们深入理解了 spdlog 中自定义 sink 的实现方法。`compressed_file_sink` 利用 zlib 库，通过缓冲、分块压缩和长度前缀的机制，实现了高效的日志压缩功能。\n\n未来可探索以下方向：\n\n- 结合 `daily_file_sink`，实现按天分割的压缩日志。\n- 尝试其他压缩库（如 zstd），提升压缩速度或比率。\n\n希望本文能为你提供清晰的自定义 sink 实现指南！如需进一步探讨或优化建议，欢迎随时交流。\n\n#附：完整压缩源码和压缩日志读取器\n```c++\n#pragma once\n\n#include <spdlog/common.h>\n#include <spdlog/sinks/base_sink.h>\n#include <spdlog/details/file_helper.h>\n#include <spdlog/details/null_mutex.h>\n#include <spdlog/details/synchronous_factory.h>\n#include <spdlog/fmt/fmt.h>\n\n#include <zlib.h>\n#include <string>\n#include <mutex>\n\nnamespace spdlog\n{\n    namespace sinks\n    {\n        // 自定义压缩文件 Sink (使用 file_helper)\n        template<typename Mutex>\n        class compressed_file_sink : public base_sink<Mutex>\n        {\n        public:\n            // 构造函数\n            explicit compressed_file_sink(const filename_t &filename, size_t buffer_capacity = 8192,\n                                          int compression_level = Z_DEFAULT_COMPRESSION)\n                : filename_(filename), buffer_capacity_(buffer_capacity), compression_level_(compression_level)\n            {\n                // 初始化 zlib 压缩流\n                strm_.zalloc = Z_NULL;\n                strm_.zfree = Z_NULL;\n                strm_.opaque = Z_NULL;\n                int ret = deflateInit(&strm_, compression_level_);\n                if (ret != Z_OK)\n                {\n                    throw spdlog_ex(\"Failed to initialize zlib deflate\", ret);\n                }\n\n                // 使用 file_helper 打开文件 (false 表示不截断，实现追加效果)\n                try\n                {\n                    file_helper_.open(filename_, false);\n                } catch (const spdlog_ex &ex)\n                {\n                    deflateEnd(&strm_); // 清理 zlib 资源\n                    throw ex; // 重新抛出文件打开异常\n                }\n\n\n                // 预分配缓冲区 (使用 spdlog::memory_buf_t)\n                buffer_.reserve(buffer_capacity_);\n                compress_buffer_.resize(buffer_capacity_); // 初始压缩缓冲区大小 (保持 vector<unsigned char> 以便与 zlib C API 交互)\n            }\n\n            // 析构函数：确保所有缓冲数据被压缩和写入\n            ~compressed_file_sink() override\n            {\n                try\n                {\n                    // 获取锁以安全地刷新\n                    std::lock_guard<Mutex> lock(base_sink<Mutex>::mutex_);\n                    flush_(); // 刷新剩余缓冲区\n                    deflateEnd(&strm_); // 清理 zlib 资源\n                    // file_helper 会在析构时自动关闭文件，无需显式调用 close()\n                } catch (...)\n                {\n                    // 析构函数中不应抛出异常\n                }\n            }\n\n            compressed_file_sink(const compressed_file_sink &) = delete;\n\n            compressed_file_sink &operator=(const compressed_file_sink &) = delete;\n\n        protected:\n            // 核心日志记录方法\n            void sink_it_(const details::log_msg &msg) override\n            {\n                memory_buf_t formatted;\n                base_sink<Mutex>::formatter_->format(msg, formatted);\n\n                // 将格式化后的消息追加到内部缓冲区 buffer_\n                buffer_.append(formatted.data(), formatted.data() + formatted.size());\n\n                // 如果缓冲区达到阈值，则压缩并写入文件\n                if (buffer_.size() >= buffer_capacity_)\n                {\n                    compress_and_write_();\n                }\n            }\n\n            // 强制刷新缓冲区\n            void flush_() override\n            {\n                compress_and_write_();\n                file_helper_.flush(); // 刷新 file_helper 的缓冲区\n            }\n\n        private:\n            // private:\n            void compress_and_write_()\n            {\n                if (buffer_.size() == 0)\n                {\n                    return;\n                }\n\n                strm_.avail_in = static_cast<uInt>(buffer_.size());\n                strm_.next_in = reinterpret_cast<Bytef *>(const_cast<char *>(buffer_.data()));\n\n                std::vector<unsigned char> compressed_output;\n                int deflate_ret = Z_OK;\n\n                // 缓冲区用于 deflate 的单次输出\n                // 调整大小以更好地适应可能的压缩输出，可以根据需要调整\n                if (compress_buffer_.size() < buffer_.size() / 2)\n                {\n                    compress_buffer_.resize(buffer_.size() / 2 + 128); // 简单策略：至少是输入一半+一些头部\n                }\n\n\n                // ---- Step 1: 使用 Z_NO_FLUSH 消耗所有输入 ----\n                do\n                {\n                    strm_.avail_out = static_cast<uInt>(compress_buffer_.size());\n                    strm_.next_out = compress_buffer_.data();\n\n                    deflate_ret = deflate(&strm_, Z_NO_FLUSH); // 先处理输入，不清空内部状态\n\n                    if (deflate_ret != Z_OK && deflate_ret != Z_BUF_ERROR)\n                    {\n                        // Z_STREAM_END 不应该在这里发生\n                        throw spdlog_ex(\"zlib deflate(Z_NO_FLUSH) failed\", deflate_ret);\n                    }\n                    size_t have = compress_buffer_.size() - strm_.avail_out;\n                    if (have > 0)\n                    {\n                        compressed_output.insert(compressed_output.end(), compress_buffer_.data(),\n                                                 compress_buffer_.data() + have);\n                    }\n                    // 继续，直到输出缓冲区不再被填满（表示deflate可以处理更多输入，如果还有的话）\n                    // 并且还有输入数据需要处理\n                } while (strm_.avail_out == 0 && strm_.avail_in > 0);\n\n                // 此时，所有输入 (strm.avail_in) 应该已经被消耗，除非发生错误\n                if (strm_.avail_in != 0 && deflate_ret != Z_BUF_ERROR)\n                {\n                    // 如果还有输入但 deflate 没有要求更多输出空间，这不正常\n                    throw spdlog_ex(\"zlib deflate did not consume all input unexpectedly\");\n                }\n\n\n                // ---- Step 2: 使用 Z_FINISH 结束当前流（块）并收集所有剩余输出 ----\n                int finish_ret = Z_OK;\n                do\n                {\n                    strm_.avail_out = static_cast<uInt>(compress_buffer_.size());\n                    strm_.next_out = compress_buffer_.data();\n\n                    finish_ret = deflate(&strm_, Z_FINISH); // 结束当前块/流\n\n                    // Z_FINISH 可能会返回 Z_OK 或 Z_BUF_ERROR 多次，直到返回 Z_STREAM_END\n                    if (finish_ret != Z_OK && finish_ret != Z_STREAM_END && finish_ret != Z_BUF_ERROR)\n                    {\n                        throw spdlog_ex(\"zlib deflate(Z_FINISH) failed\", finish_ret);\n                    }\n                    size_t have = compress_buffer_.size() - strm_.avail_out;\n                    if (have > 0)\n                    {\n                        compressed_output.insert(compressed_output.end(), compress_buffer_.data(),\n                                                 compress_buffer_.data() + have);\n                    }\n                    // 继续调用 Z_FINISH 直到它返回 Z_STREAM_END\n                } while (finish_ret != Z_STREAM_END);\n\n\n                // ---- Step 3: 写入文件 (与之前相同) ----\n                uint32_t compressed_size = static_cast<uint32_t>(compressed_output.size());\n                if (compressed_size > 0)\n                {\n                    memory_buf_t size_buf;\n                    size_buf.append(reinterpret_cast<const char *>(&compressed_size),\n                                    reinterpret_cast<const char *>(&compressed_size) + sizeof(compressed_size));\n                    file_helper_.write(size_buf);\n\n                    memory_buf_t data_buf;\n                    data_buf.append(reinterpret_cast<const char *>(compressed_output.data()),\n                                    reinterpret_cast<const char *>(compressed_output.data()) + compressed_output.\n                                    size());\n                    file_helper_.write(data_buf);\n                }\n\n                // ---- Step 4: 重置 zlib 流，为下一个独立块做准备 ----\n                // 因为我们使用了 Z_FINISH，流状态需要完全重置\n                int reset_ret = deflateReset(&strm_);\n                if (reset_ret != Z_OK)\n                {\n                    throw spdlog_ex(\"Failed to reset zlib deflate stream\", reset_ret);\n                }\n\n                // 清空内部缓冲区\n                buffer_.clear();\n            }\n\n\n            filename_t filename_; // 日志文件名\n            details::file_helper file_helper_; // 使用 spdlog 的文件助手\n            memory_buf_t buffer_; // 未压缩数据的内部缓冲区 (使用 memory_buf_t)\n            size_t buffer_capacity_; // 内部缓冲区阈值\n            int compression_level_; // zlib 压缩级别\n            z_stream strm_; // zlib 压缩流\n            std::vector<unsigned char> compress_buffer_; // 用于存放压缩数据的临时缓冲区\n        };\n\n        // 类型别名和工厂函数保持不变\n        using compressed_file_sink_mt = compressed_file_sink<std::mutex>;\n        using compressed_file_sink_st = compressed_file_sink<details::null_mutex>;\n    } // namespace sinks\n\n    template<typename Factory = spdlog::synchronous_factory>\n    inline std::shared_ptr<logger> compressed_file_logger_mt(const std::string &logger_name, const filename_t &filename,\n                                                             size_t buffer_capacity = 8192,\n                                                             int compression_level = Z_DEFAULT_COMPRESSION)\n    {\n        return Factory::template create<sinks::compressed_file_sink_mt>(logger_name, filename, buffer_capacity,\n                                                                        compression_level);\n    }\n\n    template<typename Factory = spdlog::synchronous_factory>\n    inline std::shared_ptr<logger> compressed_file_logger_st(const std::string &logger_name, const filename_t &filename,\n                                                             size_t buffer_capacity = 8192,\n                                                             int compression_level = Z_DEFAULT_COMPRESSION)\n    {\n        return Factory::template create<sinks::compressed_file_sink_st>(logger_name, filename, buffer_capacity,\n                                                                        compression_level);\n    }\n} // namespace spdlog\n\n```\n\n```c++\n#include <iostream>\n#include <fstream>\n#include <vector>\n#include <string>\n#include <zlib.h>\n#include <cstdint> // for uint32_t\n#include <stdexcept> // for runtime_error\n\n// 解压缓冲区大小\nconst size_t DECOMPRESS_BUFFER_SIZE = 16384; // 16 KB\n\nint main(int argc, char *argv[])\n{\n    if (argc != 3)\n    {\n        std::cerr << \"用法: \" << argv[0] << \" <compressed_log_file>\" << \" <decompression_log_file>\" << std::endl;\n        return 1;\n    }\n\n    const char *filename = argv[1];\n    const char *decompressed_filename = argv[2];\n    std::ifstream infile(filename, std::ios::binary);\n    std::ofstream outfile(decompressed_filename, std::ios::binary);\n    if (!infile.is_open())\n    {\n        std::cerr << \"错误: 无法打开文件 \" << filename << std::endl;\n        return 1;\n    }\n\n    // 初始化 zlib 解压流\n    z_stream strm;\n    strm.zalloc = Z_NULL;\n    strm.zfree = Z_NULL;\n    strm.opaque = Z_NULL;\n    strm.avail_in = 0;\n    strm.next_in = Z_NULL;\n    int ret = inflateInit(&strm);\n    if (ret != Z_OK)\n    {\n        std::cerr << \"错误: 初始化 zlib inflate 失败, code: \" << ret << std::endl;\n        return 1;\n    }\n\n    std::vector<unsigned char> compressed_buffer;\n    std::vector<unsigned char> decompress_buffer(DECOMPRESS_BUFFER_SIZE);\n    uint32_t compressed_block_size = 0;\n\n    try\n    {\n        // 循环读取文件中的压缩块\n        while (infile.read(reinterpret_cast<char *>(&compressed_block_size), sizeof(compressed_block_size)))\n        {\n            if (compressed_block_size == 0)\n            {\n                // 可能是空块写入（虽然我们的sink实现不会写0长度块），跳过\n                continue;\n            }\n\n            // 读取指定大小的压缩数据\n            compressed_buffer.resize(compressed_block_size);\n            if (!infile.read(reinterpret_cast<char *>(compressed_buffer.data()), compressed_block_size))\n            {\n                std::cerr << \"错误: 读取压缩数据块时文件提前结束或发生错误。\" << std::endl;\n                // 根据需要决定是退出还是尝试继续处理已读取部分\n                break; // 或者 return 1;\n            }\n\n            strm.avail_in = compressed_block_size;\n            strm.next_in = compressed_buffer.data();\n\n            // 循环解压当前块\n            do\n            {\n                strm.avail_out = static_cast<uInt>(decompress_buffer.size());\n                strm.next_out = decompress_buffer.data();\n\n                ret = inflate(&strm, Z_NO_FLUSH); // 使用 Z_NO_FLUSH 进行正常解压\n\n                switch (ret)\n                {\n                    case Z_NEED_DICT:\n                    case Z_DATA_ERROR:\n                    case Z_MEM_ERROR:\n                        inflateEnd(&strm);\n                        throw std::runtime_error(std::string(\"zlib inflate 错误: \") + strm.msg);\n                    case Z_STREAM_ERROR:\n                        inflateEnd(&strm);\n                        throw std::runtime_error(\"zlib inflate 错误: 无效的流状态\");\n                }\n\n                // 计算解压出的数据量\n                size_t have = decompress_buffer.size() - strm.avail_out;\n                if (have > 0)\n                {\n                    // 将解压后的数据写入标准输出\n                    std::cout.write(reinterpret_cast<const char *>(decompress_buffer.data()), have);\n                    outfile.write(reinterpret_cast<const char *>(decompress_buffer.data()), have);\n                }\n                // 如果输出缓冲区满了，inflate 需要再次被调用来处理剩余的输入\n            } while (strm.avail_out == 0); // 继续解压直到输出缓冲区不再被填满\n            // 检查当前块是否解压完毕\n            if (strm.avail_in != 0)\n            {\n                // Z_SYNC_FLUSH 写入的块，解压时 inflate 可能在块结束时返回 Z_OK 而不是 Z_STREAM_END\n                // 只要输入被消耗完 (avail_in == 0) 就认为一个块处理完了\n                // 如果输入没消耗完但 inflate 又没返回错误，可能逻辑有问题\n                // 对于 Z_SYNC_FLUSH, 我们期望 avail_in 最终为 0\n                inflateEnd(&strm);\n                throw std::runtime_error(\"解压错误: 输入数据未完全消耗完但解压停止\");\n            }\n            // inflateReset(&strm); // 不需要 reset，因为每次都读新块并设置 avail_in/next_in\n            // inflateInit 应该为每个独立块工作\n            // 修正：对于流式解压，应该持续使用同一个 strm，并在块之间可能需要 inflateSync\n            // 或者更简单的，如果块是独立压缩的（如我们的例子，虽然用了 Z_SYNC_FLUSH 但逻辑上独立）\n            // 可以在处理完一个块后调用 inflateReset\n            ret = inflateReset(&strm);\n            if (ret != Z_OK)\n            {\n                inflateEnd(&strm);\n                throw std::runtime_error(\"zlib inflateReset 失败\");\n            }\n        } // end while read block size\n\n        // 检查是否因为读取错误而退出循环\n        if (!infile.eof() && infile.fail())\n        {\n            std::cerr << \"错误: 读取文件时发生 I/O 错误。\" << std::endl;\n            outfile.close();\n        }\n    } catch (const std::exception &e)\n    {\n        std::cerr << \"运行时错误: \" << e.what() << std::endl;\n        inflateEnd(&strm); // 确保清理\n        outfile.close();\n        return 1;\n    }\n\n    // 清理 zlib 资源\n    inflateEnd(&strm);\n    std::cout.flush(); // 确保所有输出都被写入\n    outfile.close();\n    return 0;\n}\n\n```\n\n\n\n","source":"_posts/spdlog/spdlog源码阅读:03.实现自定义压缩sink.md","raw":"---\ntitle: \"spdlog源码阅读:03.实现自定义压缩sink\"\ndate: 2025-08-26\ncategories: \n  - 源码分析\n  - spdlog\ntags:\n  - C++\n  - spdlog\n  - 日志系统\n---\n# 引言\n\nspdlog 是一个功能强大且高度可扩展的 C++ 日志库，其模块化设计允许开发者通过自定义 sink 实现灵活的日志输出。在前两篇文章中，我们分析了 spdlog 的异步日志机制以及 `daily_file_sink` 和 `rotating_file_sink` 的实现。本文将聚焦于 **如何在 spdlog 中实现自定义 sink**，以 `compressed_file_sink` 为例，详细讲解如何利用 zlib 库实现日志压缩功能，减少磁盘空间占用。\n\n通过本文，你将学会：\n\n- spdlog 中自定义 sink 的实现步骤。\n- `compressed_file_sink` 如何通过 zlib 实现日志压缩。\n- 自定义 sink 的关键设计要点和注意事项。\n\n**注：本文分析的源码基于 spdlog v1.15.1 和提供的 `compressed_file_sink` 实现。**\n<!-- more -->\n# spdlog 中自定义 sink 的实现方法\n\nspdlog 的 sink 机制是其扩展性的核心。所有 sink 都继承自 `base_sink` 模板类，通过实现两个关键虚函数 `sink_it_` 和 `flush_`，即可定义日志的输出逻辑。以下是实现自定义 sink 的通用步骤：\n\n1. **继承 base_sink**：创建一个新类，继承 `base_sink<Mutex>`，选择合适的互斥锁（如 `std::mutex` 用于多线程，`null_mutex` 用于单线程）。\n2. **实现 sink_it_**：定义日志消息的处理逻辑，如格式化、加工或输出到目标（如文件、网络）。\n3. **实现 flush_**：确保缓冲区数据被刷新到目标，完成输出。\n4. **管理资源**：在构造函数中初始化资源（如文件句柄、缓冲区），在析构函数中清理。\n5. **提供工厂函数**：为多线程和单线程模式定义便捷的创建函数（如 `compressed_file_logger_mt/st`）。\n\n`compressed_file_sink` 遵循上述步骤，通过集成 zlib 库实现了压缩日志的输出，下面我们以其为案例进行深入分析。\n\n# compressed_file_sink 实现解析\n\n`compressed_file_sink` 是一个自定义 sink，通过缓冲日志消息、利用 zlib 压缩数据并写入文件，实现高效的日志存储。以下从 demo 入手，逐步剖析其实现原理。\n\n## 使用 demo\n\n以下是一个简单的 `compressed_file_sink` 使用示例：\n\n```cpp\n#include \"spdlog/spdlog.h\"\n#include \"compressed_file_sink.h\"\n\nvoid compressed_file_example() {\n    auto compressed_logger = spdlog::compressed_file_logger_mt(\"compressed_logger\", \"logs/compressed_log.z\", 8192, Z_DEFAULT_COMPRESSION);\n    compressed_logger->info(\"This is a compressed log message.\");\n    compressed_logger->flush();\n}\n```\n在这个 demo 中，我们创建了一个多线程的压缩日志 logger，日志消息通过 `compressed_file_sink` 压缩后写入 `logs/compressed_log.z` 文件。\n\n## 日志消息流转与压缩实现\n\n以 `info(\"This is a compressed log message.\")` 为例，分析日志消息的处理流程，重点讲解压缩逻辑。\n\n### 日志生产\n\n1. **调用 info 方法**：\n    - 用户调用 `logger->info`，触发模板函数，最终调用 `base_sink` 的 `log` 方法，执行 `sink_it_` 虚函数。\n    - 在 `compressed_file_sink::sink_it_` 中，日志消息被格式化并追加到内部缓冲区。\n\n```cpp\nvoid sink_it_(const details::log_msg &msg) override {\n    memory_buf_t formatted;\n    base_sink<Mutex>::formatter_->format(msg, formatted);\n    buffer_.append(formatted.data(), formatted.data() + formatted.size());\n    if (buffer_.size() >= buffer_capacity_) {\n        compress_and_write_();\n    }\n}\n```\n2. **缓冲管理**：\n    - 格式化后的日志消息存储在 `buffer_`（类型为 `memory_buf_t`）。\n    - 当 `buffer_` 大小达到 `buffer_capacity_`（默认 8192 字节）时，调用 `compress_and_write_` 进行压缩和写入。\n\n### 日志压缩与写入\n\n`compress_and_write_` 是压缩功能的核心，结合 zlib 库完成数据压缩并写入文件。以下是其实现步骤：\n\n1. **初始化 zlib 输入**：\n    - 将 `buffer_` 的数据传递给 zlib 压缩流 `strm_`，设置输入指针（`next_in`）和长度（`avail_in`）。\n\n```cpp\nstrm_.avail_in = static_cast<uInt>(buffer_.size());\nstrm_.next_in = reinterpret_cast<Bytef *>(const_cast<char *>(buffer_.data()));\n```\n\n2. **逐步压缩（Z_NO_FLUSH）**：\n    - 使用 `deflate` 函数以 `Z_NO_FLUSH` 模式分步处理输入数据，输出到临时缓冲区 `compress_buffer_`（类型为 `std::vector<unsigned char>`）。\n    - 循环调用 `deflate` 直到所有输入数据被消耗，收集压缩输出到 `compressed_output`。\n\n```cpp\ndo {\n    strm_.avail_out = static_cast<uInt>(compress_buffer_.size());\n    strm_.next_out = compress_buffer_.data();\n    deflate_ret = deflate(&strm_, Z_NO_FLUSH);\n    size_t have = compress_buffer_.size() - strm_.avail_out;\n    if (have > 0) {\n        compressed_output.insert(compressed_output.end(), compress_buffer_.data(), compress_buffer_.data() + have);\n    }\n} while (strm_.avail_out == 0 && strm_.avail_in > 0);\n```\n\n3. **结束压缩（Z_FINISH）**：\n    - 使用 `Z_FINISH` 模式完成当前压缩块，生成完整的压缩数据。\n    - 继续调用 `deflate` 直到返回 `Z_STREAM_END`，确保所有输出被收集。\n\n```cpp\ndo {\n    strm_.avail_out = static_cast<uInt>(compress_buffer_.size());\n    strm_.next_out = compress_buffer_.data();\n    finish_ret = deflate(&strm_, Z_FINISH);\n    size_t have = compress_buffer_.size() - strm_.avail_out;\n    if (have > 0) {\n        compressed_output.insert(compressed_output.end(), compress_buffer_.data(), compress_buffer_.data() + have);\n    }\n} while (finish_ret != Z_STREAM_END);\n```\n\n4. **写入文件**：\n    - 压缩数据存储在 `compressed_output` 中。\n    - 首先写入 4 字节的压缩块长度（`uint32_t`），便于解压时解析。\n    - 然后写入压缩数据，使用 `file_helper_.write` 完成文件 IO。\n\n```cpp\nuint32_t compressed_size = static_cast<uint32_t>(compressed_output.size());\nif (compressed_size > 0) {\n    memory_buf_t size_buf;\n    size_buf.append(reinterpret_cast<const char *>(&compressed_size), \n                    reinterpret_cast<const char *>(&compressed_size) + sizeof(compressed_size));\n    file_helper_.write(size_buf);\n    memory_buf_t data_buf;\n    data_buf.append(reinterpret_cast<const char *>(compressed_output.data()), \n                    reinterpret_cast<const char *>(compressed_output.data()) + compressed_output.size());\n    file_helper_.write(data_buf);\n}\n```\n\n5. **重置与清理**：\n    - 通过 `deflateReset` 重置 zlib 流，为下一块压缩准备。\n    - 清空 `buffer_`，等待新的日志消息。\n\n```cpp\ndeflateReset(&strm_);\nbuffer_.clear();\n```\n\n### 刷新与资源管理\n\n1. **刷新缓冲区**：\n    - 用户调用 `logger->flush()` 触发 `flush_` 方法，调用 `compress_and_write_` 压缩剩余数据，并通过 `file_helper_.flush()` 确保写入磁盘。\n\n```cpp\nvoid flush_() override {\n    compress_and_write_();\n    file_helper_.flush();\n}\n```\n2. **资源初始化与清理**：\n    - **构造函数**：初始化 zlib 流（`deflateInit`）、打开文件（`file_helper_.open`）、预分配缓冲区（`buffer_` 和 `compress_buffer_`）。\n    - **析构函数**：刷新缓冲区、释放 zlib 资源（`deflateEnd`），`file_helper_` 自动关闭文件。\n\n```cpp\nexplicit compressed_file_sink(const filename_t &filename, size_t buffer_capacity = 8192,\n                              int compression_level = Z_DEFAULT_COMPRESSION) {\n    strm_.zalloc = Z_NULL;\n    strm_.zfree = Z_NULL;\n    strm_.opaque = Z_NULL;\n    int ret = deflateInit(&strm_, compression_level_);\n    if (ret != Z_OK) throw spdlog_ex(\"Failed to initialize zlib deflate\", ret);\n    file_helper_.open(filename_, false);\n    buffer_.reserve(buffer_capacity_);\n    compress_buffer_.resize(buffer_capacity_);\n}\n\n~compressed_file_sink() override {\n    try {\n        std::lock_guard<Mutex> lock(base_sink<Mutex>::mutex_);\n        flush_();\n        deflateEnd(&strm_);\n    } catch (...) {}\n}\n```\n## 关键类与设计\n### 类层次结构\n`compressed_file_sink` 的设计充分利用了 spdlog 的模块化架构，以下是关键类关系：\n\n- **base_sink**：提供日志格式化和线程安全的基础功能，定义 `sink_it_` 和 `flush_` 接口。\n- **compressed_file_sink**：继承 `base_sink`，实现压缩逻辑，管理 zlib 流和缓冲区。\n- **file_helper**：封装文件操作，负责打开、写入和刷新。\n- **formatter**：格式化日志消息。\n\n类图如下：\n![spdlog_sink_compress.png](/images/spdlog_sink_compress.png)\n\n# 总结\n\n通过分析 `compressed_file_sink`，我们深入理解了 spdlog 中自定义 sink 的实现方法。`compressed_file_sink` 利用 zlib 库，通过缓冲、分块压缩和长度前缀的机制，实现了高效的日志压缩功能。\n\n未来可探索以下方向：\n\n- 结合 `daily_file_sink`，实现按天分割的压缩日志。\n- 尝试其他压缩库（如 zstd），提升压缩速度或比率。\n\n希望本文能为你提供清晰的自定义 sink 实现指南！如需进一步探讨或优化建议，欢迎随时交流。\n\n#附：完整压缩源码和压缩日志读取器\n```c++\n#pragma once\n\n#include <spdlog/common.h>\n#include <spdlog/sinks/base_sink.h>\n#include <spdlog/details/file_helper.h>\n#include <spdlog/details/null_mutex.h>\n#include <spdlog/details/synchronous_factory.h>\n#include <spdlog/fmt/fmt.h>\n\n#include <zlib.h>\n#include <string>\n#include <mutex>\n\nnamespace spdlog\n{\n    namespace sinks\n    {\n        // 自定义压缩文件 Sink (使用 file_helper)\n        template<typename Mutex>\n        class compressed_file_sink : public base_sink<Mutex>\n        {\n        public:\n            // 构造函数\n            explicit compressed_file_sink(const filename_t &filename, size_t buffer_capacity = 8192,\n                                          int compression_level = Z_DEFAULT_COMPRESSION)\n                : filename_(filename), buffer_capacity_(buffer_capacity), compression_level_(compression_level)\n            {\n                // 初始化 zlib 压缩流\n                strm_.zalloc = Z_NULL;\n                strm_.zfree = Z_NULL;\n                strm_.opaque = Z_NULL;\n                int ret = deflateInit(&strm_, compression_level_);\n                if (ret != Z_OK)\n                {\n                    throw spdlog_ex(\"Failed to initialize zlib deflate\", ret);\n                }\n\n                // 使用 file_helper 打开文件 (false 表示不截断，实现追加效果)\n                try\n                {\n                    file_helper_.open(filename_, false);\n                } catch (const spdlog_ex &ex)\n                {\n                    deflateEnd(&strm_); // 清理 zlib 资源\n                    throw ex; // 重新抛出文件打开异常\n                }\n\n\n                // 预分配缓冲区 (使用 spdlog::memory_buf_t)\n                buffer_.reserve(buffer_capacity_);\n                compress_buffer_.resize(buffer_capacity_); // 初始压缩缓冲区大小 (保持 vector<unsigned char> 以便与 zlib C API 交互)\n            }\n\n            // 析构函数：确保所有缓冲数据被压缩和写入\n            ~compressed_file_sink() override\n            {\n                try\n                {\n                    // 获取锁以安全地刷新\n                    std::lock_guard<Mutex> lock(base_sink<Mutex>::mutex_);\n                    flush_(); // 刷新剩余缓冲区\n                    deflateEnd(&strm_); // 清理 zlib 资源\n                    // file_helper 会在析构时自动关闭文件，无需显式调用 close()\n                } catch (...)\n                {\n                    // 析构函数中不应抛出异常\n                }\n            }\n\n            compressed_file_sink(const compressed_file_sink &) = delete;\n\n            compressed_file_sink &operator=(const compressed_file_sink &) = delete;\n\n        protected:\n            // 核心日志记录方法\n            void sink_it_(const details::log_msg &msg) override\n            {\n                memory_buf_t formatted;\n                base_sink<Mutex>::formatter_->format(msg, formatted);\n\n                // 将格式化后的消息追加到内部缓冲区 buffer_\n                buffer_.append(formatted.data(), formatted.data() + formatted.size());\n\n                // 如果缓冲区达到阈值，则压缩并写入文件\n                if (buffer_.size() >= buffer_capacity_)\n                {\n                    compress_and_write_();\n                }\n            }\n\n            // 强制刷新缓冲区\n            void flush_() override\n            {\n                compress_and_write_();\n                file_helper_.flush(); // 刷新 file_helper 的缓冲区\n            }\n\n        private:\n            // private:\n            void compress_and_write_()\n            {\n                if (buffer_.size() == 0)\n                {\n                    return;\n                }\n\n                strm_.avail_in = static_cast<uInt>(buffer_.size());\n                strm_.next_in = reinterpret_cast<Bytef *>(const_cast<char *>(buffer_.data()));\n\n                std::vector<unsigned char> compressed_output;\n                int deflate_ret = Z_OK;\n\n                // 缓冲区用于 deflate 的单次输出\n                // 调整大小以更好地适应可能的压缩输出，可以根据需要调整\n                if (compress_buffer_.size() < buffer_.size() / 2)\n                {\n                    compress_buffer_.resize(buffer_.size() / 2 + 128); // 简单策略：至少是输入一半+一些头部\n                }\n\n\n                // ---- Step 1: 使用 Z_NO_FLUSH 消耗所有输入 ----\n                do\n                {\n                    strm_.avail_out = static_cast<uInt>(compress_buffer_.size());\n                    strm_.next_out = compress_buffer_.data();\n\n                    deflate_ret = deflate(&strm_, Z_NO_FLUSH); // 先处理输入，不清空内部状态\n\n                    if (deflate_ret != Z_OK && deflate_ret != Z_BUF_ERROR)\n                    {\n                        // Z_STREAM_END 不应该在这里发生\n                        throw spdlog_ex(\"zlib deflate(Z_NO_FLUSH) failed\", deflate_ret);\n                    }\n                    size_t have = compress_buffer_.size() - strm_.avail_out;\n                    if (have > 0)\n                    {\n                        compressed_output.insert(compressed_output.end(), compress_buffer_.data(),\n                                                 compress_buffer_.data() + have);\n                    }\n                    // 继续，直到输出缓冲区不再被填满（表示deflate可以处理更多输入，如果还有的话）\n                    // 并且还有输入数据需要处理\n                } while (strm_.avail_out == 0 && strm_.avail_in > 0);\n\n                // 此时，所有输入 (strm.avail_in) 应该已经被消耗，除非发生错误\n                if (strm_.avail_in != 0 && deflate_ret != Z_BUF_ERROR)\n                {\n                    // 如果还有输入但 deflate 没有要求更多输出空间，这不正常\n                    throw spdlog_ex(\"zlib deflate did not consume all input unexpectedly\");\n                }\n\n\n                // ---- Step 2: 使用 Z_FINISH 结束当前流（块）并收集所有剩余输出 ----\n                int finish_ret = Z_OK;\n                do\n                {\n                    strm_.avail_out = static_cast<uInt>(compress_buffer_.size());\n                    strm_.next_out = compress_buffer_.data();\n\n                    finish_ret = deflate(&strm_, Z_FINISH); // 结束当前块/流\n\n                    // Z_FINISH 可能会返回 Z_OK 或 Z_BUF_ERROR 多次，直到返回 Z_STREAM_END\n                    if (finish_ret != Z_OK && finish_ret != Z_STREAM_END && finish_ret != Z_BUF_ERROR)\n                    {\n                        throw spdlog_ex(\"zlib deflate(Z_FINISH) failed\", finish_ret);\n                    }\n                    size_t have = compress_buffer_.size() - strm_.avail_out;\n                    if (have > 0)\n                    {\n                        compressed_output.insert(compressed_output.end(), compress_buffer_.data(),\n                                                 compress_buffer_.data() + have);\n                    }\n                    // 继续调用 Z_FINISH 直到它返回 Z_STREAM_END\n                } while (finish_ret != Z_STREAM_END);\n\n\n                // ---- Step 3: 写入文件 (与之前相同) ----\n                uint32_t compressed_size = static_cast<uint32_t>(compressed_output.size());\n                if (compressed_size > 0)\n                {\n                    memory_buf_t size_buf;\n                    size_buf.append(reinterpret_cast<const char *>(&compressed_size),\n                                    reinterpret_cast<const char *>(&compressed_size) + sizeof(compressed_size));\n                    file_helper_.write(size_buf);\n\n                    memory_buf_t data_buf;\n                    data_buf.append(reinterpret_cast<const char *>(compressed_output.data()),\n                                    reinterpret_cast<const char *>(compressed_output.data()) + compressed_output.\n                                    size());\n                    file_helper_.write(data_buf);\n                }\n\n                // ---- Step 4: 重置 zlib 流，为下一个独立块做准备 ----\n                // 因为我们使用了 Z_FINISH，流状态需要完全重置\n                int reset_ret = deflateReset(&strm_);\n                if (reset_ret != Z_OK)\n                {\n                    throw spdlog_ex(\"Failed to reset zlib deflate stream\", reset_ret);\n                }\n\n                // 清空内部缓冲区\n                buffer_.clear();\n            }\n\n\n            filename_t filename_; // 日志文件名\n            details::file_helper file_helper_; // 使用 spdlog 的文件助手\n            memory_buf_t buffer_; // 未压缩数据的内部缓冲区 (使用 memory_buf_t)\n            size_t buffer_capacity_; // 内部缓冲区阈值\n            int compression_level_; // zlib 压缩级别\n            z_stream strm_; // zlib 压缩流\n            std::vector<unsigned char> compress_buffer_; // 用于存放压缩数据的临时缓冲区\n        };\n\n        // 类型别名和工厂函数保持不变\n        using compressed_file_sink_mt = compressed_file_sink<std::mutex>;\n        using compressed_file_sink_st = compressed_file_sink<details::null_mutex>;\n    } // namespace sinks\n\n    template<typename Factory = spdlog::synchronous_factory>\n    inline std::shared_ptr<logger> compressed_file_logger_mt(const std::string &logger_name, const filename_t &filename,\n                                                             size_t buffer_capacity = 8192,\n                                                             int compression_level = Z_DEFAULT_COMPRESSION)\n    {\n        return Factory::template create<sinks::compressed_file_sink_mt>(logger_name, filename, buffer_capacity,\n                                                                        compression_level);\n    }\n\n    template<typename Factory = spdlog::synchronous_factory>\n    inline std::shared_ptr<logger> compressed_file_logger_st(const std::string &logger_name, const filename_t &filename,\n                                                             size_t buffer_capacity = 8192,\n                                                             int compression_level = Z_DEFAULT_COMPRESSION)\n    {\n        return Factory::template create<sinks::compressed_file_sink_st>(logger_name, filename, buffer_capacity,\n                                                                        compression_level);\n    }\n} // namespace spdlog\n\n```\n\n```c++\n#include <iostream>\n#include <fstream>\n#include <vector>\n#include <string>\n#include <zlib.h>\n#include <cstdint> // for uint32_t\n#include <stdexcept> // for runtime_error\n\n// 解压缓冲区大小\nconst size_t DECOMPRESS_BUFFER_SIZE = 16384; // 16 KB\n\nint main(int argc, char *argv[])\n{\n    if (argc != 3)\n    {\n        std::cerr << \"用法: \" << argv[0] << \" <compressed_log_file>\" << \" <decompression_log_file>\" << std::endl;\n        return 1;\n    }\n\n    const char *filename = argv[1];\n    const char *decompressed_filename = argv[2];\n    std::ifstream infile(filename, std::ios::binary);\n    std::ofstream outfile(decompressed_filename, std::ios::binary);\n    if (!infile.is_open())\n    {\n        std::cerr << \"错误: 无法打开文件 \" << filename << std::endl;\n        return 1;\n    }\n\n    // 初始化 zlib 解压流\n    z_stream strm;\n    strm.zalloc = Z_NULL;\n    strm.zfree = Z_NULL;\n    strm.opaque = Z_NULL;\n    strm.avail_in = 0;\n    strm.next_in = Z_NULL;\n    int ret = inflateInit(&strm);\n    if (ret != Z_OK)\n    {\n        std::cerr << \"错误: 初始化 zlib inflate 失败, code: \" << ret << std::endl;\n        return 1;\n    }\n\n    std::vector<unsigned char> compressed_buffer;\n    std::vector<unsigned char> decompress_buffer(DECOMPRESS_BUFFER_SIZE);\n    uint32_t compressed_block_size = 0;\n\n    try\n    {\n        // 循环读取文件中的压缩块\n        while (infile.read(reinterpret_cast<char *>(&compressed_block_size), sizeof(compressed_block_size)))\n        {\n            if (compressed_block_size == 0)\n            {\n                // 可能是空块写入（虽然我们的sink实现不会写0长度块），跳过\n                continue;\n            }\n\n            // 读取指定大小的压缩数据\n            compressed_buffer.resize(compressed_block_size);\n            if (!infile.read(reinterpret_cast<char *>(compressed_buffer.data()), compressed_block_size))\n            {\n                std::cerr << \"错误: 读取压缩数据块时文件提前结束或发生错误。\" << std::endl;\n                // 根据需要决定是退出还是尝试继续处理已读取部分\n                break; // 或者 return 1;\n            }\n\n            strm.avail_in = compressed_block_size;\n            strm.next_in = compressed_buffer.data();\n\n            // 循环解压当前块\n            do\n            {\n                strm.avail_out = static_cast<uInt>(decompress_buffer.size());\n                strm.next_out = decompress_buffer.data();\n\n                ret = inflate(&strm, Z_NO_FLUSH); // 使用 Z_NO_FLUSH 进行正常解压\n\n                switch (ret)\n                {\n                    case Z_NEED_DICT:\n                    case Z_DATA_ERROR:\n                    case Z_MEM_ERROR:\n                        inflateEnd(&strm);\n                        throw std::runtime_error(std::string(\"zlib inflate 错误: \") + strm.msg);\n                    case Z_STREAM_ERROR:\n                        inflateEnd(&strm);\n                        throw std::runtime_error(\"zlib inflate 错误: 无效的流状态\");\n                }\n\n                // 计算解压出的数据量\n                size_t have = decompress_buffer.size() - strm.avail_out;\n                if (have > 0)\n                {\n                    // 将解压后的数据写入标准输出\n                    std::cout.write(reinterpret_cast<const char *>(decompress_buffer.data()), have);\n                    outfile.write(reinterpret_cast<const char *>(decompress_buffer.data()), have);\n                }\n                // 如果输出缓冲区满了，inflate 需要再次被调用来处理剩余的输入\n            } while (strm.avail_out == 0); // 继续解压直到输出缓冲区不再被填满\n            // 检查当前块是否解压完毕\n            if (strm.avail_in != 0)\n            {\n                // Z_SYNC_FLUSH 写入的块，解压时 inflate 可能在块结束时返回 Z_OK 而不是 Z_STREAM_END\n                // 只要输入被消耗完 (avail_in == 0) 就认为一个块处理完了\n                // 如果输入没消耗完但 inflate 又没返回错误，可能逻辑有问题\n                // 对于 Z_SYNC_FLUSH, 我们期望 avail_in 最终为 0\n                inflateEnd(&strm);\n                throw std::runtime_error(\"解压错误: 输入数据未完全消耗完但解压停止\");\n            }\n            // inflateReset(&strm); // 不需要 reset，因为每次都读新块并设置 avail_in/next_in\n            // inflateInit 应该为每个独立块工作\n            // 修正：对于流式解压，应该持续使用同一个 strm，并在块之间可能需要 inflateSync\n            // 或者更简单的，如果块是独立压缩的（如我们的例子，虽然用了 Z_SYNC_FLUSH 但逻辑上独立）\n            // 可以在处理完一个块后调用 inflateReset\n            ret = inflateReset(&strm);\n            if (ret != Z_OK)\n            {\n                inflateEnd(&strm);\n                throw std::runtime_error(\"zlib inflateReset 失败\");\n            }\n        } // end while read block size\n\n        // 检查是否因为读取错误而退出循环\n        if (!infile.eof() && infile.fail())\n        {\n            std::cerr << \"错误: 读取文件时发生 I/O 错误。\" << std::endl;\n            outfile.close();\n        }\n    } catch (const std::exception &e)\n    {\n        std::cerr << \"运行时错误: \" << e.what() << std::endl;\n        inflateEnd(&strm); // 确保清理\n        outfile.close();\n        return 1;\n    }\n\n    // 清理 zlib 资源\n    inflateEnd(&strm);\n    std::cout.flush(); // 确保所有输出都被写入\n    outfile.close();\n    return 0;\n}\n\n```\n\n\n\n","slug":"spdlog/spdlog源码阅读:03.实现自定义压缩sink","published":1,"updated":"2025-08-28T12:45:20.496Z","comments":1,"layout":"post","photos":[],"_id":"cmevecvsk002ahfro1tgp201n","content":"<h1 id=\"引言\"><a href=\"#引言\" class=\"headerlink\" title=\"引言\"></a>引言</h1><p>spdlog 是一个功能强大且高度可扩展的 C++ 日志库，其模块化设计允许开发者通过自定义 sink 实现灵活的日志输出。在前两篇文章中，我们分析了 spdlog 的异步日志机制以及 <code>daily_file_sink</code> 和 <code>rotating_file_sink</code> 的实现。本文将聚焦于 <strong>如何在 spdlog 中实现自定义 sink</strong>，以 <code>compressed_file_sink</code> 为例，详细讲解如何利用 zlib 库实现日志压缩功能，减少磁盘空间占用。</p>\n<p>通过本文，你将学会：</p>\n<ul>\n<li>spdlog 中自定义 sink 的实现步骤。</li>\n<li><code>compressed_file_sink</code> 如何通过 zlib 实现日志压缩。</li>\n<li>自定义 sink 的关键设计要点和注意事项。</li>\n</ul>\n<p><strong>注：本文分析的源码基于 spdlog v1.15.1 和提供的 <code>compressed_file_sink</code> 实现。</strong></p>\n<span id=\"more\"></span>\n<h1 id=\"spdlog-中自定义-sink-的实现方法\"><a href=\"#spdlog-中自定义-sink-的实现方法\" class=\"headerlink\" title=\"spdlog 中自定义 sink 的实现方法\"></a>spdlog 中自定义 sink 的实现方法</h1><p>spdlog 的 sink 机制是其扩展性的核心。所有 sink 都继承自 <code>base_sink</code> 模板类，通过实现两个关键虚函数 <code>sink_it_</code> 和 <code>flush_</code>，即可定义日志的输出逻辑。以下是实现自定义 sink 的通用步骤：</p>\n<ol>\n<li><strong>继承 base_sink</strong>：创建一个新类，继承 <code>base_sink&lt;Mutex&gt;</code>，选择合适的互斥锁（如 <code>std::mutex</code> 用于多线程，<code>null_mutex</code> 用于单线程）。</li>\n<li>**实现 sink_it_**：定义日志消息的处理逻辑，如格式化、加工或输出到目标（如文件、网络）。</li>\n<li>**实现 flush_**：确保缓冲区数据被刷新到目标，完成输出。</li>\n<li><strong>管理资源</strong>：在构造函数中初始化资源（如文件句柄、缓冲区），在析构函数中清理。</li>\n<li><strong>提供工厂函数</strong>：为多线程和单线程模式定义便捷的创建函数（如 <code>compressed_file_logger_mt/st</code>）。</li>\n</ol>\n<p><code>compressed_file_sink</code> 遵循上述步骤，通过集成 zlib 库实现了压缩日志的输出，下面我们以其为案例进行深入分析。</p>\n<h1 id=\"compressed-file-sink-实现解析\"><a href=\"#compressed-file-sink-实现解析\" class=\"headerlink\" title=\"compressed_file_sink 实现解析\"></a>compressed_file_sink 实现解析</h1><p><code>compressed_file_sink</code> 是一个自定义 sink，通过缓冲日志消息、利用 zlib 压缩数据并写入文件，实现高效的日志存储。以下从 demo 入手，逐步剖析其实现原理。</p>\n<h2 id=\"使用-demo\"><a href=\"#使用-demo\" class=\"headerlink\" title=\"使用 demo\"></a>使用 demo</h2><p>以下是一个简单的 <code>compressed_file_sink</code> 使用示例：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;spdlog/spdlog.h&quot;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;compressed_file_sink.h&quot;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">compressed_file_example</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">auto</span> compressed_logger = spdlog::<span class=\"built_in\">compressed_file_logger_mt</span>(<span class=\"string\">&quot;compressed_logger&quot;</span>, <span class=\"string\">&quot;logs/compressed_log.z&quot;</span>, <span class=\"number\">8192</span>, Z_DEFAULT_COMPRESSION);</span><br><span class=\"line\">    compressed_logger-&gt;<span class=\"built_in\">info</span>(<span class=\"string\">&quot;This is a compressed log message.&quot;</span>);</span><br><span class=\"line\">    compressed_logger-&gt;<span class=\"built_in\">flush</span>();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在这个 demo 中，我们创建了一个多线程的压缩日志 logger，日志消息通过 <code>compressed_file_sink</code> 压缩后写入 <code>logs/compressed_log.z</code> 文件。</p>\n<h2 id=\"日志消息流转与压缩实现\"><a href=\"#日志消息流转与压缩实现\" class=\"headerlink\" title=\"日志消息流转与压缩实现\"></a>日志消息流转与压缩实现</h2><p>以 <code>info(&quot;This is a compressed log message.&quot;)</code> 为例，分析日志消息的处理流程，重点讲解压缩逻辑。</p>\n<h3 id=\"日志生产\"><a href=\"#日志生产\" class=\"headerlink\" title=\"日志生产\"></a>日志生产</h3><ol>\n<li><strong>调用 info 方法</strong>：<ul>\n<li>用户调用 <code>logger-&gt;info</code>，触发模板函数，最终调用 <code>base_sink</code> 的 <code>log</code> 方法，执行 <code>sink_it_</code> 虚函数。</li>\n<li>在 <code>compressed_file_sink::sink_it_</code> 中，日志消息被格式化并追加到内部缓冲区。</li>\n</ul>\n</li>\n</ol>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">sink_it_</span><span class=\"params\">(<span class=\"type\">const</span> details::log_msg &amp;msg)</span> <span class=\"keyword\">override</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"type\">memory_buf_t</span> formatted;</span><br><span class=\"line\">    base_sink&lt;Mutex&gt;::formatter_-&gt;format(msg, formatted);</span><br><span class=\"line\">    buffer_.<span class=\"built_in\">append</span>(formatted.<span class=\"built_in\">data</span>(), formatted.<span class=\"built_in\">data</span>() + formatted.<span class=\"built_in\">size</span>());</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (buffer_.<span class=\"built_in\">size</span>() &gt;= buffer_capacity_) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">compress_and_write_</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li><strong>缓冲管理</strong>：<ul>\n<li>格式化后的日志消息存储在 <code>buffer_</code>（类型为 <code>memory_buf_t</code>）。</li>\n<li>当 <code>buffer_</code> 大小达到 <code>buffer_capacity_</code>（默认 8192 字节）时，调用 <code>compress_and_write_</code> 进行压缩和写入。</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"日志压缩与写入\"><a href=\"#日志压缩与写入\" class=\"headerlink\" title=\"日志压缩与写入\"></a>日志压缩与写入</h3><p><code>compress_and_write_</code> 是压缩功能的核心，结合 zlib 库完成数据压缩并写入文件。以下是其实现步骤：</p>\n<ol>\n<li><strong>初始化 zlib 输入</strong>：<ul>\n<li>将 <code>buffer_</code> 的数据传递给 zlib 压缩流 <code>strm_</code>，设置输入指针（<code>next_in</code>）和长度（<code>avail_in</code>）。</li>\n</ul>\n</li>\n</ol>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">strm_.avail_in = <span class=\"built_in\">static_cast</span>&lt;uInt&gt;(buffer_.<span class=\"built_in\">size</span>());</span><br><span class=\"line\">strm_.next_in = <span class=\"built_in\">reinterpret_cast</span>&lt;Bytef *&gt;(<span class=\"built_in\">const_cast</span>&lt;<span class=\"type\">char</span> *&gt;(buffer_.<span class=\"built_in\">data</span>()));</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li><strong>逐步压缩（Z_NO_FLUSH）</strong>：<ul>\n<li>使用 <code>deflate</code> 函数以 <code>Z_NO_FLUSH</code> 模式分步处理输入数据，输出到临时缓冲区 <code>compress_buffer_</code>（类型为 <code>std::vector&lt;unsigned char&gt;</code>）。</li>\n<li>循环调用 <code>deflate</code> 直到所有输入数据被消耗，收集压缩输出到 <code>compressed_output</code>。</li>\n</ul>\n</li>\n</ol>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">do</span> &#123;</span><br><span class=\"line\">    strm_.avail_out = <span class=\"built_in\">static_cast</span>&lt;uInt&gt;(compress_buffer_.<span class=\"built_in\">size</span>());</span><br><span class=\"line\">    strm_.next_out = compress_buffer_.<span class=\"built_in\">data</span>();</span><br><span class=\"line\">    deflate_ret = <span class=\"built_in\">deflate</span>(&amp;strm_, Z_NO_FLUSH);</span><br><span class=\"line\">    <span class=\"type\">size_t</span> have = compress_buffer_.<span class=\"built_in\">size</span>() - strm_.avail_out;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (have &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        compressed_output.<span class=\"built_in\">insert</span>(compressed_output.<span class=\"built_in\">end</span>(), compress_buffer_.<span class=\"built_in\">data</span>(), compress_buffer_.<span class=\"built_in\">data</span>() + have);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125; <span class=\"keyword\">while</span> (strm_.avail_out == <span class=\"number\">0</span> &amp;&amp; strm_.avail_in &gt; <span class=\"number\">0</span>);</span><br></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li><strong>结束压缩（Z_FINISH）</strong>：<ul>\n<li>使用 <code>Z_FINISH</code> 模式完成当前压缩块，生成完整的压缩数据。</li>\n<li>继续调用 <code>deflate</code> 直到返回 <code>Z_STREAM_END</code>，确保所有输出被收集。</li>\n</ul>\n</li>\n</ol>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">do</span> &#123;</span><br><span class=\"line\">    strm_.avail_out = <span class=\"built_in\">static_cast</span>&lt;uInt&gt;(compress_buffer_.<span class=\"built_in\">size</span>());</span><br><span class=\"line\">    strm_.next_out = compress_buffer_.<span class=\"built_in\">data</span>();</span><br><span class=\"line\">    finish_ret = <span class=\"built_in\">deflate</span>(&amp;strm_, Z_FINISH);</span><br><span class=\"line\">    <span class=\"type\">size_t</span> have = compress_buffer_.<span class=\"built_in\">size</span>() - strm_.avail_out;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (have &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        compressed_output.<span class=\"built_in\">insert</span>(compressed_output.<span class=\"built_in\">end</span>(), compress_buffer_.<span class=\"built_in\">data</span>(), compress_buffer_.<span class=\"built_in\">data</span>() + have);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125; <span class=\"keyword\">while</span> (finish_ret != Z_STREAM_END);</span><br></pre></td></tr></table></figure>\n\n<ol start=\"4\">\n<li><strong>写入文件</strong>：<ul>\n<li>压缩数据存储在 <code>compressed_output</code> 中。</li>\n<li>首先写入 4 字节的压缩块长度（<code>uint32_t</code>），便于解压时解析。</li>\n<li>然后写入压缩数据，使用 <code>file_helper_.write</code> 完成文件 IO。</li>\n</ul>\n</li>\n</ol>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">uint32_t</span> compressed_size = <span class=\"built_in\">static_cast</span>&lt;<span class=\"type\">uint32_t</span>&gt;(compressed_output.<span class=\"built_in\">size</span>());</span><br><span class=\"line\"><span class=\"keyword\">if</span> (compressed_size &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">    <span class=\"type\">memory_buf_t</span> size_buf;</span><br><span class=\"line\">    size_buf.<span class=\"built_in\">append</span>(<span class=\"built_in\">reinterpret_cast</span>&lt;<span class=\"type\">const</span> <span class=\"type\">char</span> *&gt;(&amp;compressed_size), </span><br><span class=\"line\">                    <span class=\"built_in\">reinterpret_cast</span>&lt;<span class=\"type\">const</span> <span class=\"type\">char</span> *&gt;(&amp;compressed_size) + <span class=\"built_in\">sizeof</span>(compressed_size));</span><br><span class=\"line\">    file_helper_.<span class=\"built_in\">write</span>(size_buf);</span><br><span class=\"line\">    <span class=\"type\">memory_buf_t</span> data_buf;</span><br><span class=\"line\">    data_buf.<span class=\"built_in\">append</span>(<span class=\"built_in\">reinterpret_cast</span>&lt;<span class=\"type\">const</span> <span class=\"type\">char</span> *&gt;(compressed_output.<span class=\"built_in\">data</span>()), </span><br><span class=\"line\">                    <span class=\"built_in\">reinterpret_cast</span>&lt;<span class=\"type\">const</span> <span class=\"type\">char</span> *&gt;(compressed_output.<span class=\"built_in\">data</span>()) + compressed_output.<span class=\"built_in\">size</span>());</span><br><span class=\"line\">    file_helper_.<span class=\"built_in\">write</span>(data_buf);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ol start=\"5\">\n<li><strong>重置与清理</strong>：<ul>\n<li>通过 <code>deflateReset</code> 重置 zlib 流，为下一块压缩准备。</li>\n<li>清空 <code>buffer_</code>，等待新的日志消息。</li>\n</ul>\n</li>\n</ol>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">deflateReset</span>(&amp;strm_);</span><br><span class=\"line\">buffer_.<span class=\"built_in\">clear</span>();</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"刷新与资源管理\"><a href=\"#刷新与资源管理\" class=\"headerlink\" title=\"刷新与资源管理\"></a>刷新与资源管理</h3><ol>\n<li><strong>刷新缓冲区</strong>：<ul>\n<li>用户调用 <code>logger-&gt;flush()</code> 触发 <code>flush_</code> 方法，调用 <code>compress_and_write_</code> 压缩剩余数据，并通过 <code>file_helper_.flush()</code> 确保写入磁盘。</li>\n</ul>\n</li>\n</ol>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">flush_</span><span class=\"params\">()</span> <span class=\"keyword\">override</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">compress_and_write_</span>();</span><br><span class=\"line\">    file_helper_.<span class=\"built_in\">flush</span>();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li><strong>资源初始化与清理</strong>：<ul>\n<li><strong>构造函数</strong>：初始化 zlib 流（<code>deflateInit</code>）、打开文件（<code>file_helper_.open</code>）、预分配缓冲区（<code>buffer_</code> 和 <code>compress_buffer_</code>）。</li>\n<li><strong>析构函数</strong>：刷新缓冲区、释放 zlib 资源（<code>deflateEnd</code>），<code>file_helper_</code> 自动关闭文件。</li>\n</ul>\n</li>\n</ol>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">explicit</span> <span class=\"title\">compressed_file_sink</span><span class=\"params\">(<span class=\"type\">const</span> <span class=\"type\">filename_t</span> &amp;filename, <span class=\"type\">size_t</span> buffer_capacity = <span class=\"number\">8192</span>,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">                              <span class=\"type\">int</span> compression_level = Z_DEFAULT_COMPRESSION)</span> </span>&#123;</span><br><span class=\"line\">    strm_.zalloc = Z_NULL;</span><br><span class=\"line\">    strm_.zfree = Z_NULL;</span><br><span class=\"line\">    strm_.opaque = Z_NULL;</span><br><span class=\"line\">    <span class=\"type\">int</span> ret = <span class=\"built_in\">deflateInit</span>(&amp;strm_, compression_level_);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (ret != Z_OK) <span class=\"keyword\">throw</span> <span class=\"built_in\">spdlog_ex</span>(<span class=\"string\">&quot;Failed to initialize zlib deflate&quot;</span>, ret);</span><br><span class=\"line\">    file_helper_.<span class=\"built_in\">open</span>(filename_, <span class=\"literal\">false</span>);</span><br><span class=\"line\">    buffer_.<span class=\"built_in\">reserve</span>(buffer_capacity_);</span><br><span class=\"line\">    compress_buffer_.<span class=\"built_in\">resize</span>(buffer_capacity_);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">~<span class=\"built_in\">compressed_file_sink</span>() <span class=\"keyword\">override</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        <span class=\"function\">std::lock_guard&lt;Mutex&gt; <span class=\"title\">lock</span><span class=\"params\">(base_sink&lt;Mutex&gt;::mutex_)</span></span>;</span><br><span class=\"line\">        <span class=\"built_in\">flush_</span>();</span><br><span class=\"line\">        <span class=\"built_in\">deflateEnd</span>(&amp;strm_);</span><br><span class=\"line\">    &#125; <span class=\"built_in\">catch</span> (...) &#123;&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"关键类与设计\"><a href=\"#关键类与设计\" class=\"headerlink\" title=\"关键类与设计\"></a>关键类与设计</h2><h3 id=\"类层次结构\"><a href=\"#类层次结构\" class=\"headerlink\" title=\"类层次结构\"></a>类层次结构</h3><p><code>compressed_file_sink</code> 的设计充分利用了 spdlog 的模块化架构，以下是关键类关系：</p>\n<ul>\n<li><strong>base_sink</strong>：提供日志格式化和线程安全的基础功能，定义 <code>sink_it_</code> 和 <code>flush_</code> 接口。</li>\n<li><strong>compressed_file_sink</strong>：继承 <code>base_sink</code>，实现压缩逻辑，管理 zlib 流和缓冲区。</li>\n<li><strong>file_helper</strong>：封装文件操作，负责打开、写入和刷新。</li>\n<li><strong>formatter</strong>：格式化日志消息。</li>\n</ul>\n<p>类图如下：<br><img src=\"/images/spdlog_sink_compress.png\" alt=\"spdlog_sink_compress.png\"></p>\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><p>通过分析 <code>compressed_file_sink</code>，我们深入理解了 spdlog 中自定义 sink 的实现方法。<code>compressed_file_sink</code> 利用 zlib 库，通过缓冲、分块压缩和长度前缀的机制，实现了高效的日志压缩功能。</p>\n<p>未来可探索以下方向：</p>\n<ul>\n<li>结合 <code>daily_file_sink</code>，实现按天分割的压缩日志。</li>\n<li>尝试其他压缩库（如 zstd），提升压缩速度或比率。</li>\n</ul>\n<p>希望本文能为你提供清晰的自定义 sink 实现指南！如需进一步探讨或优化建议，欢迎随时交流。</p>\n<p>#附：完整压缩源码和压缩日志读取器</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br><span class=\"line\">226</span><br><span class=\"line\">227</span><br><span class=\"line\">228</span><br><span class=\"line\">229</span><br><span class=\"line\">230</span><br><span class=\"line\">231</span><br><span class=\"line\">232</span><br><span class=\"line\">233</span><br><span class=\"line\">234</span><br><span class=\"line\">235</span><br><span class=\"line\">236</span><br><span class=\"line\">237</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">pragma</span> once</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;spdlog/common.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;spdlog/sinks/base_sink.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;spdlog/details/file_helper.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;spdlog/details/null_mutex.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;spdlog/details/synchronous_factory.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;spdlog/fmt/fmt.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;zlib.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;string&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;mutex&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">namespace</span> spdlog</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">namespace</span> sinks</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 自定义压缩文件 Sink (使用 file_helper)</span></span><br><span class=\"line\">        <span class=\"keyword\">template</span>&lt;<span class=\"keyword\">typename</span> Mutex&gt;</span><br><span class=\"line\">        <span class=\"keyword\">class</span> <span class=\"title class_\">compressed_file_sink</span> : <span class=\"keyword\">public</span> base_sink&lt;Mutex&gt;</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">        <span class=\"keyword\">public</span>:</span><br><span class=\"line\">            <span class=\"comment\">// 构造函数</span></span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">explicit</span> <span class=\"title\">compressed_file_sink</span><span class=\"params\">(<span class=\"type\">const</span> <span class=\"type\">filename_t</span> &amp;filename, <span class=\"type\">size_t</span> buffer_capacity = <span class=\"number\">8192</span>,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">                                          <span class=\"type\">int</span> compression_level = Z_DEFAULT_COMPRESSION)</span></span></span><br><span class=\"line\"><span class=\"function\">                : filename_(filename), buffer_capacity_(buffer_capacity), compression_level_(compression_level)</span></span><br><span class=\"line\"><span class=\"function\">            &#123;</span></span><br><span class=\"line\">                <span class=\"comment\">// 初始化 zlib 压缩流</span></span><br><span class=\"line\">                strm_.zalloc = Z_NULL;</span><br><span class=\"line\">                strm_.zfree = Z_NULL;</span><br><span class=\"line\">                strm_.opaque = Z_NULL;</span><br><span class=\"line\">                <span class=\"type\">int</span> ret = <span class=\"built_in\">deflateInit</span>(&amp;strm_, compression_level_);</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (ret != Z_OK)</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">throw</span> <span class=\"built_in\">spdlog_ex</span>(<span class=\"string\">&quot;Failed to initialize zlib deflate&quot;</span>, ret);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"comment\">// 使用 file_helper 打开文件 (false 表示不截断，实现追加效果)</span></span><br><span class=\"line\">                <span class=\"keyword\">try</span></span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    file_helper_.<span class=\"built_in\">open</span>(filename_, <span class=\"literal\">false</span>);</span><br><span class=\"line\">                &#125; <span class=\"built_in\">catch</span> (<span class=\"type\">const</span> spdlog_ex &amp;ex)</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    <span class=\"built_in\">deflateEnd</span>(&amp;strm_); <span class=\"comment\">// 清理 zlib 资源</span></span><br><span class=\"line\">                    <span class=\"keyword\">throw</span> ex; <span class=\"comment\">// 重新抛出文件打开异常</span></span><br><span class=\"line\">                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"comment\">// 预分配缓冲区 (使用 spdlog::memory_buf_t)</span></span><br><span class=\"line\">                buffer_.<span class=\"built_in\">reserve</span>(buffer_capacity_);</span><br><span class=\"line\">                compress_buffer_.<span class=\"built_in\">resize</span>(buffer_capacity_); <span class=\"comment\">// 初始压缩缓冲区大小 (保持 vector&lt;unsigned char&gt; 以便与 zlib C API 交互)</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">// 析构函数：确保所有缓冲数据被压缩和写入</span></span><br><span class=\"line\">            ~<span class=\"built_in\">compressed_file_sink</span>() <span class=\"keyword\">override</span></span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"keyword\">try</span></span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    <span class=\"comment\">// 获取锁以安全地刷新</span></span><br><span class=\"line\">                    <span class=\"function\">std::lock_guard&lt;Mutex&gt; <span class=\"title\">lock</span><span class=\"params\">(base_sink&lt;Mutex&gt;::mutex_)</span></span>;</span><br><span class=\"line\">                    <span class=\"built_in\">flush_</span>(); <span class=\"comment\">// 刷新剩余缓冲区</span></span><br><span class=\"line\">                    <span class=\"built_in\">deflateEnd</span>(&amp;strm_); <span class=\"comment\">// 清理 zlib 资源</span></span><br><span class=\"line\">                    <span class=\"comment\">// file_helper 会在析构时自动关闭文件，无需显式调用 close()</span></span><br><span class=\"line\">                &#125; <span class=\"built_in\">catch</span> (...)</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    <span class=\"comment\">// 析构函数中不应抛出异常</span></span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"built_in\">compressed_file_sink</span>(<span class=\"type\">const</span> compressed_file_sink &amp;) = <span class=\"keyword\">delete</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">            compressed_file_sink &amp;<span class=\"keyword\">operator</span>=(<span class=\"type\">const</span> compressed_file_sink &amp;) = <span class=\"keyword\">delete</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">protected</span>:</span><br><span class=\"line\">            <span class=\"comment\">// 核心日志记录方法</span></span><br><span class=\"line\">            <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">sink_it_</span><span class=\"params\">(<span class=\"type\">const</span> details::log_msg &amp;msg)</span> <span class=\"keyword\">override</span></span></span><br><span class=\"line\"><span class=\"function\">            </span>&#123;</span><br><span class=\"line\">                <span class=\"type\">memory_buf_t</span> formatted;</span><br><span class=\"line\">                base_sink&lt;Mutex&gt;::formatter_-&gt;format(msg, formatted);</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"comment\">// 将格式化后的消息追加到内部缓冲区 buffer_</span></span><br><span class=\"line\">                buffer_.<span class=\"built_in\">append</span>(formatted.<span class=\"built_in\">data</span>(), formatted.<span class=\"built_in\">data</span>() + formatted.<span class=\"built_in\">size</span>());</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"comment\">// 如果缓冲区达到阈值，则压缩并写入文件</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (buffer_.<span class=\"built_in\">size</span>() &gt;= buffer_capacity_)</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    <span class=\"built_in\">compress_and_write_</span>();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">// 强制刷新缓冲区</span></span><br><span class=\"line\">            <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">flush_</span><span class=\"params\">()</span> <span class=\"keyword\">override</span></span></span><br><span class=\"line\"><span class=\"function\">            </span>&#123;</span><br><span class=\"line\">                <span class=\"built_in\">compress_and_write_</span>();</span><br><span class=\"line\">                file_helper_.<span class=\"built_in\">flush</span>(); <span class=\"comment\">// 刷新 file_helper 的缓冲区</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">private</span>:</span><br><span class=\"line\">            <span class=\"comment\">// private:</span></span><br><span class=\"line\">            <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">compress_and_write_</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">            </span>&#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (buffer_.<span class=\"built_in\">size</span>() == <span class=\"number\">0</span>)</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                strm_.avail_in = <span class=\"built_in\">static_cast</span>&lt;uInt&gt;(buffer_.<span class=\"built_in\">size</span>());</span><br><span class=\"line\">                strm_.next_in = <span class=\"built_in\">reinterpret_cast</span>&lt;Bytef *&gt;(<span class=\"built_in\">const_cast</span>&lt;<span class=\"type\">char</span> *&gt;(buffer_.<span class=\"built_in\">data</span>()));</span><br><span class=\"line\"></span><br><span class=\"line\">                std::vector&lt;<span class=\"type\">unsigned</span> <span class=\"type\">char</span>&gt; compressed_output;</span><br><span class=\"line\">                <span class=\"type\">int</span> deflate_ret = Z_OK;</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"comment\">// 缓冲区用于 deflate 的单次输出</span></span><br><span class=\"line\">                <span class=\"comment\">// 调整大小以更好地适应可能的压缩输出，可以根据需要调整</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (compress_buffer_.<span class=\"built_in\">size</span>() &lt; buffer_.<span class=\"built_in\">size</span>() / <span class=\"number\">2</span>)</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    compress_buffer_.<span class=\"built_in\">resize</span>(buffer_.<span class=\"built_in\">size</span>() / <span class=\"number\">2</span> + <span class=\"number\">128</span>); <span class=\"comment\">// 简单策略：至少是输入一半+一些头部</span></span><br><span class=\"line\">                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"comment\">// ---- Step 1: 使用 Z_NO_FLUSH 消耗所有输入 ----</span></span><br><span class=\"line\">                <span class=\"keyword\">do</span></span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    strm_.avail_out = <span class=\"built_in\">static_cast</span>&lt;uInt&gt;(compress_buffer_.<span class=\"built_in\">size</span>());</span><br><span class=\"line\">                    strm_.next_out = compress_buffer_.<span class=\"built_in\">data</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">                    deflate_ret = <span class=\"built_in\">deflate</span>(&amp;strm_, Z_NO_FLUSH); <span class=\"comment\">// 先处理输入，不清空内部状态</span></span><br><span class=\"line\"></span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (deflate_ret != Z_OK &amp;&amp; deflate_ret != Z_BUF_ERROR)</span><br><span class=\"line\">                    &#123;</span><br><span class=\"line\">                        <span class=\"comment\">// Z_STREAM_END 不应该在这里发生</span></span><br><span class=\"line\">                        <span class=\"keyword\">throw</span> <span class=\"built_in\">spdlog_ex</span>(<span class=\"string\">&quot;zlib deflate(Z_NO_FLUSH) failed&quot;</span>, deflate_ret);</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    <span class=\"type\">size_t</span> have = compress_buffer_.<span class=\"built_in\">size</span>() - strm_.avail_out;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (have &gt; <span class=\"number\">0</span>)</span><br><span class=\"line\">                    &#123;</span><br><span class=\"line\">                        compressed_output.<span class=\"built_in\">insert</span>(compressed_output.<span class=\"built_in\">end</span>(), compress_buffer_.<span class=\"built_in\">data</span>(),</span><br><span class=\"line\">                                                 compress_buffer_.<span class=\"built_in\">data</span>() + have);</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    <span class=\"comment\">// 继续，直到输出缓冲区不再被填满（表示deflate可以处理更多输入，如果还有的话）</span></span><br><span class=\"line\">                    <span class=\"comment\">// 并且还有输入数据需要处理</span></span><br><span class=\"line\">                &#125; <span class=\"keyword\">while</span> (strm_.avail_out == <span class=\"number\">0</span> &amp;&amp; strm_.avail_in &gt; <span class=\"number\">0</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"comment\">// 此时，所有输入 (strm.avail_in) 应该已经被消耗，除非发生错误</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (strm_.avail_in != <span class=\"number\">0</span> &amp;&amp; deflate_ret != Z_BUF_ERROR)</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    <span class=\"comment\">// 如果还有输入但 deflate 没有要求更多输出空间，这不正常</span></span><br><span class=\"line\">                    <span class=\"keyword\">throw</span> <span class=\"built_in\">spdlog_ex</span>(<span class=\"string\">&quot;zlib deflate did not consume all input unexpectedly&quot;</span>);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"comment\">// ---- Step 2: 使用 Z_FINISH 结束当前流（块）并收集所有剩余输出 ----</span></span><br><span class=\"line\">                <span class=\"type\">int</span> finish_ret = Z_OK;</span><br><span class=\"line\">                <span class=\"keyword\">do</span></span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    strm_.avail_out = <span class=\"built_in\">static_cast</span>&lt;uInt&gt;(compress_buffer_.<span class=\"built_in\">size</span>());</span><br><span class=\"line\">                    strm_.next_out = compress_buffer_.<span class=\"built_in\">data</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">                    finish_ret = <span class=\"built_in\">deflate</span>(&amp;strm_, Z_FINISH); <span class=\"comment\">// 结束当前块/流</span></span><br><span class=\"line\"></span><br><span class=\"line\">                    <span class=\"comment\">// Z_FINISH 可能会返回 Z_OK 或 Z_BUF_ERROR 多次，直到返回 Z_STREAM_END</span></span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (finish_ret != Z_OK &amp;&amp; finish_ret != Z_STREAM_END &amp;&amp; finish_ret != Z_BUF_ERROR)</span><br><span class=\"line\">                    &#123;</span><br><span class=\"line\">                        <span class=\"keyword\">throw</span> <span class=\"built_in\">spdlog_ex</span>(<span class=\"string\">&quot;zlib deflate(Z_FINISH) failed&quot;</span>, finish_ret);</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    <span class=\"type\">size_t</span> have = compress_buffer_.<span class=\"built_in\">size</span>() - strm_.avail_out;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (have &gt; <span class=\"number\">0</span>)</span><br><span class=\"line\">                    &#123;</span><br><span class=\"line\">                        compressed_output.<span class=\"built_in\">insert</span>(compressed_output.<span class=\"built_in\">end</span>(), compress_buffer_.<span class=\"built_in\">data</span>(),</span><br><span class=\"line\">                                                 compress_buffer_.<span class=\"built_in\">data</span>() + have);</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    <span class=\"comment\">// 继续调用 Z_FINISH 直到它返回 Z_STREAM_END</span></span><br><span class=\"line\">                &#125; <span class=\"keyword\">while</span> (finish_ret != Z_STREAM_END);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"comment\">// ---- Step 3: 写入文件 (与之前相同) ----</span></span><br><span class=\"line\">                <span class=\"type\">uint32_t</span> compressed_size = <span class=\"built_in\">static_cast</span>&lt;<span class=\"type\">uint32_t</span>&gt;(compressed_output.<span class=\"built_in\">size</span>());</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (compressed_size &gt; <span class=\"number\">0</span>)</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    <span class=\"type\">memory_buf_t</span> size_buf;</span><br><span class=\"line\">                    size_buf.<span class=\"built_in\">append</span>(<span class=\"built_in\">reinterpret_cast</span>&lt;<span class=\"type\">const</span> <span class=\"type\">char</span> *&gt;(&amp;compressed_size),</span><br><span class=\"line\">                                    <span class=\"built_in\">reinterpret_cast</span>&lt;<span class=\"type\">const</span> <span class=\"type\">char</span> *&gt;(&amp;compressed_size) + <span class=\"built_in\">sizeof</span>(compressed_size));</span><br><span class=\"line\">                    file_helper_.<span class=\"built_in\">write</span>(size_buf);</span><br><span class=\"line\"></span><br><span class=\"line\">                    <span class=\"type\">memory_buf_t</span> data_buf;</span><br><span class=\"line\">                    data_buf.<span class=\"built_in\">append</span>(<span class=\"built_in\">reinterpret_cast</span>&lt;<span class=\"type\">const</span> <span class=\"type\">char</span> *&gt;(compressed_output.<span class=\"built_in\">data</span>()),</span><br><span class=\"line\">                                    <span class=\"built_in\">reinterpret_cast</span>&lt;<span class=\"type\">const</span> <span class=\"type\">char</span> *&gt;(compressed_output.<span class=\"built_in\">data</span>()) + compressed_output.</span><br><span class=\"line\">                                    <span class=\"built_in\">size</span>());</span><br><span class=\"line\">                    file_helper_.<span class=\"built_in\">write</span>(data_buf);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"comment\">// ---- Step 4: 重置 zlib 流，为下一个独立块做准备 ----</span></span><br><span class=\"line\">                <span class=\"comment\">// 因为我们使用了 Z_FINISH，流状态需要完全重置</span></span><br><span class=\"line\">                <span class=\"type\">int</span> reset_ret = <span class=\"built_in\">deflateReset</span>(&amp;strm_);</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (reset_ret != Z_OK)</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">throw</span> <span class=\"built_in\">spdlog_ex</span>(<span class=\"string\">&quot;Failed to reset zlib deflate stream&quot;</span>, reset_ret);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"comment\">// 清空内部缓冲区</span></span><br><span class=\"line\">                buffer_.<span class=\"built_in\">clear</span>();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"type\">filename_t</span> filename_; <span class=\"comment\">// 日志文件名</span></span><br><span class=\"line\">            details::file_helper file_helper_; <span class=\"comment\">// 使用 spdlog 的文件助手</span></span><br><span class=\"line\">            <span class=\"type\">memory_buf_t</span> buffer_; <span class=\"comment\">// 未压缩数据的内部缓冲区 (使用 memory_buf_t)</span></span><br><span class=\"line\">            <span class=\"type\">size_t</span> buffer_capacity_; <span class=\"comment\">// 内部缓冲区阈值</span></span><br><span class=\"line\">            <span class=\"type\">int</span> compression_level_; <span class=\"comment\">// zlib 压缩级别</span></span><br><span class=\"line\">            z_stream strm_; <span class=\"comment\">// zlib 压缩流</span></span><br><span class=\"line\">            std::vector&lt;<span class=\"type\">unsigned</span> <span class=\"type\">char</span>&gt; compress_buffer_; <span class=\"comment\">// 用于存放压缩数据的临时缓冲区</span></span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 类型别名和工厂函数保持不变</span></span><br><span class=\"line\">        <span class=\"keyword\">using</span> compressed_file_sink_mt = compressed_file_sink&lt;std::mutex&gt;;</span><br><span class=\"line\">        <span class=\"keyword\">using</span> compressed_file_sink_st = compressed_file_sink&lt;details::null_mutex&gt;;</span><br><span class=\"line\">    &#125; <span class=\"comment\">// namespace sinks</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">typename</span> Factory </span>= spdlog::synchronous_factory&gt;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">inline</span> std::shared_ptr&lt;logger&gt; <span class=\"title\">compressed_file_logger_mt</span><span class=\"params\">(<span class=\"type\">const</span> std::string &amp;logger_name, <span class=\"type\">const</span> <span class=\"type\">filename_t</span> &amp;filename,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">                                                             <span class=\"type\">size_t</span> buffer_capacity = <span class=\"number\">8192</span>,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">                                                             <span class=\"type\">int</span> compression_level = Z_DEFAULT_COMPRESSION)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> Factory::<span class=\"keyword\">template</span> <span class=\"built_in\">create</span>&lt;sinks::compressed_file_sink_mt&gt;(logger_name, filename, buffer_capacity,</span><br><span class=\"line\">                                                                        compression_level);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">typename</span> Factory </span>= spdlog::synchronous_factory&gt;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">inline</span> std::shared_ptr&lt;logger&gt; <span class=\"title\">compressed_file_logger_st</span><span class=\"params\">(<span class=\"type\">const</span> std::string &amp;logger_name, <span class=\"type\">const</span> <span class=\"type\">filename_t</span> &amp;filename,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">                                                             <span class=\"type\">size_t</span> buffer_capacity = <span class=\"number\">8192</span>,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">                                                             <span class=\"type\">int</span> compression_level = Z_DEFAULT_COMPRESSION)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> Factory::<span class=\"keyword\">template</span> <span class=\"built_in\">create</span>&lt;sinks::compressed_file_sink_st&gt;(logger_name, filename, buffer_capacity,</span><br><span class=\"line\">                                                                        compression_level);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125; <span class=\"comment\">// namespace spdlog</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;fstream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;vector&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;string&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;zlib.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;cstdint&gt;</span> <span class=\"comment\">// for uint32_t</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdexcept&gt;</span> <span class=\"comment\">// for runtime_error</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 解压缓冲区大小</span></span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">size_t</span> DECOMPRESS_BUFFER_SIZE = <span class=\"number\">16384</span>; <span class=\"comment\">// 16 KB</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"type\">int</span> argc, <span class=\"type\">char</span> *argv[])</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (argc != <span class=\"number\">3</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        std::cerr &lt;&lt; <span class=\"string\">&quot;用法: &quot;</span> &lt;&lt; argv[<span class=\"number\">0</span>] &lt;&lt; <span class=\"string\">&quot; &lt;compressed_log_file&gt;&quot;</span> &lt;&lt; <span class=\"string\">&quot; &lt;decompression_log_file&gt;&quot;</span> &lt;&lt; std::endl;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">const</span> <span class=\"type\">char</span> *filename = argv[<span class=\"number\">1</span>];</span><br><span class=\"line\">    <span class=\"type\">const</span> <span class=\"type\">char</span> *decompressed_filename = argv[<span class=\"number\">2</span>];</span><br><span class=\"line\">    <span class=\"function\">std::ifstream <span class=\"title\">infile</span><span class=\"params\">(filename, std::ios::binary)</span></span>;</span><br><span class=\"line\">    <span class=\"function\">std::ofstream <span class=\"title\">outfile</span><span class=\"params\">(decompressed_filename, std::ios::binary)</span></span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!infile.<span class=\"built_in\">is_open</span>())</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        std::cerr &lt;&lt; <span class=\"string\">&quot;错误: 无法打开文件 &quot;</span> &lt;&lt; filename &lt;&lt; std::endl;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 初始化 zlib 解压流</span></span><br><span class=\"line\">    z_stream strm;</span><br><span class=\"line\">    strm.zalloc = Z_NULL;</span><br><span class=\"line\">    strm.zfree = Z_NULL;</span><br><span class=\"line\">    strm.opaque = Z_NULL;</span><br><span class=\"line\">    strm.avail_in = <span class=\"number\">0</span>;</span><br><span class=\"line\">    strm.next_in = Z_NULL;</span><br><span class=\"line\">    <span class=\"type\">int</span> ret = <span class=\"built_in\">inflateInit</span>(&amp;strm);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (ret != Z_OK)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        std::cerr &lt;&lt; <span class=\"string\">&quot;错误: 初始化 zlib inflate 失败, code: &quot;</span> &lt;&lt; ret &lt;&lt; std::endl;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    std::vector&lt;<span class=\"type\">unsigned</span> <span class=\"type\">char</span>&gt; compressed_buffer;</span><br><span class=\"line\">    <span class=\"function\">std::vector&lt;<span class=\"type\">unsigned</span> <span class=\"type\">char</span>&gt; <span class=\"title\">decompress_buffer</span><span class=\"params\">(DECOMPRESS_BUFFER_SIZE)</span></span>;</span><br><span class=\"line\">    <span class=\"type\">uint32_t</span> compressed_block_size = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">try</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 循环读取文件中的压缩块</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span> (infile.<span class=\"built_in\">read</span>(<span class=\"built_in\">reinterpret_cast</span>&lt;<span class=\"type\">char</span> *&gt;(&amp;compressed_block_size), <span class=\"built_in\">sizeof</span>(compressed_block_size)))</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (compressed_block_size == <span class=\"number\">0</span>)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"comment\">// 可能是空块写入（虽然我们的sink实现不会写0长度块），跳过</span></span><br><span class=\"line\">                <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">// 读取指定大小的压缩数据</span></span><br><span class=\"line\">            compressed_buffer.<span class=\"built_in\">resize</span>(compressed_block_size);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (!infile.<span class=\"built_in\">read</span>(<span class=\"built_in\">reinterpret_cast</span>&lt;<span class=\"type\">char</span> *&gt;(compressed_buffer.<span class=\"built_in\">data</span>()), compressed_block_size))</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                std::cerr &lt;&lt; <span class=\"string\">&quot;错误: 读取压缩数据块时文件提前结束或发生错误。&quot;</span> &lt;&lt; std::endl;</span><br><span class=\"line\">                <span class=\"comment\">// 根据需要决定是退出还是尝试继续处理已读取部分</span></span><br><span class=\"line\">                <span class=\"keyword\">break</span>; <span class=\"comment\">// 或者 return 1;</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            strm.avail_in = compressed_block_size;</span><br><span class=\"line\">            strm.next_in = compressed_buffer.<span class=\"built_in\">data</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">// 循环解压当前块</span></span><br><span class=\"line\">            <span class=\"keyword\">do</span></span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                strm.avail_out = <span class=\"built_in\">static_cast</span>&lt;uInt&gt;(decompress_buffer.<span class=\"built_in\">size</span>());</span><br><span class=\"line\">                strm.next_out = decompress_buffer.<span class=\"built_in\">data</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">                ret = <span class=\"built_in\">inflate</span>(&amp;strm, Z_NO_FLUSH); <span class=\"comment\">// 使用 Z_NO_FLUSH 进行正常解压</span></span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"keyword\">switch</span> (ret)</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">case</span> Z_NEED_DICT:</span><br><span class=\"line\">                    <span class=\"keyword\">case</span> Z_DATA_ERROR:</span><br><span class=\"line\">                    <span class=\"keyword\">case</span> Z_MEM_ERROR:</span><br><span class=\"line\">                        <span class=\"built_in\">inflateEnd</span>(&amp;strm);</span><br><span class=\"line\">                        <span class=\"keyword\">throw</span> std::<span class=\"built_in\">runtime_error</span>(std::<span class=\"built_in\">string</span>(<span class=\"string\">&quot;zlib inflate 错误: &quot;</span>) + strm.msg);</span><br><span class=\"line\">                    <span class=\"keyword\">case</span> Z_STREAM_ERROR:</span><br><span class=\"line\">                        <span class=\"built_in\">inflateEnd</span>(&amp;strm);</span><br><span class=\"line\">                        <span class=\"keyword\">throw</span> std::<span class=\"built_in\">runtime_error</span>(<span class=\"string\">&quot;zlib inflate 错误: 无效的流状态&quot;</span>);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"comment\">// 计算解压出的数据量</span></span><br><span class=\"line\">                <span class=\"type\">size_t</span> have = decompress_buffer.<span class=\"built_in\">size</span>() - strm.avail_out;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (have &gt; <span class=\"number\">0</span>)</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    <span class=\"comment\">// 将解压后的数据写入标准输出</span></span><br><span class=\"line\">                    std::cout.<span class=\"built_in\">write</span>(<span class=\"built_in\">reinterpret_cast</span>&lt;<span class=\"type\">const</span> <span class=\"type\">char</span> *&gt;(decompress_buffer.<span class=\"built_in\">data</span>()), have);</span><br><span class=\"line\">                    outfile.<span class=\"built_in\">write</span>(<span class=\"built_in\">reinterpret_cast</span>&lt;<span class=\"type\">const</span> <span class=\"type\">char</span> *&gt;(decompress_buffer.<span class=\"built_in\">data</span>()), have);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"comment\">// 如果输出缓冲区满了，inflate 需要再次被调用来处理剩余的输入</span></span><br><span class=\"line\">            &#125; <span class=\"keyword\">while</span> (strm.avail_out == <span class=\"number\">0</span>); <span class=\"comment\">// 继续解压直到输出缓冲区不再被填满</span></span><br><span class=\"line\">            <span class=\"comment\">// 检查当前块是否解压完毕</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (strm.avail_in != <span class=\"number\">0</span>)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"comment\">// Z_SYNC_FLUSH 写入的块，解压时 inflate 可能在块结束时返回 Z_OK 而不是 Z_STREAM_END</span></span><br><span class=\"line\">                <span class=\"comment\">// 只要输入被消耗完 (avail_in == 0) 就认为一个块处理完了</span></span><br><span class=\"line\">                <span class=\"comment\">// 如果输入没消耗完但 inflate 又没返回错误，可能逻辑有问题</span></span><br><span class=\"line\">                <span class=\"comment\">// 对于 Z_SYNC_FLUSH, 我们期望 avail_in 最终为 0</span></span><br><span class=\"line\">                <span class=\"built_in\">inflateEnd</span>(&amp;strm);</span><br><span class=\"line\">                <span class=\"keyword\">throw</span> std::<span class=\"built_in\">runtime_error</span>(<span class=\"string\">&quot;解压错误: 输入数据未完全消耗完但解压停止&quot;</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">// inflateReset(&amp;strm); // 不需要 reset，因为每次都读新块并设置 avail_in/next_in</span></span><br><span class=\"line\">            <span class=\"comment\">// inflateInit 应该为每个独立块工作</span></span><br><span class=\"line\">            <span class=\"comment\">// 修正：对于流式解压，应该持续使用同一个 strm，并在块之间可能需要 inflateSync</span></span><br><span class=\"line\">            <span class=\"comment\">// 或者更简单的，如果块是独立压缩的（如我们的例子，虽然用了 Z_SYNC_FLUSH 但逻辑上独立）</span></span><br><span class=\"line\">            <span class=\"comment\">// 可以在处理完一个块后调用 inflateReset</span></span><br><span class=\"line\">            ret = <span class=\"built_in\">inflateReset</span>(&amp;strm);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (ret != Z_OK)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"built_in\">inflateEnd</span>(&amp;strm);</span><br><span class=\"line\">                <span class=\"keyword\">throw</span> std::<span class=\"built_in\">runtime_error</span>(<span class=\"string\">&quot;zlib inflateReset 失败&quot;</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; <span class=\"comment\">// end while read block size</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 检查是否因为读取错误而退出循环</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!infile.<span class=\"built_in\">eof</span>() &amp;&amp; infile.<span class=\"built_in\">fail</span>())</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            std::cerr &lt;&lt; <span class=\"string\">&quot;错误: 读取文件时发生 I/O 错误。&quot;</span> &lt;&lt; std::endl;</span><br><span class=\"line\">            outfile.<span class=\"built_in\">close</span>();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125; <span class=\"built_in\">catch</span> (<span class=\"type\">const</span> std::exception &amp;e)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        std::cerr &lt;&lt; <span class=\"string\">&quot;运行时错误: &quot;</span> &lt;&lt; e.<span class=\"built_in\">what</span>() &lt;&lt; std::endl;</span><br><span class=\"line\">        <span class=\"built_in\">inflateEnd</span>(&amp;strm); <span class=\"comment\">// 确保清理</span></span><br><span class=\"line\">        outfile.<span class=\"built_in\">close</span>();</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 清理 zlib 资源</span></span><br><span class=\"line\">    <span class=\"built_in\">inflateEnd</span>(&amp;strm);</span><br><span class=\"line\">    std::cout.<span class=\"built_in\">flush</span>(); <span class=\"comment\">// 确保所有输出都被写入</span></span><br><span class=\"line\">    outfile.<span class=\"built_in\">close</span>();</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n","excerpt":"<h1 id=\"引言\"><a href=\"#引言\" class=\"headerlink\" title=\"引言\"></a>引言</h1><p>spdlog 是一个功能强大且高度可扩展的 C++ 日志库，其模块化设计允许开发者通过自定义 sink 实现灵活的日志输出。在前两篇文章中，我们分析了 spdlog 的异步日志机制以及 <code>daily_file_sink</code> 和 <code>rotating_file_sink</code> 的实现。本文将聚焦于 <strong>如何在 spdlog 中实现自定义 sink</strong>，以 <code>compressed_file_sink</code> 为例，详细讲解如何利用 zlib 库实现日志压缩功能，减少磁盘空间占用。</p>\n<p>通过本文，你将学会：</p>\n<ul>\n<li>spdlog 中自定义 sink 的实现步骤。</li>\n<li><code>compressed_file_sink</code> 如何通过 zlib 实现日志压缩。</li>\n<li>自定义 sink 的关键设计要点和注意事项。</li>\n</ul>\n<p><strong>注：本文分析的源码基于 spdlog v1.15.1 和提供的 <code>compressed_file_sink</code> 实现。</strong></p>","more":"<h1 id=\"spdlog-中自定义-sink-的实现方法\"><a href=\"#spdlog-中自定义-sink-的实现方法\" class=\"headerlink\" title=\"spdlog 中自定义 sink 的实现方法\"></a>spdlog 中自定义 sink 的实现方法</h1><p>spdlog 的 sink 机制是其扩展性的核心。所有 sink 都继承自 <code>base_sink</code> 模板类，通过实现两个关键虚函数 <code>sink_it_</code> 和 <code>flush_</code>，即可定义日志的输出逻辑。以下是实现自定义 sink 的通用步骤：</p>\n<ol>\n<li><strong>继承 base_sink</strong>：创建一个新类，继承 <code>base_sink&lt;Mutex&gt;</code>，选择合适的互斥锁（如 <code>std::mutex</code> 用于多线程，<code>null_mutex</code> 用于单线程）。</li>\n<li>**实现 sink_it_**：定义日志消息的处理逻辑，如格式化、加工或输出到目标（如文件、网络）。</li>\n<li>**实现 flush_**：确保缓冲区数据被刷新到目标，完成输出。</li>\n<li><strong>管理资源</strong>：在构造函数中初始化资源（如文件句柄、缓冲区），在析构函数中清理。</li>\n<li><strong>提供工厂函数</strong>：为多线程和单线程模式定义便捷的创建函数（如 <code>compressed_file_logger_mt/st</code>）。</li>\n</ol>\n<p><code>compressed_file_sink</code> 遵循上述步骤，通过集成 zlib 库实现了压缩日志的输出，下面我们以其为案例进行深入分析。</p>\n<h1 id=\"compressed-file-sink-实现解析\"><a href=\"#compressed-file-sink-实现解析\" class=\"headerlink\" title=\"compressed_file_sink 实现解析\"></a>compressed_file_sink 实现解析</h1><p><code>compressed_file_sink</code> 是一个自定义 sink，通过缓冲日志消息、利用 zlib 压缩数据并写入文件，实现高效的日志存储。以下从 demo 入手，逐步剖析其实现原理。</p>\n<h2 id=\"使用-demo\"><a href=\"#使用-demo\" class=\"headerlink\" title=\"使用 demo\"></a>使用 demo</h2><p>以下是一个简单的 <code>compressed_file_sink</code> 使用示例：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;spdlog/spdlog.h&quot;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;compressed_file_sink.h&quot;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">compressed_file_example</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">auto</span> compressed_logger = spdlog::<span class=\"built_in\">compressed_file_logger_mt</span>(<span class=\"string\">&quot;compressed_logger&quot;</span>, <span class=\"string\">&quot;logs/compressed_log.z&quot;</span>, <span class=\"number\">8192</span>, Z_DEFAULT_COMPRESSION);</span><br><span class=\"line\">    compressed_logger-&gt;<span class=\"built_in\">info</span>(<span class=\"string\">&quot;This is a compressed log message.&quot;</span>);</span><br><span class=\"line\">    compressed_logger-&gt;<span class=\"built_in\">flush</span>();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在这个 demo 中，我们创建了一个多线程的压缩日志 logger，日志消息通过 <code>compressed_file_sink</code> 压缩后写入 <code>logs/compressed_log.z</code> 文件。</p>\n<h2 id=\"日志消息流转与压缩实现\"><a href=\"#日志消息流转与压缩实现\" class=\"headerlink\" title=\"日志消息流转与压缩实现\"></a>日志消息流转与压缩实现</h2><p>以 <code>info(&quot;This is a compressed log message.&quot;)</code> 为例，分析日志消息的处理流程，重点讲解压缩逻辑。</p>\n<h3 id=\"日志生产\"><a href=\"#日志生产\" class=\"headerlink\" title=\"日志生产\"></a>日志生产</h3><ol>\n<li><strong>调用 info 方法</strong>：<ul>\n<li>用户调用 <code>logger-&gt;info</code>，触发模板函数，最终调用 <code>base_sink</code> 的 <code>log</code> 方法，执行 <code>sink_it_</code> 虚函数。</li>\n<li>在 <code>compressed_file_sink::sink_it_</code> 中，日志消息被格式化并追加到内部缓冲区。</li>\n</ul>\n</li>\n</ol>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">sink_it_</span><span class=\"params\">(<span class=\"type\">const</span> details::log_msg &amp;msg)</span> <span class=\"keyword\">override</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"type\">memory_buf_t</span> formatted;</span><br><span class=\"line\">    base_sink&lt;Mutex&gt;::formatter_-&gt;format(msg, formatted);</span><br><span class=\"line\">    buffer_.<span class=\"built_in\">append</span>(formatted.<span class=\"built_in\">data</span>(), formatted.<span class=\"built_in\">data</span>() + formatted.<span class=\"built_in\">size</span>());</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (buffer_.<span class=\"built_in\">size</span>() &gt;= buffer_capacity_) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">compress_and_write_</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li><strong>缓冲管理</strong>：<ul>\n<li>格式化后的日志消息存储在 <code>buffer_</code>（类型为 <code>memory_buf_t</code>）。</li>\n<li>当 <code>buffer_</code> 大小达到 <code>buffer_capacity_</code>（默认 8192 字节）时，调用 <code>compress_and_write_</code> 进行压缩和写入。</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"日志压缩与写入\"><a href=\"#日志压缩与写入\" class=\"headerlink\" title=\"日志压缩与写入\"></a>日志压缩与写入</h3><p><code>compress_and_write_</code> 是压缩功能的核心，结合 zlib 库完成数据压缩并写入文件。以下是其实现步骤：</p>\n<ol>\n<li><strong>初始化 zlib 输入</strong>：<ul>\n<li>将 <code>buffer_</code> 的数据传递给 zlib 压缩流 <code>strm_</code>，设置输入指针（<code>next_in</code>）和长度（<code>avail_in</code>）。</li>\n</ul>\n</li>\n</ol>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">strm_.avail_in = <span class=\"built_in\">static_cast</span>&lt;uInt&gt;(buffer_.<span class=\"built_in\">size</span>());</span><br><span class=\"line\">strm_.next_in = <span class=\"built_in\">reinterpret_cast</span>&lt;Bytef *&gt;(<span class=\"built_in\">const_cast</span>&lt;<span class=\"type\">char</span> *&gt;(buffer_.<span class=\"built_in\">data</span>()));</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li><strong>逐步压缩（Z_NO_FLUSH）</strong>：<ul>\n<li>使用 <code>deflate</code> 函数以 <code>Z_NO_FLUSH</code> 模式分步处理输入数据，输出到临时缓冲区 <code>compress_buffer_</code>（类型为 <code>std::vector&lt;unsigned char&gt;</code>）。</li>\n<li>循环调用 <code>deflate</code> 直到所有输入数据被消耗，收集压缩输出到 <code>compressed_output</code>。</li>\n</ul>\n</li>\n</ol>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">do</span> &#123;</span><br><span class=\"line\">    strm_.avail_out = <span class=\"built_in\">static_cast</span>&lt;uInt&gt;(compress_buffer_.<span class=\"built_in\">size</span>());</span><br><span class=\"line\">    strm_.next_out = compress_buffer_.<span class=\"built_in\">data</span>();</span><br><span class=\"line\">    deflate_ret = <span class=\"built_in\">deflate</span>(&amp;strm_, Z_NO_FLUSH);</span><br><span class=\"line\">    <span class=\"type\">size_t</span> have = compress_buffer_.<span class=\"built_in\">size</span>() - strm_.avail_out;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (have &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        compressed_output.<span class=\"built_in\">insert</span>(compressed_output.<span class=\"built_in\">end</span>(), compress_buffer_.<span class=\"built_in\">data</span>(), compress_buffer_.<span class=\"built_in\">data</span>() + have);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125; <span class=\"keyword\">while</span> (strm_.avail_out == <span class=\"number\">0</span> &amp;&amp; strm_.avail_in &gt; <span class=\"number\">0</span>);</span><br></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li><strong>结束压缩（Z_FINISH）</strong>：<ul>\n<li>使用 <code>Z_FINISH</code> 模式完成当前压缩块，生成完整的压缩数据。</li>\n<li>继续调用 <code>deflate</code> 直到返回 <code>Z_STREAM_END</code>，确保所有输出被收集。</li>\n</ul>\n</li>\n</ol>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">do</span> &#123;</span><br><span class=\"line\">    strm_.avail_out = <span class=\"built_in\">static_cast</span>&lt;uInt&gt;(compress_buffer_.<span class=\"built_in\">size</span>());</span><br><span class=\"line\">    strm_.next_out = compress_buffer_.<span class=\"built_in\">data</span>();</span><br><span class=\"line\">    finish_ret = <span class=\"built_in\">deflate</span>(&amp;strm_, Z_FINISH);</span><br><span class=\"line\">    <span class=\"type\">size_t</span> have = compress_buffer_.<span class=\"built_in\">size</span>() - strm_.avail_out;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (have &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        compressed_output.<span class=\"built_in\">insert</span>(compressed_output.<span class=\"built_in\">end</span>(), compress_buffer_.<span class=\"built_in\">data</span>(), compress_buffer_.<span class=\"built_in\">data</span>() + have);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125; <span class=\"keyword\">while</span> (finish_ret != Z_STREAM_END);</span><br></pre></td></tr></table></figure>\n\n<ol start=\"4\">\n<li><strong>写入文件</strong>：<ul>\n<li>压缩数据存储在 <code>compressed_output</code> 中。</li>\n<li>首先写入 4 字节的压缩块长度（<code>uint32_t</code>），便于解压时解析。</li>\n<li>然后写入压缩数据，使用 <code>file_helper_.write</code> 完成文件 IO。</li>\n</ul>\n</li>\n</ol>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">uint32_t</span> compressed_size = <span class=\"built_in\">static_cast</span>&lt;<span class=\"type\">uint32_t</span>&gt;(compressed_output.<span class=\"built_in\">size</span>());</span><br><span class=\"line\"><span class=\"keyword\">if</span> (compressed_size &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">    <span class=\"type\">memory_buf_t</span> size_buf;</span><br><span class=\"line\">    size_buf.<span class=\"built_in\">append</span>(<span class=\"built_in\">reinterpret_cast</span>&lt;<span class=\"type\">const</span> <span class=\"type\">char</span> *&gt;(&amp;compressed_size), </span><br><span class=\"line\">                    <span class=\"built_in\">reinterpret_cast</span>&lt;<span class=\"type\">const</span> <span class=\"type\">char</span> *&gt;(&amp;compressed_size) + <span class=\"built_in\">sizeof</span>(compressed_size));</span><br><span class=\"line\">    file_helper_.<span class=\"built_in\">write</span>(size_buf);</span><br><span class=\"line\">    <span class=\"type\">memory_buf_t</span> data_buf;</span><br><span class=\"line\">    data_buf.<span class=\"built_in\">append</span>(<span class=\"built_in\">reinterpret_cast</span>&lt;<span class=\"type\">const</span> <span class=\"type\">char</span> *&gt;(compressed_output.<span class=\"built_in\">data</span>()), </span><br><span class=\"line\">                    <span class=\"built_in\">reinterpret_cast</span>&lt;<span class=\"type\">const</span> <span class=\"type\">char</span> *&gt;(compressed_output.<span class=\"built_in\">data</span>()) + compressed_output.<span class=\"built_in\">size</span>());</span><br><span class=\"line\">    file_helper_.<span class=\"built_in\">write</span>(data_buf);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ol start=\"5\">\n<li><strong>重置与清理</strong>：<ul>\n<li>通过 <code>deflateReset</code> 重置 zlib 流，为下一块压缩准备。</li>\n<li>清空 <code>buffer_</code>，等待新的日志消息。</li>\n</ul>\n</li>\n</ol>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">deflateReset</span>(&amp;strm_);</span><br><span class=\"line\">buffer_.<span class=\"built_in\">clear</span>();</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"刷新与资源管理\"><a href=\"#刷新与资源管理\" class=\"headerlink\" title=\"刷新与资源管理\"></a>刷新与资源管理</h3><ol>\n<li><strong>刷新缓冲区</strong>：<ul>\n<li>用户调用 <code>logger-&gt;flush()</code> 触发 <code>flush_</code> 方法，调用 <code>compress_and_write_</code> 压缩剩余数据，并通过 <code>file_helper_.flush()</code> 确保写入磁盘。</li>\n</ul>\n</li>\n</ol>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">flush_</span><span class=\"params\">()</span> <span class=\"keyword\">override</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">compress_and_write_</span>();</span><br><span class=\"line\">    file_helper_.<span class=\"built_in\">flush</span>();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li><strong>资源初始化与清理</strong>：<ul>\n<li><strong>构造函数</strong>：初始化 zlib 流（<code>deflateInit</code>）、打开文件（<code>file_helper_.open</code>）、预分配缓冲区（<code>buffer_</code> 和 <code>compress_buffer_</code>）。</li>\n<li><strong>析构函数</strong>：刷新缓冲区、释放 zlib 资源（<code>deflateEnd</code>），<code>file_helper_</code> 自动关闭文件。</li>\n</ul>\n</li>\n</ol>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">explicit</span> <span class=\"title\">compressed_file_sink</span><span class=\"params\">(<span class=\"type\">const</span> <span class=\"type\">filename_t</span> &amp;filename, <span class=\"type\">size_t</span> buffer_capacity = <span class=\"number\">8192</span>,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">                              <span class=\"type\">int</span> compression_level = Z_DEFAULT_COMPRESSION)</span> </span>&#123;</span><br><span class=\"line\">    strm_.zalloc = Z_NULL;</span><br><span class=\"line\">    strm_.zfree = Z_NULL;</span><br><span class=\"line\">    strm_.opaque = Z_NULL;</span><br><span class=\"line\">    <span class=\"type\">int</span> ret = <span class=\"built_in\">deflateInit</span>(&amp;strm_, compression_level_);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (ret != Z_OK) <span class=\"keyword\">throw</span> <span class=\"built_in\">spdlog_ex</span>(<span class=\"string\">&quot;Failed to initialize zlib deflate&quot;</span>, ret);</span><br><span class=\"line\">    file_helper_.<span class=\"built_in\">open</span>(filename_, <span class=\"literal\">false</span>);</span><br><span class=\"line\">    buffer_.<span class=\"built_in\">reserve</span>(buffer_capacity_);</span><br><span class=\"line\">    compress_buffer_.<span class=\"built_in\">resize</span>(buffer_capacity_);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">~<span class=\"built_in\">compressed_file_sink</span>() <span class=\"keyword\">override</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        <span class=\"function\">std::lock_guard&lt;Mutex&gt; <span class=\"title\">lock</span><span class=\"params\">(base_sink&lt;Mutex&gt;::mutex_)</span></span>;</span><br><span class=\"line\">        <span class=\"built_in\">flush_</span>();</span><br><span class=\"line\">        <span class=\"built_in\">deflateEnd</span>(&amp;strm_);</span><br><span class=\"line\">    &#125; <span class=\"built_in\">catch</span> (...) &#123;&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"关键类与设计\"><a href=\"#关键类与设计\" class=\"headerlink\" title=\"关键类与设计\"></a>关键类与设计</h2><h3 id=\"类层次结构\"><a href=\"#类层次结构\" class=\"headerlink\" title=\"类层次结构\"></a>类层次结构</h3><p><code>compressed_file_sink</code> 的设计充分利用了 spdlog 的模块化架构，以下是关键类关系：</p>\n<ul>\n<li><strong>base_sink</strong>：提供日志格式化和线程安全的基础功能，定义 <code>sink_it_</code> 和 <code>flush_</code> 接口。</li>\n<li><strong>compressed_file_sink</strong>：继承 <code>base_sink</code>，实现压缩逻辑，管理 zlib 流和缓冲区。</li>\n<li><strong>file_helper</strong>：封装文件操作，负责打开、写入和刷新。</li>\n<li><strong>formatter</strong>：格式化日志消息。</li>\n</ul>\n<p>类图如下：<br><img src=\"/images/spdlog_sink_compress.png\" alt=\"spdlog_sink_compress.png\"></p>\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><p>通过分析 <code>compressed_file_sink</code>，我们深入理解了 spdlog 中自定义 sink 的实现方法。<code>compressed_file_sink</code> 利用 zlib 库，通过缓冲、分块压缩和长度前缀的机制，实现了高效的日志压缩功能。</p>\n<p>未来可探索以下方向：</p>\n<ul>\n<li>结合 <code>daily_file_sink</code>，实现按天分割的压缩日志。</li>\n<li>尝试其他压缩库（如 zstd），提升压缩速度或比率。</li>\n</ul>\n<p>希望本文能为你提供清晰的自定义 sink 实现指南！如需进一步探讨或优化建议，欢迎随时交流。</p>\n<p>#附：完整压缩源码和压缩日志读取器</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br><span class=\"line\">226</span><br><span class=\"line\">227</span><br><span class=\"line\">228</span><br><span class=\"line\">229</span><br><span class=\"line\">230</span><br><span class=\"line\">231</span><br><span class=\"line\">232</span><br><span class=\"line\">233</span><br><span class=\"line\">234</span><br><span class=\"line\">235</span><br><span class=\"line\">236</span><br><span class=\"line\">237</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">pragma</span> once</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;spdlog/common.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;spdlog/sinks/base_sink.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;spdlog/details/file_helper.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;spdlog/details/null_mutex.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;spdlog/details/synchronous_factory.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;spdlog/fmt/fmt.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;zlib.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;string&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;mutex&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">namespace</span> spdlog</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">namespace</span> sinks</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 自定义压缩文件 Sink (使用 file_helper)</span></span><br><span class=\"line\">        <span class=\"keyword\">template</span>&lt;<span class=\"keyword\">typename</span> Mutex&gt;</span><br><span class=\"line\">        <span class=\"keyword\">class</span> <span class=\"title class_\">compressed_file_sink</span> : <span class=\"keyword\">public</span> base_sink&lt;Mutex&gt;</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">        <span class=\"keyword\">public</span>:</span><br><span class=\"line\">            <span class=\"comment\">// 构造函数</span></span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">explicit</span> <span class=\"title\">compressed_file_sink</span><span class=\"params\">(<span class=\"type\">const</span> <span class=\"type\">filename_t</span> &amp;filename, <span class=\"type\">size_t</span> buffer_capacity = <span class=\"number\">8192</span>,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">                                          <span class=\"type\">int</span> compression_level = Z_DEFAULT_COMPRESSION)</span></span></span><br><span class=\"line\"><span class=\"function\">                : filename_(filename), buffer_capacity_(buffer_capacity), compression_level_(compression_level)</span></span><br><span class=\"line\"><span class=\"function\">            &#123;</span></span><br><span class=\"line\">                <span class=\"comment\">// 初始化 zlib 压缩流</span></span><br><span class=\"line\">                strm_.zalloc = Z_NULL;</span><br><span class=\"line\">                strm_.zfree = Z_NULL;</span><br><span class=\"line\">                strm_.opaque = Z_NULL;</span><br><span class=\"line\">                <span class=\"type\">int</span> ret = <span class=\"built_in\">deflateInit</span>(&amp;strm_, compression_level_);</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (ret != Z_OK)</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">throw</span> <span class=\"built_in\">spdlog_ex</span>(<span class=\"string\">&quot;Failed to initialize zlib deflate&quot;</span>, ret);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"comment\">// 使用 file_helper 打开文件 (false 表示不截断，实现追加效果)</span></span><br><span class=\"line\">                <span class=\"keyword\">try</span></span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    file_helper_.<span class=\"built_in\">open</span>(filename_, <span class=\"literal\">false</span>);</span><br><span class=\"line\">                &#125; <span class=\"built_in\">catch</span> (<span class=\"type\">const</span> spdlog_ex &amp;ex)</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    <span class=\"built_in\">deflateEnd</span>(&amp;strm_); <span class=\"comment\">// 清理 zlib 资源</span></span><br><span class=\"line\">                    <span class=\"keyword\">throw</span> ex; <span class=\"comment\">// 重新抛出文件打开异常</span></span><br><span class=\"line\">                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"comment\">// 预分配缓冲区 (使用 spdlog::memory_buf_t)</span></span><br><span class=\"line\">                buffer_.<span class=\"built_in\">reserve</span>(buffer_capacity_);</span><br><span class=\"line\">                compress_buffer_.<span class=\"built_in\">resize</span>(buffer_capacity_); <span class=\"comment\">// 初始压缩缓冲区大小 (保持 vector&lt;unsigned char&gt; 以便与 zlib C API 交互)</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">// 析构函数：确保所有缓冲数据被压缩和写入</span></span><br><span class=\"line\">            ~<span class=\"built_in\">compressed_file_sink</span>() <span class=\"keyword\">override</span></span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"keyword\">try</span></span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    <span class=\"comment\">// 获取锁以安全地刷新</span></span><br><span class=\"line\">                    <span class=\"function\">std::lock_guard&lt;Mutex&gt; <span class=\"title\">lock</span><span class=\"params\">(base_sink&lt;Mutex&gt;::mutex_)</span></span>;</span><br><span class=\"line\">                    <span class=\"built_in\">flush_</span>(); <span class=\"comment\">// 刷新剩余缓冲区</span></span><br><span class=\"line\">                    <span class=\"built_in\">deflateEnd</span>(&amp;strm_); <span class=\"comment\">// 清理 zlib 资源</span></span><br><span class=\"line\">                    <span class=\"comment\">// file_helper 会在析构时自动关闭文件，无需显式调用 close()</span></span><br><span class=\"line\">                &#125; <span class=\"built_in\">catch</span> (...)</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    <span class=\"comment\">// 析构函数中不应抛出异常</span></span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"built_in\">compressed_file_sink</span>(<span class=\"type\">const</span> compressed_file_sink &amp;) = <span class=\"keyword\">delete</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">            compressed_file_sink &amp;<span class=\"keyword\">operator</span>=(<span class=\"type\">const</span> compressed_file_sink &amp;) = <span class=\"keyword\">delete</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">protected</span>:</span><br><span class=\"line\">            <span class=\"comment\">// 核心日志记录方法</span></span><br><span class=\"line\">            <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">sink_it_</span><span class=\"params\">(<span class=\"type\">const</span> details::log_msg &amp;msg)</span> <span class=\"keyword\">override</span></span></span><br><span class=\"line\"><span class=\"function\">            </span>&#123;</span><br><span class=\"line\">                <span class=\"type\">memory_buf_t</span> formatted;</span><br><span class=\"line\">                base_sink&lt;Mutex&gt;::formatter_-&gt;format(msg, formatted);</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"comment\">// 将格式化后的消息追加到内部缓冲区 buffer_</span></span><br><span class=\"line\">                buffer_.<span class=\"built_in\">append</span>(formatted.<span class=\"built_in\">data</span>(), formatted.<span class=\"built_in\">data</span>() + formatted.<span class=\"built_in\">size</span>());</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"comment\">// 如果缓冲区达到阈值，则压缩并写入文件</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (buffer_.<span class=\"built_in\">size</span>() &gt;= buffer_capacity_)</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    <span class=\"built_in\">compress_and_write_</span>();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">// 强制刷新缓冲区</span></span><br><span class=\"line\">            <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">flush_</span><span class=\"params\">()</span> <span class=\"keyword\">override</span></span></span><br><span class=\"line\"><span class=\"function\">            </span>&#123;</span><br><span class=\"line\">                <span class=\"built_in\">compress_and_write_</span>();</span><br><span class=\"line\">                file_helper_.<span class=\"built_in\">flush</span>(); <span class=\"comment\">// 刷新 file_helper 的缓冲区</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">private</span>:</span><br><span class=\"line\">            <span class=\"comment\">// private:</span></span><br><span class=\"line\">            <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">compress_and_write_</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">            </span>&#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (buffer_.<span class=\"built_in\">size</span>() == <span class=\"number\">0</span>)</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                strm_.avail_in = <span class=\"built_in\">static_cast</span>&lt;uInt&gt;(buffer_.<span class=\"built_in\">size</span>());</span><br><span class=\"line\">                strm_.next_in = <span class=\"built_in\">reinterpret_cast</span>&lt;Bytef *&gt;(<span class=\"built_in\">const_cast</span>&lt;<span class=\"type\">char</span> *&gt;(buffer_.<span class=\"built_in\">data</span>()));</span><br><span class=\"line\"></span><br><span class=\"line\">                std::vector&lt;<span class=\"type\">unsigned</span> <span class=\"type\">char</span>&gt; compressed_output;</span><br><span class=\"line\">                <span class=\"type\">int</span> deflate_ret = Z_OK;</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"comment\">// 缓冲区用于 deflate 的单次输出</span></span><br><span class=\"line\">                <span class=\"comment\">// 调整大小以更好地适应可能的压缩输出，可以根据需要调整</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (compress_buffer_.<span class=\"built_in\">size</span>() &lt; buffer_.<span class=\"built_in\">size</span>() / <span class=\"number\">2</span>)</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    compress_buffer_.<span class=\"built_in\">resize</span>(buffer_.<span class=\"built_in\">size</span>() / <span class=\"number\">2</span> + <span class=\"number\">128</span>); <span class=\"comment\">// 简单策略：至少是输入一半+一些头部</span></span><br><span class=\"line\">                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"comment\">// ---- Step 1: 使用 Z_NO_FLUSH 消耗所有输入 ----</span></span><br><span class=\"line\">                <span class=\"keyword\">do</span></span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    strm_.avail_out = <span class=\"built_in\">static_cast</span>&lt;uInt&gt;(compress_buffer_.<span class=\"built_in\">size</span>());</span><br><span class=\"line\">                    strm_.next_out = compress_buffer_.<span class=\"built_in\">data</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">                    deflate_ret = <span class=\"built_in\">deflate</span>(&amp;strm_, Z_NO_FLUSH); <span class=\"comment\">// 先处理输入，不清空内部状态</span></span><br><span class=\"line\"></span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (deflate_ret != Z_OK &amp;&amp; deflate_ret != Z_BUF_ERROR)</span><br><span class=\"line\">                    &#123;</span><br><span class=\"line\">                        <span class=\"comment\">// Z_STREAM_END 不应该在这里发生</span></span><br><span class=\"line\">                        <span class=\"keyword\">throw</span> <span class=\"built_in\">spdlog_ex</span>(<span class=\"string\">&quot;zlib deflate(Z_NO_FLUSH) failed&quot;</span>, deflate_ret);</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    <span class=\"type\">size_t</span> have = compress_buffer_.<span class=\"built_in\">size</span>() - strm_.avail_out;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (have &gt; <span class=\"number\">0</span>)</span><br><span class=\"line\">                    &#123;</span><br><span class=\"line\">                        compressed_output.<span class=\"built_in\">insert</span>(compressed_output.<span class=\"built_in\">end</span>(), compress_buffer_.<span class=\"built_in\">data</span>(),</span><br><span class=\"line\">                                                 compress_buffer_.<span class=\"built_in\">data</span>() + have);</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    <span class=\"comment\">// 继续，直到输出缓冲区不再被填满（表示deflate可以处理更多输入，如果还有的话）</span></span><br><span class=\"line\">                    <span class=\"comment\">// 并且还有输入数据需要处理</span></span><br><span class=\"line\">                &#125; <span class=\"keyword\">while</span> (strm_.avail_out == <span class=\"number\">0</span> &amp;&amp; strm_.avail_in &gt; <span class=\"number\">0</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"comment\">// 此时，所有输入 (strm.avail_in) 应该已经被消耗，除非发生错误</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (strm_.avail_in != <span class=\"number\">0</span> &amp;&amp; deflate_ret != Z_BUF_ERROR)</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    <span class=\"comment\">// 如果还有输入但 deflate 没有要求更多输出空间，这不正常</span></span><br><span class=\"line\">                    <span class=\"keyword\">throw</span> <span class=\"built_in\">spdlog_ex</span>(<span class=\"string\">&quot;zlib deflate did not consume all input unexpectedly&quot;</span>);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"comment\">// ---- Step 2: 使用 Z_FINISH 结束当前流（块）并收集所有剩余输出 ----</span></span><br><span class=\"line\">                <span class=\"type\">int</span> finish_ret = Z_OK;</span><br><span class=\"line\">                <span class=\"keyword\">do</span></span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    strm_.avail_out = <span class=\"built_in\">static_cast</span>&lt;uInt&gt;(compress_buffer_.<span class=\"built_in\">size</span>());</span><br><span class=\"line\">                    strm_.next_out = compress_buffer_.<span class=\"built_in\">data</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">                    finish_ret = <span class=\"built_in\">deflate</span>(&amp;strm_, Z_FINISH); <span class=\"comment\">// 结束当前块/流</span></span><br><span class=\"line\"></span><br><span class=\"line\">                    <span class=\"comment\">// Z_FINISH 可能会返回 Z_OK 或 Z_BUF_ERROR 多次，直到返回 Z_STREAM_END</span></span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (finish_ret != Z_OK &amp;&amp; finish_ret != Z_STREAM_END &amp;&amp; finish_ret != Z_BUF_ERROR)</span><br><span class=\"line\">                    &#123;</span><br><span class=\"line\">                        <span class=\"keyword\">throw</span> <span class=\"built_in\">spdlog_ex</span>(<span class=\"string\">&quot;zlib deflate(Z_FINISH) failed&quot;</span>, finish_ret);</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    <span class=\"type\">size_t</span> have = compress_buffer_.<span class=\"built_in\">size</span>() - strm_.avail_out;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (have &gt; <span class=\"number\">0</span>)</span><br><span class=\"line\">                    &#123;</span><br><span class=\"line\">                        compressed_output.<span class=\"built_in\">insert</span>(compressed_output.<span class=\"built_in\">end</span>(), compress_buffer_.<span class=\"built_in\">data</span>(),</span><br><span class=\"line\">                                                 compress_buffer_.<span class=\"built_in\">data</span>() + have);</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    <span class=\"comment\">// 继续调用 Z_FINISH 直到它返回 Z_STREAM_END</span></span><br><span class=\"line\">                &#125; <span class=\"keyword\">while</span> (finish_ret != Z_STREAM_END);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"comment\">// ---- Step 3: 写入文件 (与之前相同) ----</span></span><br><span class=\"line\">                <span class=\"type\">uint32_t</span> compressed_size = <span class=\"built_in\">static_cast</span>&lt;<span class=\"type\">uint32_t</span>&gt;(compressed_output.<span class=\"built_in\">size</span>());</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (compressed_size &gt; <span class=\"number\">0</span>)</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    <span class=\"type\">memory_buf_t</span> size_buf;</span><br><span class=\"line\">                    size_buf.<span class=\"built_in\">append</span>(<span class=\"built_in\">reinterpret_cast</span>&lt;<span class=\"type\">const</span> <span class=\"type\">char</span> *&gt;(&amp;compressed_size),</span><br><span class=\"line\">                                    <span class=\"built_in\">reinterpret_cast</span>&lt;<span class=\"type\">const</span> <span class=\"type\">char</span> *&gt;(&amp;compressed_size) + <span class=\"built_in\">sizeof</span>(compressed_size));</span><br><span class=\"line\">                    file_helper_.<span class=\"built_in\">write</span>(size_buf);</span><br><span class=\"line\"></span><br><span class=\"line\">                    <span class=\"type\">memory_buf_t</span> data_buf;</span><br><span class=\"line\">                    data_buf.<span class=\"built_in\">append</span>(<span class=\"built_in\">reinterpret_cast</span>&lt;<span class=\"type\">const</span> <span class=\"type\">char</span> *&gt;(compressed_output.<span class=\"built_in\">data</span>()),</span><br><span class=\"line\">                                    <span class=\"built_in\">reinterpret_cast</span>&lt;<span class=\"type\">const</span> <span class=\"type\">char</span> *&gt;(compressed_output.<span class=\"built_in\">data</span>()) + compressed_output.</span><br><span class=\"line\">                                    <span class=\"built_in\">size</span>());</span><br><span class=\"line\">                    file_helper_.<span class=\"built_in\">write</span>(data_buf);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"comment\">// ---- Step 4: 重置 zlib 流，为下一个独立块做准备 ----</span></span><br><span class=\"line\">                <span class=\"comment\">// 因为我们使用了 Z_FINISH，流状态需要完全重置</span></span><br><span class=\"line\">                <span class=\"type\">int</span> reset_ret = <span class=\"built_in\">deflateReset</span>(&amp;strm_);</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (reset_ret != Z_OK)</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">throw</span> <span class=\"built_in\">spdlog_ex</span>(<span class=\"string\">&quot;Failed to reset zlib deflate stream&quot;</span>, reset_ret);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"comment\">// 清空内部缓冲区</span></span><br><span class=\"line\">                buffer_.<span class=\"built_in\">clear</span>();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"type\">filename_t</span> filename_; <span class=\"comment\">// 日志文件名</span></span><br><span class=\"line\">            details::file_helper file_helper_; <span class=\"comment\">// 使用 spdlog 的文件助手</span></span><br><span class=\"line\">            <span class=\"type\">memory_buf_t</span> buffer_; <span class=\"comment\">// 未压缩数据的内部缓冲区 (使用 memory_buf_t)</span></span><br><span class=\"line\">            <span class=\"type\">size_t</span> buffer_capacity_; <span class=\"comment\">// 内部缓冲区阈值</span></span><br><span class=\"line\">            <span class=\"type\">int</span> compression_level_; <span class=\"comment\">// zlib 压缩级别</span></span><br><span class=\"line\">            z_stream strm_; <span class=\"comment\">// zlib 压缩流</span></span><br><span class=\"line\">            std::vector&lt;<span class=\"type\">unsigned</span> <span class=\"type\">char</span>&gt; compress_buffer_; <span class=\"comment\">// 用于存放压缩数据的临时缓冲区</span></span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 类型别名和工厂函数保持不变</span></span><br><span class=\"line\">        <span class=\"keyword\">using</span> compressed_file_sink_mt = compressed_file_sink&lt;std::mutex&gt;;</span><br><span class=\"line\">        <span class=\"keyword\">using</span> compressed_file_sink_st = compressed_file_sink&lt;details::null_mutex&gt;;</span><br><span class=\"line\">    &#125; <span class=\"comment\">// namespace sinks</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">typename</span> Factory </span>= spdlog::synchronous_factory&gt;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">inline</span> std::shared_ptr&lt;logger&gt; <span class=\"title\">compressed_file_logger_mt</span><span class=\"params\">(<span class=\"type\">const</span> std::string &amp;logger_name, <span class=\"type\">const</span> <span class=\"type\">filename_t</span> &amp;filename,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">                                                             <span class=\"type\">size_t</span> buffer_capacity = <span class=\"number\">8192</span>,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">                                                             <span class=\"type\">int</span> compression_level = Z_DEFAULT_COMPRESSION)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> Factory::<span class=\"keyword\">template</span> <span class=\"built_in\">create</span>&lt;sinks::compressed_file_sink_mt&gt;(logger_name, filename, buffer_capacity,</span><br><span class=\"line\">                                                                        compression_level);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">typename</span> Factory </span>= spdlog::synchronous_factory&gt;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">inline</span> std::shared_ptr&lt;logger&gt; <span class=\"title\">compressed_file_logger_st</span><span class=\"params\">(<span class=\"type\">const</span> std::string &amp;logger_name, <span class=\"type\">const</span> <span class=\"type\">filename_t</span> &amp;filename,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">                                                             <span class=\"type\">size_t</span> buffer_capacity = <span class=\"number\">8192</span>,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">                                                             <span class=\"type\">int</span> compression_level = Z_DEFAULT_COMPRESSION)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> Factory::<span class=\"keyword\">template</span> <span class=\"built_in\">create</span>&lt;sinks::compressed_file_sink_st&gt;(logger_name, filename, buffer_capacity,</span><br><span class=\"line\">                                                                        compression_level);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125; <span class=\"comment\">// namespace spdlog</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;fstream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;vector&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;string&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;zlib.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;cstdint&gt;</span> <span class=\"comment\">// for uint32_t</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdexcept&gt;</span> <span class=\"comment\">// for runtime_error</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 解压缓冲区大小</span></span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">size_t</span> DECOMPRESS_BUFFER_SIZE = <span class=\"number\">16384</span>; <span class=\"comment\">// 16 KB</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"type\">int</span> argc, <span class=\"type\">char</span> *argv[])</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (argc != <span class=\"number\">3</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        std::cerr &lt;&lt; <span class=\"string\">&quot;用法: &quot;</span> &lt;&lt; argv[<span class=\"number\">0</span>] &lt;&lt; <span class=\"string\">&quot; &lt;compressed_log_file&gt;&quot;</span> &lt;&lt; <span class=\"string\">&quot; &lt;decompression_log_file&gt;&quot;</span> &lt;&lt; std::endl;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">const</span> <span class=\"type\">char</span> *filename = argv[<span class=\"number\">1</span>];</span><br><span class=\"line\">    <span class=\"type\">const</span> <span class=\"type\">char</span> *decompressed_filename = argv[<span class=\"number\">2</span>];</span><br><span class=\"line\">    <span class=\"function\">std::ifstream <span class=\"title\">infile</span><span class=\"params\">(filename, std::ios::binary)</span></span>;</span><br><span class=\"line\">    <span class=\"function\">std::ofstream <span class=\"title\">outfile</span><span class=\"params\">(decompressed_filename, std::ios::binary)</span></span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!infile.<span class=\"built_in\">is_open</span>())</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        std::cerr &lt;&lt; <span class=\"string\">&quot;错误: 无法打开文件 &quot;</span> &lt;&lt; filename &lt;&lt; std::endl;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 初始化 zlib 解压流</span></span><br><span class=\"line\">    z_stream strm;</span><br><span class=\"line\">    strm.zalloc = Z_NULL;</span><br><span class=\"line\">    strm.zfree = Z_NULL;</span><br><span class=\"line\">    strm.opaque = Z_NULL;</span><br><span class=\"line\">    strm.avail_in = <span class=\"number\">0</span>;</span><br><span class=\"line\">    strm.next_in = Z_NULL;</span><br><span class=\"line\">    <span class=\"type\">int</span> ret = <span class=\"built_in\">inflateInit</span>(&amp;strm);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (ret != Z_OK)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        std::cerr &lt;&lt; <span class=\"string\">&quot;错误: 初始化 zlib inflate 失败, code: &quot;</span> &lt;&lt; ret &lt;&lt; std::endl;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    std::vector&lt;<span class=\"type\">unsigned</span> <span class=\"type\">char</span>&gt; compressed_buffer;</span><br><span class=\"line\">    <span class=\"function\">std::vector&lt;<span class=\"type\">unsigned</span> <span class=\"type\">char</span>&gt; <span class=\"title\">decompress_buffer</span><span class=\"params\">(DECOMPRESS_BUFFER_SIZE)</span></span>;</span><br><span class=\"line\">    <span class=\"type\">uint32_t</span> compressed_block_size = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">try</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 循环读取文件中的压缩块</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span> (infile.<span class=\"built_in\">read</span>(<span class=\"built_in\">reinterpret_cast</span>&lt;<span class=\"type\">char</span> *&gt;(&amp;compressed_block_size), <span class=\"built_in\">sizeof</span>(compressed_block_size)))</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (compressed_block_size == <span class=\"number\">0</span>)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"comment\">// 可能是空块写入（虽然我们的sink实现不会写0长度块），跳过</span></span><br><span class=\"line\">                <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">// 读取指定大小的压缩数据</span></span><br><span class=\"line\">            compressed_buffer.<span class=\"built_in\">resize</span>(compressed_block_size);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (!infile.<span class=\"built_in\">read</span>(<span class=\"built_in\">reinterpret_cast</span>&lt;<span class=\"type\">char</span> *&gt;(compressed_buffer.<span class=\"built_in\">data</span>()), compressed_block_size))</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                std::cerr &lt;&lt; <span class=\"string\">&quot;错误: 读取压缩数据块时文件提前结束或发生错误。&quot;</span> &lt;&lt; std::endl;</span><br><span class=\"line\">                <span class=\"comment\">// 根据需要决定是退出还是尝试继续处理已读取部分</span></span><br><span class=\"line\">                <span class=\"keyword\">break</span>; <span class=\"comment\">// 或者 return 1;</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            strm.avail_in = compressed_block_size;</span><br><span class=\"line\">            strm.next_in = compressed_buffer.<span class=\"built_in\">data</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">// 循环解压当前块</span></span><br><span class=\"line\">            <span class=\"keyword\">do</span></span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                strm.avail_out = <span class=\"built_in\">static_cast</span>&lt;uInt&gt;(decompress_buffer.<span class=\"built_in\">size</span>());</span><br><span class=\"line\">                strm.next_out = decompress_buffer.<span class=\"built_in\">data</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">                ret = <span class=\"built_in\">inflate</span>(&amp;strm, Z_NO_FLUSH); <span class=\"comment\">// 使用 Z_NO_FLUSH 进行正常解压</span></span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"keyword\">switch</span> (ret)</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">case</span> Z_NEED_DICT:</span><br><span class=\"line\">                    <span class=\"keyword\">case</span> Z_DATA_ERROR:</span><br><span class=\"line\">                    <span class=\"keyword\">case</span> Z_MEM_ERROR:</span><br><span class=\"line\">                        <span class=\"built_in\">inflateEnd</span>(&amp;strm);</span><br><span class=\"line\">                        <span class=\"keyword\">throw</span> std::<span class=\"built_in\">runtime_error</span>(std::<span class=\"built_in\">string</span>(<span class=\"string\">&quot;zlib inflate 错误: &quot;</span>) + strm.msg);</span><br><span class=\"line\">                    <span class=\"keyword\">case</span> Z_STREAM_ERROR:</span><br><span class=\"line\">                        <span class=\"built_in\">inflateEnd</span>(&amp;strm);</span><br><span class=\"line\">                        <span class=\"keyword\">throw</span> std::<span class=\"built_in\">runtime_error</span>(<span class=\"string\">&quot;zlib inflate 错误: 无效的流状态&quot;</span>);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"comment\">// 计算解压出的数据量</span></span><br><span class=\"line\">                <span class=\"type\">size_t</span> have = decompress_buffer.<span class=\"built_in\">size</span>() - strm.avail_out;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (have &gt; <span class=\"number\">0</span>)</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    <span class=\"comment\">// 将解压后的数据写入标准输出</span></span><br><span class=\"line\">                    std::cout.<span class=\"built_in\">write</span>(<span class=\"built_in\">reinterpret_cast</span>&lt;<span class=\"type\">const</span> <span class=\"type\">char</span> *&gt;(decompress_buffer.<span class=\"built_in\">data</span>()), have);</span><br><span class=\"line\">                    outfile.<span class=\"built_in\">write</span>(<span class=\"built_in\">reinterpret_cast</span>&lt;<span class=\"type\">const</span> <span class=\"type\">char</span> *&gt;(decompress_buffer.<span class=\"built_in\">data</span>()), have);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"comment\">// 如果输出缓冲区满了，inflate 需要再次被调用来处理剩余的输入</span></span><br><span class=\"line\">            &#125; <span class=\"keyword\">while</span> (strm.avail_out == <span class=\"number\">0</span>); <span class=\"comment\">// 继续解压直到输出缓冲区不再被填满</span></span><br><span class=\"line\">            <span class=\"comment\">// 检查当前块是否解压完毕</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (strm.avail_in != <span class=\"number\">0</span>)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"comment\">// Z_SYNC_FLUSH 写入的块，解压时 inflate 可能在块结束时返回 Z_OK 而不是 Z_STREAM_END</span></span><br><span class=\"line\">                <span class=\"comment\">// 只要输入被消耗完 (avail_in == 0) 就认为一个块处理完了</span></span><br><span class=\"line\">                <span class=\"comment\">// 如果输入没消耗完但 inflate 又没返回错误，可能逻辑有问题</span></span><br><span class=\"line\">                <span class=\"comment\">// 对于 Z_SYNC_FLUSH, 我们期望 avail_in 最终为 0</span></span><br><span class=\"line\">                <span class=\"built_in\">inflateEnd</span>(&amp;strm);</span><br><span class=\"line\">                <span class=\"keyword\">throw</span> std::<span class=\"built_in\">runtime_error</span>(<span class=\"string\">&quot;解压错误: 输入数据未完全消耗完但解压停止&quot;</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">// inflateReset(&amp;strm); // 不需要 reset，因为每次都读新块并设置 avail_in/next_in</span></span><br><span class=\"line\">            <span class=\"comment\">// inflateInit 应该为每个独立块工作</span></span><br><span class=\"line\">            <span class=\"comment\">// 修正：对于流式解压，应该持续使用同一个 strm，并在块之间可能需要 inflateSync</span></span><br><span class=\"line\">            <span class=\"comment\">// 或者更简单的，如果块是独立压缩的（如我们的例子，虽然用了 Z_SYNC_FLUSH 但逻辑上独立）</span></span><br><span class=\"line\">            <span class=\"comment\">// 可以在处理完一个块后调用 inflateReset</span></span><br><span class=\"line\">            ret = <span class=\"built_in\">inflateReset</span>(&amp;strm);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (ret != Z_OK)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"built_in\">inflateEnd</span>(&amp;strm);</span><br><span class=\"line\">                <span class=\"keyword\">throw</span> std::<span class=\"built_in\">runtime_error</span>(<span class=\"string\">&quot;zlib inflateReset 失败&quot;</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; <span class=\"comment\">// end while read block size</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 检查是否因为读取错误而退出循环</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!infile.<span class=\"built_in\">eof</span>() &amp;&amp; infile.<span class=\"built_in\">fail</span>())</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            std::cerr &lt;&lt; <span class=\"string\">&quot;错误: 读取文件时发生 I/O 错误。&quot;</span> &lt;&lt; std::endl;</span><br><span class=\"line\">            outfile.<span class=\"built_in\">close</span>();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125; <span class=\"built_in\">catch</span> (<span class=\"type\">const</span> std::exception &amp;e)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        std::cerr &lt;&lt; <span class=\"string\">&quot;运行时错误: &quot;</span> &lt;&lt; e.<span class=\"built_in\">what</span>() &lt;&lt; std::endl;</span><br><span class=\"line\">        <span class=\"built_in\">inflateEnd</span>(&amp;strm); <span class=\"comment\">// 确保清理</span></span><br><span class=\"line\">        outfile.<span class=\"built_in\">close</span>();</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 清理 zlib 资源</span></span><br><span class=\"line\">    <span class=\"built_in\">inflateEnd</span>(&amp;strm);</span><br><span class=\"line\">    std::cout.<span class=\"built_in\">flush</span>(); <span class=\"comment\">// 确保所有输出都被写入</span></span><br><span class=\"line\">    outfile.<span class=\"built_in\">close</span>();</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>"}],"PostAsset":[{"_id":"source/_posts/grpc/images/client.png","slug":"","post":"cmevecvs30001hfro4b3y1iyg","modified":0,"renderable":0},{"_id":"source/_posts/grpc/images/completion_queue_sequence-0.png","slug":"ue_sequence-0.png","post":"cmevecvs30001hfro4b3y1iyg","modified":0,"renderable":0},{"_id":"source/_posts/grpc/images/qt_add_grpc.png","slug":"g","post":"cmevecvs30001hfro4b3y1iyg","modified":0,"renderable":0},{"_id":"source/_posts/grpc/images/qt_client.png","slug":"","post":"cmevecvs30001hfro4b3y1iyg","modified":0,"renderable":0},{"_id":"source/_posts/grpc/images/reactor_workflow.png","slug":"ow.png","post":"cmevecvs30001hfro4b3y1iyg","modified":0,"renderable":0},{"_id":"source/_posts/grpc/images/server.png","slug":"","post":"cmevecvs30001hfro4b3y1iyg","modified":0,"renderable":0},{"_id":"source/_posts/grpc/images/stream.png","slug":"","post":"cmevecvs30001hfro4b3y1iyg","modified":0,"renderable":0},{"_id":"source/_posts/grpc/images/version_call.png","slug":"ng","post":"cmevecvs30001hfro4b3y1iyg","modified":0,"renderable":0},{"_id":"source/_posts/muduo/images/TcpServer.png","slug":"","post":"cmevecvs30001hfro4b3y1iyg","modified":0,"renderable":0},{"_id":"source/_posts/muduo/images/eventloop传递事件.png","slug":".png","post":"cmevecvs30001hfro4b3y1iyg","modified":0,"renderable":0},{"_id":"source/_posts/muduo/images/eventloop启动.png","slug":"ng","post":"cmevecvs30001hfro4b3y1iyg","modified":0,"renderable":0},{"_id":"source/_posts/muduo/images/loop循环.png","slug":"","post":"cmevecvs30001hfro4b3y1iyg","modified":0,"renderable":0},{"_id":"source/_posts/muduo/images/raii.png","slug":"","post":"cmevecvs30001hfro4b3y1iyg","modified":0,"renderable":0},{"_id":"source/_posts/muduo/images/取消操作.png","slug":"","post":"cmevecvs30001hfro4b3y1iyg","modified":0,"renderable":0},{"_id":"source/_posts/muduo/images/处理消息.png","slug":"","post":"cmevecvs30001hfro4b3y1iyg","modified":0,"renderable":0},{"_id":"source/_posts/muduo/images/定时器到期处理.png","slug":"","post":"cmevecvs30001hfro4b3y1iyg","modified":0,"renderable":0},{"_id":"source/_posts/muduo/images/建立新连接.png","slug":"","post":"cmevecvs30001hfro4b3y1iyg","modified":0,"renderable":0},{"_id":"source/_posts/muduo/images/消息写完.png","slug":"","post":"cmevecvs30001hfro4b3y1iyg","modified":0,"renderable":0},{"_id":"source/_posts/muduo/images/连接关闭.png","slug":"","post":"cmevecvs30001hfro4b3y1iyg","modified":0,"renderable":0},{"_id":"source/_posts/muduo/images/重复任务.png","slug":"","post":"cmevecvs30001hfro4b3y1iyg","modified":0,"renderable":0},{"_id":"source/_posts/spdlog/images/factory.png","slug":"","post":"cmevecvs30001hfro4b3y1iyg","modified":0,"renderable":0},{"_id":"source/_posts/spdlog/images/logger_sink.png","slug":"png","post":"cmevecvs30001hfro4b3y1iyg","modified":0,"renderable":0},{"_id":"source/_posts/spdlog/images/mpmc.png","slug":"","post":"cmevecvs30001hfro4b3y1iyg","modified":0,"renderable":0},{"_id":"source/_posts/spdlog/images/spdlog.png","slug":"","post":"cmevecvs30001hfro4b3y1iyg","modified":0,"renderable":0},{"_id":"source/_posts/spdlog/images/spdlog_seq.png","slug":"ng","post":"cmevecvs30001hfro4b3y1iyg","modified":0,"renderable":0},{"_id":"source/_posts/spdlog/images/spsc.png","slug":"","post":"cmevecvs30001hfro4b3y1iyg","modified":0,"renderable":0}],"PostCategory":[{"post_id":"cmevecvs60007hfro3jro83n5","category_id":"cmevecvs50004hfrogqh86f5e","_id":"cmevecvs9000mhfro1cdkb1ey"},{"post_id":"cmevecvs60007hfro3jro83n5","category_id":"cmevecvs9000ehfro8z2fej6i","_id":"cmevecvs9000ohfrocme955ks"},{"post_id":"cmevecvs30001hfro4b3y1iyg","category_id":"cmevecvs50004hfrogqh86f5e","_id":"cmevecvs9000qhfro1unif7ra"},{"post_id":"cmevecvs30001hfro4b3y1iyg","category_id":"cmevecvs9000ehfro8z2fej6i","_id":"cmevecvsa000shfrocme59e9o"},{"post_id":"cmevecvs70008hfro5epn065l","category_id":"cmevecvs50004hfrogqh86f5e","_id":"cmevecvsa000vhfro71mx5tds"},{"post_id":"cmevecvs70008hfro5epn065l","category_id":"cmevecvs9000ehfro8z2fej6i","_id":"cmevecvsa000yhfrodziy8uf0"},{"post_id":"cmevecvs8000bhfro02b1egix","category_id":"cmevecvs50004hfrogqh86f5e","_id":"cmevecvsa0011hfrofk0w7gpi"},{"post_id":"cmevecvs8000bhfro02b1egix","category_id":"cmevecvs9000ehfro8z2fej6i","_id":"cmevecvsa0013hfro11x5ap8e"},{"post_id":"cmevecvs40003hfro0h6o85h8","category_id":"cmevecvs50004hfrogqh86f5e","_id":"cmevecvsa0014hfrocvlz6i28"},{"post_id":"cmevecvs40003hfro0h6o85h8","category_id":"cmevecvs9000ehfro8z2fej6i","_id":"cmevecvsa0016hfro0tpoc10m"},{"post_id":"cmevecvs60006hfroepjwa7rq","category_id":"cmevecvs50004hfrogqh86f5e","_id":"cmevecvsa0018hfro0wq7eeqn"},{"post_id":"cmevecvs60006hfroepjwa7rq","category_id":"cmevecvs9000ehfro8z2fej6i","_id":"cmevecvsb001bhfro2k904zie"},{"post_id":"cmevecvsh001uhfro62pi85n5","category_id":"cmevecvsg001rhfroa1q03j97","_id":"cmevecvsk002ghfro12da7fc9"},{"post_id":"cmevecvsh001uhfro62pi85n5","category_id":"cmevecvsj0025hfro11addon9","_id":"cmevecvsk002jhfrodudc9hgw"},{"post_id":"cmevecvsf001phfroesbc26ls","category_id":"cmevecvsg001rhfroa1q03j97","_id":"cmevecvsk002lhfroe0jxcs7h"},{"post_id":"cmevecvsf001phfroesbc26ls","category_id":"cmevecvsj0025hfro11addon9","_id":"cmevecvsl002ohfro2q1sfjqr"},{"post_id":"cmevecvsh001vhfro8ewz0g7h","category_id":"cmevecvsg001rhfroa1q03j97","_id":"cmevecvsl002qhfro9skcgbzs"},{"post_id":"cmevecvsh001vhfro8ewz0g7h","category_id":"cmevecvsj0025hfro11addon9","_id":"cmevecvsl002uhfroexo08xh2"},{"post_id":"cmevecvsi001yhfrohang8fma","category_id":"cmevecvsg001rhfroa1q03j97","_id":"cmevecvsl002yhfrohnr9bri8"},{"post_id":"cmevecvsi001yhfrohang8fma","category_id":"cmevecvsk002khfro8be4f3b2","_id":"cmevecvsl0030hfro47c2bdcz"},{"post_id":"cmevecvsg001qhfrodzv54ghi","category_id":"cmevecvsg001rhfroa1q03j97","_id":"cmevecvsl0033hfroan7dh4fy"},{"post_id":"cmevecvsg001qhfrodzv54ghi","category_id":"cmevecvsj0025hfro11addon9","_id":"cmevecvsl0036hfroarh25emw"},{"post_id":"cmevecvsi001zhfro4livbpck","category_id":"cmevecvsg001rhfroa1q03j97","_id":"cmevecvsm0039hfrob14u8tmg"},{"post_id":"cmevecvsi001zhfro4livbpck","category_id":"cmevecvsk002khfro8be4f3b2","_id":"cmevecvsm003chfro880q49m1"},{"post_id":"cmevecvsi0022hfro0ha0eu0v","category_id":"cmevecvsg001rhfroa1q03j97","_id":"cmevecvsm003fhfro87317bid"},{"post_id":"cmevecvsi0022hfro0ha0eu0v","category_id":"cmevecvsk002khfro8be4f3b2","_id":"cmevecvsm003ihfro20sw6b77"},{"post_id":"cmevecvsg001thfro0cqa20tk","category_id":"cmevecvsg001rhfroa1q03j97","_id":"cmevecvsm003lhfro5w91biy0"},{"post_id":"cmevecvsg001thfro0cqa20tk","category_id":"cmevecvsj0025hfro11addon9","_id":"cmevecvsm003nhfro0x8u0gwr"},{"post_id":"cmevecvsj0024hfro19c97eka","category_id":"cmevecvsg001rhfroa1q03j97","_id":"cmevecvsm003qhfro512rdgku"},{"post_id":"cmevecvsj0024hfro19c97eka","category_id":"cmevecvsk002khfro8be4f3b2","_id":"cmevecvsm003thfro78cyanug"},{"post_id":"cmevecvsj0028hfro7ve4f3y4","category_id":"cmevecvsg001rhfroa1q03j97","_id":"cmevecvsn003vhfro5ogf2rlr"},{"post_id":"cmevecvsj0028hfro7ve4f3y4","category_id":"cmevecvsk002khfro8be4f3b2","_id":"cmevecvsn003xhfro46mjhki1"},{"post_id":"cmevecvsk002ahfro1tgp201n","category_id":"cmevecvsg001rhfroa1q03j97","_id":"cmevecvsn003zhfroeuvo2gua"},{"post_id":"cmevecvsk002ahfro1tgp201n","category_id":"cmevecvsk002khfro8be4f3b2","_id":"cmevecvsn0042hfro081f9h5y"}],"PostTag":[{"post_id":"cmevecvs30001hfro4b3y1iyg","tag_id":"cmevecvs60005hfrocd228tsb","_id":"cmevecvs9000ghfroh66hhmxb"},{"post_id":"cmevecvs30001hfro4b3y1iyg","tag_id":"cmevecvs7000ahfro9k6e69p9","_id":"cmevecvs9000ihfrofl6fda01"},{"post_id":"cmevecvs30001hfro4b3y1iyg","tag_id":"cmevecvs8000dhfrof8iu7ehw","_id":"cmevecvs9000khfrofk1e0tis"},{"post_id":"cmevecvs40003hfro0h6o85h8","tag_id":"cmevecvs60005hfrocd228tsb","_id":"cmevecvsa000thfro6xda4anw"},{"post_id":"cmevecvs40003hfro0h6o85h8","tag_id":"cmevecvs7000ahfro9k6e69p9","_id":"cmevecvsa000whfrofnro4v5t"},{"post_id":"cmevecvs40003hfro0h6o85h8","tag_id":"cmevecvs8000dhfrof8iu7ehw","_id":"cmevecvsa000zhfro5mejc1mh"},{"post_id":"cmevecvs60006hfroepjwa7rq","tag_id":"cmevecvs60005hfrocd228tsb","_id":"cmevecvsa0017hfrogn3xgafi"},{"post_id":"cmevecvs60006hfroepjwa7rq","tag_id":"cmevecvs7000ahfro9k6e69p9","_id":"cmevecvsa0019hfro6y4bdxks"},{"post_id":"cmevecvs60006hfroepjwa7rq","tag_id":"cmevecvs8000dhfrof8iu7ehw","_id":"cmevecvsb001chfro05ioddh4"},{"post_id":"cmevecvs60007hfro3jro83n5","tag_id":"cmevecvs60005hfrocd228tsb","_id":"cmevecvsb001ehfro08t2bhys"},{"post_id":"cmevecvs60007hfro3jro83n5","tag_id":"cmevecvs7000ahfro9k6e69p9","_id":"cmevecvsb001fhfrodgks4ofa"},{"post_id":"cmevecvs60007hfro3jro83n5","tag_id":"cmevecvs8000dhfrof8iu7ehw","_id":"cmevecvsb001hhfrodxf50ze8"},{"post_id":"cmevecvs70008hfro5epn065l","tag_id":"cmevecvs60005hfrocd228tsb","_id":"cmevecvsb001jhfro7ohq6ln1"},{"post_id":"cmevecvs70008hfro5epn065l","tag_id":"cmevecvs7000ahfro9k6e69p9","_id":"cmevecvsb001khfrog872fvm6"},{"post_id":"cmevecvs70008hfro5epn065l","tag_id":"cmevecvs8000dhfrof8iu7ehw","_id":"cmevecvsb001lhfrof4zr6hpb"},{"post_id":"cmevecvs8000bhfro02b1egix","tag_id":"cmevecvs60005hfrocd228tsb","_id":"cmevecvsb001mhfroccnuhz5a"},{"post_id":"cmevecvs8000bhfro02b1egix","tag_id":"cmevecvs7000ahfro9k6e69p9","_id":"cmevecvsb001nhfro6jtlfeul"},{"post_id":"cmevecvs8000bhfro02b1egix","tag_id":"cmevecvs8000dhfrof8iu7ehw","_id":"cmevecvsb001ohfrog8ceg1ny"},{"post_id":"cmevecvsf001phfroesbc26ls","tag_id":"cmevecvs60005hfrocd228tsb","_id":"cmevecvsj0023hfroclp5381d"},{"post_id":"cmevecvsf001phfroesbc26ls","tag_id":"cmevecvsg001shfro374c8tw2","_id":"cmevecvsj0026hfro6l7u5izl"},{"post_id":"cmevecvsf001phfroesbc26ls","tag_id":"cmevecvsh001xhfro6ca2266w","_id":"cmevecvsj0029hfroh3xd1weu"},{"post_id":"cmevecvsg001qhfrodzv54ghi","tag_id":"cmevecvs60005hfrocd228tsb","_id":"cmevecvsk002dhfro4r303z4o"},{"post_id":"cmevecvsg001qhfrodzv54ghi","tag_id":"cmevecvsg001shfro374c8tw2","_id":"cmevecvsk002ehfroboaxfn71"},{"post_id":"cmevecvsg001qhfrodzv54ghi","tag_id":"cmevecvsh001xhfro6ca2266w","_id":"cmevecvsk002ihfrobvrrb275"},{"post_id":"cmevecvsg001thfro0cqa20tk","tag_id":"cmevecvs60005hfrocd228tsb","_id":"cmevecvsl002nhfrofop17edh"},{"post_id":"cmevecvsg001thfro0cqa20tk","tag_id":"cmevecvsg001shfro374c8tw2","_id":"cmevecvsl002phfrogox1bpci"},{"post_id":"cmevecvsg001thfro0cqa20tk","tag_id":"cmevecvsh001xhfro6ca2266w","_id":"cmevecvsl002thfrohgh98h5w"},{"post_id":"cmevecvsh001uhfro62pi85n5","tag_id":"cmevecvs60005hfrocd228tsb","_id":"cmevecvsl002vhfro1cjxh8wy"},{"post_id":"cmevecvsh001uhfro62pi85n5","tag_id":"cmevecvsg001shfro374c8tw2","_id":"cmevecvsl002zhfroftk7dbl7"},{"post_id":"cmevecvsh001uhfro62pi85n5","tag_id":"cmevecvsh001xhfro6ca2266w","_id":"cmevecvsl0031hfrofssr1hi3"},{"post_id":"cmevecvsh001vhfro8ewz0g7h","tag_id":"cmevecvs60005hfrocd228tsb","_id":"cmevecvsl0035hfrobuloao71"},{"post_id":"cmevecvsh001vhfro8ewz0g7h","tag_id":"cmevecvsg001shfro374c8tw2","_id":"cmevecvsl0037hfro6f8sej42"},{"post_id":"cmevecvsh001vhfro8ewz0g7h","tag_id":"cmevecvsh001xhfro6ca2266w","_id":"cmevecvsm003bhfrofv3egn98"},{"post_id":"cmevecvsi001yhfrohang8fma","tag_id":"cmevecvs60005hfrocd228tsb","_id":"cmevecvsm003dhfro4j75dhsw"},{"post_id":"cmevecvsi001yhfrohang8fma","tag_id":"cmevecvsl002whfro13fjgphb","_id":"cmevecvsm003hhfrohy3b26ja"},{"post_id":"cmevecvsi001yhfrohang8fma","tag_id":"cmevecvsl0034hfro7p7y8d69","_id":"cmevecvsm003jhfro3vl66ced"},{"post_id":"cmevecvsi001zhfro4livbpck","tag_id":"cmevecvs60005hfrocd228tsb","_id":"cmevecvsm003ohfro6oyq5zz8"},{"post_id":"cmevecvsi001zhfro4livbpck","tag_id":"cmevecvsl002whfro13fjgphb","_id":"cmevecvsm003rhfroc1tq7bvp"},{"post_id":"cmevecvsi001zhfro4livbpck","tag_id":"cmevecvsl0034hfro7p7y8d69","_id":"cmevecvsm003uhfrobg39augp"},{"post_id":"cmevecvsi0022hfro0ha0eu0v","tag_id":"cmevecvs60005hfrocd228tsb","_id":"cmevecvsn003yhfrodn4xcey9"},{"post_id":"cmevecvsi0022hfro0ha0eu0v","tag_id":"cmevecvsl002whfro13fjgphb","_id":"cmevecvsn0040hfro5wn4fn7n"},{"post_id":"cmevecvsi0022hfro0ha0eu0v","tag_id":"cmevecvsl0034hfro7p7y8d69","_id":"cmevecvsn0043hfro7rhz9jut"},{"post_id":"cmevecvsj0024hfro19c97eka","tag_id":"cmevecvs60005hfrocd228tsb","_id":"cmevecvsn0045hfro0b9j4d38"},{"post_id":"cmevecvsj0024hfro19c97eka","tag_id":"cmevecvsl002whfro13fjgphb","_id":"cmevecvsn0046hfrobuvo7wci"},{"post_id":"cmevecvsj0024hfro19c97eka","tag_id":"cmevecvsl0034hfro7p7y8d69","_id":"cmevecvsn0048hfro0b76d3of"},{"post_id":"cmevecvsj0028hfro7ve4f3y4","tag_id":"cmevecvs60005hfrocd228tsb","_id":"cmevecvsn004ahfro3r1e30ri"},{"post_id":"cmevecvsj0028hfro7ve4f3y4","tag_id":"cmevecvsl002whfro13fjgphb","_id":"cmevecvsn004bhfro14i5avir"},{"post_id":"cmevecvsj0028hfro7ve4f3y4","tag_id":"cmevecvsl0034hfro7p7y8d69","_id":"cmevecvsn004dhfro4nk30569"},{"post_id":"cmevecvsk002ahfro1tgp201n","tag_id":"cmevecvs60005hfrocd228tsb","_id":"cmevecvsn004ehfroeahb4f1d"},{"post_id":"cmevecvsk002ahfro1tgp201n","tag_id":"cmevecvsl002whfro13fjgphb","_id":"cmevecvsn004fhfrofzta8w07"},{"post_id":"cmevecvsk002ahfro1tgp201n","tag_id":"cmevecvsl0034hfro7p7y8d69","_id":"cmevecvsn004ghfro4jh9876k"}],"Tag":[{"name":"C++","_id":"cmevecvs60005hfrocd228tsb"},{"name":"grpc","_id":"cmevecvs7000ahfro9k6e69p9"},{"name":"进程间通信","_id":"cmevecvs8000dhfrof8iu7ehw"},{"name":"muduo","_id":"cmevecvsg001shfro374c8tw2"},{"name":"网络库","_id":"cmevecvsh001xhfro6ca2266w"},{"name":"spdlog","_id":"cmevecvsl002whfro13fjgphb"},{"name":"日志系统","_id":"cmevecvsl0034hfro7p7y8d69"}]}}